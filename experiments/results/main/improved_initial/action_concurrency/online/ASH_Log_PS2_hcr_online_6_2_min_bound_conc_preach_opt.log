[09-02-2022_19-45-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 6 rules into program part base:

sub_goal(2, talos, actuate(manipulator_arm_2,puzzle_room_door), configuration(puzzle_room_door), open, 15).
sub_goal(2, talos, release(manipulator_arm_2,puzzle_room_door_handle_outer), grasping(manipulator_arm_2), nothing, 16).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 17).
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 18).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 19).
sub_goal(2, talos, put(manipulator_arm_1,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 20).

[09-02-2022_19-45-26] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_19-45-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[09-02-2022_19-45-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=28']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001F8C0D62040>]
	incrementor = SolveIncrementor(step_start=23, step_increase=1, step_increase_initial=6, step_end_min=29, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 23), range_=None), IncPart(name='plan_module', args=('#inc', 23, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 23, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 23, 15, 20, 'sequential', 'false'), range_=None)]

[09-02-2022_19-45-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_19-45-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_19-45-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_19-45-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 813 rules

[09-02-2022_19-45-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004740700000184006s

[09-02-2022_19-45-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[09-02-2022_19-45-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[09-02-2022_19-45-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.029937s.

[09-02-2022_19-45-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005031s with result Satisfiable.

[09-02-2022_19-45-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[09-02-2022_19-45-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001F8C0CAEAE0>

[09-02-2022_19-45-26] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 23)
	('last_sgoals', 20)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001F88E5CDA60>)
	('first_sgoals', 15)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001F8C0CAEAE0>)

[09-02-2022_19-45-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 23). %* None *%
#program plan_module(#inc, 23, true, false). %* None *%
#program optimisation_module(#inc, 23, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 23, 15, 20, sequential, false). %* None *%

[09-02-2022_19-45-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     22 : Current =     28
Incrementor step ends | Minimum  =     29 : Maximum =    200

[09-02-2022_19-45-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(28)]), ('state_module', [Number(23), Number(23)]), ('plan_module', [Number(23), Number(23), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(23), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('conformance_module', [Number(23), Number(23), Number(15), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(24), Number(23)]), ('plan_module', [Number(24), Number(23), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(23), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('conformance_module', [Number(24), Number(23), Number(15), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(25), Number(23)]), ('plan_module', [Number(25), Number(23), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(23), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(23), Number(15), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(26), Number(23)]), ('plan_module', [Number(26), Number(23), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(26), Number(23), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('conformance_module', [Number(26), Number(23), Number(15), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(27), Number(23)]), ('plan_module', [Number(27), Number(23), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(27), Number(23), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('conformance_module', [Number(27), Number(23), Number(15), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(28), Number(23)]), ('plan_module', [Number(28), Number(23), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(28), Number(23), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('conformance_module', [Number(28), Number(23), Number(15), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.912775s.

[09-02-2022_19-45-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.082275s with result Satisfiable.

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.9950496999999814, Incremental time limit = None
Running cumulative time = 0.9950496999999814, Cumulative time limit = 1800
Used memory = (RSS = 893.664062Mb, VMS = 885.441406Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.912775s, Solving = 0.082275s, Total = 0.995050s, Memory = (RSS = 893.664062Mb, VMS = 885.441406Mb), Step range = [23-28]), Calls = 1
Final Model :: Total atoms = 5667, Cost = (5, 0, 0), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     28 : Current =     29
Incrementor step ends | Minimum  =     29 : Maximum =    200

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(29)]), ('state_module', [Number(29), Number(23)]), ('plan_module', [Number(29), Number(23), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(23), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(23), Number(15), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.196289s.

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008860s with result Unsatisfiable.

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.20514829999979156, Incremental time limit = None
Running cumulative time = 1.200197999999773, Cumulative time limit = 1800
Used memory = (RSS = 893.789062Mb, VMS = 885.570312Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     29 : Current =     30
Incrementor step ends | Minimum  =     29 : Maximum =    200

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(30)]), ('state_module', [Number(30), Number(23)]), ('plan_module', [Number(30), Number(23), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(23), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('conformance_module', [Number(30), Number(23), Number(15), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.200551s.

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.023767s with result Satisfiable.

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.22431779999988066, Incremental time limit = None
Running cumulative time = 1.4245157999996536, Cumulative time limit = 1800
Used memory = (RSS = 894.039062Mb, VMS = 885.753906Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.309614s, Solving = 0.114901s, Total = 1.424516s, Memory = (RSS = 894.039062Mb, VMS = 885.753906Mb), Step range = [23-30]), Calls = 3
Final Model :: Total atoms = 6422, Cost = (7, 0, -1), Optimality proven = False, Number = 2, Thread ID = 3, Model type = ModelType.StableModel

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.912775s, Solving = 0.082275s, Total = 0.995050s, Memory = (RSS = 893.664062Mb, VMS = 885.441406Mb), Step range = [23-28]
2 : Statistics :: Grounding = 0.196289s, Solving = 0.008860s, Total = 0.205148s, Memory = (RSS = 893.789062Mb, VMS = 885.570312Mb), Step range = [29-29]
3 : Statistics :: Grounding = 0.200551s, Solving = 0.023767s, Total = 0.224318s, Memory = (RSS = 894.039062Mb, VMS = 885.753906Mb), Step range = [30-30]

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 1.424516s due to: Stop condition reached.

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[09-02-2022_19-45-27] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 10, 17: 11, 18: 11, 19: 12, 20: 12, 21: 12, 22: 13, 23: 14}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 16, 11: 18, 12: 21, 13: 22, 14: 23}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_19-45-27] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 10, 17: 11, 18: 11, 19: 12, 20: 12, 21: 12, 22: 13, 23: 14, 24: 15, 25: 16, 26: 17, 27: 18, 28: 19, 29: 19, 30: 20}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 16, 11: 18, 12: 21, 13: 22, 14: 23, 15: 24, 16: 25, 17: 26, 18: 27, 19: 29, 20: 30}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_19-45-27] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 20, Last requested goal index = 20, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[09-02-2022_19-45-27] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.309614s, Solving = 0.114901s, Total = 1.424516s, Memory = (RSS = 894.039062Mb, VMS = 885.753906Mb), Step range = [23-30]), Calls = 3
Model :: Total atoms = 6422, Cost = (7, 0, -1), Optimality proven = False, Number = 2, Thread ID = 3, Model type = ModelType.StableModel

[09-02-2022_19-45-27] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 7 :: Actions = 7                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 11:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 12:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 14:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
        talos : grasp(manipulator_end_2,(block,5))
Step 15:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : release(manipulator_end_2,(block,5))
Step 16:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 17:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 18:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 19:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 20:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 21:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 22:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 13] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 23:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 24:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 25:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 26:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 27:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 28:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 29:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 30:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)

[09-02-2022_19-45-27] DEBUG :: ASH Planner Main #1 >> Monolevel problem 4 at level 1 solved.

[09-02-2022_19-45-27] DEBUG :: ASH Planner Main #1 >> Online planning increment 4 finished.

[09-02-2022_19-45-27] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 2 : Total constraining sub-goal stages = 13 : Goals achieved = 4 : Goals unachieved = 9 : Complete = False
Level = 1 : Solved problems = 4 : Total constraining sub-goal stages = 20 : Goals achieved = 20 : Goals unachieved = 0 : Complete = False

[09-02-2022_19-45-27] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 2, Highest = 2.

[09-02-2022_19-45-27] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 5 by method ground-first is [1-2].

[09-02-2022_19-45-27] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning problem 3 at level 2:
Total Templated Partial Problems = 6, Problem Range = [1-6], Size = 13, Sub-goal Stage Range = [1-13]
Division points [total=5] : [(Index = 2, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 4, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 6, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 8, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 10, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[09-02-2022_19-45-27] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [5-6]

[09-02-2022_19-45-27] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [5-6], problem number = 3, increment number = 5

[09-02-2022_19-45-27] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 5)
	('last_sgoals', 6)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001F88E5CDA60>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[09-02-2022_19-45-27] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 2] partial conformance refinement (sequential) with sgoals range [5-6] : Concurrency enabled : Minimum search length bound enabled with value 21

[09-02-2022_19-45-27] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 5
last_sgoals = 6
start_step = 20
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 21

[09-02-2022_19-45-27] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[09-02-2022_19-45-27] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[09-02-2022_19-45-27] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[09-02-2022_19-45-27] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[09-02-2022_19-45-27] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_19-45-27] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 20 as problem start state.

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 20})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 20})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 20})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 20})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 20})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'S': 20})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 20})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 20})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 20})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 20})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 20})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'hallway', 'S': 20})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 20})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 20})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 20})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 20})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 20})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 20})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 20})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 20})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 20})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 20})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 20})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 20})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 20})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 20})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 20})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'S': 20})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'S': 20})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 20})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 20})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 20})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 20})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 20})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'hallway', 'S': 20})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 20})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 20})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 20})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 20})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 20})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 20})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 20})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 20})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 20})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 20})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 20})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 20})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 20})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 20})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 20})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'S': 20})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 20})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 20})

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state:

holds(2, complete_tower(blue,puzzle_room_table), false, 20).
holds(2, complete_tower(red,puzzle_room_table), false, 20).
holds(2, configuration(manipulator_arm_1), extended, 20).
holds(2, configuration(manipulator_arm_2), retracted, 20).
holds(2, configuration(puzzle_room_door), open, 20).
holds(2, configuration(starting_room_door), closed, 20).
holds(2, configuration(store_room_door), open, 20).
holds(2, grasping(manipulator_arm_1), (block,6), 20).
holds(2, grasping(manipulator_arm_2), nothing, 20).
holds(2, in((block,1)), puzzle_room, 20).
holds(2, in((block,2)), puzzle_room, 20).
holds(2, in((block,3)), puzzle_room, 20).
holds(2, in((block,4)), puzzle_room, 20).
holds(2, in((block,5)), hallway, 20).
holds(2, in((block,6)), puzzle_room, 20).
holds(2, in(manipulator_arm_1), puzzle_room, 20).
holds(2, in(manipulator_arm_2), puzzle_room, 20).
holds(2, in(puzzle_room_table), puzzle_room, 20).
holds(2, in(talos), puzzle_room, 20).
holds(2, in_tower((block,1),(block,1)), true, 20).
holds(2, in_tower((block,1),(block,2)), false, 20).
holds(2, in_tower((block,1),(block,3)), true, 20).
holds(2, in_tower((block,1),(block,4)), false, 20).
holds(2, in_tower((block,1),(block,5)), false, 20).
holds(2, in_tower((block,1),(block,6)), false, 20).
holds(2, in_tower((block,2),(block,1)), false, 20).
holds(2, in_tower((block,2),(block,2)), true, 20).
holds(2, in_tower((block,2),(block,3)), false, 20).
holds(2, in_tower((block,2),(block,4)), true, 20).
holds(2, in_tower((block,2),(block,5)), false, 20).
holds(2, in_tower((block,2),(block,6)), false, 20).
holds(2, in_tower((block,3),(block,1)), false, 20).
holds(2, in_tower((block,3),(block,2)), false, 20).
holds(2, in_tower((block,3),(block,3)), false, 20).
holds(2, in_tower((block,3),(block,4)), false, 20).
holds(2, in_tower((block,3),(block,5)), false, 20).
holds(2, in_tower((block,3),(block,6)), false, 20).
holds(2, in_tower((block,4),(block,1)), false, 20).
holds(2, in_tower((block,4),(block,2)), false, 20).
holds(2, in_tower((block,4),(block,3)), false, 20).
holds(2, in_tower((block,4),(block,4)), false, 20).
holds(2, in_tower((block,4),(block,5)), false, 20).
holds(2, in_tower((block,4),(block,6)), false, 20).
holds(2, in_tower((block,5),(block,1)), false, 20).
holds(2, in_tower((block,5),(block,2)), false, 20).
holds(2, in_tower((block,5),(block,3)), false, 20).
holds(2, in_tower((block,5),(block,4)), false, 20).
holds(2, in_tower((block,5),(block,5)), false, 20).
holds(2, in_tower((block,5),(block,6)), false, 20).
holds(2, in_tower((block,6),(block,1)), false, 20).
holds(2, in_tower((block,6),(block,2)), false, 20).
holds(2, in_tower((block,6),(block,3)), false, 20).
holds(2, in_tower((block,6),(block,4)), false, 20).
holds(2, in_tower((block,6),(block,5)), false, 20).
holds(2, in_tower((block,6),(block,6)), true, 20).
holds(2, on((block,1)), puzzle_room_table, 20).
holds(2, on((block,2)), puzzle_room_table, 20).
holds(2, on((block,3)), (block,1), 20).
holds(2, on((block,4)), (block,2), 20).
holds(2, on((block,5)), nothing, 20).
holds(2, on((block,6)), puzzle_room_table, 20).
holds(2, tower_base((block,1),puzzle_room_table), true, 20).
holds(2, tower_base((block,2),puzzle_room_table), true, 20).
holds(2, tower_base((block,3),puzzle_room_table), false, 20).
holds(2, tower_base((block,4),puzzle_room_table), false, 20).
holds(2, tower_base((block,5),puzzle_room_table), false, 20).
holds(2, tower_base((block,6),puzzle_room_table), true, 20).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 20).
holds(2, unordered_tower((block,2),puzzle_room_table), true, 20).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 20).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 20).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 20).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 20).
holds(3, complete_tower(blue,puzzle_room_table), false, 20).
holds(3, complete_tower(red,puzzle_room_table), false, 20).
holds(3, grasping(manipulator_arm_1), (block,6), 20).
holds(3, grasping(manipulator_arm_2), nothing, 20).
holds(3, in((block,1)), puzzle_room, 20).
holds(3, in((block,2)), puzzle_room, 20).
holds(3, in((block,3)), puzzle_room, 20).
holds(3, in((block,4)), puzzle_room, 20).
holds(3, in((block,5)), hallway, 20).
holds(3, in((block,6)), puzzle_room, 20).
holds(3, in(manipulator_arm_1), puzzle_room, 20).
holds(3, in(manipulator_arm_2), puzzle_room, 20).
holds(3, in(puzzle_room_table), puzzle_room, 20).
holds(3, in(talos), puzzle_room, 20).
holds(3, in_tower((block,1),(block,1)), true, 20).
holds(3, in_tower((block,1),(block,2)), false, 20).
holds(3, in_tower((block,1),(block,3)), true, 20).
holds(3, in_tower((block,1),(block,4)), false, 20).
holds(3, in_tower((block,1),(block,5)), false, 20).
holds(3, in_tower((block,1),(block,6)), false, 20).
holds(3, in_tower((block,2),(block,1)), false, 20).
holds(3, in_tower((block,2),(block,2)), true, 20).
holds(3, in_tower((block,2),(block,3)), false, 20).
holds(3, in_tower((block,2),(block,4)), true, 20).
holds(3, in_tower((block,2),(block,5)), false, 20).
holds(3, in_tower((block,2),(block,6)), false, 20).
holds(3, in_tower((block,3),(block,1)), false, 20).
holds(3, in_tower((block,3),(block,2)), false, 20).
holds(3, in_tower((block,3),(block,3)), false, 20).
holds(3, in_tower((block,3),(block,4)), false, 20).
holds(3, in_tower((block,3),(block,5)), false, 20).
holds(3, in_tower((block,3),(block,6)), false, 20).
holds(3, in_tower((block,4),(block,1)), false, 20).
holds(3, in_tower((block,4),(block,2)), false, 20).
holds(3, in_tower((block,4),(block,3)), false, 20).
holds(3, in_tower((block,4),(block,4)), false, 20).
holds(3, in_tower((block,4),(block,5)), false, 20).
holds(3, in_tower((block,4),(block,6)), false, 20).
holds(3, in_tower((block,5),(block,1)), false, 20).
holds(3, in_tower((block,5),(block,2)), false, 20).
holds(3, in_tower((block,5),(block,3)), false, 20).
holds(3, in_tower((block,5),(block,4)), false, 20).
holds(3, in_tower((block,5),(block,5)), false, 20).
holds(3, in_tower((block,5),(block,6)), false, 20).
holds(3, in_tower((block,6),(block,1)), false, 20).
holds(3, in_tower((block,6),(block,2)), false, 20).
holds(3, in_tower((block,6),(block,3)), false, 20).
holds(3, in_tower((block,6),(block,4)), false, 20).
holds(3, in_tower((block,6),(block,5)), false, 20).
holds(3, in_tower((block,6),(block,6)), true, 20).
holds(3, on((block,1)), puzzle_room_table, 20).
holds(3, on((block,2)), puzzle_room_table, 20).
holds(3, on((block,3)), (block,1), 20).
holds(3, on((block,4)), (block,2), 20).
holds(3, on((block,5)), nothing, 20).
holds(3, on((block,6)), puzzle_room_table, 20).
holds(3, tower_base((block,1),puzzle_room_table), true, 20).
holds(3, tower_base((block,2),puzzle_room_table), true, 20).
holds(3, tower_base((block,3),puzzle_room_table), false, 20).
holds(3, tower_base((block,4),puzzle_room_table), false, 20).
holds(3, tower_base((block,5),puzzle_room_table), false, 20).
holds(3, tower_base((block,6),puzzle_room_table), true, 20).
holds(3, unordered_tower((block,1),puzzle_room_table), true, 20).
holds(3, unordered_tower((block,2),puzzle_room_table), true, 20).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 20).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 20).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 20).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 20).

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 284 rules into program part ash_goal_state:

final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).

[09-02-2022_19-45-27] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=21']

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 5})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'I': 6})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 6})

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 3 rules into program part base:

sub_goal(3, talos, release(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), nothing, 5).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 6).
sub_goal(3, talos, put(manipulator_arm_2,(block,5),(block,6)), on((block,5)), (block,6), 6).

[09-02-2022_19-45-27] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=21']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001F8C0D62550>]
	incrementor = SolveIncrementor(step_start=20, step_increase=1, step_increase_initial=2, step_end_min=22, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 20), range_=None), IncPart(name='plan_module', args=('#inc', 20, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 20, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 20, 5, 6, 'sequential', 'false'), range_=None)]

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 789 rules

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004414600000018254s

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.024348s.

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.003750s with result Satisfiable.

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001F8C0BAB680>

[09-02-2022_19-45-27] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 2)
	('start_step', 20)
	('last_sgoals', 6)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001F88E5CDA60>)
	('first_sgoals', 5)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001F8C0BAB680>)

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 20). %* None *%
#program plan_module(#inc, 20, true, false). %* None *%
#program optimisation_module(#inc, 20, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 20, 5, 6, sequential, false). %* None *%

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     19 : Current =     21
Incrementor step ends | Minimum  =     22 : Maximum =    200

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('state_module', [Number(20), Number(20)]), ('plan_module', [Number(20), Number(20), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(20), Number(20), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('conformance_module', [Number(20), Number(20), Number(5), Number(6), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(21), Number(20)]), ('plan_module', [Number(21), Number(20), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(20), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('conformance_module', [Number(21), Number(20), Number(5), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.130639s.

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011204s with result Satisfiable.

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.14184369999975388, Incremental time limit = None
Running cumulative time = 0.14184369999975388, Cumulative time limit = 1800
Used memory = (RSS = 891.746094Mb, VMS = 883.511719Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.130639s, Solving = 0.011204s, Total = 0.141844s, Memory = (RSS = 891.746094Mb, VMS = 883.511719Mb), Step range = [20-21]), Calls = 1
Final Model :: Total atoms = 3610, Cost = (1, 0, -1), Optimality proven = False, Number = 2, Thread ID = 2, Model type = ModelType.StableModel

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     21 : Current =     22
Incrementor step ends | Minimum  =     22 : Maximum =    200

[09-02-2022_19-45-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(22)]), ('state_module', [Number(22), Number(20)]), ('plan_module', [Number(22), Number(20), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(20), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('conformance_module', [Number(22), Number(20), Number(5), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.091953s.

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.003095s with result Unsatisfiable.

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.09504829999968933, Incremental time limit = None
Running cumulative time = 0.23689199999944321, Cumulative time limit = 1800
Used memory = (RSS = 891.746094Mb, VMS = 883.511719Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     22 : Current =     23
Incrementor step ends | Minimum  =     22 : Maximum =    200

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(23)]), ('state_module', [Number(23), Number(20)]), ('plan_module', [Number(23), Number(20), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(20), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('conformance_module', [Number(23), Number(20), Number(5), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.097999s.

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.003929s with result Unsatisfiable.

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.10192829999982678, Incremental time limit = None
Running cumulative time = 0.33882029999927, Cumulative time limit = 1800
Used memory = (RSS = 891.746094Mb, VMS = 883.511719Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     23 : Current =     24
Incrementor step ends | Minimum  =     22 : Maximum =    200

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(24)]), ('state_module', [Number(24), Number(20)]), ('plan_module', [Number(24), Number(20), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(20), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('conformance_module', [Number(24), Number(20), Number(5), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.112419s.

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005594s with result Unsatisfiable.

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11801240000022517, Incremental time limit = None
Running cumulative time = 0.45683269999949516, Cumulative time limit = 1800
Used memory = (RSS = 891.746094Mb, VMS = 883.511719Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     24 : Current =     25
Incrementor step ends | Minimum  =     22 : Maximum =    200

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(25)]), ('state_module', [Number(25), Number(20)]), ('plan_module', [Number(25), Number(20), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(20), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(20), Number(5), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.115245s.

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006846s with result Unsatisfiable.

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.12209119999988616, Incremental time limit = None
Running cumulative time = 0.5789238999993813, Cumulative time limit = 1800
Used memory = (RSS = 891.746094Mb, VMS = 883.511719Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     25 : Current =     26
Incrementor step ends | Minimum  =     22 : Maximum =    200

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(26)]), ('state_module', [Number(26), Number(20)]), ('plan_module', [Number(26), Number(20), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(26), Number(20), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('conformance_module', [Number(26), Number(20), Number(5), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.121179s.

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008312s with result Unsatisfiable.

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.12949129999992692, Incremental time limit = None
Running cumulative time = 0.7084151999993082, Cumulative time limit = 1800
Used memory = (RSS = 891.746094Mb, VMS = 883.511719Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     26 : Current =     27
Incrementor step ends | Minimum  =     22 : Maximum =    200

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(27)]), ('state_module', [Number(27), Number(20)]), ('plan_module', [Number(27), Number(20), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(27), Number(20), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('conformance_module', [Number(27), Number(20), Number(5), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.121662s.

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010034s with result Unsatisfiable.

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1316960999999992, Incremental time limit = None
Running cumulative time = 0.8401112999993074, Cumulative time limit = 1800
Used memory = (RSS = 891.746094Mb, VMS = 883.511719Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     27 : Current =     28
Incrementor step ends | Minimum  =     22 : Maximum =    200

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(28)]), ('state_module', [Number(28), Number(20)]), ('plan_module', [Number(28), Number(20), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(28), Number(20), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('conformance_module', [Number(28), Number(20), Number(5), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.123571s.

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013273s with result Unsatisfiable.

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.13684429999989334, Incremental time limit = None
Running cumulative time = 0.9769555999992008, Cumulative time limit = 1800
Used memory = (RSS = 892.890625Mb, VMS = 884.597656Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     28 : Current =     29
Incrementor step ends | Minimum  =     22 : Maximum =    200

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(29)]), ('state_module', [Number(29), Number(20)]), ('plan_module', [Number(29), Number(20), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(20), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(20), Number(5), Number(6), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.126449s.

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.036134s with result Satisfiable.

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.16258339999990312, Incremental time limit = None
Running cumulative time = 1.139538999999104, Cumulative time limit = 1800
Used memory = (RSS = 893.757812Mb, VMS = 885.531250Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 6
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.041118s, Solving = 0.098421s, Total = 1.139539s, Memory = (RSS = 893.757812Mb, VMS = 885.531250Mb), Step range = [20-29]), Calls = 9
Final Model :: Total atoms = 6284, Cost = (11, 0, -1), Optimality proven = False, Number = 3, Thread ID = 2, Model type = ModelType.StableModel

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.130639s, Solving = 0.011204s, Total = 0.141844s, Memory = (RSS = 891.746094Mb, VMS = 883.511719Mb), Step range = [20-21]
2 : Statistics :: Grounding = 0.091953s, Solving = 0.003095s, Total = 0.095048s, Memory = (RSS = 891.746094Mb, VMS = 883.511719Mb), Step range = [22-22]
3 : Statistics :: Grounding = 0.097999s, Solving = 0.003929s, Total = 0.101928s, Memory = (RSS = 891.746094Mb, VMS = 883.511719Mb), Step range = [23-23]
4 : Statistics :: Grounding = 0.112419s, Solving = 0.005594s, Total = 0.118012s, Memory = (RSS = 891.746094Mb, VMS = 883.511719Mb), Step range = [24-24]
5 : Statistics :: Grounding = 0.115245s, Solving = 0.006846s, Total = 0.122091s, Memory = (RSS = 891.746094Mb, VMS = 883.511719Mb), Step range = [25-25]
6 : Statistics :: Grounding = 0.121179s, Solving = 0.008312s, Total = 0.129491s, Memory = (RSS = 891.746094Mb, VMS = 883.511719Mb), Step range = [26-26]
7 : Statistics :: Grounding = 0.121662s, Solving = 0.010034s, Total = 0.131696s, Memory = (RSS = 891.746094Mb, VMS = 883.511719Mb), Step range = [27-27]
8 : Statistics :: Grounding = 0.123571s, Solving = 0.013273s, Total = 0.136844s, Memory = (RSS = 892.890625Mb, VMS = 884.597656Mb), Step range = [28-28]
9 : Statistics :: Grounding = 0.126449s, Solving = 0.036134s, Total = 0.162583s, Memory = (RSS = 893.757812Mb, VMS = 885.531250Mb), Step range = [29-29]

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 1.139539s due to: Stop condition reached.

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_19-45-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[09-02-2022_19-45-29] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 10, 17: 11, 18: 11, 19: 12, 20: 12, 21: 12, 22: 13, 23: 14, 24: 15, 25: 16, 26: 17, 27: 18, 28: 19, 29: 19, 30: 20}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 16, 11: 18, 12: 21, 13: 22, 14: 23, 15: 24, 16: 25, 17: 26, 18: 27, 19: 29, 20: 30}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_19-45-29] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 10, 17: 11, 18: 11, 19: 12, 20: 12, 21: 12, 22: 13, 23: 14, 24: 15, 25: 16, 26: 17, 27: 18, 28: 19, 29: 19, 30: 20}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 16, 11: 18, 12: 21, 13: 22, 14: 23, 15: 24, 16: 25, 17: 26, 18: 27, 19: 29, 20: 30}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_19-45-29] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 6, Last requested goal index = 6, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[09-02-2022_19-45-29] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.041118s, Solving = 0.098421s, Total = 1.139539s, Memory = (RSS = 893.757812Mb, VMS = 885.531250Mb), Step range = [20-29]), Calls = 9
Model :: Total atoms = 6284, Cost = (11, 0, -1), Optimality proven = False, Number = 3, Thread ID = 2, Model type = ModelType.StableModel

[09-02-2022_19-45-29] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 9 :: Actions = 11                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,store_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,store_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,store_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 8:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 9:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
        talos : grasp(manipulator_arm_2,(block,5))
Step 10:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
        talos : configure(manipulator_arm_2,retracted)
Step 11:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 12:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,(block,5))
Step 14:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_2,puzzle_room_door)
Step 16:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 19:
    Current Sub-goals:
        [Index = 4] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 20:
    Current Sub-goals:
        [Index = 4] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 4] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 21:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,6))
Step 22:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 23:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 24:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 25:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,5))
Step 26:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 27:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : move(puzzle_room)
Step 28:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 29:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
        talos : put(manipulator_arm_2,(block,5),(block,6))

[09-02-2022_19-45-29] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=20, total_plan_length=29, step_range=range(20, 30)

[09-02-2022_19-45-29] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 13, Total actions = 19, Produced sub-goal stages = 19
Level [2]: Length = 29, Total actions = 34, Produced sub-goal stages = 34
Level [1]: Length = 30, Total actions = 34, Produced sub-goal stages = 0

[09-02-2022_19-45-29] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 2 (par-ref), LE =   9, AC =  11, CF = 0.8, GT =   3.32s, ST =   0.26s, OT = 0.00s, TT =   3.58s, EF = (LE = 4.5, AC = 3.7), ED = (LE = 4.9, AC = 2.8), EB = (LE = 1.1, AC = 0.9)

[09-02-2022_19-45-29] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=9, start_step=20, blend=Blend(left=0, right=0)

[09-02-2022_19-45-29] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=1, small_group_size=4, large_group_size=5

[09-02-2022_19-45-29] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=24, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[09-02-2022_19-45-29] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 2, Problem Range = [5-6], Size = 9, Sub-goal Stage Range = [21-29]
Division points [total=1] : [(Index = 24, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[09-02-2022_19-45-29] DEBUG :: ASH Planner Main #1 >> Monolevel problem 3 at level 2 solved.

[09-02-2022_19-45-29] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 5 at level 1:
Total Templated Partial Problems = 2, Problem Range = [5-6], Size = 9, Sub-goal Stage Range = [21-29]
Division points [total=1] : [(Index = 24, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[09-02-2022_19-45-29] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [21-24]

[09-02-2022_19-45-29] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [21-24], problem number = 5, increment number = 5

[09-02-2022_19-45-29] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 21)
	('last_sgoals', 24)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001F88E5CDA60>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[09-02-2022_19-45-29] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [21-24] : Concurrency enabled : Minimum search length bound enabled with value 33

[09-02-2022_19-45-29] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 21
last_sgoals = 24
start_step = 30
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 33

[09-02-2022_19-45-29] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[09-02-2022_19-45-29] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[09-02-2022_19-45-29] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[09-02-2022_19-45-29] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[09-02-2022_19-45-29] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_19-45-29] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 30 as problem start state.

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,6))', 'S': 30})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 30})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 30})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 30})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 30})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 30})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 30})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'S': 30})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 30})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,6)', 'S': 30})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 30})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 30})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 30})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 30})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,1)', 'S': 30})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 30})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 30})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 30})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 30})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 30})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 30})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 30})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 30})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 30})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 30})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 30})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 30})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 30})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 30})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 30})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 30})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 30})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 30})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 30})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 30})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 30})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 30})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 30})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 30})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 30})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 30})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 30})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'S': 30})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 30})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 30})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 30})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 30})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 30})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 30})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'S': 30})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 30})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 30})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 30})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 30})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 30})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 30})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 30})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 30})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 30})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 30})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 30})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 30})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 30})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 30})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 30})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 30})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 30})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 30})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 30})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 30})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 30})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 30})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 30})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 30})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 30})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 30})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'S': 30})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 30})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 30})

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 30).
holds(1, complete_tower(red,puzzle_room_table), false, 30).
holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 30).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 30).
holds(1, configuration(manipulator_limb_1), extended, 30).
holds(1, configuration(manipulator_limb_2), retracted, 30).
holds(1, configuration(puzzle_room_door), open, 30).
holds(1, configuration(starting_room_door), closed, 30).
holds(1, configuration(store_room_door), open, 30).
holds(1, grasping(manipulator_arm_1), (block,6), 30).
holds(1, grasping(manipulator_arm_2), nothing, 30).
holds(1, grasping(manipulator_end_1), (block,6), 30).
holds(1, grasping(manipulator_end_2), nothing, 30).
holds(1, in((block,1)), (puzzle_room,1), 30).
holds(1, in((block,2)), (puzzle_room,1), 30).
holds(1, in((block,3)), (puzzle_room,1), 30).
holds(1, in((block,4)), (puzzle_room,1), 30).
holds(1, in((block,5)), (store_room,0), 30).
holds(1, in((block,6)), (puzzle_room,1), 30).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 30).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 30).
holds(1, in(manipulator_end_1), (puzzle_room,1), 30).
holds(1, in(manipulator_end_2), (puzzle_room,1), 30).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 30).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 30).
holds(1, in(puzzle_room_table), (puzzle_room,1), 30).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 30).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 30).
holds(1, in(talos), (puzzle_room,1), 30).
holds(1, in_tower((block,1),(block,1)), true, 30).
holds(1, in_tower((block,1),(block,2)), false, 30).
holds(1, in_tower((block,1),(block,3)), true, 30).
holds(1, in_tower((block,1),(block,4)), false, 30).
holds(1, in_tower((block,1),(block,5)), false, 30).
holds(1, in_tower((block,1),(block,6)), false, 30).
holds(1, in_tower((block,2),(block,1)), false, 30).
holds(1, in_tower((block,2),(block,2)), true, 30).
holds(1, in_tower((block,2),(block,3)), false, 30).
holds(1, in_tower((block,2),(block,4)), true, 30).
holds(1, in_tower((block,2),(block,5)), false, 30).
holds(1, in_tower((block,2),(block,6)), false, 30).
holds(1, in_tower((block,3),(block,1)), false, 30).
holds(1, in_tower((block,3),(block,2)), false, 30).
holds(1, in_tower((block,3),(block,3)), false, 30).
holds(1, in_tower((block,3),(block,4)), false, 30).
holds(1, in_tower((block,3),(block,5)), false, 30).
holds(1, in_tower((block,3),(block,6)), false, 30).
holds(1, in_tower((block,4),(block,1)), false, 30).
holds(1, in_tower((block,4),(block,2)), false, 30).
holds(1, in_tower((block,4),(block,3)), false, 30).
holds(1, in_tower((block,4),(block,4)), false, 30).
holds(1, in_tower((block,4),(block,5)), false, 30).
holds(1, in_tower((block,4),(block,6)), false, 30).
holds(1, in_tower((block,5),(block,1)), false, 30).
holds(1, in_tower((block,5),(block,2)), false, 30).
holds(1, in_tower((block,5),(block,3)), false, 30).
holds(1, in_tower((block,5),(block,4)), false, 30).
holds(1, in_tower((block,5),(block,5)), false, 30).
holds(1, in_tower((block,5),(block,6)), false, 30).
holds(1, in_tower((block,6),(block,1)), false, 30).
holds(1, in_tower((block,6),(block,2)), false, 30).
holds(1, in_tower((block,6),(block,3)), false, 30).
holds(1, in_tower((block,6),(block,4)), false, 30).
holds(1, in_tower((block,6),(block,5)), false, 30).
holds(1, in_tower((block,6),(block,6)), true, 30).
holds(1, on((block,1)), puzzle_room_table_left, 30).
holds(1, on((block,2)), puzzle_room_table_right, 30).
holds(1, on((block,3)), (block,1), 30).
holds(1, on((block,4)), (block,2), 30).
holds(1, on((block,5)), nothing, 30).
holds(1, on((block,6)), puzzle_room_table_right, 30).
holds(1, tower_base((block,1),puzzle_room_table), true, 30).
holds(1, tower_base((block,2),puzzle_room_table), true, 30).
holds(1, tower_base((block,3),puzzle_room_table), false, 30).
holds(1, tower_base((block,4),puzzle_room_table), false, 30).
holds(1, tower_base((block,5),puzzle_room_table), false, 30).
holds(1, tower_base((block,6),puzzle_room_table), true, 30).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 30).
holds(1, unordered_tower((block,2),puzzle_room_table), true, 30).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 30).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 30).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 30).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 30).
holds(2, complete_tower(blue,puzzle_room_table), false, 30).
holds(2, complete_tower(red,puzzle_room_table), false, 30).
holds(2, configuration(manipulator_arm_1), extended, 30).
holds(2, configuration(manipulator_arm_2), retracted, 30).
holds(2, configuration(puzzle_room_door), open, 30).
holds(2, configuration(starting_room_door), closed, 30).
holds(2, configuration(store_room_door), open, 30).
holds(2, grasping(manipulator_arm_1), (block,6), 30).
holds(2, grasping(manipulator_arm_2), nothing, 30).
holds(2, in((block,1)), puzzle_room, 30).
holds(2, in((block,2)), puzzle_room, 30).
holds(2, in((block,3)), puzzle_room, 30).
holds(2, in((block,4)), puzzle_room, 30).
holds(2, in((block,5)), store_room, 30).
holds(2, in((block,6)), puzzle_room, 30).
holds(2, in(manipulator_arm_1), puzzle_room, 30).
holds(2, in(manipulator_arm_2), puzzle_room, 30).
holds(2, in(puzzle_room_table), puzzle_room, 30).
holds(2, in(talos), puzzle_room, 30).
holds(2, in_tower((block,1),(block,1)), true, 30).
holds(2, in_tower((block,1),(block,2)), false, 30).
holds(2, in_tower((block,1),(block,3)), true, 30).
holds(2, in_tower((block,1),(block,4)), false, 30).
holds(2, in_tower((block,1),(block,5)), false, 30).
holds(2, in_tower((block,1),(block,6)), false, 30).
holds(2, in_tower((block,2),(block,1)), false, 30).
holds(2, in_tower((block,2),(block,2)), true, 30).
holds(2, in_tower((block,2),(block,3)), false, 30).
holds(2, in_tower((block,2),(block,4)), true, 30).
holds(2, in_tower((block,2),(block,5)), false, 30).
holds(2, in_tower((block,2),(block,6)), false, 30).
holds(2, in_tower((block,3),(block,1)), false, 30).
holds(2, in_tower((block,3),(block,2)), false, 30).
holds(2, in_tower((block,3),(block,3)), false, 30).
holds(2, in_tower((block,3),(block,4)), false, 30).
holds(2, in_tower((block,3),(block,5)), false, 30).
holds(2, in_tower((block,3),(block,6)), false, 30).
holds(2, in_tower((block,4),(block,1)), false, 30).
holds(2, in_tower((block,4),(block,2)), false, 30).
holds(2, in_tower((block,4),(block,3)), false, 30).
holds(2, in_tower((block,4),(block,4)), false, 30).
holds(2, in_tower((block,4),(block,5)), false, 30).
holds(2, in_tower((block,4),(block,6)), false, 30).
holds(2, in_tower((block,5),(block,1)), false, 30).
holds(2, in_tower((block,5),(block,2)), false, 30).
holds(2, in_tower((block,5),(block,3)), false, 30).
holds(2, in_tower((block,5),(block,4)), false, 30).
holds(2, in_tower((block,5),(block,5)), false, 30).
holds(2, in_tower((block,5),(block,6)), false, 30).
holds(2, in_tower((block,6),(block,1)), false, 30).
holds(2, in_tower((block,6),(block,2)), false, 30).
holds(2, in_tower((block,6),(block,3)), false, 30).
holds(2, in_tower((block,6),(block,4)), false, 30).
holds(2, in_tower((block,6),(block,5)), false, 30).
holds(2, in_tower((block,6),(block,6)), true, 30).
holds(2, on((block,1)), puzzle_room_table, 30).
holds(2, on((block,2)), puzzle_room_table, 30).
holds(2, on((block,3)), (block,1), 30).
holds(2, on((block,4)), (block,2), 30).
holds(2, on((block,5)), nothing, 30).
holds(2, on((block,6)), puzzle_room_table, 30).
holds(2, tower_base((block,1),puzzle_room_table), true, 30).
holds(2, tower_base((block,2),puzzle_room_table), true, 30).
holds(2, tower_base((block,3),puzzle_room_table), false, 30).
holds(2, tower_base((block,4),puzzle_room_table), false, 30).
holds(2, tower_base((block,5),puzzle_room_table), false, 30).
holds(2, tower_base((block,6),puzzle_room_table), true, 30).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 30).
holds(2, unordered_tower((block,2),puzzle_room_table), true, 30).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 30).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 30).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 30).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 30).

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[09-02-2022_19-45-29] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=33']

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 21})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 22})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 23})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 24})

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 4 rules into program part base:

sub_goal(2, talos, release(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), nothing, 21).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 22).
sub_goal(2, talos, move(hallway), in(talos), hallway, 23).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 24).

[09-02-2022_19-45-29] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=33']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001F8C0D629D0>]
	incrementor = SolveIncrementor(step_start=30, step_increase=1, step_increase_initial=4, step_end_min=34, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 30), range_=None), IncPart(name='plan_module', args=('#inc', 30, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 30, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 30, 21, 24, 'sequential', 'false'), range_=None)]

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 811 rules

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004731600000013714s

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.029719s.

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005447s with result Satisfiable.

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001F8C0CB93B0>

[09-02-2022_19-45-29] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 30)
	('last_sgoals', 24)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001F88E5CDA60>)
	('first_sgoals', 21)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001F8C0CB93B0>)

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 30). %* None *%
#program plan_module(#inc, 30, true, false). %* None *%
#program optimisation_module(#inc, 30, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 30, 21, 24, sequential, false). %* None *%

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     29 : Current =     33
Incrementor step ends | Minimum  =     34 : Maximum =    200

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(33)]), ('state_module', [Number(30), Number(30)]), ('plan_module', [Number(30), Number(30), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(30), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('conformance_module', [Number(30), Number(30), Number(21), Number(24), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(31), Number(30)]), ('plan_module', [Number(31), Number(30), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(31), Number(30), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('conformance_module', [Number(31), Number(30), Number(21), Number(24), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(32), Number(30)]), ('plan_module', [Number(32), Number(30), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(32), Number(30), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(32)]), ('action_preconditions', [Number(32)]), ('variable_relations', [Number(32)]), ('abstraction_mappings', [Number(32)]), ('conformance_module', [Number(32), Number(30), Number(21), Number(24), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(33), Number(30)]), ('plan_module', [Number(33), Number(30), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(33), Number(30), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('conformance_module', [Number(33), Number(30), Number(21), Number(24), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.576160s.

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.046088s with result Satisfiable.

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.6222479999998995, Incremental time limit = None
Running cumulative time = 0.6222479999998995, Cumulative time limit = 1800
Used memory = (RSS = 894.312500Mb, VMS = 886.019531Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.576160s, Solving = 0.046088s, Total = 0.622248s, Memory = (RSS = 894.312500Mb, VMS = 886.019531Mb), Step range = [30-33]), Calls = 1
Final Model :: Total atoms = 4906, Cost = (3, 0, -3), Optimality proven = False, Number = 4, Thread ID = 1, Model type = ModelType.StableModel

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     33 : Current =     34
Incrementor step ends | Minimum  =     34 : Maximum =    200

[09-02-2022_19-45-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(34)]), ('state_module', [Number(34), Number(30)]), ('plan_module', [Number(34), Number(30), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(34), Number(30), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(34)]), ('action_preconditions', [Number(34)]), ('variable_relations', [Number(34)]), ('abstraction_mappings', [Number(34)]), ('conformance_module', [Number(34), Number(30), Number(21), Number(24), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.178332s.

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007455s with result Unsatisfiable.

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.18578670000010788, Incremental time limit = None
Running cumulative time = 0.8080347000000074, Cumulative time limit = 1800
Used memory = (RSS = 894.312500Mb, VMS = 886.019531Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     34 : Current =     35
Incrementor step ends | Minimum  =     34 : Maximum =    200

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(35)]), ('state_module', [Number(35), Number(30)]), ('plan_module', [Number(35), Number(30), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(35), Number(30), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(35)]), ('action_preconditions', [Number(35)]), ('variable_relations', [Number(35)]), ('abstraction_mappings', [Number(35)]), ('conformance_module', [Number(35), Number(30), Number(21), Number(24), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.200664s.

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.019377s with result Satisfiable.

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2200415999998313, Incremental time limit = None
Running cumulative time = 1.0280762999998387, Cumulative time limit = 1800
Used memory = (RSS = 895.761719Mb, VMS = 887.535156Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.955156s, Solving = 0.072920s, Total = 1.028076s, Memory = (RSS = 895.761719Mb, VMS = 887.535156Mb), Step range = [30-35]), Calls = 3
Final Model :: Total atoms = 5659, Cost = (5, 0, 0), Optimality proven = False, Number = 2, Thread ID = 4, Model type = ModelType.StableModel

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.576160s, Solving = 0.046088s, Total = 0.622248s, Memory = (RSS = 894.312500Mb, VMS = 886.019531Mb), Step range = [30-33]
2 : Statistics :: Grounding = 0.178332s, Solving = 0.007455s, Total = 0.185787s, Memory = (RSS = 894.312500Mb, VMS = 886.019531Mb), Step range = [34-34]
3 : Statistics :: Grounding = 0.200664s, Solving = 0.019377s, Total = 0.220042s, Memory = (RSS = 895.761719Mb, VMS = 887.535156Mb), Step range = [35-35]

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 1.028076s due to: Stop condition reached.

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[09-02-2022_19-45-30] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 10, 17: 11, 18: 11, 19: 12, 20: 12, 21: 12, 22: 13, 23: 14, 24: 15, 25: 16, 26: 17, 27: 18, 28: 19, 29: 19, 30: 20}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 16, 11: 18, 12: 21, 13: 22, 14: 23, 15: 24, 16: 25, 17: 26, 18: 27, 19: 29, 20: 30}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_19-45-30] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 10, 17: 11, 18: 11, 19: 12, 20: 12, 21: 12, 22: 13, 23: 14, 24: 15, 25: 16, 26: 17, 27: 18, 28: 19, 29: 19, 30: 20, 31: 21, 32: 22, 33: 23, 34: 23, 35: 24}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 16, 11: 18, 12: 21, 13: 22, 14: 23, 15: 24, 16: 25, 17: 26, 18: 27, 19: 29, 20: 30, 21: 31, 22: 32, 23: 34, 24: 35}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_19-45-30] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 24, Last requested goal index = 24, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[09-02-2022_19-45-30] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.955156s, Solving = 0.072920s, Total = 1.028076s, Memory = (RSS = 895.761719Mb, VMS = 887.535156Mb), Step range = [30-35]), Calls = 3
Model :: Total atoms = 5659, Cost = (5, 0, 0), Optimality proven = False, Number = 2, Thread ID = 4, Model type = ModelType.StableModel

[09-02-2022_19-45-30] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 5 :: Actions = 5                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 11:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 12:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 14:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
        talos : grasp(manipulator_end_2,(block,5))
Step 15:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : release(manipulator_end_2,(block,5))
Step 16:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 17:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 18:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 19:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 20:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 21:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 22:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 13] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 23:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 24:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 25:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 26:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 27:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 28:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 29:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 30:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 31:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 32:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 33:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 34:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 35:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)

[09-02-2022_19-45-30] DEBUG :: ASH Planner Main #1 >> Monolevel problem 5 at level 1 solved.

[09-02-2022_19-45-30] DEBUG :: ASH Planner Main #1 >> Online planning increment 5 finished.

[09-02-2022_19-45-30] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 3 : Total constraining sub-goal stages = 13 : Goals achieved = 6 : Goals unachieved = 7 : Complete = False
Level = 1 : Solved problems = 5 : Total constraining sub-goal stages = 29 : Goals achieved = 24 : Goals unachieved = 5 : Complete = False

[09-02-2022_19-45-30] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 2.

[09-02-2022_19-45-30] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 6 by method ground-first is [1-1].

[09-02-2022_19-45-30] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 6 at level 1:
Total Templated Partial Problems = 2, Problem Range = [5-6], Size = 9, Sub-goal Stage Range = [21-29]
Division points [total=1] : [(Index = 24, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[09-02-2022_19-45-30] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [25-29]

[09-02-2022_19-45-30] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [25-29], problem number = 6, increment number = 6

[09-02-2022_19-45-30] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 25)
	('last_sgoals', 29)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001F88E5CDA60>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[09-02-2022_19-45-30] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [25-29] : Concurrency enabled : Minimum search length bound enabled with value 39

[09-02-2022_19-45-30] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 25
last_sgoals = 29
start_step = 35
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 39

[09-02-2022_19-45-30] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[09-02-2022_19-45-30] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[09-02-2022_19-45-30] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[09-02-2022_19-45-30] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[09-02-2022_19-45-30] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_19-45-30] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 35 as problem start state.

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 35})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 35})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 35})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 35})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 35})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 35})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 35})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 35})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 35})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 35})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 35})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 35})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 35})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 35})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,1)', 'S': 35})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 35})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 35})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(hallway,2)', 'S': 35})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(hallway,2)', 'S': 35})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(hallway,2)', 'S': 35})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(hallway,2)', 'S': 35})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(hallway,2)', 'S': 35})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(hallway,2)', 'S': 35})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 35})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 35})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 35})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(hallway,2)', 'S': 35})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 35})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 35})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 35})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 35})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 35})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 35})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 35})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 35})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 35})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 35})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 35})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 35})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 35})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 35})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 35})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'S': 35})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 35})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 35})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 35})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 35})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 35})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 35})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 35})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 35})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 35})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 35})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 35})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 35})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 35})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'hallway', 'S': 35})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'hallway', 'S': 35})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 35})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'hallway', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 35})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 35})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 35})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 35})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 35})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 35})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 35})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 35})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 35})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 35})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 35})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'S': 35})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 35})

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 35).
holds(1, complete_tower(red,puzzle_room_table), false, 35).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 35).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 35).
holds(1, configuration(manipulator_limb_1), retracted, 35).
holds(1, configuration(manipulator_limb_2), extended, 35).
holds(1, configuration(puzzle_room_door), open, 35).
holds(1, configuration(starting_room_door), closed, 35).
holds(1, configuration(store_room_door), open, 35).
holds(1, grasping(manipulator_arm_1), nothing, 35).
holds(1, grasping(manipulator_arm_2), nothing, 35).
holds(1, grasping(manipulator_end_1), nothing, 35).
holds(1, grasping(manipulator_end_2), nothing, 35).
holds(1, in((block,1)), (puzzle_room,1), 35).
holds(1, in((block,2)), (puzzle_room,1), 35).
holds(1, in((block,3)), (puzzle_room,1), 35).
holds(1, in((block,4)), (puzzle_room,1), 35).
holds(1, in((block,5)), (store_room,0), 35).
holds(1, in((block,6)), (puzzle_room,1), 35).
holds(1, in(manipulator_arm_1), (hallway,2), 35).
holds(1, in(manipulator_arm_2), (hallway,2), 35).
holds(1, in(manipulator_end_1), (hallway,2), 35).
holds(1, in(manipulator_end_2), (hallway,2), 35).
holds(1, in(manipulator_limb_1), (hallway,2), 35).
holds(1, in(manipulator_limb_2), (hallway,2), 35).
holds(1, in(puzzle_room_table), (puzzle_room,1), 35).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 35).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 35).
holds(1, in(talos), (hallway,2), 35).
holds(1, in_tower((block,1),(block,1)), true, 35).
holds(1, in_tower((block,1),(block,2)), false, 35).
holds(1, in_tower((block,1),(block,3)), true, 35).
holds(1, in_tower((block,1),(block,4)), false, 35).
holds(1, in_tower((block,1),(block,5)), false, 35).
holds(1, in_tower((block,1),(block,6)), false, 35).
holds(1, in_tower((block,2),(block,1)), false, 35).
holds(1, in_tower((block,2),(block,2)), true, 35).
holds(1, in_tower((block,2),(block,3)), false, 35).
holds(1, in_tower((block,2),(block,4)), true, 35).
holds(1, in_tower((block,2),(block,5)), false, 35).
holds(1, in_tower((block,2),(block,6)), false, 35).
holds(1, in_tower((block,3),(block,1)), false, 35).
holds(1, in_tower((block,3),(block,2)), false, 35).
holds(1, in_tower((block,3),(block,3)), false, 35).
holds(1, in_tower((block,3),(block,4)), false, 35).
holds(1, in_tower((block,3),(block,5)), false, 35).
holds(1, in_tower((block,3),(block,6)), false, 35).
holds(1, in_tower((block,4),(block,1)), false, 35).
holds(1, in_tower((block,4),(block,2)), false, 35).
holds(1, in_tower((block,4),(block,3)), false, 35).
holds(1, in_tower((block,4),(block,4)), false, 35).
holds(1, in_tower((block,4),(block,5)), false, 35).
holds(1, in_tower((block,4),(block,6)), false, 35).
holds(1, in_tower((block,5),(block,1)), false, 35).
holds(1, in_tower((block,5),(block,2)), false, 35).
holds(1, in_tower((block,5),(block,3)), false, 35).
holds(1, in_tower((block,5),(block,4)), false, 35).
holds(1, in_tower((block,5),(block,5)), false, 35).
holds(1, in_tower((block,5),(block,6)), false, 35).
holds(1, in_tower((block,6),(block,1)), false, 35).
holds(1, in_tower((block,6),(block,2)), false, 35).
holds(1, in_tower((block,6),(block,3)), false, 35).
holds(1, in_tower((block,6),(block,4)), false, 35).
holds(1, in_tower((block,6),(block,5)), false, 35).
holds(1, in_tower((block,6),(block,6)), true, 35).
holds(1, on((block,1)), puzzle_room_table_left, 35).
holds(1, on((block,2)), puzzle_room_table_right, 35).
holds(1, on((block,3)), (block,1), 35).
holds(1, on((block,4)), (block,2), 35).
holds(1, on((block,5)), nothing, 35).
holds(1, on((block,6)), puzzle_room_table_right, 35).
holds(1, tower_base((block,1),puzzle_room_table), true, 35).
holds(1, tower_base((block,2),puzzle_room_table), true, 35).
holds(1, tower_base((block,3),puzzle_room_table), false, 35).
holds(1, tower_base((block,4),puzzle_room_table), false, 35).
holds(1, tower_base((block,5),puzzle_room_table), false, 35).
holds(1, tower_base((block,6),puzzle_room_table), true, 35).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 35).
holds(1, unordered_tower((block,2),puzzle_room_table), true, 35).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 35).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 35).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 35).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 35).
holds(2, complete_tower(blue,puzzle_room_table), false, 35).
holds(2, complete_tower(red,puzzle_room_table), false, 35).
holds(2, configuration(manipulator_arm_1), retracted, 35).
holds(2, configuration(manipulator_arm_2), extended, 35).
holds(2, configuration(puzzle_room_door), open, 35).
holds(2, configuration(starting_room_door), closed, 35).
holds(2, configuration(store_room_door), open, 35).
holds(2, grasping(manipulator_arm_1), nothing, 35).
holds(2, grasping(manipulator_arm_2), nothing, 35).
holds(2, in((block,1)), puzzle_room, 35).
holds(2, in((block,2)), puzzle_room, 35).
holds(2, in((block,3)), puzzle_room, 35).
holds(2, in((block,4)), puzzle_room, 35).
holds(2, in((block,5)), store_room, 35).
holds(2, in((block,6)), puzzle_room, 35).
holds(2, in(manipulator_arm_1), hallway, 35).
holds(2, in(manipulator_arm_2), hallway, 35).
holds(2, in(puzzle_room_table), puzzle_room, 35).
holds(2, in(talos), hallway, 35).
holds(2, in_tower((block,1),(block,1)), true, 35).
holds(2, in_tower((block,1),(block,2)), false, 35).
holds(2, in_tower((block,1),(block,3)), true, 35).
holds(2, in_tower((block,1),(block,4)), false, 35).
holds(2, in_tower((block,1),(block,5)), false, 35).
holds(2, in_tower((block,1),(block,6)), false, 35).
holds(2, in_tower((block,2),(block,1)), false, 35).
holds(2, in_tower((block,2),(block,2)), true, 35).
holds(2, in_tower((block,2),(block,3)), false, 35).
holds(2, in_tower((block,2),(block,4)), true, 35).
holds(2, in_tower((block,2),(block,5)), false, 35).
holds(2, in_tower((block,2),(block,6)), false, 35).
holds(2, in_tower((block,3),(block,1)), false, 35).
holds(2, in_tower((block,3),(block,2)), false, 35).
holds(2, in_tower((block,3),(block,3)), false, 35).
holds(2, in_tower((block,3),(block,4)), false, 35).
holds(2, in_tower((block,3),(block,5)), false, 35).
holds(2, in_tower((block,3),(block,6)), false, 35).
holds(2, in_tower((block,4),(block,1)), false, 35).
holds(2, in_tower((block,4),(block,2)), false, 35).
holds(2, in_tower((block,4),(block,3)), false, 35).
holds(2, in_tower((block,4),(block,4)), false, 35).
holds(2, in_tower((block,4),(block,5)), false, 35).
holds(2, in_tower((block,4),(block,6)), false, 35).
holds(2, in_tower((block,5),(block,1)), false, 35).
holds(2, in_tower((block,5),(block,2)), false, 35).
holds(2, in_tower((block,5),(block,3)), false, 35).
holds(2, in_tower((block,5),(block,4)), false, 35).
holds(2, in_tower((block,5),(block,5)), false, 35).
holds(2, in_tower((block,5),(block,6)), false, 35).
holds(2, in_tower((block,6),(block,1)), false, 35).
holds(2, in_tower((block,6),(block,2)), false, 35).
holds(2, in_tower((block,6),(block,3)), false, 35).
holds(2, in_tower((block,6),(block,4)), false, 35).
holds(2, in_tower((block,6),(block,5)), false, 35).
holds(2, in_tower((block,6),(block,6)), true, 35).
holds(2, on((block,1)), puzzle_room_table, 35).
holds(2, on((block,2)), puzzle_room_table, 35).
holds(2, on((block,3)), (block,1), 35).
holds(2, on((block,4)), (block,2), 35).
holds(2, on((block,5)), nothing, 35).
holds(2, on((block,6)), puzzle_room_table, 35).
holds(2, tower_base((block,1),puzzle_room_table), true, 35).
holds(2, tower_base((block,2),puzzle_room_table), true, 35).
holds(2, tower_base((block,3),puzzle_room_table), false, 35).
holds(2, tower_base((block,4),puzzle_room_table), false, 35).
holds(2, tower_base((block,5),puzzle_room_table), false, 35).
holds(2, tower_base((block,6),puzzle_room_table), true, 35).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 35).
holds(2, unordered_tower((block,2),puzzle_room_table), true, 35).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 35).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 35).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 35).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 35).

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[09-02-2022_19-45-30] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=39']

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'I': 25})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 26})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 27})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 28})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 28})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'I': 29})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 29})

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 7 rules into program part base:

sub_goal(2, talos, grasp(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), (block,5), 25).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 26).
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 27).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 28).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 28).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 29).
sub_goal(2, talos, put(manipulator_arm_2,(block,5),(block,6)), on((block,5)), (block,6), 29).

[09-02-2022_19-45-30] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=39']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001F8C0D62DC0>]
	incrementor = SolveIncrementor(step_start=35, step_increase=1, step_increase_initial=5, step_end_min=40, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 35), range_=None), IncPart(name='plan_module', args=('#inc', 35, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 35, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 35, 25, 29, 'sequential', 'false'), range_=None)]

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 814 rules

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004765899999938483s

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.029224s.

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005541s with result Satisfiable.

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001F8C0BCE180>

[09-02-2022_19-45-30] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 35)
	('last_sgoals', 29)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001F88E5CDA60>)
	('first_sgoals', 25)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001F8C0BCE180>)

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 35). %* None *%
#program plan_module(#inc, 35, true, false). %* None *%
#program optimisation_module(#inc, 35, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 35, 25, 29, sequential, false). %* None *%

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     34 : Current =     39
Incrementor step ends | Minimum  =     40 : Maximum =    200

[09-02-2022_19-45-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(39)]), ('state_module', [Number(35), Number(35)]), ('plan_module', [Number(35), Number(35), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(35), Number(35), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(35)]), ('action_preconditions', [Number(35)]), ('variable_relations', [Number(35)]), ('abstraction_mappings', [Number(35)]), ('conformance_module', [Number(35), Number(35), Number(25), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(36), Number(35)]), ('plan_module', [Number(36), Number(35), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(36), Number(35), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(36)]), ('action_preconditions', [Number(36)]), ('variable_relations', [Number(36)]), ('abstraction_mappings', [Number(36)]), ('conformance_module', [Number(36), Number(35), Number(25), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(37), Number(35)]), ('plan_module', [Number(37), Number(35), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(37), Number(35), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(37)]), ('action_preconditions', [Number(37)]), ('variable_relations', [Number(37)]), ('abstraction_mappings', [Number(37)]), ('conformance_module', [Number(37), Number(35), Number(25), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(38), Number(35)]), ('plan_module', [Number(38), Number(35), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(38), Number(35), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(38)]), ('action_preconditions', [Number(38)]), ('variable_relations', [Number(38)]), ('abstraction_mappings', [Number(38)]), ('conformance_module', [Number(38), Number(35), Number(25), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(39), Number(35)]), ('plan_module', [Number(39), Number(35), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(39), Number(35), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(39)]), ('action_preconditions', [Number(39)]), ('variable_relations', [Number(39)]), ('abstraction_mappings', [Number(39)]), ('conformance_module', [Number(39), Number(35), Number(25), Number(29), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.760684s.

[09-02-2022_19-45-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.045759s with result Satisfiable.

[09-02-2022_19-45-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.8064437000000453, Incremental time limit = None
Running cumulative time = 0.8064437000000453, Cumulative time limit = 1800
Used memory = (RSS = 896.335938Mb, VMS = 888.050781Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.760684s, Solving = 0.045759s, Total = 0.806444s, Memory = (RSS = 896.335938Mb, VMS = 888.050781Mb), Step range = [35-39]), Calls = 1
Final Model :: Total atoms = 5294, Cost = (4, 0, 0), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[09-02-2022_19-45-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     39 : Current =     40
Incrementor step ends | Minimum  =     40 : Maximum =    200

[09-02-2022_19-45-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(40)]), ('state_module', [Number(40), Number(35)]), ('plan_module', [Number(40), Number(35), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(40), Number(35), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(40)]), ('action_preconditions', [Number(40)]), ('variable_relations', [Number(40)]), ('abstraction_mappings', [Number(40)]), ('conformance_module', [Number(40), Number(35), Number(25), Number(29), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.184307s.

[09-02-2022_19-45-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007770s with result Unsatisfiable.

[09-02-2022_19-45-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1920769000000746, Incremental time limit = None
Running cumulative time = 0.9985206000001199, Cumulative time limit = 1800
Used memory = (RSS = 896.453125Mb, VMS = 888.167969Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     40 : Current =     41
Incrementor step ends | Minimum  =     40 : Maximum =    200

[09-02-2022_19-45-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(41)]), ('state_module', [Number(41), Number(35)]), ('plan_module', [Number(41), Number(35), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(41), Number(35), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(41)]), ('action_preconditions', [Number(41)]), ('variable_relations', [Number(41)]), ('abstraction_mappings', [Number(41)]), ('conformance_module', [Number(41), Number(35), Number(25), Number(29), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.199245s.

[09-02-2022_19-45-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010397s with result Unsatisfiable.

[09-02-2022_19-45-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2096425999998246, Incremental time limit = None
Running cumulative time = 1.2081631999999445, Cumulative time limit = 1800
Used memory = (RSS = 896.628906Mb, VMS = 888.347656Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     41 : Current =     42
Incrementor step ends | Minimum  =     40 : Maximum =    200

[09-02-2022_19-45-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(42)]), ('state_module', [Number(42), Number(35)]), ('plan_module', [Number(42), Number(35), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(42), Number(35), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('conformance_module', [Number(42), Number(35), Number(25), Number(29), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.209550s.

[09-02-2022_19-45-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011615s with result Unsatisfiable.

[09-02-2022_19-45-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2211650000001555, Incremental time limit = None
Running cumulative time = 1.4293282000001, Cumulative time limit = 1800
Used memory = (RSS = 900.906250Mb, VMS = 894.527344Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     42 : Current =     43
Incrementor step ends | Minimum  =     40 : Maximum =    200

[09-02-2022_19-45-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(43)]), ('state_module', [Number(43), Number(35)]), ('plan_module', [Number(43), Number(35), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(43), Number(35), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(43)]), ('action_preconditions', [Number(43)]), ('variable_relations', [Number(43)]), ('abstraction_mappings', [Number(43)]), ('conformance_module', [Number(43), Number(35), Number(25), Number(29), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.235389s.

[09-02-2022_19-45-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012401s with result Unsatisfiable.

[09-02-2022_19-45-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.24778999999989537, Incremental time limit = None
Running cumulative time = 1.6771181999999953, Cumulative time limit = 1800
Used memory = (RSS = 901.812500Mb, VMS = 894.785156Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     43 : Current =     44
Incrementor step ends | Minimum  =     40 : Maximum =    200

[09-02-2022_19-45-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(44)]), ('state_module', [Number(44), Number(35)]), ('plan_module', [Number(44), Number(35), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(44), Number(35), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(44)]), ('action_preconditions', [Number(44)]), ('variable_relations', [Number(44)]), ('abstraction_mappings', [Number(44)]), ('conformance_module', [Number(44), Number(35), Number(25), Number(29), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.222897s.

[09-02-2022_19-45-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011750s with result Unsatisfiable.

[09-02-2022_19-45-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.23464720000015404, Incremental time limit = None
Running cumulative time = 1.9117654000001494, Cumulative time limit = 1800
Used memory = (RSS = 902.718750Mb, VMS = 895.039062Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     44 : Current =     45
Incrementor step ends | Minimum  =     40 : Maximum =    200

[09-02-2022_19-45-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(45)]), ('state_module', [Number(45), Number(35)]), ('plan_module', [Number(45), Number(35), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(45), Number(35), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(45)]), ('action_preconditions', [Number(45)]), ('variable_relations', [Number(45)]), ('abstraction_mappings', [Number(45)]), ('conformance_module', [Number(45), Number(35), Number(25), Number(29), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.238775s.

[09-02-2022_19-45-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.016800s with result Unsatisfiable.

[09-02-2022_19-45-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2555747999999767, Incremental time limit = None
Running cumulative time = 2.167340200000126, Cumulative time limit = 1800
Used memory = (RSS = 903.777344Mb, VMS = 898.250000Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     45 : Current =     46
Incrementor step ends | Minimum  =     40 : Maximum =    200

[09-02-2022_19-45-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(46)]), ('state_module', [Number(46), Number(35)]), ('plan_module', [Number(46), Number(35), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(46), Number(35), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(46)]), ('action_preconditions', [Number(46)]), ('variable_relations', [Number(46)]), ('abstraction_mappings', [Number(46)]), ('conformance_module', [Number(46), Number(35), Number(25), Number(29), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.251812s.

[09-02-2022_19-45-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.015681s with result Unsatisfiable.

[09-02-2022_19-45-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2674930000000586, Incremental time limit = None
Running cumulative time = 2.4348332000001847, Cumulative time limit = 1800
Used memory = (RSS = 904.656250Mb, VMS = 898.507812Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     46 : Current =     47
Incrementor step ends | Minimum  =     40 : Maximum =    200

[09-02-2022_19-45-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(47)]), ('state_module', [Number(47), Number(35)]), ('plan_module', [Number(47), Number(35), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(47), Number(35), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(47)]), ('action_preconditions', [Number(47)]), ('variable_relations', [Number(47)]), ('abstraction_mappings', [Number(47)]), ('conformance_module', [Number(47), Number(35), Number(25), Number(29), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.243662s.

[09-02-2022_19-45-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017905s with result Unsatisfiable.

[09-02-2022_19-45-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.26156620000006114, Incremental time limit = None
Running cumulative time = 2.696399400000246, Cumulative time limit = 1800
Used memory = (RSS = 905.597656Mb, VMS = 898.769531Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =     47 : Current =     48
Incrementor step ends | Minimum  =     40 : Maximum =    200

[09-02-2022_19-45-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(48)]), ('state_module', [Number(48), Number(35)]), ('plan_module', [Number(48), Number(35), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(48), Number(35), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(48)]), ('action_preconditions', [Number(48)]), ('variable_relations', [Number(48)]), ('abstraction_mappings', [Number(48)]), ('conformance_module', [Number(48), Number(35), Number(25), Number(29), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.253531s.

[09-02-2022_19-45-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.019056s with result Unsatisfiable.

[09-02-2022_19-45-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.27258630000005724, Incremental time limit = None
Running cumulative time = 2.968985700000303, Cumulative time limit = 1800
Used memory = (RSS = 906.542969Mb, VMS = 899.019531Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     48 : Current =     49
Incrementor step ends | Minimum  =     40 : Maximum =    200

[09-02-2022_19-45-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(49)]), ('state_module', [Number(49), Number(35)]), ('plan_module', [Number(49), Number(35), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(49), Number(35), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(49)]), ('action_preconditions', [Number(49)]), ('variable_relations', [Number(49)]), ('abstraction_mappings', [Number(49)]), ('conformance_module', [Number(49), Number(35), Number(25), Number(29), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.258182s.

[09-02-2022_19-45-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.023173s with result Unsatisfiable.

[09-02-2022_19-45-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2813550999999279, Incremental time limit = None
Running cumulative time = 3.250340800000231, Cumulative time limit = 1800
Used memory = (RSS = 907.308594Mb, VMS = 899.273438Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     49 : Current =     50
Incrementor step ends | Minimum  =     40 : Maximum =    200

[09-02-2022_19-45-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(50)]), ('state_module', [Number(50), Number(35)]), ('plan_module', [Number(50), Number(35), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(50), Number(35), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(50)]), ('action_preconditions', [Number(50)]), ('variable_relations', [Number(50)]), ('abstraction_mappings', [Number(50)]), ('conformance_module', [Number(50), Number(35), Number(25), Number(29), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.257202s.

[09-02-2022_19-45-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.028352s with result Unsatisfiable.

[09-02-2022_19-45-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2855542999998306, Incremental time limit = None
Running cumulative time = 3.5358951000000616, Cumulative time limit = 1800
Used memory = (RSS = 910.886719Mb, VMS = 907.710938Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     50 : Current =     51
Incrementor step ends | Minimum  =     40 : Maximum =    200

[09-02-2022_19-45-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(51)]), ('state_module', [Number(51), Number(35)]), ('plan_module', [Number(51), Number(35), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(51), Number(35), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(51)]), ('action_preconditions', [Number(51)]), ('variable_relations', [Number(51)]), ('abstraction_mappings', [Number(51)]), ('conformance_module', [Number(51), Number(35), Number(25), Number(29), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.256249s.

[09-02-2022_19-45-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.024172s with result Unsatisfiable.

[09-02-2022_19-45-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2804207999997743, Incremental time limit = None
Running cumulative time = 3.816315899999836, Cumulative time limit = 1800
Used memory = (RSS = 912.070312Mb, VMS = 907.968750Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     51 : Current =     52
Incrementor step ends | Minimum  =     40 : Maximum =    200

[09-02-2022_19-45-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(52)]), ('state_module', [Number(52), Number(35)]), ('plan_module', [Number(52), Number(35), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(52), Number(35), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(52)]), ('action_preconditions', [Number(52)]), ('variable_relations', [Number(52)]), ('abstraction_mappings', [Number(52)]), ('conformance_module', [Number(52), Number(35), Number(25), Number(29), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.261890s.

[09-02-2022_19-45-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.044345s with result Unsatisfiable.

[09-02-2022_19-45-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3062343999999939, Incremental time limit = None
Running cumulative time = 4.12255029999983, Cumulative time limit = 1800
Used memory = (RSS = 913.949219Mb, VMS = 909.800781Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     52 : Current =     53
Incrementor step ends | Minimum  =     40 : Maximum =    200

[09-02-2022_19-45-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(53)]), ('state_module', [Number(53), Number(35)]), ('plan_module', [Number(53), Number(35), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(53), Number(35), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(53)]), ('action_preconditions', [Number(53)]), ('variable_relations', [Number(53)]), ('abstraction_mappings', [Number(53)]), ('conformance_module', [Number(53), Number(35), Number(25), Number(29), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.249493s.

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.088138s with result Satisfiable.

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3376306000002387, Incremental time limit = None
Running cumulative time = 4.4601809000000685, Cumulative time limit = 1800
Used memory = (RSS = 916.046875Mb, VMS = 911.058594Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.082867s, Solving = 0.377314s, Total = 4.460181s, Memory = (RSS = 916.046875Mb, VMS = 911.058594Mb), Step range = [35-53]), Calls = 15
Final Model :: Total atoms = 10537, Cost = (20, 0, -1), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.760684s, Solving = 0.045759s, Total = 0.806444s, Memory = (RSS = 896.335938Mb, VMS = 888.050781Mb), Step range = [35-39]
2 : Statistics :: Grounding = 0.184307s, Solving = 0.007770s, Total = 0.192077s, Memory = (RSS = 896.453125Mb, VMS = 888.167969Mb), Step range = [40-40]
3 : Statistics :: Grounding = 0.199245s, Solving = 0.010397s, Total = 0.209643s, Memory = (RSS = 896.628906Mb, VMS = 888.347656Mb), Step range = [41-41]
4 : Statistics :: Grounding = 0.209550s, Solving = 0.011615s, Total = 0.221165s, Memory = (RSS = 900.906250Mb, VMS = 894.527344Mb), Step range = [42-42]
5 : Statistics :: Grounding = 0.235389s, Solving = 0.012401s, Total = 0.247790s, Memory = (RSS = 901.812500Mb, VMS = 894.785156Mb), Step range = [43-43]
6 : Statistics :: Grounding = 0.222897s, Solving = 0.011750s, Total = 0.234647s, Memory = (RSS = 902.718750Mb, VMS = 895.039062Mb), Step range = [44-44]
7 : Statistics :: Grounding = 0.238775s, Solving = 0.016800s, Total = 0.255575s, Memory = (RSS = 903.777344Mb, VMS = 898.250000Mb), Step range = [45-45]
8 : Statistics :: Grounding = 0.251812s, Solving = 0.015681s, Total = 0.267493s, Memory = (RSS = 904.656250Mb, VMS = 898.507812Mb), Step range = [46-46]
9 : Statistics :: Grounding = 0.243662s, Solving = 0.017905s, Total = 0.261566s, Memory = (RSS = 905.597656Mb, VMS = 898.769531Mb), Step range = [47-47]
10 : Statistics :: Grounding = 0.253531s, Solving = 0.019056s, Total = 0.272586s, Memory = (RSS = 906.542969Mb, VMS = 899.019531Mb), Step range = [48-48]
11 : Statistics :: Grounding = 0.258182s, Solving = 0.023173s, Total = 0.281355s, Memory = (RSS = 907.308594Mb, VMS = 899.273438Mb), Step range = [49-49]
12 : Statistics :: Grounding = 0.257202s, Solving = 0.028352s, Total = 0.285554s, Memory = (RSS = 910.886719Mb, VMS = 907.710938Mb), Step range = [50-50]
13 : Statistics :: Grounding = 0.256249s, Solving = 0.024172s, Total = 0.280421s, Memory = (RSS = 912.070312Mb, VMS = 907.968750Mb), Step range = [51-51]
14 : Statistics :: Grounding = 0.261890s, Solving = 0.044345s, Total = 0.306234s, Memory = (RSS = 913.949219Mb, VMS = 909.800781Mb), Step range = [52-52]
15 : Statistics :: Grounding = 0.249493s, Solving = 0.088138s, Total = 0.337631s, Memory = (RSS = 916.046875Mb, VMS = 911.058594Mb), Step range = [53-53]

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 4.460181s due to: Stop condition reached.

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[09-02-2022_19-45-35] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 10, 17: 11, 18: 11, 19: 12, 20: 12, 21: 12, 22: 13, 23: 14, 24: 15, 25: 16, 26: 17, 27: 18, 28: 19, 29: 19, 30: 20, 31: 21, 32: 22, 33: 23, 34: 23, 35: 24}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 16, 11: 18, 12: 21, 13: 22, 14: 23, 15: 24, 16: 25, 17: 26, 18: 27, 19: 29, 20: 30, 21: 31, 22: 32, 23: 34, 24: 35}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_19-45-35] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 10, 17: 11, 18: 11, 19: 12, 20: 12, 21: 12, 22: 13, 23: 14, 24: 15, 25: 16, 26: 17, 27: 18, 28: 19, 29: 19, 30: 20, 31: 21, 32: 22, 33: 23, 34: 23, 35: 24, 36: 25, 37: 25, 38: 25, 39: 25, 40: 25, 41: 25, 42: 25, 43: 25, 44: 26, 45: 27, 46: 27, 47: 27, 48: 27, 49: 27, 50: 28, 51: 28, 52: 29, 53: 29}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 16, 11: 18, 12: 21, 13: 22, 14: 23, 15: 24, 16: 25, 17: 26, 18: 27, 19: 29, 20: 30, 21: 31, 22: 32, 23: 34, 24: 35, 25: 43, 26: 44, 27: 49, 28: 51, 29: 53}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_19-45-35] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 29, Last requested goal index = 29, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[09-02-2022_19-45-35] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.082867s, Solving = 0.377314s, Total = 4.460181s, Memory = (RSS = 916.046875Mb, VMS = 911.058594Mb), Step range = [35-53]), Calls = 15
Model :: Total atoms = 10537, Cost = (20, 0, -1), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[09-02-2022_19-45-35] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 18 :: Actions = 20                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 11:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 12:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 14:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
        talos : grasp(manipulator_end_2,(block,5))
Step 15:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : release(manipulator_end_2,(block,5))
Step 16:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 17:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 18:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 19:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 20:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 21:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 22:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 13] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 23:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 24:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 25:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 26:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 27:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 28:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 29:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 30:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 31:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 32:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 33:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 34:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 35:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 36:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 37:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 38:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 39:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 40:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 41:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 42:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 43:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 44:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 45:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 46:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 47:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 48:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 49:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 50:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 51:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 52:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 29] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 53:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 29] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 29] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
        talos : put(manipulator_end_2,(block,5),(block,6))

[09-02-2022_19-45-35] DEBUG :: ASH Planner Main #1 >> Monolevel problem 6 at level 1 solved.

[09-02-2022_19-45-35] DEBUG :: ASH Planner Main #1 >> Online planning increment 6 finished.

[09-02-2022_19-45-35] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 3 : Total constraining sub-goal stages = 13 : Goals achieved = 6 : Goals unachieved = 7 : Complete = False
Level = 1 : Solved problems = 6 : Total constraining sub-goal stages = 29 : Goals achieved = 29 : Goals unachieved = 0 : Complete = False

[09-02-2022_19-45-35] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 2, Highest = 2.

[09-02-2022_19-45-35] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 7 by method ground-first is [1-2].

[09-02-2022_19-45-35] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning problem 4 at level 2:
Total Templated Partial Problems = 6, Problem Range = [1-6], Size = 13, Sub-goal Stage Range = [1-13]
Division points [total=5] : [(Index = 2, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 4, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 6, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 8, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 10, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[09-02-2022_19-45-35] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [7-8]

[09-02-2022_19-45-35] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [7-8], problem number = 4, increment number = 7

[09-02-2022_19-45-35] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 7)
	('last_sgoals', 8)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001F88E5CDA60>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[09-02-2022_19-45-35] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 2] partial conformance refinement (sequential) with sgoals range [7-8] : Concurrency enabled : Minimum search length bound enabled with value 30

[09-02-2022_19-45-35] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 7
last_sgoals = 8
start_step = 29
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 30

[09-02-2022_19-45-35] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[09-02-2022_19-45-35] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[09-02-2022_19-45-35] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[09-02-2022_19-45-35] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[09-02-2022_19-45-35] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_19-45-35] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 29 as problem start state.

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 29})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 29})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 29})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 29})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 29})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'S': 29})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 29})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 29})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 29})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 29})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 29})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 29})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 29})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'S': 29})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 29})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 29})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 29})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 29})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 29})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 29})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 29})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 29})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 29})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 29})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 29})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 29})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 29})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'S': 29})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 29})

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state:

holds(2, complete_tower(blue,puzzle_room_table), false, 29).
holds(2, complete_tower(red,puzzle_room_table), false, 29).
holds(2, configuration(manipulator_arm_1), extended, 29).
holds(2, configuration(manipulator_arm_2), extended, 29).
holds(2, configuration(puzzle_room_door), open, 29).
holds(2, configuration(starting_room_door), closed, 29).
holds(2, configuration(store_room_door), open, 29).
holds(2, grasping(manipulator_arm_1), (block,3), 29).
holds(2, grasping(manipulator_arm_2), (block,5), 29).
holds(2, in((block,1)), puzzle_room, 29).
holds(2, in((block,2)), puzzle_room, 29).
holds(2, in((block,3)), puzzle_room, 29).
holds(2, in((block,4)), puzzle_room, 29).
holds(2, in((block,5)), puzzle_room, 29).
holds(2, in((block,6)), puzzle_room, 29).
holds(2, in(manipulator_arm_1), puzzle_room, 29).
holds(2, in(manipulator_arm_2), puzzle_room, 29).
holds(2, in(puzzle_room_table), puzzle_room, 29).
holds(2, in(talos), puzzle_room, 29).
holds(2, in_tower((block,1),(block,1)), true, 29).
holds(2, in_tower((block,1),(block,2)), false, 29).
holds(2, in_tower((block,1),(block,3)), true, 29).
holds(2, in_tower((block,1),(block,4)), false, 29).
holds(2, in_tower((block,1),(block,5)), false, 29).
holds(2, in_tower((block,1),(block,6)), false, 29).
holds(2, in_tower((block,2),(block,1)), false, 29).
holds(2, in_tower((block,2),(block,2)), true, 29).
holds(2, in_tower((block,2),(block,3)), false, 29).
holds(2, in_tower((block,2),(block,4)), true, 29).
holds(2, in_tower((block,2),(block,5)), false, 29).
holds(2, in_tower((block,2),(block,6)), false, 29).
holds(2, in_tower((block,3),(block,1)), false, 29).
holds(2, in_tower((block,3),(block,2)), false, 29).
holds(2, in_tower((block,3),(block,3)), false, 29).
holds(2, in_tower((block,3),(block,4)), false, 29).
holds(2, in_tower((block,3),(block,5)), false, 29).
holds(2, in_tower((block,3),(block,6)), false, 29).
holds(2, in_tower((block,4),(block,1)), false, 29).
holds(2, in_tower((block,4),(block,2)), false, 29).
holds(2, in_tower((block,4),(block,3)), false, 29).
holds(2, in_tower((block,4),(block,4)), false, 29).
holds(2, in_tower((block,4),(block,5)), false, 29).
holds(2, in_tower((block,4),(block,6)), false, 29).
holds(2, in_tower((block,5),(block,1)), false, 29).
holds(2, in_tower((block,5),(block,2)), false, 29).
holds(2, in_tower((block,5),(block,3)), false, 29).
holds(2, in_tower((block,5),(block,4)), false, 29).
holds(2, in_tower((block,5),(block,5)), false, 29).
holds(2, in_tower((block,5),(block,6)), false, 29).
holds(2, in_tower((block,6),(block,1)), false, 29).
holds(2, in_tower((block,6),(block,2)), false, 29).
holds(2, in_tower((block,6),(block,3)), false, 29).
holds(2, in_tower((block,6),(block,4)), false, 29).
holds(2, in_tower((block,6),(block,5)), true, 29).
holds(2, in_tower((block,6),(block,6)), true, 29).
holds(2, on((block,1)), puzzle_room_table, 29).
holds(2, on((block,2)), puzzle_room_table, 29).
holds(2, on((block,3)), (block,1), 29).
holds(2, on((block,4)), (block,2), 29).
holds(2, on((block,5)), (block,6), 29).
holds(2, on((block,6)), puzzle_room_table, 29).
holds(2, tower_base((block,1),puzzle_room_table), true, 29).
holds(2, tower_base((block,2),puzzle_room_table), true, 29).
holds(2, tower_base((block,3),puzzle_room_table), false, 29).
holds(2, tower_base((block,4),puzzle_room_table), false, 29).
holds(2, tower_base((block,5),puzzle_room_table), false, 29).
holds(2, tower_base((block,6),puzzle_room_table), true, 29).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 29).
holds(2, unordered_tower((block,2),puzzle_room_table), true, 29).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 29).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 29).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 29).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 29).
holds(3, complete_tower(blue,puzzle_room_table), false, 29).
holds(3, complete_tower(red,puzzle_room_table), false, 29).
holds(3, grasping(manipulator_arm_1), (block,3), 29).
holds(3, grasping(manipulator_arm_2), (block,5), 29).
holds(3, in((block,1)), puzzle_room, 29).
holds(3, in((block,2)), puzzle_room, 29).
holds(3, in((block,3)), puzzle_room, 29).
holds(3, in((block,4)), puzzle_room, 29).
holds(3, in((block,5)), puzzle_room, 29).
holds(3, in((block,6)), puzzle_room, 29).
holds(3, in(manipulator_arm_1), puzzle_room, 29).
holds(3, in(manipulator_arm_2), puzzle_room, 29).
holds(3, in(puzzle_room_table), puzzle_room, 29).
holds(3, in(talos), puzzle_room, 29).
holds(3, in_tower((block,1),(block,1)), true, 29).
holds(3, in_tower((block,1),(block,2)), false, 29).
holds(3, in_tower((block,1),(block,3)), true, 29).
holds(3, in_tower((block,1),(block,4)), false, 29).
holds(3, in_tower((block,1),(block,5)), false, 29).
holds(3, in_tower((block,1),(block,6)), false, 29).
holds(3, in_tower((block,2),(block,1)), false, 29).
holds(3, in_tower((block,2),(block,2)), true, 29).
holds(3, in_tower((block,2),(block,3)), false, 29).
holds(3, in_tower((block,2),(block,4)), true, 29).
holds(3, in_tower((block,2),(block,5)), false, 29).
holds(3, in_tower((block,2),(block,6)), false, 29).
holds(3, in_tower((block,3),(block,1)), false, 29).
holds(3, in_tower((block,3),(block,2)), false, 29).
holds(3, in_tower((block,3),(block,3)), false, 29).
holds(3, in_tower((block,3),(block,4)), false, 29).
holds(3, in_tower((block,3),(block,5)), false, 29).
holds(3, in_tower((block,3),(block,6)), false, 29).
holds(3, in_tower((block,4),(block,1)), false, 29).
holds(3, in_tower((block,4),(block,2)), false, 29).
holds(3, in_tower((block,4),(block,3)), false, 29).
holds(3, in_tower((block,4),(block,4)), false, 29).
holds(3, in_tower((block,4),(block,5)), false, 29).
holds(3, in_tower((block,4),(block,6)), false, 29).
holds(3, in_tower((block,5),(block,1)), false, 29).
holds(3, in_tower((block,5),(block,2)), false, 29).
holds(3, in_tower((block,5),(block,3)), false, 29).
holds(3, in_tower((block,5),(block,4)), false, 29).
holds(3, in_tower((block,5),(block,5)), false, 29).
holds(3, in_tower((block,5),(block,6)), false, 29).
holds(3, in_tower((block,6),(block,1)), false, 29).
holds(3, in_tower((block,6),(block,2)), false, 29).
holds(3, in_tower((block,6),(block,3)), false, 29).
holds(3, in_tower((block,6),(block,4)), false, 29).
holds(3, in_tower((block,6),(block,5)), true, 29).
holds(3, in_tower((block,6),(block,6)), true, 29).
holds(3, on((block,1)), puzzle_room_table, 29).
holds(3, on((block,2)), puzzle_room_table, 29).
holds(3, on((block,3)), (block,1), 29).
holds(3, on((block,4)), (block,2), 29).
holds(3, on((block,5)), (block,6), 29).
holds(3, on((block,6)), puzzle_room_table, 29).
holds(3, tower_base((block,1),puzzle_room_table), true, 29).
holds(3, tower_base((block,2),puzzle_room_table), true, 29).
holds(3, tower_base((block,3),puzzle_room_table), false, 29).
holds(3, tower_base((block,4),puzzle_room_table), false, 29).
holds(3, tower_base((block,5),puzzle_room_table), false, 29).
holds(3, tower_base((block,6),puzzle_room_table), true, 29).
holds(3, unordered_tower((block,1),puzzle_room_table), true, 29).
holds(3, unordered_tower((block,2),puzzle_room_table), true, 29).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 29).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 29).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 29).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 29).

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 284 rules into program part ash_goal_state:

final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).

[09-02-2022_19-45-35] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=30']

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 7})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 7})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'I': 8})

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 3 rules into program part base:

sub_goal(3, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 7).
sub_goal(3, talos, release(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), nothing, 7).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), (block,4), 8).

[09-02-2022_19-45-35] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=30']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001F8C094E280>]
	incrementor = SolveIncrementor(step_start=29, step_increase=1, step_increase_initial=2, step_end_min=31, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 29), range_=None), IncPart(name='plan_module', args=('#inc', 29, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 29, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 29, 7, 8, 'sequential', 'false'), range_=None)]

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 789 rules

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004957899999908477s

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.027394s.

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004108s with result Satisfiable.

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001F8BE9A42C0>

[09-02-2022_19-45-35] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 2)
	('start_step', 29)
	('last_sgoals', 8)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001F88E5CDA60>)
	('first_sgoals', 7)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001F8BE9A42C0>)

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 29). %* None *%
#program plan_module(#inc, 29, true, false). %* None *%
#program optimisation_module(#inc, 29, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 29, 7, 8, sequential, false). %* None *%

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     28 : Current =     30
Incrementor step ends | Minimum  =     31 : Maximum =    200

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(30)]), ('state_module', [Number(29), Number(29)]), ('plan_module', [Number(29), Number(29), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(29), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(29), Number(7), Number(8), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(30), Number(29)]), ('plan_module', [Number(30), Number(29), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(29), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('conformance_module', [Number(30), Number(29), Number(7), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.146101s.

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013260s with result Satisfiable.

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.15936119999992115, Incremental time limit = None
Running cumulative time = 0.15936119999992115, Cumulative time limit = 1800
Used memory = (RSS = 895.531250Mb, VMS = 887.589844Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.146101s, Solving = 0.013260s, Total = 0.159361s, Memory = (RSS = 895.531250Mb, VMS = 887.589844Mb), Step range = [29-30]), Calls = 1
Final Model :: Total atoms = 3612, Cost = (1, 0, -1), Optimality proven = False, Number = 3, Thread ID = 3, Model type = ModelType.StableModel

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     30 : Current =     31
Incrementor step ends | Minimum  =     31 : Maximum =    200

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(31)]), ('state_module', [Number(31), Number(29)]), ('plan_module', [Number(31), Number(29), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(31), Number(29), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('conformance_module', [Number(31), Number(29), Number(7), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.103709s.

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009595s with result Satisfiable.

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11330390000011903, Incremental time limit = None
Running cumulative time = 0.2726651000000402, Cumulative time limit = 1800
Used memory = (RSS = 895.531250Mb, VMS = 887.589844Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 6
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.249810s, Solving = 0.022855s, Total = 0.272665s, Memory = (RSS = 895.531250Mb, VMS = 887.589844Mb), Step range = [29-31]), Calls = 2
Final Model :: Total atoms = 3947, Cost = (3, 0, -1), Optimality proven = False, Number = 2, Thread ID = 3, Model type = ModelType.StableModel

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.146101s, Solving = 0.013260s, Total = 0.159361s, Memory = (RSS = 895.531250Mb, VMS = 887.589844Mb), Step range = [29-30]
2 : Statistics :: Grounding = 0.103709s, Solving = 0.009595s, Total = 0.113304s, Memory = (RSS = 895.531250Mb, VMS = 887.589844Mb), Step range = [31-31]

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.272665s due to: Stop condition reached.

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_19-45-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 10, 17: 11, 18: 11, 19: 12, 20: 12, 21: 12, 22: 13, 23: 14, 24: 15, 25: 16, 26: 17, 27: 18, 28: 19, 29: 19, 30: 20, 31: 21, 32: 22, 33: 23, 34: 23, 35: 24, 36: 25, 37: 25, 38: 25, 39: 25, 40: 25, 41: 25, 42: 25, 43: 25, 44: 26, 45: 27, 46: 27, 47: 27, 48: 27, 49: 27, 50: 28, 51: 28, 52: 29, 53: 29}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 16, 11: 18, 12: 21, 13: 22, 14: 23, 15: 24, 16: 25, 17: 26, 18: 27, 19: 29, 20: 30, 21: 31, 22: 32, 23: 34, 24: 35, 25: 43, 26: 44, 27: 49, 28: 51, 29: 53}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 10, 17: 11, 18: 11, 19: 12, 20: 12, 21: 12, 22: 13, 23: 14, 24: 15, 25: 16, 26: 17, 27: 18, 28: 19, 29: 19, 30: 20, 31: 21, 32: 22, 33: 23, 34: 23, 35: 24, 36: 25, 37: 25, 38: 25, 39: 25, 40: 25, 41: 25, 42: 25, 43: 25, 44: 26, 45: 27, 46: 27, 47: 27, 48: 27, 49: 27, 50: 28, 51: 28, 52: 29, 53: 29}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 16, 11: 18, 12: 21, 13: 22, 14: 23, 15: 24, 16: 25, 17: 26, 18: 27, 19: 29, 20: 30, 21: 31, 22: 32, 23: 34, 24: 35, 25: 43, 26: 44, 27: 49, 28: 51, 29: 53}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 8, Last requested goal index = 8, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.249810s, Solving = 0.022855s, Total = 0.272665s, Memory = (RSS = 895.531250Mb, VMS = 887.589844Mb), Step range = [29-31]), Calls = 2
Model :: Total atoms = 3947, Cost = (3, 0, -1), Optimality proven = False, Number = 2, Thread ID = 3, Model type = ModelType.StableModel

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                  Steps = 2 :: Actions = 3                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,store_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,store_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,store_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 8:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 9:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
        talos : grasp(manipulator_arm_2,(block,5))
Step 10:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
        talos : configure(manipulator_arm_2,retracted)
Step 11:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 12:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,(block,5))
Step 14:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_2,puzzle_room_door)
Step 16:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 19:
    Current Sub-goals:
        [Index = 4] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 20:
    Current Sub-goals:
        [Index = 4] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 4] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 21:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,6))
Step 22:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 23:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 24:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 25:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,5))
Step 26:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 27:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : move(puzzle_room)
Step 28:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 29:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
        talos : put(manipulator_arm_2,(block,5),(block,6))
Step 30:
    Current Sub-goals:
        [Index = 7] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 7] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 7] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 7] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
        talos : release(manipulator_arm_2,(block,5))
Step 31:
    Current Sub-goals:
        [Index = 8] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 8] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,4))

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=29, total_plan_length=31, step_range=range(29, 32)

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 13, Total actions = 19, Produced sub-goal stages = 19
Level [2]: Length = 31, Total actions = 37, Produced sub-goal stages = 37
Level [1]: Length = 53, Total actions = 59, Produced sub-goal stages = 0

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 2 (par-ref), LE =   2, AC =   3, CF = 0.7, GT =   3.57s, ST =   0.28s, OT = 0.00s, TT =   3.86s, EF = (LE = 1.0, AC = 1.0), ED = (LE = 0.0, AC = 0.0), EB = (LE = 0.0, AC = 0.0)

[09-02-2022_19-45-36] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=2, start_step=29, blend=Blend(left=0, right=0)

[09-02-2022_19-45-36] DEBUG :: core.Strategies >> Decided: number_small_problems=2, number_large_problems=0, small_group_size=1, large_group_size=2

[09-02-2022_19-45-36] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=30, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 2, Problem Range = [7-8], Size = 2, Sub-goal Stage Range = [30-31]
Division points [total=1] : [(Index = 30, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Monolevel problem 4 at level 2 solved.

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 7 at level 1:
Total Templated Partial Problems = 2, Problem Range = [7-8], Size = 2, Sub-goal Stage Range = [30-31]
Division points [total=1] : [(Index = 30, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [30-30]

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [30-30], problem number = 7, increment number = 7

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 30)
	('last_sgoals', 30)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001F88E5CDA60>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [30-30] : Concurrency enabled : Minimum search length bound disabled with value 53

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 30
last_sgoals = 30
start_step = 53
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 53

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[09-02-2022_19-45-36] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[09-02-2022_19-45-36] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 53 as problem start state.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,3))', 'S': 53})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 53})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 53})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 53})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 53})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 53})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 53})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'S': 53})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 53})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,3)', 'S': 53})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 53})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 53})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 53})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 53})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,1)', 'S': 53})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 53})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 53})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 53})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 53})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 53})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 53})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 53})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 53})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 53})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 53})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 53})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 53})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 53})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 53})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 53})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 53})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 53})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 53})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 53})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 53})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 53})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 53})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'S': 53})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 53})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 53})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 53})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 53})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 53})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'S': 53})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 53})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 53})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 53})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 53})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 53})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 53})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 53})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 53})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 53})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 53})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 53})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 53})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 53})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 53})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 53})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 53})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 53})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 53})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 53})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 53})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 53})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'S': 53})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 53})

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 53).
holds(1, complete_tower(red,puzzle_room_table), false, 53).
holds(1, configuration(manipulator_end_1), aligned_with((block,3)), 53).
holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 53).
holds(1, configuration(manipulator_limb_1), extended, 53).
holds(1, configuration(manipulator_limb_2), extended, 53).
holds(1, configuration(puzzle_room_door), open, 53).
holds(1, configuration(starting_room_door), closed, 53).
holds(1, configuration(store_room_door), open, 53).
holds(1, grasping(manipulator_arm_1), (block,3), 53).
holds(1, grasping(manipulator_arm_2), (block,5), 53).
holds(1, grasping(manipulator_end_1), (block,3), 53).
holds(1, grasping(manipulator_end_2), (block,5), 53).
holds(1, in((block,1)), (puzzle_room,1), 53).
holds(1, in((block,2)), (puzzle_room,1), 53).
holds(1, in((block,3)), (puzzle_room,1), 53).
holds(1, in((block,4)), (puzzle_room,1), 53).
holds(1, in((block,5)), (puzzle_room,1), 53).
holds(1, in((block,6)), (puzzle_room,1), 53).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 53).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 53).
holds(1, in(manipulator_end_1), (puzzle_room,1), 53).
holds(1, in(manipulator_end_2), (puzzle_room,1), 53).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 53).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 53).
holds(1, in(puzzle_room_table), (puzzle_room,1), 53).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 53).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 53).
holds(1, in(talos), (puzzle_room,1), 53).
holds(1, in_tower((block,1),(block,1)), true, 53).
holds(1, in_tower((block,1),(block,2)), false, 53).
holds(1, in_tower((block,1),(block,3)), true, 53).
holds(1, in_tower((block,1),(block,4)), false, 53).
holds(1, in_tower((block,1),(block,5)), false, 53).
holds(1, in_tower((block,1),(block,6)), false, 53).
holds(1, in_tower((block,2),(block,1)), false, 53).
holds(1, in_tower((block,2),(block,2)), true, 53).
holds(1, in_tower((block,2),(block,3)), false, 53).
holds(1, in_tower((block,2),(block,4)), true, 53).
holds(1, in_tower((block,2),(block,5)), false, 53).
holds(1, in_tower((block,2),(block,6)), false, 53).
holds(1, in_tower((block,3),(block,1)), false, 53).
holds(1, in_tower((block,3),(block,2)), false, 53).
holds(1, in_tower((block,3),(block,3)), false, 53).
holds(1, in_tower((block,3),(block,4)), false, 53).
holds(1, in_tower((block,3),(block,5)), false, 53).
holds(1, in_tower((block,3),(block,6)), false, 53).
holds(1, in_tower((block,4),(block,1)), false, 53).
holds(1, in_tower((block,4),(block,2)), false, 53).
holds(1, in_tower((block,4),(block,3)), false, 53).
holds(1, in_tower((block,4),(block,4)), false, 53).
holds(1, in_tower((block,4),(block,5)), false, 53).
holds(1, in_tower((block,4),(block,6)), false, 53).
holds(1, in_tower((block,5),(block,1)), false, 53).
holds(1, in_tower((block,5),(block,2)), false, 53).
holds(1, in_tower((block,5),(block,3)), false, 53).
holds(1, in_tower((block,5),(block,4)), false, 53).
holds(1, in_tower((block,5),(block,5)), false, 53).
holds(1, in_tower((block,5),(block,6)), false, 53).
holds(1, in_tower((block,6),(block,1)), false, 53).
holds(1, in_tower((block,6),(block,2)), false, 53).
holds(1, in_tower((block,6),(block,3)), false, 53).
holds(1, in_tower((block,6),(block,4)), false, 53).
holds(1, in_tower((block,6),(block,5)), true, 53).
holds(1, in_tower((block,6),(block,6)), true, 53).
holds(1, on((block,1)), puzzle_room_table_left, 53).
holds(1, on((block,2)), puzzle_room_table_right, 53).
holds(1, on((block,3)), (block,1), 53).
holds(1, on((block,4)), (block,2), 53).
holds(1, on((block,5)), (block,6), 53).
holds(1, on((block,6)), puzzle_room_table_right, 53).
holds(1, tower_base((block,1),puzzle_room_table), true, 53).
holds(1, tower_base((block,2),puzzle_room_table), true, 53).
holds(1, tower_base((block,3),puzzle_room_table), false, 53).
holds(1, tower_base((block,4),puzzle_room_table), false, 53).
holds(1, tower_base((block,5),puzzle_room_table), false, 53).
holds(1, tower_base((block,6),puzzle_room_table), true, 53).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 53).
holds(1, unordered_tower((block,2),puzzle_room_table), true, 53).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 53).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 53).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 53).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 53).
holds(2, complete_tower(blue,puzzle_room_table), false, 53).
holds(2, complete_tower(red,puzzle_room_table), false, 53).
holds(2, configuration(manipulator_arm_1), extended, 53).
holds(2, configuration(manipulator_arm_2), extended, 53).
holds(2, configuration(puzzle_room_door), open, 53).
holds(2, configuration(starting_room_door), closed, 53).
holds(2, configuration(store_room_door), open, 53).
holds(2, grasping(manipulator_arm_1), (block,3), 53).
holds(2, grasping(manipulator_arm_2), (block,5), 53).
holds(2, in((block,1)), puzzle_room, 53).
holds(2, in((block,2)), puzzle_room, 53).
holds(2, in((block,3)), puzzle_room, 53).
holds(2, in((block,4)), puzzle_room, 53).
holds(2, in((block,5)), puzzle_room, 53).
holds(2, in((block,6)), puzzle_room, 53).
holds(2, in(manipulator_arm_1), puzzle_room, 53).
holds(2, in(manipulator_arm_2), puzzle_room, 53).
holds(2, in(puzzle_room_table), puzzle_room, 53).
holds(2, in(talos), puzzle_room, 53).
holds(2, in_tower((block,1),(block,1)), true, 53).
holds(2, in_tower((block,1),(block,2)), false, 53).
holds(2, in_tower((block,1),(block,3)), true, 53).
holds(2, in_tower((block,1),(block,4)), false, 53).
holds(2, in_tower((block,1),(block,5)), false, 53).
holds(2, in_tower((block,1),(block,6)), false, 53).
holds(2, in_tower((block,2),(block,1)), false, 53).
holds(2, in_tower((block,2),(block,2)), true, 53).
holds(2, in_tower((block,2),(block,3)), false, 53).
holds(2, in_tower((block,2),(block,4)), true, 53).
holds(2, in_tower((block,2),(block,5)), false, 53).
holds(2, in_tower((block,2),(block,6)), false, 53).
holds(2, in_tower((block,3),(block,1)), false, 53).
holds(2, in_tower((block,3),(block,2)), false, 53).
holds(2, in_tower((block,3),(block,3)), false, 53).
holds(2, in_tower((block,3),(block,4)), false, 53).
holds(2, in_tower((block,3),(block,5)), false, 53).
holds(2, in_tower((block,3),(block,6)), false, 53).
holds(2, in_tower((block,4),(block,1)), false, 53).
holds(2, in_tower((block,4),(block,2)), false, 53).
holds(2, in_tower((block,4),(block,3)), false, 53).
holds(2, in_tower((block,4),(block,4)), false, 53).
holds(2, in_tower((block,4),(block,5)), false, 53).
holds(2, in_tower((block,4),(block,6)), false, 53).
holds(2, in_tower((block,5),(block,1)), false, 53).
holds(2, in_tower((block,5),(block,2)), false, 53).
holds(2, in_tower((block,5),(block,3)), false, 53).
holds(2, in_tower((block,5),(block,4)), false, 53).
holds(2, in_tower((block,5),(block,5)), false, 53).
holds(2, in_tower((block,5),(block,6)), false, 53).
holds(2, in_tower((block,6),(block,1)), false, 53).
holds(2, in_tower((block,6),(block,2)), false, 53).
holds(2, in_tower((block,6),(block,3)), false, 53).
holds(2, in_tower((block,6),(block,4)), false, 53).
holds(2, in_tower((block,6),(block,5)), true, 53).
holds(2, in_tower((block,6),(block,6)), true, 53).
holds(2, on((block,1)), puzzle_room_table, 53).
holds(2, on((block,2)), puzzle_room_table, 53).
holds(2, on((block,3)), (block,1), 53).
holds(2, on((block,4)), (block,2), 53).
holds(2, on((block,5)), (block,6), 53).
holds(2, on((block,6)), puzzle_room_table, 53).
holds(2, tower_base((block,1),puzzle_room_table), true, 53).
holds(2, tower_base((block,2),puzzle_room_table), true, 53).
holds(2, tower_base((block,3),puzzle_room_table), false, 53).
holds(2, tower_base((block,4),puzzle_room_table), false, 53).
holds(2, tower_base((block,5),puzzle_room_table), false, 53).
holds(2, tower_base((block,6),puzzle_room_table), true, 53).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 53).
holds(2, unordered_tower((block,2),puzzle_room_table), true, 53).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 53).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 53).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 53).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 53).

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 30})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 30})

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 2 rules into program part base:

sub_goal(2, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 30).
sub_goal(2, talos, release(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), nothing, 30).

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001F8C094E700>]
	incrementor = SolveIncrementor(step_start=53, step_increase=1, step_increase_initial=2, step_end_min=54, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 53), range_=None), IncPart(name='plan_module', args=('#inc', 53, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 53, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 53, 30, 30, 'sequential', 'false'), range_=None)]

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 809 rules

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.005113799999890034s

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.033066s.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005387s with result Satisfiable.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001F8C07B9680>

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 53)
	('last_sgoals', 30)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001F88E5CDA60>)
	('first_sgoals', 30)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001F8C07B9680>)

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 53). %* None *%
#program plan_module(#inc, 53, true, false). %* None *%
#program optimisation_module(#inc, 53, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 53, 30, 30, sequential, false). %* None *%

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     52 : Current =     54
Incrementor step ends | Minimum  =     54 : Maximum =    200

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(54)]), ('state_module', [Number(53), Number(53)]), ('plan_module', [Number(53), Number(53), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(53), Number(53), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(53)]), ('action_preconditions', [Number(53)]), ('variable_relations', [Number(53)]), ('abstraction_mappings', [Number(53)]), ('conformance_module', [Number(53), Number(53), Number(30), Number(30), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(54), Number(53)]), ('plan_module', [Number(54), Number(53), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(54), Number(53), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(54)]), ('action_preconditions', [Number(54)]), ('variable_relations', [Number(54)]), ('abstraction_mappings', [Number(54)]), ('conformance_module', [Number(54), Number(53), Number(30), Number(30), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.255179s.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013389s with result Satisfiable.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.26856819999989057, Incremental time limit = None
Running cumulative time = 0.26856819999989057, Cumulative time limit = 1800
Used memory = (RSS = 895.531250Mb, VMS = 887.589844Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.255179s, Solving = 0.013389s, Total = 0.268568s, Memory = (RSS = 895.531250Mb, VMS = 887.589844Mb), Step range = [53-54]), Calls = 1
Final Model :: Total atoms = 4153, Cost = (2, 0, -1), Optimality proven = False, Number = 2, Thread ID = 2, Model type = ModelType.StableModel

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.255179s, Solving = 0.013389s, Total = 0.268568s, Memory = (RSS = 895.531250Mb, VMS = 887.589844Mb), Step range = [53-54]

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.268568s due to: Stop condition reached.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 10, 17: 11, 18: 11, 19: 12, 20: 12, 21: 12, 22: 13, 23: 14, 24: 15, 25: 16, 26: 17, 27: 18, 28: 19, 29: 19, 30: 20, 31: 21, 32: 22, 33: 23, 34: 23, 35: 24, 36: 25, 37: 25, 38: 25, 39: 25, 40: 25, 41: 25, 42: 25, 43: 25, 44: 26, 45: 27, 46: 27, 47: 27, 48: 27, 49: 27, 50: 28, 51: 28, 52: 29, 53: 29}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 16, 11: 18, 12: 21, 13: 22, 14: 23, 15: 24, 16: 25, 17: 26, 18: 27, 19: 29, 20: 30, 21: 31, 22: 32, 23: 34, 24: 35, 25: 43, 26: 44, 27: 49, 28: 51, 29: 53}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 10, 17: 11, 18: 11, 19: 12, 20: 12, 21: 12, 22: 13, 23: 14, 24: 15, 25: 16, 26: 17, 27: 18, 28: 19, 29: 19, 30: 20, 31: 21, 32: 22, 33: 23, 34: 23, 35: 24, 36: 25, 37: 25, 38: 25, 39: 25, 40: 25, 41: 25, 42: 25, 43: 25, 44: 26, 45: 27, 46: 27, 47: 27, 48: 27, 49: 27, 50: 28, 51: 28, 52: 29, 53: 29, 54: 30}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 16, 11: 18, 12: 21, 13: 22, 14: 23, 15: 24, 16: 25, 17: 26, 18: 27, 19: 29, 20: 30, 21: 31, 22: 32, 23: 34, 24: 35, 25: 43, 26: 44, 27: 49, 28: 51, 29: 53, 30: 54}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 30, Last requested goal index = 30, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.255179s, Solving = 0.013389s, Total = 0.268568s, Memory = (RSS = 895.531250Mb, VMS = 887.589844Mb), Step range = [53-54]), Calls = 1
Model :: Total atoms = 4153, Cost = (2, 0, -1), Optimality proven = False, Number = 2, Thread ID = 2, Model type = ModelType.StableModel

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 2                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 11:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 12:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 14:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
        talos : grasp(manipulator_end_2,(block,5))
Step 15:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : release(manipulator_end_2,(block,5))
Step 16:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 17:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 18:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 19:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 20:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 21:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 22:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 13] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 23:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 24:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 25:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 26:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 27:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 28:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 29:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 30:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 31:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 32:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 33:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 34:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 35:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 36:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 37:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 38:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 39:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 40:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 41:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 42:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 43:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 44:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 45:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 46:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 47:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 48:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 49:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 50:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 51:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 52:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 29] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 53:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 29] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 29] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 54:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
        talos : release(manipulator_end_2,(block,5))

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Monolevel problem 7 at level 1 solved.

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Online planning increment 7 finished.

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 4 : Total constraining sub-goal stages = 13 : Goals achieved = 8 : Goals unachieved = 5 : Complete = False
Level = 1 : Solved problems = 7 : Total constraining sub-goal stages = 31 : Goals achieved = 30 : Goals unachieved = 1 : Complete = False

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 2.

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 8 by method ground-first is [1-1].

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 8 at level 1:
Total Templated Partial Problems = 2, Problem Range = [7-8], Size = 2, Sub-goal Stage Range = [30-31]
Division points [total=1] : [(Index = 30, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [31-31]

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [31-31], problem number = 8, increment number = 8

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 31)
	('last_sgoals', 31)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001F88E5CDA60>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [31-31] : Concurrency enabled : Minimum search length bound disabled with value 54

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 31
last_sgoals = 31
start_step = 54
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 54

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[09-02-2022_19-45-36] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[09-02-2022_19-45-36] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 54 as problem start state.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,3))', 'S': 54})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 54})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 54})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 54})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 54})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 54})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 54})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'S': 54})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 54})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,3)', 'S': 54})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 54})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 54})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 54})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 54})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,1)', 'S': 54})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 54})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 54})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 54})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 54})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 54})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 54})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 54})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 54})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 54})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 54})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 54})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 54})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 54})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 54})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 54})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 54})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 54})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 54})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 54})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 54})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 54})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 54})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'S': 54})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 54})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 54})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 54})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 54})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 54})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'S': 54})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 54})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 54})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 54})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 54})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 54})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 54})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 54})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 54})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 54})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 54})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 54})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 54})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 54})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 54})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 54})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 54})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 54})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 54})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 54})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 54})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 54})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'S': 54})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 54})

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 54).
holds(1, complete_tower(red,puzzle_room_table), false, 54).
holds(1, configuration(manipulator_end_1), aligned_with((block,3)), 54).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 54).
holds(1, configuration(manipulator_limb_1), extended, 54).
holds(1, configuration(manipulator_limb_2), extended, 54).
holds(1, configuration(puzzle_room_door), open, 54).
holds(1, configuration(starting_room_door), closed, 54).
holds(1, configuration(store_room_door), open, 54).
holds(1, grasping(manipulator_arm_1), (block,3), 54).
holds(1, grasping(manipulator_arm_2), nothing, 54).
holds(1, grasping(manipulator_end_1), (block,3), 54).
holds(1, grasping(manipulator_end_2), nothing, 54).
holds(1, in((block,1)), (puzzle_room,1), 54).
holds(1, in((block,2)), (puzzle_room,1), 54).
holds(1, in((block,3)), (puzzle_room,1), 54).
holds(1, in((block,4)), (puzzle_room,1), 54).
holds(1, in((block,5)), (puzzle_room,1), 54).
holds(1, in((block,6)), (puzzle_room,1), 54).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 54).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 54).
holds(1, in(manipulator_end_1), (puzzle_room,1), 54).
holds(1, in(manipulator_end_2), (puzzle_room,1), 54).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 54).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 54).
holds(1, in(puzzle_room_table), (puzzle_room,1), 54).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 54).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 54).
holds(1, in(talos), (puzzle_room,1), 54).
holds(1, in_tower((block,1),(block,1)), true, 54).
holds(1, in_tower((block,1),(block,2)), false, 54).
holds(1, in_tower((block,1),(block,3)), false, 54).
holds(1, in_tower((block,1),(block,4)), false, 54).
holds(1, in_tower((block,1),(block,5)), false, 54).
holds(1, in_tower((block,1),(block,6)), false, 54).
holds(1, in_tower((block,2),(block,1)), false, 54).
holds(1, in_tower((block,2),(block,2)), true, 54).
holds(1, in_tower((block,2),(block,3)), false, 54).
holds(1, in_tower((block,2),(block,4)), true, 54).
holds(1, in_tower((block,2),(block,5)), false, 54).
holds(1, in_tower((block,2),(block,6)), false, 54).
holds(1, in_tower((block,3),(block,1)), false, 54).
holds(1, in_tower((block,3),(block,2)), false, 54).
holds(1, in_tower((block,3),(block,3)), true, 54).
holds(1, in_tower((block,3),(block,4)), false, 54).
holds(1, in_tower((block,3),(block,5)), false, 54).
holds(1, in_tower((block,3),(block,6)), false, 54).
holds(1, in_tower((block,4),(block,1)), false, 54).
holds(1, in_tower((block,4),(block,2)), false, 54).
holds(1, in_tower((block,4),(block,3)), false, 54).
holds(1, in_tower((block,4),(block,4)), false, 54).
holds(1, in_tower((block,4),(block,5)), false, 54).
holds(1, in_tower((block,4),(block,6)), false, 54).
holds(1, in_tower((block,5),(block,1)), false, 54).
holds(1, in_tower((block,5),(block,2)), false, 54).
holds(1, in_tower((block,5),(block,3)), false, 54).
holds(1, in_tower((block,5),(block,4)), false, 54).
holds(1, in_tower((block,5),(block,5)), false, 54).
holds(1, in_tower((block,5),(block,6)), false, 54).
holds(1, in_tower((block,6),(block,1)), false, 54).
holds(1, in_tower((block,6),(block,2)), false, 54).
holds(1, in_tower((block,6),(block,3)), false, 54).
holds(1, in_tower((block,6),(block,4)), false, 54).
holds(1, in_tower((block,6),(block,5)), true, 54).
holds(1, in_tower((block,6),(block,6)), true, 54).
holds(1, on((block,1)), puzzle_room_table_left, 54).
holds(1, on((block,2)), puzzle_room_table_right, 54).
holds(1, on((block,3)), puzzle_room_table_left, 54).
holds(1, on((block,4)), (block,2), 54).
holds(1, on((block,5)), (block,6), 54).
holds(1, on((block,6)), puzzle_room_table_right, 54).
holds(1, tower_base((block,1),puzzle_room_table), true, 54).
holds(1, tower_base((block,2),puzzle_room_table), true, 54).
holds(1, tower_base((block,3),puzzle_room_table), true, 54).
holds(1, tower_base((block,4),puzzle_room_table), false, 54).
holds(1, tower_base((block,5),puzzle_room_table), false, 54).
holds(1, tower_base((block,6),puzzle_room_table), true, 54).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 54).
holds(1, unordered_tower((block,2),puzzle_room_table), true, 54).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 54).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 54).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 54).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 54).
holds(2, complete_tower(blue,puzzle_room_table), false, 54).
holds(2, complete_tower(red,puzzle_room_table), false, 54).
holds(2, configuration(manipulator_arm_1), extended, 54).
holds(2, configuration(manipulator_arm_2), extended, 54).
holds(2, configuration(puzzle_room_door), open, 54).
holds(2, configuration(starting_room_door), closed, 54).
holds(2, configuration(store_room_door), open, 54).
holds(2, grasping(manipulator_arm_1), (block,3), 54).
holds(2, grasping(manipulator_arm_2), nothing, 54).
holds(2, in((block,1)), puzzle_room, 54).
holds(2, in((block,2)), puzzle_room, 54).
holds(2, in((block,3)), puzzle_room, 54).
holds(2, in((block,4)), puzzle_room, 54).
holds(2, in((block,5)), puzzle_room, 54).
holds(2, in((block,6)), puzzle_room, 54).
holds(2, in(manipulator_arm_1), puzzle_room, 54).
holds(2, in(manipulator_arm_2), puzzle_room, 54).
holds(2, in(puzzle_room_table), puzzle_room, 54).
holds(2, in(talos), puzzle_room, 54).
holds(2, in_tower((block,1),(block,1)), true, 54).
holds(2, in_tower((block,1),(block,2)), false, 54).
holds(2, in_tower((block,1),(block,3)), false, 54).
holds(2, in_tower((block,1),(block,4)), false, 54).
holds(2, in_tower((block,1),(block,5)), false, 54).
holds(2, in_tower((block,1),(block,6)), false, 54).
holds(2, in_tower((block,2),(block,1)), false, 54).
holds(2, in_tower((block,2),(block,2)), true, 54).
holds(2, in_tower((block,2),(block,3)), false, 54).
holds(2, in_tower((block,2),(block,4)), true, 54).
holds(2, in_tower((block,2),(block,5)), false, 54).
holds(2, in_tower((block,2),(block,6)), false, 54).
holds(2, in_tower((block,3),(block,1)), false, 54).
holds(2, in_tower((block,3),(block,2)), false, 54).
holds(2, in_tower((block,3),(block,3)), true, 54).
holds(2, in_tower((block,3),(block,4)), false, 54).
holds(2, in_tower((block,3),(block,5)), false, 54).
holds(2, in_tower((block,3),(block,6)), false, 54).
holds(2, in_tower((block,4),(block,1)), false, 54).
holds(2, in_tower((block,4),(block,2)), false, 54).
holds(2, in_tower((block,4),(block,3)), false, 54).
holds(2, in_tower((block,4),(block,4)), false, 54).
holds(2, in_tower((block,4),(block,5)), false, 54).
holds(2, in_tower((block,4),(block,6)), false, 54).
holds(2, in_tower((block,5),(block,1)), false, 54).
holds(2, in_tower((block,5),(block,2)), false, 54).
holds(2, in_tower((block,5),(block,3)), false, 54).
holds(2, in_tower((block,5),(block,4)), false, 54).
holds(2, in_tower((block,5),(block,5)), false, 54).
holds(2, in_tower((block,5),(block,6)), false, 54).
holds(2, in_tower((block,6),(block,1)), false, 54).
holds(2, in_tower((block,6),(block,2)), false, 54).
holds(2, in_tower((block,6),(block,3)), false, 54).
holds(2, in_tower((block,6),(block,4)), false, 54).
holds(2, in_tower((block,6),(block,5)), true, 54).
holds(2, in_tower((block,6),(block,6)), true, 54).
holds(2, on((block,1)), puzzle_room_table, 54).
holds(2, on((block,2)), puzzle_room_table, 54).
holds(2, on((block,3)), puzzle_room_table, 54).
holds(2, on((block,4)), (block,2), 54).
holds(2, on((block,5)), (block,6), 54).
holds(2, on((block,6)), puzzle_room_table, 54).
holds(2, tower_base((block,1),puzzle_room_table), true, 54).
holds(2, tower_base((block,2),puzzle_room_table), true, 54).
holds(2, tower_base((block,3),puzzle_room_table), true, 54).
holds(2, tower_base((block,4),puzzle_room_table), false, 54).
holds(2, tower_base((block,5),puzzle_room_table), false, 54).
holds(2, tower_base((block,6),puzzle_room_table), true, 54).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 54).
holds(2, unordered_tower((block,2),puzzle_room_table), true, 54).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 54).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 54).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 54).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 54).

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'I': 31})

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part base:

sub_goal(2, talos, grasp(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), (block,4), 31).

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001F8C094EAF0>]
	incrementor = SolveIncrementor(step_start=54, step_increase=1, step_increase_initial=2, step_end_min=55, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 54), range_=None), IncPart(name='plan_module', args=('#inc', 54, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 54, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 54, 31, 31, 'sequential', 'false'), range_=None)]

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 808 rules

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.00458159999993768s

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.031547s.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004817s with result Satisfiable.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001F8C114BC70>

[09-02-2022_19-45-36] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 54)
	('last_sgoals', 31)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001F88E5CDA60>)
	('first_sgoals', 31)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001F8C114BC70>)

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 54). %* None *%
#program plan_module(#inc, 54, true, false). %* None *%
#program optimisation_module(#inc, 54, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 54, 31, 31, sequential, false). %* None *%

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     53 : Current =     55
Incrementor step ends | Minimum  =     55 : Maximum =    200

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(55)]), ('state_module', [Number(54), Number(54)]), ('plan_module', [Number(54), Number(54), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(54), Number(54), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(54)]), ('action_preconditions', [Number(54)]), ('variable_relations', [Number(54)]), ('abstraction_mappings', [Number(54)]), ('conformance_module', [Number(54), Number(54), Number(31), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(55), Number(54)]), ('plan_module', [Number(55), Number(54), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(55), Number(54), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(55)]), ('action_preconditions', [Number(55)]), ('variable_relations', [Number(55)]), ('abstraction_mappings', [Number(55)]), ('conformance_module', [Number(55), Number(54), Number(31), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.269068s.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008160s with result Unsatisfiable.

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2772279000000708, Incremental time limit = None
Running cumulative time = 0.2772279000000708, Cumulative time limit = 1800
Used memory = (RSS = 895.531250Mb, VMS = 887.589844Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     55 : Current =     56
Incrementor step ends | Minimum  =     55 : Maximum =    200

[09-02-2022_19-45-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(56)]), ('state_module', [Number(56), Number(54)]), ('plan_module', [Number(56), Number(54), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(56), Number(54), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(56)]), ('action_preconditions', [Number(56)]), ('variable_relations', [Number(56)]), ('abstraction_mappings', [Number(56)]), ('conformance_module', [Number(56), Number(54), Number(31), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.139908s.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008456s with result Satisfiable.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.14836420000006, Incremental time limit = None
Running cumulative time = 0.4255921000001308, Cumulative time limit = 1800
Used memory = (RSS = 895.531250Mb, VMS = 887.589844Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.408976s, Solving = 0.016616s, Total = 0.425592s, Memory = (RSS = 895.531250Mb, VMS = 887.589844Mb), Step range = [54-56]), Calls = 2
Final Model :: Total atoms = 4519, Cost = (2, 0, 0), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.269068s, Solving = 0.008160s, Total = 0.277228s, Memory = (RSS = 895.531250Mb, VMS = 887.589844Mb), Step range = [54-55]
2 : Statistics :: Grounding = 0.139908s, Solving = 0.008456s, Total = 0.148364s, Memory = (RSS = 895.531250Mb, VMS = 887.589844Mb), Step range = [56-56]

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.425592s due to: Stop condition reached.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 10, 17: 11, 18: 11, 19: 12, 20: 12, 21: 12, 22: 13, 23: 14, 24: 15, 25: 16, 26: 17, 27: 18, 28: 19, 29: 19, 30: 20, 31: 21, 32: 22, 33: 23, 34: 23, 35: 24, 36: 25, 37: 25, 38: 25, 39: 25, 40: 25, 41: 25, 42: 25, 43: 25, 44: 26, 45: 27, 46: 27, 47: 27, 48: 27, 49: 27, 50: 28, 51: 28, 52: 29, 53: 29, 54: 30}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 16, 11: 18, 12: 21, 13: 22, 14: 23, 15: 24, 16: 25, 17: 26, 18: 27, 19: 29, 20: 30, 21: 31, 22: 32, 23: 34, 24: 35, 25: 43, 26: 44, 27: 49, 28: 51, 29: 53, 30: 54}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 10, 17: 11, 18: 11, 19: 12, 20: 12, 21: 12, 22: 13, 23: 14, 24: 15, 25: 16, 26: 17, 27: 18, 28: 19, 29: 19, 30: 20, 31: 21, 32: 22, 33: 23, 34: 23, 35: 24, 36: 25, 37: 25, 38: 25, 39: 25, 40: 25, 41: 25, 42: 25, 43: 25, 44: 26, 45: 27, 46: 27, 47: 27, 48: 27, 49: 27, 50: 28, 51: 28, 52: 29, 53: 29, 54: 30, 55: 31, 56: 31}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 16, 11: 18, 12: 21, 13: 22, 14: 23, 15: 24, 16: 25, 17: 26, 18: 27, 19: 29, 20: 30, 21: 31, 22: 32, 23: 34, 24: 35, 25: 43, 26: 44, 27: 49, 28: 51, 29: 53, 30: 54, 31: 56}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 31, Last requested goal index = 31, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.408976s, Solving = 0.016616s, Total = 0.425592s, Memory = (RSS = 895.531250Mb, VMS = 887.589844Mb), Step range = [54-56]), Calls = 2
Model :: Total atoms = 4519, Cost = (2, 0, 0), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 2 :: Actions = 2                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 11:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 12:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 14:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
        talos : grasp(manipulator_end_2,(block,5))
Step 15:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : release(manipulator_end_2,(block,5))
Step 16:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 17:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 18:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 19:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 20:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 21:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 22:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 13] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 23:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 24:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 25:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 26:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 27:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 28:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 29:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 30:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 31:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 32:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 33:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 34:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 35:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 36:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 37:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 38:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 39:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 40:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 41:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 42:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 43:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 44:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 45:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 46:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 47:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 48:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 49:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 50:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 51:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 52:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 29] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 53:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 29] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 29] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 54:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
        talos : release(manipulator_end_2,(block,5))
Step 55:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 56:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Monolevel problem 8 at level 1 solved.

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Online planning increment 8 finished.

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 4 : Total constraining sub-goal stages = 13 : Goals achieved = 8 : Goals unachieved = 5 : Complete = False
Level = 1 : Solved problems = 8 : Total constraining sub-goal stages = 31 : Goals achieved = 31 : Goals unachieved = 0 : Complete = False

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 2, Highest = 2.

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 9 by method ground-first is [1-2].

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning problem 5 at level 2:
Total Templated Partial Problems = 6, Problem Range = [1-6], Size = 13, Sub-goal Stage Range = [1-13]
Division points [total=5] : [(Index = 2, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 4, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 6, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 8, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 10, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [9-10]

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [9-10], problem number = 5, increment number = 9

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 9)
	('last_sgoals', 10)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001F88E5CDA60>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 2] partial conformance refinement (sequential) with sgoals range [9-10] : Concurrency enabled : Minimum search length bound enabled with value 32

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 9
last_sgoals = 10
start_step = 31
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 32

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[09-02-2022_19-45-37] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[09-02-2022_19-45-37] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 31 as problem start state.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 31})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 31})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 31})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 31})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 31})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'S': 31})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 31})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 31})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 31})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 31})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 31})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 31})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 31})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 31})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 31})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 31})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 31})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 31})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'S': 31})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'S': 31})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 31})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 31})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 31})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 31})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 31})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 31})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 31})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 31})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 31})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 31})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 31})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 31})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'S': 31})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 31})

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state:

holds(2, complete_tower(blue,puzzle_room_table), false, 31).
holds(2, complete_tower(red,puzzle_room_table), false, 31).
holds(2, configuration(manipulator_arm_1), extended, 31).
holds(2, configuration(manipulator_arm_2), extended, 31).
holds(2, configuration(puzzle_room_door), open, 31).
holds(2, configuration(starting_room_door), closed, 31).
holds(2, configuration(store_room_door), open, 31).
holds(2, grasping(manipulator_arm_1), (block,3), 31).
holds(2, grasping(manipulator_arm_2), (block,4), 31).
holds(2, in((block,1)), puzzle_room, 31).
holds(2, in((block,2)), puzzle_room, 31).
holds(2, in((block,3)), puzzle_room, 31).
holds(2, in((block,4)), puzzle_room, 31).
holds(2, in((block,5)), puzzle_room, 31).
holds(2, in((block,6)), puzzle_room, 31).
holds(2, in(manipulator_arm_1), puzzle_room, 31).
holds(2, in(manipulator_arm_2), puzzle_room, 31).
holds(2, in(puzzle_room_table), puzzle_room, 31).
holds(2, in(talos), puzzle_room, 31).
holds(2, in_tower((block,1),(block,1)), true, 31).
holds(2, in_tower((block,1),(block,2)), false, 31).
holds(2, in_tower((block,1),(block,3)), false, 31).
holds(2, in_tower((block,1),(block,4)), false, 31).
holds(2, in_tower((block,1),(block,5)), false, 31).
holds(2, in_tower((block,1),(block,6)), false, 31).
holds(2, in_tower((block,2),(block,1)), false, 31).
holds(2, in_tower((block,2),(block,2)), true, 31).
holds(2, in_tower((block,2),(block,3)), false, 31).
holds(2, in_tower((block,2),(block,4)), true, 31).
holds(2, in_tower((block,2),(block,5)), false, 31).
holds(2, in_tower((block,2),(block,6)), false, 31).
holds(2, in_tower((block,3),(block,1)), false, 31).
holds(2, in_tower((block,3),(block,2)), false, 31).
holds(2, in_tower((block,3),(block,3)), true, 31).
holds(2, in_tower((block,3),(block,4)), false, 31).
holds(2, in_tower((block,3),(block,5)), false, 31).
holds(2, in_tower((block,3),(block,6)), false, 31).
holds(2, in_tower((block,4),(block,1)), false, 31).
holds(2, in_tower((block,4),(block,2)), false, 31).
holds(2, in_tower((block,4),(block,3)), false, 31).
holds(2, in_tower((block,4),(block,4)), false, 31).
holds(2, in_tower((block,4),(block,5)), false, 31).
holds(2, in_tower((block,4),(block,6)), false, 31).
holds(2, in_tower((block,5),(block,1)), false, 31).
holds(2, in_tower((block,5),(block,2)), false, 31).
holds(2, in_tower((block,5),(block,3)), false, 31).
holds(2, in_tower((block,5),(block,4)), false, 31).
holds(2, in_tower((block,5),(block,5)), false, 31).
holds(2, in_tower((block,5),(block,6)), false, 31).
holds(2, in_tower((block,6),(block,1)), false, 31).
holds(2, in_tower((block,6),(block,2)), false, 31).
holds(2, in_tower((block,6),(block,3)), false, 31).
holds(2, in_tower((block,6),(block,4)), false, 31).
holds(2, in_tower((block,6),(block,5)), true, 31).
holds(2, in_tower((block,6),(block,6)), true, 31).
holds(2, on((block,1)), puzzle_room_table, 31).
holds(2, on((block,2)), puzzle_room_table, 31).
holds(2, on((block,3)), puzzle_room_table, 31).
holds(2, on((block,4)), (block,2), 31).
holds(2, on((block,5)), (block,6), 31).
holds(2, on((block,6)), puzzle_room_table, 31).
holds(2, tower_base((block,1),puzzle_room_table), true, 31).
holds(2, tower_base((block,2),puzzle_room_table), true, 31).
holds(2, tower_base((block,3),puzzle_room_table), true, 31).
holds(2, tower_base((block,4),puzzle_room_table), false, 31).
holds(2, tower_base((block,5),puzzle_room_table), false, 31).
holds(2, tower_base((block,6),puzzle_room_table), true, 31).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 31).
holds(2, unordered_tower((block,2),puzzle_room_table), true, 31).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 31).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 31).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 31).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 31).
holds(3, complete_tower(blue,puzzle_room_table), false, 31).
holds(3, complete_tower(red,puzzle_room_table), false, 31).
holds(3, grasping(manipulator_arm_1), (block,3), 31).
holds(3, grasping(manipulator_arm_2), (block,4), 31).
holds(3, in((block,1)), puzzle_room, 31).
holds(3, in((block,2)), puzzle_room, 31).
holds(3, in((block,3)), puzzle_room, 31).
holds(3, in((block,4)), puzzle_room, 31).
holds(3, in((block,5)), puzzle_room, 31).
holds(3, in((block,6)), puzzle_room, 31).
holds(3, in(manipulator_arm_1), puzzle_room, 31).
holds(3, in(manipulator_arm_2), puzzle_room, 31).
holds(3, in(puzzle_room_table), puzzle_room, 31).
holds(3, in(talos), puzzle_room, 31).
holds(3, in_tower((block,1),(block,1)), true, 31).
holds(3, in_tower((block,1),(block,2)), false, 31).
holds(3, in_tower((block,1),(block,3)), false, 31).
holds(3, in_tower((block,1),(block,4)), false, 31).
holds(3, in_tower((block,1),(block,5)), false, 31).
holds(3, in_tower((block,1),(block,6)), false, 31).
holds(3, in_tower((block,2),(block,1)), false, 31).
holds(3, in_tower((block,2),(block,2)), true, 31).
holds(3, in_tower((block,2),(block,3)), false, 31).
holds(3, in_tower((block,2),(block,4)), true, 31).
holds(3, in_tower((block,2),(block,5)), false, 31).
holds(3, in_tower((block,2),(block,6)), false, 31).
holds(3, in_tower((block,3),(block,1)), false, 31).
holds(3, in_tower((block,3),(block,2)), false, 31).
holds(3, in_tower((block,3),(block,3)), true, 31).
holds(3, in_tower((block,3),(block,4)), false, 31).
holds(3, in_tower((block,3),(block,5)), false, 31).
holds(3, in_tower((block,3),(block,6)), false, 31).
holds(3, in_tower((block,4),(block,1)), false, 31).
holds(3, in_tower((block,4),(block,2)), false, 31).
holds(3, in_tower((block,4),(block,3)), false, 31).
holds(3, in_tower((block,4),(block,4)), false, 31).
holds(3, in_tower((block,4),(block,5)), false, 31).
holds(3, in_tower((block,4),(block,6)), false, 31).
holds(3, in_tower((block,5),(block,1)), false, 31).
holds(3, in_tower((block,5),(block,2)), false, 31).
holds(3, in_tower((block,5),(block,3)), false, 31).
holds(3, in_tower((block,5),(block,4)), false, 31).
holds(3, in_tower((block,5),(block,5)), false, 31).
holds(3, in_tower((block,5),(block,6)), false, 31).
holds(3, in_tower((block,6),(block,1)), false, 31).
holds(3, in_tower((block,6),(block,2)), false, 31).
holds(3, in_tower((block,6),(block,3)), false, 31).
holds(3, in_tower((block,6),(block,4)), false, 31).
holds(3, in_tower((block,6),(block,5)), true, 31).
holds(3, in_tower((block,6),(block,6)), true, 31).
holds(3, on((block,1)), puzzle_room_table, 31).
holds(3, on((block,2)), puzzle_room_table, 31).
holds(3, on((block,3)), puzzle_room_table, 31).
holds(3, on((block,4)), (block,2), 31).
holds(3, on((block,5)), (block,6), 31).
holds(3, on((block,6)), puzzle_room_table, 31).
holds(3, tower_base((block,1),puzzle_room_table), true, 31).
holds(3, tower_base((block,2),puzzle_room_table), true, 31).
holds(3, tower_base((block,3),puzzle_room_table), true, 31).
holds(3, tower_base((block,4),puzzle_room_table), false, 31).
holds(3, tower_base((block,5),puzzle_room_table), false, 31).
holds(3, tower_base((block,6),puzzle_room_table), true, 31).
holds(3, unordered_tower((block,1),puzzle_room_table), false, 31).
holds(3, unordered_tower((block,2),puzzle_room_table), true, 31).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 31).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 31).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 31).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 31).

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 284 rules into program part ash_goal_state:

final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=32']

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 9})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 9})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'I': 10})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 10})

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 4 rules into program part base:

sub_goal(3, talos, put(manipulator_arm_2,(block,4),(block,5)), on((block,4)), (block,5), 9).
sub_goal(3, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 9).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), (block,2), 10).
sub_goal(3, talos, release(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), nothing, 10).

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=32']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001F8C094EF70>]
	incrementor = SolveIncrementor(step_start=31, step_increase=1, step_increase_initial=2, step_end_min=33, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 31), range_=None), IncPart(name='plan_module', args=('#inc', 31, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 31, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 31, 9, 10, 'sequential', 'false'), range_=None)]

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 790 rules

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.005027299999937895s

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.027634s.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.003965s with result Satisfiable.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001F8C115FD60>

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 2)
	('start_step', 31)
	('last_sgoals', 10)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001F88E5CDA60>)
	('first_sgoals', 9)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001F8C115FD60>)

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 31). %* None *%
#program plan_module(#inc, 31, true, false). %* None *%
#program optimisation_module(#inc, 31, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 31, 9, 10, sequential, false). %* None *%

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     30 : Current =     32
Incrementor step ends | Minimum  =     33 : Maximum =    200

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(32)]), ('state_module', [Number(31), Number(31)]), ('plan_module', [Number(31), Number(31), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(31), Number(31), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('conformance_module', [Number(31), Number(31), Number(9), Number(10), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(32), Number(31)]), ('plan_module', [Number(32), Number(31), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(32), Number(31), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(32)]), ('action_preconditions', [Number(32)]), ('variable_relations', [Number(32)]), ('abstraction_mappings', [Number(32)]), ('conformance_module', [Number(32), Number(31), Number(9), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.141190s.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.014794s with result Satisfiable.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.15598410000029617, Incremental time limit = None
Running cumulative time = 0.15598410000029617, Cumulative time limit = 1800
Used memory = (RSS = 895.531250Mb, VMS = 887.589844Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.141190s, Solving = 0.014794s, Total = 0.155984s, Memory = (RSS = 895.531250Mb, VMS = 887.589844Mb), Step range = [31-32]), Calls = 1
Final Model :: Total atoms = 3613, Cost = (1, 0, -1), Optimality proven = False, Number = 3, Thread ID = 3, Model type = ModelType.StableModel

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     32 : Current =     33
Incrementor step ends | Minimum  =     33 : Maximum =    200

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(33)]), ('state_module', [Number(33), Number(31)]), ('plan_module', [Number(33), Number(31), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(33), Number(31), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('conformance_module', [Number(33), Number(31), Number(9), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.105332s.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007260s with result Satisfiable.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1125928000001295, Incremental time limit = None
Running cumulative time = 0.26857690000042567, Cumulative time limit = 1800
Used memory = (RSS = 895.531250Mb, VMS = 887.589844Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.246522s, Solving = 0.022055s, Total = 0.268577s, Memory = (RSS = 895.531250Mb, VMS = 887.589844Mb), Step range = [31-33]), Calls = 2
Final Model :: Total atoms = 3952, Cost = (4, 0, -1), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.141190s, Solving = 0.014794s, Total = 0.155984s, Memory = (RSS = 895.531250Mb, VMS = 887.589844Mb), Step range = [31-32]
2 : Statistics :: Grounding = 0.105332s, Solving = 0.007260s, Total = 0.112593s, Memory = (RSS = 895.531250Mb, VMS = 887.589844Mb), Step range = [33-33]

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.268577s due to: Stop condition reached.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 10, 17: 11, 18: 11, 19: 12, 20: 12, 21: 12, 22: 13, 23: 14, 24: 15, 25: 16, 26: 17, 27: 18, 28: 19, 29: 19, 30: 20, 31: 21, 32: 22, 33: 23, 34: 23, 35: 24, 36: 25, 37: 25, 38: 25, 39: 25, 40: 25, 41: 25, 42: 25, 43: 25, 44: 26, 45: 27, 46: 27, 47: 27, 48: 27, 49: 27, 50: 28, 51: 28, 52: 29, 53: 29, 54: 30, 55: 31, 56: 31}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 16, 11: 18, 12: 21, 13: 22, 14: 23, 15: 24, 16: 25, 17: 26, 18: 27, 19: 29, 20: 30, 21: 31, 22: 32, 23: 34, 24: 35, 25: 43, 26: 44, 27: 49, 28: 51, 29: 53, 30: 54, 31: 56}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 10, 17: 11, 18: 11, 19: 12, 20: 12, 21: 12, 22: 13, 23: 14, 24: 15, 25: 16, 26: 17, 27: 18, 28: 19, 29: 19, 30: 20, 31: 21, 32: 22, 33: 23, 34: 23, 35: 24, 36: 25, 37: 25, 38: 25, 39: 25, 40: 25, 41: 25, 42: 25, 43: 25, 44: 26, 45: 27, 46: 27, 47: 27, 48: 27, 49: 27, 50: 28, 51: 28, 52: 29, 53: 29, 54: 30, 55: 31, 56: 31}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 16, 11: 18, 12: 21, 13: 22, 14: 23, 15: 24, 16: 25, 17: 26, 18: 27, 19: 29, 20: 30, 21: 31, 22: 32, 23: 34, 24: 35, 25: 43, 26: 44, 27: 49, 28: 51, 29: 53, 30: 54, 31: 56}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 10, Last requested goal index = 10, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.246522s, Solving = 0.022055s, Total = 0.268577s, Memory = (RSS = 895.531250Mb, VMS = 887.589844Mb), Step range = [31-33]), Calls = 2
Model :: Total atoms = 3952, Cost = (4, 0, -1), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                  Steps = 2 :: Actions = 4                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,store_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,store_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,store_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 8:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 9:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
        talos : grasp(manipulator_arm_2,(block,5))
Step 10:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
        talos : configure(manipulator_arm_2,retracted)
Step 11:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 12:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,(block,5))
Step 14:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_2,puzzle_room_door)
Step 16:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 19:
    Current Sub-goals:
        [Index = 4] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 20:
    Current Sub-goals:
        [Index = 4] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 4] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 21:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,6))
Step 22:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 23:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 24:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 25:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,5))
Step 26:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 27:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : move(puzzle_room)
Step 28:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 29:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
        talos : put(manipulator_arm_2,(block,5),(block,6))
Step 30:
    Current Sub-goals:
        [Index = 7] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 7] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 7] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 7] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
        talos : release(manipulator_arm_2,(block,5))
Step 31:
    Current Sub-goals:
        [Index = 8] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 8] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,4))
Step 32:
    Current Sub-goals:
        [Index = 9] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 9] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 9] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 9] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_arm_2,(block,4),(block,5))
        talos : release(manipulator_arm_1,(block,3))
Step 33:
    Current Sub-goals:
        [Index = 10] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 10] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 10] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 10] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,2))
        talos : release(manipulator_arm_2,(block,4))

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=31, total_plan_length=33, step_range=range(31, 34)

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 13, Total actions = 19, Produced sub-goal stages = 19
Level [2]: Length = 33, Total actions = 41, Produced sub-goal stages = 41
Level [1]: Length = 56, Total actions = 63, Produced sub-goal stages = 0

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 2 (par-ref), LE =   2, AC =   4, CF = 0.5, GT =   3.82s, ST =   0.31s, OT = 0.00s, TT =   4.12s, EF = (LE = 1.0, AC = 1.0), ED = (LE = 0.0, AC = 0.0), EB = (LE = 0.0, AC = 0.0)

[09-02-2022_19-45-37] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=2, start_step=31, blend=Blend(left=0, right=0)

[09-02-2022_19-45-37] DEBUG :: core.Strategies >> Decided: number_small_problems=2, number_large_problems=0, small_group_size=1, large_group_size=2

[09-02-2022_19-45-37] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=32, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 2, Problem Range = [9-10], Size = 2, Sub-goal Stage Range = [32-33]
Division points [total=1] : [(Index = 32, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Monolevel problem 5 at level 2 solved.

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 9 at level 1:
Total Templated Partial Problems = 2, Problem Range = [9-10], Size = 2, Sub-goal Stage Range = [32-33]
Division points [total=1] : [(Index = 32, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [32-32]

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [32-32], problem number = 9, increment number = 9

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 32)
	('last_sgoals', 32)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001F88E5CDA60>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [32-32] : Concurrency enabled : Minimum search length bound disabled with value 56

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 32
last_sgoals = 32
start_step = 56
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 56

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[09-02-2022_19-45-37] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[09-02-2022_19-45-37] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 56 as problem start state.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,3))', 'S': 56})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,4))', 'S': 56})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 56})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 56})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 56})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 56})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 56})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'S': 56})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 56})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,3)', 'S': 56})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,4)', 'S': 56})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 56})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 56})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 56})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 56})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 56})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 56})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 56})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 56})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 56})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 56})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 56})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'S': 56})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 56})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 56})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 56})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 56})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 56})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'S': 56})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 56})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 56})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 56})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 56})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 56})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 56})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 56})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 56})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 56})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 56})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 56})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 56})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 56})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 56})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 56})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 56})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 56})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 56})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 56})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 56})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 56})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'S': 56})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 56})

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 56).
holds(1, complete_tower(red,puzzle_room_table), false, 56).
holds(1, configuration(manipulator_end_1), aligned_with((block,3)), 56).
holds(1, configuration(manipulator_end_2), aligned_with((block,4)), 56).
holds(1, configuration(manipulator_limb_1), extended, 56).
holds(1, configuration(manipulator_limb_2), extended, 56).
holds(1, configuration(puzzle_room_door), open, 56).
holds(1, configuration(starting_room_door), closed, 56).
holds(1, configuration(store_room_door), open, 56).
holds(1, grasping(manipulator_arm_1), (block,3), 56).
holds(1, grasping(manipulator_arm_2), (block,4), 56).
holds(1, grasping(manipulator_end_1), (block,3), 56).
holds(1, grasping(manipulator_end_2), (block,4), 56).
holds(1, in((block,1)), (puzzle_room,1), 56).
holds(1, in((block,2)), (puzzle_room,1), 56).
holds(1, in((block,3)), (puzzle_room,1), 56).
holds(1, in((block,4)), (puzzle_room,1), 56).
holds(1, in((block,5)), (puzzle_room,1), 56).
holds(1, in((block,6)), (puzzle_room,1), 56).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 56).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 56).
holds(1, in(manipulator_end_1), (puzzle_room,1), 56).
holds(1, in(manipulator_end_2), (puzzle_room,1), 56).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 56).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 56).
holds(1, in(puzzle_room_table), (puzzle_room,1), 56).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 56).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 56).
holds(1, in(talos), (puzzle_room,1), 56).
holds(1, in_tower((block,1),(block,1)), true, 56).
holds(1, in_tower((block,1),(block,2)), false, 56).
holds(1, in_tower((block,1),(block,3)), false, 56).
holds(1, in_tower((block,1),(block,4)), false, 56).
holds(1, in_tower((block,1),(block,5)), false, 56).
holds(1, in_tower((block,1),(block,6)), false, 56).
holds(1, in_tower((block,2),(block,1)), false, 56).
holds(1, in_tower((block,2),(block,2)), true, 56).
holds(1, in_tower((block,2),(block,3)), false, 56).
holds(1, in_tower((block,2),(block,4)), true, 56).
holds(1, in_tower((block,2),(block,5)), false, 56).
holds(1, in_tower((block,2),(block,6)), false, 56).
holds(1, in_tower((block,3),(block,1)), false, 56).
holds(1, in_tower((block,3),(block,2)), false, 56).
holds(1, in_tower((block,3),(block,3)), true, 56).
holds(1, in_tower((block,3),(block,4)), false, 56).
holds(1, in_tower((block,3),(block,5)), false, 56).
holds(1, in_tower((block,3),(block,6)), false, 56).
holds(1, in_tower((block,4),(block,1)), false, 56).
holds(1, in_tower((block,4),(block,2)), false, 56).
holds(1, in_tower((block,4),(block,3)), false, 56).
holds(1, in_tower((block,4),(block,4)), false, 56).
holds(1, in_tower((block,4),(block,5)), false, 56).
holds(1, in_tower((block,4),(block,6)), false, 56).
holds(1, in_tower((block,5),(block,1)), false, 56).
holds(1, in_tower((block,5),(block,2)), false, 56).
holds(1, in_tower((block,5),(block,3)), false, 56).
holds(1, in_tower((block,5),(block,4)), false, 56).
holds(1, in_tower((block,5),(block,5)), false, 56).
holds(1, in_tower((block,5),(block,6)), false, 56).
holds(1, in_tower((block,6),(block,1)), false, 56).
holds(1, in_tower((block,6),(block,2)), false, 56).
holds(1, in_tower((block,6),(block,3)), false, 56).
holds(1, in_tower((block,6),(block,4)), false, 56).
holds(1, in_tower((block,6),(block,5)), true, 56).
holds(1, in_tower((block,6),(block,6)), true, 56).
holds(1, on((block,1)), puzzle_room_table_left, 56).
holds(1, on((block,2)), puzzle_room_table_right, 56).
holds(1, on((block,3)), puzzle_room_table_left, 56).
holds(1, on((block,4)), (block,2), 56).
holds(1, on((block,5)), (block,6), 56).
holds(1, on((block,6)), puzzle_room_table_right, 56).
holds(1, tower_base((block,1),puzzle_room_table), true, 56).
holds(1, tower_base((block,2),puzzle_room_table), true, 56).
holds(1, tower_base((block,3),puzzle_room_table), true, 56).
holds(1, tower_base((block,4),puzzle_room_table), false, 56).
holds(1, tower_base((block,5),puzzle_room_table), false, 56).
holds(1, tower_base((block,6),puzzle_room_table), true, 56).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 56).
holds(1, unordered_tower((block,2),puzzle_room_table), true, 56).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 56).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 56).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 56).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 56).
holds(2, complete_tower(blue,puzzle_room_table), false, 56).
holds(2, complete_tower(red,puzzle_room_table), false, 56).
holds(2, configuration(manipulator_arm_1), extended, 56).
holds(2, configuration(manipulator_arm_2), extended, 56).
holds(2, configuration(puzzle_room_door), open, 56).
holds(2, configuration(starting_room_door), closed, 56).
holds(2, configuration(store_room_door), open, 56).
holds(2, grasping(manipulator_arm_1), (block,3), 56).
holds(2, grasping(manipulator_arm_2), (block,4), 56).
holds(2, in((block,1)), puzzle_room, 56).
holds(2, in((block,2)), puzzle_room, 56).
holds(2, in((block,3)), puzzle_room, 56).
holds(2, in((block,4)), puzzle_room, 56).
holds(2, in((block,5)), puzzle_room, 56).
holds(2, in((block,6)), puzzle_room, 56).
holds(2, in(manipulator_arm_1), puzzle_room, 56).
holds(2, in(manipulator_arm_2), puzzle_room, 56).
holds(2, in(puzzle_room_table), puzzle_room, 56).
holds(2, in(talos), puzzle_room, 56).
holds(2, in_tower((block,1),(block,1)), true, 56).
holds(2, in_tower((block,1),(block,2)), false, 56).
holds(2, in_tower((block,1),(block,3)), false, 56).
holds(2, in_tower((block,1),(block,4)), false, 56).
holds(2, in_tower((block,1),(block,5)), false, 56).
holds(2, in_tower((block,1),(block,6)), false, 56).
holds(2, in_tower((block,2),(block,1)), false, 56).
holds(2, in_tower((block,2),(block,2)), true, 56).
holds(2, in_tower((block,2),(block,3)), false, 56).
holds(2, in_tower((block,2),(block,4)), true, 56).
holds(2, in_tower((block,2),(block,5)), false, 56).
holds(2, in_tower((block,2),(block,6)), false, 56).
holds(2, in_tower((block,3),(block,1)), false, 56).
holds(2, in_tower((block,3),(block,2)), false, 56).
holds(2, in_tower((block,3),(block,3)), true, 56).
holds(2, in_tower((block,3),(block,4)), false, 56).
holds(2, in_tower((block,3),(block,5)), false, 56).
holds(2, in_tower((block,3),(block,6)), false, 56).
holds(2, in_tower((block,4),(block,1)), false, 56).
holds(2, in_tower((block,4),(block,2)), false, 56).
holds(2, in_tower((block,4),(block,3)), false, 56).
holds(2, in_tower((block,4),(block,4)), false, 56).
holds(2, in_tower((block,4),(block,5)), false, 56).
holds(2, in_tower((block,4),(block,6)), false, 56).
holds(2, in_tower((block,5),(block,1)), false, 56).
holds(2, in_tower((block,5),(block,2)), false, 56).
holds(2, in_tower((block,5),(block,3)), false, 56).
holds(2, in_tower((block,5),(block,4)), false, 56).
holds(2, in_tower((block,5),(block,5)), false, 56).
holds(2, in_tower((block,5),(block,6)), false, 56).
holds(2, in_tower((block,6),(block,1)), false, 56).
holds(2, in_tower((block,6),(block,2)), false, 56).
holds(2, in_tower((block,6),(block,3)), false, 56).
holds(2, in_tower((block,6),(block,4)), false, 56).
holds(2, in_tower((block,6),(block,5)), true, 56).
holds(2, in_tower((block,6),(block,6)), true, 56).
holds(2, on((block,1)), puzzle_room_table, 56).
holds(2, on((block,2)), puzzle_room_table, 56).
holds(2, on((block,3)), puzzle_room_table, 56).
holds(2, on((block,4)), (block,2), 56).
holds(2, on((block,5)), (block,6), 56).
holds(2, on((block,6)), puzzle_room_table, 56).
holds(2, tower_base((block,1),puzzle_room_table), true, 56).
holds(2, tower_base((block,2),puzzle_room_table), true, 56).
holds(2, tower_base((block,3),puzzle_room_table), true, 56).
holds(2, tower_base((block,4),puzzle_room_table), false, 56).
holds(2, tower_base((block,5),puzzle_room_table), false, 56).
holds(2, tower_base((block,6),puzzle_room_table), true, 56).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 56).
holds(2, unordered_tower((block,2),puzzle_room_table), true, 56).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 56).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 56).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 56).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 56).

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 32})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 32})

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 2 rules into program part base:

sub_goal(2, talos, put(manipulator_arm_2,(block,4),(block,5)), on((block,4)), (block,5), 32).
sub_goal(2, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 32).

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001F8C07D1430>]
	incrementor = SolveIncrementor(step_start=56, step_increase=1, step_increase_initial=2, step_end_min=57, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 56), range_=None), IncPart(name='plan_module', args=('#inc', 56, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 56, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 56, 32, 32, 'sequential', 'false'), range_=None)]

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 809 rules

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004972499999894353s

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.032847s.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005369s with result Satisfiable.

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001F8C118B950>

[09-02-2022_19-45-37] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 56)
	('last_sgoals', 32)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001F88E5CDA60>)
	('first_sgoals', 32)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001F8C118B950>)

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 56). %* None *%
#program plan_module(#inc, 56, true, false). %* None *%
#program optimisation_module(#inc, 56, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 56, 32, 32, sequential, false). %* None *%

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     55 : Current =     57
Incrementor step ends | Minimum  =     57 : Maximum =    200

[09-02-2022_19-45-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(57)]), ('state_module', [Number(56), Number(56)]), ('plan_module', [Number(56), Number(56), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(56), Number(56), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(56)]), ('action_preconditions', [Number(56)]), ('variable_relations', [Number(56)]), ('abstraction_mappings', [Number(56)]), ('conformance_module', [Number(56), Number(56), Number(32), Number(32), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(57), Number(56)]), ('plan_module', [Number(57), Number(56), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(57), Number(56), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(57)]), ('action_preconditions', [Number(57)]), ('variable_relations', [Number(57)]), ('abstraction_mappings', [Number(57)]), ('conformance_module', [Number(57), Number(56), Number(32), Number(32), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.268286s.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011217s with result Satisfiable.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2795032999997602, Incremental time limit = None
Running cumulative time = 0.2795032999997602, Cumulative time limit = 1800
Used memory = (RSS = 895.656250Mb, VMS = 887.839844Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.268286s, Solving = 0.011217s, Total = 0.279503s, Memory = (RSS = 895.656250Mb, VMS = 887.839844Mb), Step range = [56-57]), Calls = 1
Final Model :: Total atoms = 4153, Cost = (2, 0, -1), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.268286s, Solving = 0.011217s, Total = 0.279503s, Memory = (RSS = 895.656250Mb, VMS = 887.839844Mb), Step range = [56-57]

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.279503s due to: Stop condition reached.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 10, 17: 11, 18: 11, 19: 12, 20: 12, 21: 12, 22: 13, 23: 14, 24: 15, 25: 16, 26: 17, 27: 18, 28: 19, 29: 19, 30: 20, 31: 21, 32: 22, 33: 23, 34: 23, 35: 24, 36: 25, 37: 25, 38: 25, 39: 25, 40: 25, 41: 25, 42: 25, 43: 25, 44: 26, 45: 27, 46: 27, 47: 27, 48: 27, 49: 27, 50: 28, 51: 28, 52: 29, 53: 29, 54: 30, 55: 31, 56: 31}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 16, 11: 18, 12: 21, 13: 22, 14: 23, 15: 24, 16: 25, 17: 26, 18: 27, 19: 29, 20: 30, 21: 31, 22: 32, 23: 34, 24: 35, 25: 43, 26: 44, 27: 49, 28: 51, 29: 53, 30: 54, 31: 56}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 10, 17: 11, 18: 11, 19: 12, 20: 12, 21: 12, 22: 13, 23: 14, 24: 15, 25: 16, 26: 17, 27: 18, 28: 19, 29: 19, 30: 20, 31: 21, 32: 22, 33: 23, 34: 23, 35: 24, 36: 25, 37: 25, 38: 25, 39: 25, 40: 25, 41: 25, 42: 25, 43: 25, 44: 26, 45: 27, 46: 27, 47: 27, 48: 27, 49: 27, 50: 28, 51: 28, 52: 29, 53: 29, 54: 30, 55: 31, 56: 31, 57: 32}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 16, 11: 18, 12: 21, 13: 22, 14: 23, 15: 24, 16: 25, 17: 26, 18: 27, 19: 29, 20: 30, 21: 31, 22: 32, 23: 34, 24: 35, 25: 43, 26: 44, 27: 49, 28: 51, 29: 53, 30: 54, 31: 56, 32: 57}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 32, Last requested goal index = 32, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.268286s, Solving = 0.011217s, Total = 0.279503s, Memory = (RSS = 895.656250Mb, VMS = 887.839844Mb), Step range = [56-57]), Calls = 1
Model :: Total atoms = 4153, Cost = (2, 0, -1), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 2                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 11:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 12:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 14:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
        talos : grasp(manipulator_end_2,(block,5))
Step 15:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : release(manipulator_end_2,(block,5))
Step 16:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 17:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 18:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 19:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 20:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 21:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 22:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 13] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 23:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 24:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 25:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 26:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 27:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 28:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 29:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 30:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 31:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 32:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 33:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 34:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 35:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 36:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 37:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 38:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 39:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 40:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 41:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 42:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 43:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 44:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 45:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 46:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 47:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 48:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 49:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 50:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 51:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 52:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 29] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 53:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 29] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 29] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 54:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
        talos : release(manipulator_end_2,(block,5))
Step 55:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 56:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 57:
    Current Sub-goals:
        [Index = 32] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 32] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 32] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 32] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_end_2,(block,4),(block,5))
        talos : release(manipulator_end_1,(block,3))

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Monolevel problem 9 at level 1 solved.

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Online planning increment 9 finished.

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 5 : Total constraining sub-goal stages = 13 : Goals achieved = 10 : Goals unachieved = 3 : Complete = False
Level = 1 : Solved problems = 9 : Total constraining sub-goal stages = 33 : Goals achieved = 32 : Goals unachieved = 1 : Complete = False

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 2.

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 10 by method ground-first is [1-1].

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 10 at level 1:
Total Templated Partial Problems = 2, Problem Range = [9-10], Size = 2, Sub-goal Stage Range = [32-33]
Division points [total=1] : [(Index = 32, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [33-33]

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [33-33], problem number = 10, increment number = 10

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 33)
	('last_sgoals', 33)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001F88E5CDA60>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [33-33] : Concurrency enabled : Minimum search length bound disabled with value 57

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 33
last_sgoals = 33
start_step = 57
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 57

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[09-02-2022_19-45-38] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[09-02-2022_19-45-38] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 57 as problem start state.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 57})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,4))', 'S': 57})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 57})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 57})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 57})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 57})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 57})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 57})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 57})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 57})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,4)', 'S': 57})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 57})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 57})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 57})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'S': 57})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 57})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 57})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 57})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 57})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 57})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 57})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 57})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 57})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 57})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 57})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 57})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 57})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'S': 57})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 57})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 57})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 57})

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), true, 57).
holds(1, complete_tower(red,puzzle_room_table), false, 57).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 57).
holds(1, configuration(manipulator_end_2), aligned_with((block,4)), 57).
holds(1, configuration(manipulator_limb_1), extended, 57).
holds(1, configuration(manipulator_limb_2), extended, 57).
holds(1, configuration(puzzle_room_door), open, 57).
holds(1, configuration(starting_room_door), closed, 57).
holds(1, configuration(store_room_door), open, 57).
holds(1, grasping(manipulator_arm_1), nothing, 57).
holds(1, grasping(manipulator_arm_2), (block,4), 57).
holds(1, grasping(manipulator_end_1), nothing, 57).
holds(1, grasping(manipulator_end_2), (block,4), 57).
holds(1, in((block,1)), (puzzle_room,1), 57).
holds(1, in((block,2)), (puzzle_room,1), 57).
holds(1, in((block,3)), (puzzle_room,1), 57).
holds(1, in((block,4)), (puzzle_room,1), 57).
holds(1, in((block,5)), (puzzle_room,1), 57).
holds(1, in((block,6)), (puzzle_room,1), 57).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 57).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 57).
holds(1, in(manipulator_end_1), (puzzle_room,1), 57).
holds(1, in(manipulator_end_2), (puzzle_room,1), 57).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 57).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 57).
holds(1, in(puzzle_room_table), (puzzle_room,1), 57).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 57).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 57).
holds(1, in(talos), (puzzle_room,1), 57).
holds(1, in_tower((block,1),(block,1)), true, 57).
holds(1, in_tower((block,1),(block,2)), false, 57).
holds(1, in_tower((block,1),(block,3)), false, 57).
holds(1, in_tower((block,1),(block,4)), false, 57).
holds(1, in_tower((block,1),(block,5)), false, 57).
holds(1, in_tower((block,1),(block,6)), false, 57).
holds(1, in_tower((block,2),(block,1)), false, 57).
holds(1, in_tower((block,2),(block,2)), true, 57).
holds(1, in_tower((block,2),(block,3)), false, 57).
holds(1, in_tower((block,2),(block,4)), false, 57).
holds(1, in_tower((block,2),(block,5)), false, 57).
holds(1, in_tower((block,2),(block,6)), false, 57).
holds(1, in_tower((block,3),(block,1)), false, 57).
holds(1, in_tower((block,3),(block,2)), false, 57).
holds(1, in_tower((block,3),(block,3)), true, 57).
holds(1, in_tower((block,3),(block,4)), false, 57).
holds(1, in_tower((block,3),(block,5)), false, 57).
holds(1, in_tower((block,3),(block,6)), false, 57).
holds(1, in_tower((block,4),(block,1)), false, 57).
holds(1, in_tower((block,4),(block,2)), false, 57).
holds(1, in_tower((block,4),(block,3)), false, 57).
holds(1, in_tower((block,4),(block,4)), false, 57).
holds(1, in_tower((block,4),(block,5)), false, 57).
holds(1, in_tower((block,4),(block,6)), false, 57).
holds(1, in_tower((block,5),(block,1)), false, 57).
holds(1, in_tower((block,5),(block,2)), false, 57).
holds(1, in_tower((block,5),(block,3)), false, 57).
holds(1, in_tower((block,5),(block,4)), false, 57).
holds(1, in_tower((block,5),(block,5)), false, 57).
holds(1, in_tower((block,5),(block,6)), false, 57).
holds(1, in_tower((block,6),(block,1)), false, 57).
holds(1, in_tower((block,6),(block,2)), false, 57).
holds(1, in_tower((block,6),(block,3)), false, 57).
holds(1, in_tower((block,6),(block,4)), true, 57).
holds(1, in_tower((block,6),(block,5)), true, 57).
holds(1, in_tower((block,6),(block,6)), true, 57).
holds(1, on((block,1)), puzzle_room_table_left, 57).
holds(1, on((block,2)), puzzle_room_table_right, 57).
holds(1, on((block,3)), puzzle_room_table_left, 57).
holds(1, on((block,4)), (block,5), 57).
holds(1, on((block,5)), (block,6), 57).
holds(1, on((block,6)), puzzle_room_table_right, 57).
holds(1, tower_base((block,1),puzzle_room_table), true, 57).
holds(1, tower_base((block,2),puzzle_room_table), true, 57).
holds(1, tower_base((block,3),puzzle_room_table), true, 57).
holds(1, tower_base((block,4),puzzle_room_table), false, 57).
holds(1, tower_base((block,5),puzzle_room_table), false, 57).
holds(1, tower_base((block,6),puzzle_room_table), true, 57).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 57).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 57).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 57).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 57).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 57).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 57).
holds(2, complete_tower(blue,puzzle_room_table), true, 57).
holds(2, complete_tower(red,puzzle_room_table), false, 57).
holds(2, configuration(manipulator_arm_1), extended, 57).
holds(2, configuration(manipulator_arm_2), extended, 57).
holds(2, configuration(puzzle_room_door), open, 57).
holds(2, configuration(starting_room_door), closed, 57).
holds(2, configuration(store_room_door), open, 57).
holds(2, grasping(manipulator_arm_1), nothing, 57).
holds(2, grasping(manipulator_arm_2), (block,4), 57).
holds(2, in((block,1)), puzzle_room, 57).
holds(2, in((block,2)), puzzle_room, 57).
holds(2, in((block,3)), puzzle_room, 57).
holds(2, in((block,4)), puzzle_room, 57).
holds(2, in((block,5)), puzzle_room, 57).
holds(2, in((block,6)), puzzle_room, 57).
holds(2, in(manipulator_arm_1), puzzle_room, 57).
holds(2, in(manipulator_arm_2), puzzle_room, 57).
holds(2, in(puzzle_room_table), puzzle_room, 57).
holds(2, in(talos), puzzle_room, 57).
holds(2, in_tower((block,1),(block,1)), true, 57).
holds(2, in_tower((block,1),(block,2)), false, 57).
holds(2, in_tower((block,1),(block,3)), false, 57).
holds(2, in_tower((block,1),(block,4)), false, 57).
holds(2, in_tower((block,1),(block,5)), false, 57).
holds(2, in_tower((block,1),(block,6)), false, 57).
holds(2, in_tower((block,2),(block,1)), false, 57).
holds(2, in_tower((block,2),(block,2)), true, 57).
holds(2, in_tower((block,2),(block,3)), false, 57).
holds(2, in_tower((block,2),(block,4)), false, 57).
holds(2, in_tower((block,2),(block,5)), false, 57).
holds(2, in_tower((block,2),(block,6)), false, 57).
holds(2, in_tower((block,3),(block,1)), false, 57).
holds(2, in_tower((block,3),(block,2)), false, 57).
holds(2, in_tower((block,3),(block,3)), true, 57).
holds(2, in_tower((block,3),(block,4)), false, 57).
holds(2, in_tower((block,3),(block,5)), false, 57).
holds(2, in_tower((block,3),(block,6)), false, 57).
holds(2, in_tower((block,4),(block,1)), false, 57).
holds(2, in_tower((block,4),(block,2)), false, 57).
holds(2, in_tower((block,4),(block,3)), false, 57).
holds(2, in_tower((block,4),(block,4)), false, 57).
holds(2, in_tower((block,4),(block,5)), false, 57).
holds(2, in_tower((block,4),(block,6)), false, 57).
holds(2, in_tower((block,5),(block,1)), false, 57).
holds(2, in_tower((block,5),(block,2)), false, 57).
holds(2, in_tower((block,5),(block,3)), false, 57).
holds(2, in_tower((block,5),(block,4)), false, 57).
holds(2, in_tower((block,5),(block,5)), false, 57).
holds(2, in_tower((block,5),(block,6)), false, 57).
holds(2, in_tower((block,6),(block,1)), false, 57).
holds(2, in_tower((block,6),(block,2)), false, 57).
holds(2, in_tower((block,6),(block,3)), false, 57).
holds(2, in_tower((block,6),(block,4)), true, 57).
holds(2, in_tower((block,6),(block,5)), true, 57).
holds(2, in_tower((block,6),(block,6)), true, 57).
holds(2, on((block,1)), puzzle_room_table, 57).
holds(2, on((block,2)), puzzle_room_table, 57).
holds(2, on((block,3)), puzzle_room_table, 57).
holds(2, on((block,4)), (block,5), 57).
holds(2, on((block,5)), (block,6), 57).
holds(2, on((block,6)), puzzle_room_table, 57).
holds(2, tower_base((block,1),puzzle_room_table), true, 57).
holds(2, tower_base((block,2),puzzle_room_table), true, 57).
holds(2, tower_base((block,3),puzzle_room_table), true, 57).
holds(2, tower_base((block,4),puzzle_room_table), false, 57).
holds(2, tower_base((block,5),puzzle_room_table), false, 57).
holds(2, tower_base((block,6),puzzle_room_table), true, 57).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 57).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 57).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 57).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 57).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 57).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 57).

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'I': 33})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 33})

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 2 rules into program part base:

sub_goal(2, talos, grasp(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), (block,2), 33).
sub_goal(2, talos, release(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), nothing, 33).

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001F8C07D1820>]
	incrementor = SolveIncrementor(step_start=57, step_increase=1, step_increase_initial=2, step_end_min=58, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 57), range_=None), IncPart(name='plan_module', args=('#inc', 57, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 57, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 57, 33, 33, 'sequential', 'false'), range_=None)]

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 809 rules

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004460299999891504s

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.029711s.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005049s with result Satisfiable.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001F8C10D2860>

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 57)
	('last_sgoals', 33)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001F88E5CDA60>)
	('first_sgoals', 33)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001F8C10D2860>)

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 57). %* None *%
#program plan_module(#inc, 57, true, false). %* None *%
#program optimisation_module(#inc, 57, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 57, 33, 33, sequential, false). %* None *%

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     56 : Current =     58
Incrementor step ends | Minimum  =     58 : Maximum =    200

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(58)]), ('state_module', [Number(57), Number(57)]), ('plan_module', [Number(57), Number(57), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(57), Number(57), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(57)]), ('action_preconditions', [Number(57)]), ('variable_relations', [Number(57)]), ('abstraction_mappings', [Number(57)]), ('conformance_module', [Number(57), Number(57), Number(33), Number(33), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(58), Number(57)]), ('plan_module', [Number(58), Number(57), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(58), Number(57), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(58)]), ('action_preconditions', [Number(58)]), ('variable_relations', [Number(58)]), ('abstraction_mappings', [Number(58)]), ('conformance_module', [Number(58), Number(57), Number(33), Number(33), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.251909s.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007032s with result Unsatisfiable.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2589411999999811, Incremental time limit = None
Running cumulative time = 0.2589411999999811, Cumulative time limit = 1800
Used memory = (RSS = 895.656250Mb, VMS = 887.839844Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     58 : Current =     59
Incrementor step ends | Minimum  =     58 : Maximum =    200

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(59)]), ('state_module', [Number(59), Number(57)]), ('plan_module', [Number(59), Number(57), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(59), Number(57), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(59)]), ('action_preconditions', [Number(59)]), ('variable_relations', [Number(59)]), ('abstraction_mappings', [Number(59)]), ('conformance_module', [Number(59), Number(57), Number(33), Number(33), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.131662s.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006916s with result Satisfiable.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.13857899999993606, Incremental time limit = None
Running cumulative time = 0.39752019999991717, Cumulative time limit = 1800
Used memory = (RSS = 895.656250Mb, VMS = 887.839844Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.383571s, Solving = 0.013949s, Total = 0.397520s, Memory = (RSS = 895.656250Mb, VMS = 887.839844Mb), Step range = [57-59]), Calls = 2
Final Model :: Total atoms = 4524, Cost = (3, 0, 0), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.251909s, Solving = 0.007032s, Total = 0.258941s, Memory = (RSS = 895.656250Mb, VMS = 887.839844Mb), Step range = [57-58]
2 : Statistics :: Grounding = 0.131662s, Solving = 0.006916s, Total = 0.138579s, Memory = (RSS = 895.656250Mb, VMS = 887.839844Mb), Step range = [59-59]

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.397520s due to: Stop condition reached.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 10, 17: 11, 18: 11, 19: 12, 20: 12, 21: 12, 22: 13, 23: 14, 24: 15, 25: 16, 26: 17, 27: 18, 28: 19, 29: 19, 30: 20, 31: 21, 32: 22, 33: 23, 34: 23, 35: 24, 36: 25, 37: 25, 38: 25, 39: 25, 40: 25, 41: 25, 42: 25, 43: 25, 44: 26, 45: 27, 46: 27, 47: 27, 48: 27, 49: 27, 50: 28, 51: 28, 52: 29, 53: 29, 54: 30, 55: 31, 56: 31, 57: 32}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 16, 11: 18, 12: 21, 13: 22, 14: 23, 15: 24, 16: 25, 17: 26, 18: 27, 19: 29, 20: 30, 21: 31, 22: 32, 23: 34, 24: 35, 25: 43, 26: 44, 27: 49, 28: 51, 29: 53, 30: 54, 31: 56, 32: 57}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 10, 17: 11, 18: 11, 19: 12, 20: 12, 21: 12, 22: 13, 23: 14, 24: 15, 25: 16, 26: 17, 27: 18, 28: 19, 29: 19, 30: 20, 31: 21, 32: 22, 33: 23, 34: 23, 35: 24, 36: 25, 37: 25, 38: 25, 39: 25, 40: 25, 41: 25, 42: 25, 43: 25, 44: 26, 45: 27, 46: 27, 47: 27, 48: 27, 49: 27, 50: 28, 51: 28, 52: 29, 53: 29, 54: 30, 55: 31, 56: 31, 57: 32, 58: 33, 59: 33}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 16, 11: 18, 12: 21, 13: 22, 14: 23, 15: 24, 16: 25, 17: 26, 18: 27, 19: 29, 20: 30, 21: 31, 22: 32, 23: 34, 24: 35, 25: 43, 26: 44, 27: 49, 28: 51, 29: 53, 30: 54, 31: 56, 32: 57, 33: 59}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 33, Last requested goal index = 33, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.383571s, Solving = 0.013949s, Total = 0.397520s, Memory = (RSS = 895.656250Mb, VMS = 887.839844Mb), Step range = [57-59]), Calls = 2
Model :: Total atoms = 4524, Cost = (3, 0, 0), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 2 :: Actions = 3                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 11:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 12:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 14:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
        talos : grasp(manipulator_end_2,(block,5))
Step 15:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : release(manipulator_end_2,(block,5))
Step 16:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 17:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 18:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 19:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 20:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 21:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 22:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 13] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 23:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 24:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 25:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 26:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 27:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 28:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 29:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 30:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 31:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 32:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 33:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 34:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 35:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 36:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 37:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 38:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 39:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 40:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 41:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 42:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 43:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 44:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 45:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 46:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 47:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 48:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 49:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 50:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 51:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 52:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 29] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 53:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 29] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 29] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 54:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
        talos : release(manipulator_end_2,(block,5))
Step 55:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 56:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 57:
    Current Sub-goals:
        [Index = 32] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 32] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 32] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 32] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_end_2,(block,4),(block,5))
        talos : release(manipulator_end_1,(block,3))
Step 58:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 33] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 59:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 33] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 33] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
        talos : release(manipulator_end_2,(block,4))

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Monolevel problem 10 at level 1 solved.

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Online planning increment 10 finished.

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 5 : Total constraining sub-goal stages = 13 : Goals achieved = 10 : Goals unachieved = 3 : Complete = False
Level = 1 : Solved problems = 10 : Total constraining sub-goal stages = 33 : Goals achieved = 33 : Goals unachieved = 0 : Complete = False

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 2, Highest = 2.

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 11 by method ground-first is [1-2].

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning problem 6 at level 2:
Total Templated Partial Problems = 6, Problem Range = [1-6], Size = 13, Sub-goal Stage Range = [1-13]
Division points [total=5] : [(Index = 2, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 4, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 6, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 8, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 10, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [11-13]

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [11-13], problem number = 6, increment number = 11

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 11)
	('last_sgoals', 13)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001F88E5CDA60>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 2] partial conformance refinement (sequential) with sgoals range [11-13] : Concurrency enabled : Minimum search length bound enabled with value 35

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 11
last_sgoals = 13
start_step = 33
is_initial = False
is_final = True
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 35

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[09-02-2022_19-45-38] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[09-02-2022_19-45-38] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 33 as problem start state.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'S': 33})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 33})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 33})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 33})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 33})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 33})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'S': 33})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 33})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 33})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 33})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 33})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 33})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'S': 33})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 33})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 33})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 33})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 33})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 33})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 33})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'S': 33})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'S': 33})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 33})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 33})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 33})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 33})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 33})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 33})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'S': 33})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 33})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 33})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 33})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 33})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 33})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 33})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 33})

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state:

holds(2, complete_tower(blue,puzzle_room_table), true, 33).
holds(2, complete_tower(red,puzzle_room_table), false, 33).
holds(2, configuration(manipulator_arm_1), extended, 33).
holds(2, configuration(manipulator_arm_2), extended, 33).
holds(2, configuration(puzzle_room_door), open, 33).
holds(2, configuration(starting_room_door), closed, 33).
holds(2, configuration(store_room_door), open, 33).
holds(2, grasping(manipulator_arm_1), (block,2), 33).
holds(2, grasping(manipulator_arm_2), nothing, 33).
holds(2, in((block,1)), puzzle_room, 33).
holds(2, in((block,2)), puzzle_room, 33).
holds(2, in((block,3)), puzzle_room, 33).
holds(2, in((block,4)), puzzle_room, 33).
holds(2, in((block,5)), puzzle_room, 33).
holds(2, in((block,6)), puzzle_room, 33).
holds(2, in(manipulator_arm_1), puzzle_room, 33).
holds(2, in(manipulator_arm_2), puzzle_room, 33).
holds(2, in(puzzle_room_table), puzzle_room, 33).
holds(2, in(talos), puzzle_room, 33).
holds(2, in_tower((block,1),(block,1)), true, 33).
holds(2, in_tower((block,1),(block,2)), false, 33).
holds(2, in_tower((block,1),(block,3)), false, 33).
holds(2, in_tower((block,1),(block,4)), false, 33).
holds(2, in_tower((block,1),(block,5)), false, 33).
holds(2, in_tower((block,1),(block,6)), false, 33).
holds(2, in_tower((block,2),(block,1)), false, 33).
holds(2, in_tower((block,2),(block,2)), true, 33).
holds(2, in_tower((block,2),(block,3)), false, 33).
holds(2, in_tower((block,2),(block,4)), false, 33).
holds(2, in_tower((block,2),(block,5)), false, 33).
holds(2, in_tower((block,2),(block,6)), false, 33).
holds(2, in_tower((block,3),(block,1)), false, 33).
holds(2, in_tower((block,3),(block,2)), false, 33).
holds(2, in_tower((block,3),(block,3)), true, 33).
holds(2, in_tower((block,3),(block,4)), false, 33).
holds(2, in_tower((block,3),(block,5)), false, 33).
holds(2, in_tower((block,3),(block,6)), false, 33).
holds(2, in_tower((block,4),(block,1)), false, 33).
holds(2, in_tower((block,4),(block,2)), false, 33).
holds(2, in_tower((block,4),(block,3)), false, 33).
holds(2, in_tower((block,4),(block,4)), false, 33).
holds(2, in_tower((block,4),(block,5)), false, 33).
holds(2, in_tower((block,4),(block,6)), false, 33).
holds(2, in_tower((block,5),(block,1)), false, 33).
holds(2, in_tower((block,5),(block,2)), false, 33).
holds(2, in_tower((block,5),(block,3)), false, 33).
holds(2, in_tower((block,5),(block,4)), false, 33).
holds(2, in_tower((block,5),(block,5)), false, 33).
holds(2, in_tower((block,5),(block,6)), false, 33).
holds(2, in_tower((block,6),(block,1)), false, 33).
holds(2, in_tower((block,6),(block,2)), false, 33).
holds(2, in_tower((block,6),(block,3)), false, 33).
holds(2, in_tower((block,6),(block,4)), true, 33).
holds(2, in_tower((block,6),(block,5)), true, 33).
holds(2, in_tower((block,6),(block,6)), true, 33).
holds(2, on((block,1)), puzzle_room_table, 33).
holds(2, on((block,2)), puzzle_room_table, 33).
holds(2, on((block,3)), puzzle_room_table, 33).
holds(2, on((block,4)), (block,5), 33).
holds(2, on((block,5)), (block,6), 33).
holds(2, on((block,6)), puzzle_room_table, 33).
holds(2, tower_base((block,1),puzzle_room_table), true, 33).
holds(2, tower_base((block,2),puzzle_room_table), true, 33).
holds(2, tower_base((block,3),puzzle_room_table), true, 33).
holds(2, tower_base((block,4),puzzle_room_table), false, 33).
holds(2, tower_base((block,5),puzzle_room_table), false, 33).
holds(2, tower_base((block,6),puzzle_room_table), true, 33).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 33).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 33).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 33).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 33).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 33).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 33).
holds(3, complete_tower(blue,puzzle_room_table), true, 33).
holds(3, complete_tower(red,puzzle_room_table), false, 33).
holds(3, grasping(manipulator_arm_1), (block,2), 33).
holds(3, grasping(manipulator_arm_2), nothing, 33).
holds(3, in((block,1)), puzzle_room, 33).
holds(3, in((block,2)), puzzle_room, 33).
holds(3, in((block,3)), puzzle_room, 33).
holds(3, in((block,4)), puzzle_room, 33).
holds(3, in((block,5)), puzzle_room, 33).
holds(3, in((block,6)), puzzle_room, 33).
holds(3, in(manipulator_arm_1), puzzle_room, 33).
holds(3, in(manipulator_arm_2), puzzle_room, 33).
holds(3, in(puzzle_room_table), puzzle_room, 33).
holds(3, in(talos), puzzle_room, 33).
holds(3, in_tower((block,1),(block,1)), true, 33).
holds(3, in_tower((block,1),(block,2)), false, 33).
holds(3, in_tower((block,1),(block,3)), false, 33).
holds(3, in_tower((block,1),(block,4)), false, 33).
holds(3, in_tower((block,1),(block,5)), false, 33).
holds(3, in_tower((block,1),(block,6)), false, 33).
holds(3, in_tower((block,2),(block,1)), false, 33).
holds(3, in_tower((block,2),(block,2)), true, 33).
holds(3, in_tower((block,2),(block,3)), false, 33).
holds(3, in_tower((block,2),(block,4)), false, 33).
holds(3, in_tower((block,2),(block,5)), false, 33).
holds(3, in_tower((block,2),(block,6)), false, 33).
holds(3, in_tower((block,3),(block,1)), false, 33).
holds(3, in_tower((block,3),(block,2)), false, 33).
holds(3, in_tower((block,3),(block,3)), true, 33).
holds(3, in_tower((block,3),(block,4)), false, 33).
holds(3, in_tower((block,3),(block,5)), false, 33).
holds(3, in_tower((block,3),(block,6)), false, 33).
holds(3, in_tower((block,4),(block,1)), false, 33).
holds(3, in_tower((block,4),(block,2)), false, 33).
holds(3, in_tower((block,4),(block,3)), false, 33).
holds(3, in_tower((block,4),(block,4)), false, 33).
holds(3, in_tower((block,4),(block,5)), false, 33).
holds(3, in_tower((block,4),(block,6)), false, 33).
holds(3, in_tower((block,5),(block,1)), false, 33).
holds(3, in_tower((block,5),(block,2)), false, 33).
holds(3, in_tower((block,5),(block,3)), false, 33).
holds(3, in_tower((block,5),(block,4)), false, 33).
holds(3, in_tower((block,5),(block,5)), false, 33).
holds(3, in_tower((block,5),(block,6)), false, 33).
holds(3, in_tower((block,6),(block,1)), false, 33).
holds(3, in_tower((block,6),(block,2)), false, 33).
holds(3, in_tower((block,6),(block,3)), false, 33).
holds(3, in_tower((block,6),(block,4)), true, 33).
holds(3, in_tower((block,6),(block,5)), true, 33).
holds(3, in_tower((block,6),(block,6)), true, 33).
holds(3, on((block,1)), puzzle_room_table, 33).
holds(3, on((block,2)), puzzle_room_table, 33).
holds(3, on((block,3)), puzzle_room_table, 33).
holds(3, on((block,4)), (block,5), 33).
holds(3, on((block,5)), (block,6), 33).
holds(3, on((block,6)), puzzle_room_table, 33).
holds(3, tower_base((block,1),puzzle_room_table), true, 33).
holds(3, tower_base((block,2),puzzle_room_table), true, 33).
holds(3, tower_base((block,3),puzzle_room_table), true, 33).
holds(3, tower_base((block,4),puzzle_room_table), false, 33).
holds(3, tower_base((block,5),puzzle_room_table), false, 33).
holds(3, tower_base((block,6),puzzle_room_table), true, 33).
holds(3, unordered_tower((block,1),puzzle_room_table), false, 33).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 33).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 33).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 33).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 33).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 33).

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 284 rules into program part ash_goal_state:

final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=35']

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,1))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'I': 11})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 11})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 12})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 13})

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 4 rules into program part base:

sub_goal(3, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 11).
sub_goal(3, talos, put(manipulator_arm_1,(block,2),(block,3)), on((block,2)), (block,3), 11).
sub_goal(3, talos, release(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), nothing, 12).
sub_goal(3, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 13).

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=35']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001F8C07D1AF0>]
	incrementor = SolveIncrementor(step_start=33, step_increase=1, step_increase_initial=3, step_end_min=36, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 33), range_=None), IncPart(name='plan_module', args=('#inc', 33, 'true', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 33, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 33, 11, 13, 'sequential', 'false'), range_=None)]

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 790 rules

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004544599999917409s

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.024767s.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004029s with result Satisfiable.

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001F8C1125EA0>

[09-02-2022_19-45-38] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 2)
	('start_step', 33)
	('last_sgoals', 13)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001F88E5CDA60>)
	('first_sgoals', 11)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001F8C1125EA0>)

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 33). %* None *%
#program plan_module(#inc, 33, true, true). %* None *%
#program optimisation_module(#inc, 33, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 33, 11, 13, sequential, false). %* None *%

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     32 : Current =     35
Incrementor step ends | Minimum  =     36 : Maximum =    200

[09-02-2022_19-45-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(35)]), ('state_module', [Number(33), Number(33)]), ('plan_module', [Number(33), Number(33), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(33), Number(33), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('conformance_module', [Number(33), Number(33), Number(11), Number(13), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(34), Number(33)]), ('plan_module', [Number(34), Number(33), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(34), Number(33), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(34)]), ('action_preconditions', [Number(34)]), ('variable_relations', [Number(34)]), ('abstraction_mappings', [Number(34)]), ('conformance_module', [Number(34), Number(33), Number(11), Number(13), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(35), Number(33)]), ('plan_module', [Number(35), Number(33), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(35), Number(33), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(35)]), ('action_preconditions', [Number(35)]), ('variable_relations', [Number(35)]), ('abstraction_mappings', [Number(35)]), ('conformance_module', [Number(35), Number(33), Number(11), Number(13), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.232648s.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.024425s with result Satisfiable.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.25707329999977446, Incremental time limit = None
Running cumulative time = 0.25707329999977446, Cumulative time limit = 1800
Used memory = (RSS = 896.406250Mb, VMS = 888.593750Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.232648s, Solving = 0.024425s, Total = 0.257073s, Memory = (RSS = 896.406250Mb, VMS = 888.593750Mb), Step range = [33-35]), Calls = 1
Final Model :: Total atoms = 4341, Cost = (2, 0, -2), Optimality proven = False, Number = 4, Thread ID = 2, Model type = ModelType.StableModel

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     35 : Current =     36
Incrementor step ends | Minimum  =     36 : Maximum =    200

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(36)]), ('state_module', [Number(36), Number(33)]), ('plan_module', [Number(36), Number(33), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(36), Number(33), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(36)]), ('action_preconditions', [Number(36)]), ('variable_relations', [Number(36)]), ('abstraction_mappings', [Number(36)]), ('conformance_module', [Number(36), Number(33), Number(11), Number(13), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.102239s.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008317s with result Satisfiable.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1105560000000878, Incremental time limit = None
Running cumulative time = 0.36762929999986227, Cumulative time limit = 1800
Used memory = (RSS = 896.781250Mb, VMS = 888.843750Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 6
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.334887s, Solving = 0.032742s, Total = 0.367629s, Memory = (RSS = 896.781250Mb, VMS = 888.843750Mb), Step range = [33-36]), Calls = 2
Final Model :: Total atoms = 4821, Cost = (4, 0, -2), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.232648s, Solving = 0.024425s, Total = 0.257073s, Memory = (RSS = 896.406250Mb, VMS = 888.593750Mb), Step range = [33-35]
2 : Statistics :: Grounding = 0.102239s, Solving = 0.008317s, Total = 0.110556s, Memory = (RSS = 896.781250Mb, VMS = 888.843750Mb), Step range = [36-36]

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.367629s due to: Stop condition reached.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 10, 17: 11, 18: 11, 19: 12, 20: 12, 21: 12, 22: 13, 23: 14, 24: 15, 25: 16, 26: 17, 27: 18, 28: 19, 29: 19, 30: 20, 31: 21, 32: 22, 33: 23, 34: 23, 35: 24, 36: 25, 37: 25, 38: 25, 39: 25, 40: 25, 41: 25, 42: 25, 43: 25, 44: 26, 45: 27, 46: 27, 47: 27, 48: 27, 49: 27, 50: 28, 51: 28, 52: 29, 53: 29, 54: 30, 55: 31, 56: 31, 57: 32, 58: 33, 59: 33}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 16, 11: 18, 12: 21, 13: 22, 14: 23, 15: 24, 16: 25, 17: 26, 18: 27, 19: 29, 20: 30, 21: 31, 22: 32, 23: 34, 24: 35, 25: 43, 26: 44, 27: 49, 28: 51, 29: 53, 30: 54, 31: 56, 32: 57, 33: 59}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 10, 17: 11, 18: 11, 19: 12, 20: 12, 21: 12, 22: 13, 23: 14, 24: 15, 25: 16, 26: 17, 27: 18, 28: 19, 29: 19, 30: 20, 31: 21, 32: 22, 33: 23, 34: 23, 35: 24, 36: 25, 37: 25, 38: 25, 39: 25, 40: 25, 41: 25, 42: 25, 43: 25, 44: 26, 45: 27, 46: 27, 47: 27, 48: 27, 49: 27, 50: 28, 51: 28, 52: 29, 53: 29, 54: 30, 55: 31, 56: 31, 57: 32, 58: 33, 59: 33}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 16, 11: 18, 12: 21, 13: 22, 14: 23, 15: 24, 16: 25, 17: 26, 18: 27, 19: 29, 20: 30, 21: 31, 22: 32, 23: 34, 24: 35, 25: 43, 26: 44, 27: 49, 28: 51, 29: 53, 30: 54, 31: 56, 32: 57, 33: 59}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 12, 36: 13}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 34, 12: 35, 13: 36}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 13, Last requested goal index = 13, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.334887s, Solving = 0.032742s, Total = 0.367629s, Memory = (RSS = 896.781250Mb, VMS = 888.843750Mb), Step range = [33-36]), Calls = 2
Model :: Total atoms = 4821, Cost = (4, 0, -2), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                  Steps = 3 :: Actions = 4                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,store_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,store_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,store_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 8:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 9:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
        talos : grasp(manipulator_arm_2,(block,5))
Step 10:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
        talos : configure(manipulator_arm_2,retracted)
Step 11:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 12:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,(block,5))
Step 14:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_2,puzzle_room_door)
Step 16:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 19:
    Current Sub-goals:
        [Index = 4] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 20:
    Current Sub-goals:
        [Index = 4] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 4] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 21:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,6))
Step 22:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 23:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 24:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 25:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,5))
Step 26:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 27:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : move(puzzle_room)
Step 28:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 29:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
        talos : put(manipulator_arm_2,(block,5),(block,6))
Step 30:
    Current Sub-goals:
        [Index = 7] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 7] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 7] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 7] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
        talos : release(manipulator_arm_2,(block,5))
Step 31:
    Current Sub-goals:
        [Index = 8] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 8] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,4))
Step 32:
    Current Sub-goals:
        [Index = 9] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 9] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 9] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 9] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_arm_2,(block,4),(block,5))
        talos : release(manipulator_arm_1,(block,3))
Step 33:
    Current Sub-goals:
        [Index = 10] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 10] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 10] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 10] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,2))
        talos : release(manipulator_arm_2,(block,4))
Step 34:
    Current Sub-goals:
        [Index = 11] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 11] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 11] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 11] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,1))
        talos : put(manipulator_arm_1,(block,2),(block,3))
Step 35:
    Current Sub-goals:
        [Index = 12] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 12] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,2))
Step 36:
    Current Sub-goals:
        [Index = 13] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 13] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_arm_2,(block,1),(block,2))

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=33, total_plan_length=36, step_range=range(33, 37)

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 13, Total actions = 19, Produced sub-goal stages = 19
Level [2]: Length = 36, Total actions = 45, Produced sub-goal stages = 45
Level [1]: Length = 59, Total actions = 68, Produced sub-goal stages = 0

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 2 (par-ref), LE =   3, AC =   4, CF = 0.8, GT =   4.15s, ST =   0.34s, OT = 0.00s, TT =   4.49s, EF = (LE = 1.0, AC = 1.0), ED = (LE = 0.0, AC = 0.0), EB = (LE = 0.0, AC = 0.0)

[09-02-2022_19-45-39] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=3, start_step=33, blend=Blend(left=0, right=0)

[09-02-2022_19-45-39] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=1, small_group_size=1, large_group_size=2

[09-02-2022_19-45-39] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=34, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 2, Problem Range = [11-12], Size = 3, Sub-goal Stage Range = [34-36]
Division points [total=1] : [(Index = 34, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Monolevel problem 6 at level 2 solved.

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 11 at level 1:
Total Templated Partial Problems = 2, Problem Range = [11-12], Size = 3, Sub-goal Stage Range = [34-36]
Division points [total=1] : [(Index = 34, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [34-34]

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [34-34], problem number = 11, increment number = 11

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 34)
	('last_sgoals', 34)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001F88E5CDA60>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [34-34] : Concurrency enabled : Minimum search length bound disabled with value 59

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 34
last_sgoals = 34
start_step = 59
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 59

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[09-02-2022_19-45-39] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[09-02-2022_19-45-39] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 59 as problem start state.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'S': 59})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,2))', 'S': 59})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 59})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 59})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 59})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 59})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 59})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 59})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'S': 59})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 59})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,2)', 'S': 59})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 59})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 59})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 59})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 59})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 59})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'S': 59})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 59})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 59})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 59})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 59})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 59})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 59})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'S': 59})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 59})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 59})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 59})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 59})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 59})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'S': 59})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 59})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 59})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 59})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 59})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 59})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 59})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 59})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 59})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 59})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 59})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 59})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 59})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 59})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 59})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'S': 59})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 59})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 59})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 59})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 59})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 59})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 59})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 59})

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), true, 59).
holds(1, complete_tower(red,puzzle_room_table), false, 59).
holds(1, configuration(manipulator_end_1), aligned_with((block,2)), 59).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 59).
holds(1, configuration(manipulator_limb_1), extended, 59).
holds(1, configuration(manipulator_limb_2), extended, 59).
holds(1, configuration(puzzle_room_door), open, 59).
holds(1, configuration(starting_room_door), closed, 59).
holds(1, configuration(store_room_door), open, 59).
holds(1, grasping(manipulator_arm_1), (block,2), 59).
holds(1, grasping(manipulator_arm_2), nothing, 59).
holds(1, grasping(manipulator_end_1), (block,2), 59).
holds(1, grasping(manipulator_end_2), nothing, 59).
holds(1, in((block,1)), (puzzle_room,1), 59).
holds(1, in((block,2)), (puzzle_room,1), 59).
holds(1, in((block,3)), (puzzle_room,1), 59).
holds(1, in((block,4)), (puzzle_room,1), 59).
holds(1, in((block,5)), (puzzle_room,1), 59).
holds(1, in((block,6)), (puzzle_room,1), 59).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 59).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 59).
holds(1, in(manipulator_end_1), (puzzle_room,1), 59).
holds(1, in(manipulator_end_2), (puzzle_room,1), 59).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 59).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 59).
holds(1, in(puzzle_room_table), (puzzle_room,1), 59).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 59).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 59).
holds(1, in(talos), (puzzle_room,1), 59).
holds(1, in_tower((block,1),(block,1)), true, 59).
holds(1, in_tower((block,1),(block,2)), false, 59).
holds(1, in_tower((block,1),(block,3)), false, 59).
holds(1, in_tower((block,1),(block,4)), false, 59).
holds(1, in_tower((block,1),(block,5)), false, 59).
holds(1, in_tower((block,1),(block,6)), false, 59).
holds(1, in_tower((block,2),(block,1)), false, 59).
holds(1, in_tower((block,2),(block,2)), true, 59).
holds(1, in_tower((block,2),(block,3)), false, 59).
holds(1, in_tower((block,2),(block,4)), false, 59).
holds(1, in_tower((block,2),(block,5)), false, 59).
holds(1, in_tower((block,2),(block,6)), false, 59).
holds(1, in_tower((block,3),(block,1)), false, 59).
holds(1, in_tower((block,3),(block,2)), false, 59).
holds(1, in_tower((block,3),(block,3)), true, 59).
holds(1, in_tower((block,3),(block,4)), false, 59).
holds(1, in_tower((block,3),(block,5)), false, 59).
holds(1, in_tower((block,3),(block,6)), false, 59).
holds(1, in_tower((block,4),(block,1)), false, 59).
holds(1, in_tower((block,4),(block,2)), false, 59).
holds(1, in_tower((block,4),(block,3)), false, 59).
holds(1, in_tower((block,4),(block,4)), false, 59).
holds(1, in_tower((block,4),(block,5)), false, 59).
holds(1, in_tower((block,4),(block,6)), false, 59).
holds(1, in_tower((block,5),(block,1)), false, 59).
holds(1, in_tower((block,5),(block,2)), false, 59).
holds(1, in_tower((block,5),(block,3)), false, 59).
holds(1, in_tower((block,5),(block,4)), false, 59).
holds(1, in_tower((block,5),(block,5)), false, 59).
holds(1, in_tower((block,5),(block,6)), false, 59).
holds(1, in_tower((block,6),(block,1)), false, 59).
holds(1, in_tower((block,6),(block,2)), false, 59).
holds(1, in_tower((block,6),(block,3)), false, 59).
holds(1, in_tower((block,6),(block,4)), true, 59).
holds(1, in_tower((block,6),(block,5)), true, 59).
holds(1, in_tower((block,6),(block,6)), true, 59).
holds(1, on((block,1)), puzzle_room_table_left, 59).
holds(1, on((block,2)), puzzle_room_table_right, 59).
holds(1, on((block,3)), puzzle_room_table_left, 59).
holds(1, on((block,4)), (block,5), 59).
holds(1, on((block,5)), (block,6), 59).
holds(1, on((block,6)), puzzle_room_table_right, 59).
holds(1, tower_base((block,1),puzzle_room_table), true, 59).
holds(1, tower_base((block,2),puzzle_room_table), true, 59).
holds(1, tower_base((block,3),puzzle_room_table), true, 59).
holds(1, tower_base((block,4),puzzle_room_table), false, 59).
holds(1, tower_base((block,5),puzzle_room_table), false, 59).
holds(1, tower_base((block,6),puzzle_room_table), true, 59).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 59).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 59).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 59).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 59).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 59).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 59).
holds(2, complete_tower(blue,puzzle_room_table), true, 59).
holds(2, complete_tower(red,puzzle_room_table), false, 59).
holds(2, configuration(manipulator_arm_1), extended, 59).
holds(2, configuration(manipulator_arm_2), extended, 59).
holds(2, configuration(puzzle_room_door), open, 59).
holds(2, configuration(starting_room_door), closed, 59).
holds(2, configuration(store_room_door), open, 59).
holds(2, grasping(manipulator_arm_1), (block,2), 59).
holds(2, grasping(manipulator_arm_2), nothing, 59).
holds(2, in((block,1)), puzzle_room, 59).
holds(2, in((block,2)), puzzle_room, 59).
holds(2, in((block,3)), puzzle_room, 59).
holds(2, in((block,4)), puzzle_room, 59).
holds(2, in((block,5)), puzzle_room, 59).
holds(2, in((block,6)), puzzle_room, 59).
holds(2, in(manipulator_arm_1), puzzle_room, 59).
holds(2, in(manipulator_arm_2), puzzle_room, 59).
holds(2, in(puzzle_room_table), puzzle_room, 59).
holds(2, in(talos), puzzle_room, 59).
holds(2, in_tower((block,1),(block,1)), true, 59).
holds(2, in_tower((block,1),(block,2)), false, 59).
holds(2, in_tower((block,1),(block,3)), false, 59).
holds(2, in_tower((block,1),(block,4)), false, 59).
holds(2, in_tower((block,1),(block,5)), false, 59).
holds(2, in_tower((block,1),(block,6)), false, 59).
holds(2, in_tower((block,2),(block,1)), false, 59).
holds(2, in_tower((block,2),(block,2)), true, 59).
holds(2, in_tower((block,2),(block,3)), false, 59).
holds(2, in_tower((block,2),(block,4)), false, 59).
holds(2, in_tower((block,2),(block,5)), false, 59).
holds(2, in_tower((block,2),(block,6)), false, 59).
holds(2, in_tower((block,3),(block,1)), false, 59).
holds(2, in_tower((block,3),(block,2)), false, 59).
holds(2, in_tower((block,3),(block,3)), true, 59).
holds(2, in_tower((block,3),(block,4)), false, 59).
holds(2, in_tower((block,3),(block,5)), false, 59).
holds(2, in_tower((block,3),(block,6)), false, 59).
holds(2, in_tower((block,4),(block,1)), false, 59).
holds(2, in_tower((block,4),(block,2)), false, 59).
holds(2, in_tower((block,4),(block,3)), false, 59).
holds(2, in_tower((block,4),(block,4)), false, 59).
holds(2, in_tower((block,4),(block,5)), false, 59).
holds(2, in_tower((block,4),(block,6)), false, 59).
holds(2, in_tower((block,5),(block,1)), false, 59).
holds(2, in_tower((block,5),(block,2)), false, 59).
holds(2, in_tower((block,5),(block,3)), false, 59).
holds(2, in_tower((block,5),(block,4)), false, 59).
holds(2, in_tower((block,5),(block,5)), false, 59).
holds(2, in_tower((block,5),(block,6)), false, 59).
holds(2, in_tower((block,6),(block,1)), false, 59).
holds(2, in_tower((block,6),(block,2)), false, 59).
holds(2, in_tower((block,6),(block,3)), false, 59).
holds(2, in_tower((block,6),(block,4)), true, 59).
holds(2, in_tower((block,6),(block,5)), true, 59).
holds(2, in_tower((block,6),(block,6)), true, 59).
holds(2, on((block,1)), puzzle_room_table, 59).
holds(2, on((block,2)), puzzle_room_table, 59).
holds(2, on((block,3)), puzzle_room_table, 59).
holds(2, on((block,4)), (block,5), 59).
holds(2, on((block,5)), (block,6), 59).
holds(2, on((block,6)), puzzle_room_table, 59).
holds(2, tower_base((block,1),puzzle_room_table), true, 59).
holds(2, tower_base((block,2),puzzle_room_table), true, 59).
holds(2, tower_base((block,3),puzzle_room_table), true, 59).
holds(2, tower_base((block,4),puzzle_room_table), false, 59).
holds(2, tower_base((block,5),puzzle_room_table), false, 59).
holds(2, tower_base((block,6),puzzle_room_table), true, 59).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 59).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 59).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 59).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 59).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 59).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 59).

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,1))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'I': 34})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 34})

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 2 rules into program part base:

sub_goal(2, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 34).
sub_goal(2, talos, put(manipulator_arm_1,(block,2),(block,3)), on((block,2)), (block,3), 34).

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001F8C07D1CA0>]
	incrementor = SolveIncrementor(step_start=59, step_increase=1, step_increase_initial=2, step_end_min=60, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 59), range_=None), IncPart(name='plan_module', args=('#inc', 59, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 59, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 59, 34, 34, 'sequential', 'false'), range_=None)]

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 809 rules

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004497700000001714s

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.029638s.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004860s with result Satisfiable.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001F8C130F680>

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 59)
	('last_sgoals', 34)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001F88E5CDA60>)
	('first_sgoals', 34)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001F8C130F680>)

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 59). %* None *%
#program plan_module(#inc, 59, true, false). %* None *%
#program optimisation_module(#inc, 59, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 59, 34, 34, sequential, false). %* None *%

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     58 : Current =     60
Incrementor step ends | Minimum  =     60 : Maximum =    200

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(60)]), ('state_module', [Number(59), Number(59)]), ('plan_module', [Number(59), Number(59), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(59), Number(59), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(59)]), ('action_preconditions', [Number(59)]), ('variable_relations', [Number(59)]), ('abstraction_mappings', [Number(59)]), ('conformance_module', [Number(59), Number(59), Number(34), Number(34), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(60), Number(59)]), ('plan_module', [Number(60), Number(59), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(60), Number(59), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(60)]), ('action_preconditions', [Number(60)]), ('variable_relations', [Number(60)]), ('abstraction_mappings', [Number(60)]), ('conformance_module', [Number(60), Number(59), Number(34), Number(34), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.258051s.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008504s with result Unsatisfiable.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2665549999999257, Incremental time limit = None
Running cumulative time = 0.2665549999999257, Cumulative time limit = 1800
Used memory = (RSS = 896.906250Mb, VMS = 889.093750Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     60 : Current =     61
Incrementor step ends | Minimum  =     60 : Maximum =    200

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(61)]), ('state_module', [Number(61), Number(59)]), ('plan_module', [Number(61), Number(59), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(61), Number(59), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(61)]), ('action_preconditions', [Number(61)]), ('variable_relations', [Number(61)]), ('abstraction_mappings', [Number(61)]), ('conformance_module', [Number(61), Number(59), Number(34), Number(34), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.132213s.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006911s with result Satisfiable.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.13912410000011732, Incremental time limit = None
Running cumulative time = 0.40567910000004304, Cumulative time limit = 1800
Used memory = (RSS = 896.906250Mb, VMS = 889.093750Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.390264s, Solving = 0.015415s, Total = 0.405679s, Memory = (RSS = 896.906250Mb, VMS = 889.093750Mb), Step range = [59-61]), Calls = 2
Final Model :: Total atoms = 4524, Cost = (3, 0, -1), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.258051s, Solving = 0.008504s, Total = 0.266555s, Memory = (RSS = 896.906250Mb, VMS = 889.093750Mb), Step range = [59-60]
2 : Statistics :: Grounding = 0.132213s, Solving = 0.006911s, Total = 0.139124s, Memory = (RSS = 896.906250Mb, VMS = 889.093750Mb), Step range = [61-61]

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.405679s due to: Stop condition reached.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 10, 17: 11, 18: 11, 19: 12, 20: 12, 21: 12, 22: 13, 23: 14, 24: 15, 25: 16, 26: 17, 27: 18, 28: 19, 29: 19, 30: 20, 31: 21, 32: 22, 33: 23, 34: 23, 35: 24, 36: 25, 37: 25, 38: 25, 39: 25, 40: 25, 41: 25, 42: 25, 43: 25, 44: 26, 45: 27, 46: 27, 47: 27, 48: 27, 49: 27, 50: 28, 51: 28, 52: 29, 53: 29, 54: 30, 55: 31, 56: 31, 57: 32, 58: 33, 59: 33}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 16, 11: 18, 12: 21, 13: 22, 14: 23, 15: 24, 16: 25, 17: 26, 18: 27, 19: 29, 20: 30, 21: 31, 22: 32, 23: 34, 24: 35, 25: 43, 26: 44, 27: 49, 28: 51, 29: 53, 30: 54, 31: 56, 32: 57, 33: 59}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 12, 36: 13}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 34, 12: 35, 13: 36}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 10, 17: 11, 18: 11, 19: 12, 20: 12, 21: 12, 22: 13, 23: 14, 24: 15, 25: 16, 26: 17, 27: 18, 28: 19, 29: 19, 30: 20, 31: 21, 32: 22, 33: 23, 34: 23, 35: 24, 36: 25, 37: 25, 38: 25, 39: 25, 40: 25, 41: 25, 42: 25, 43: 25, 44: 26, 45: 27, 46: 27, 47: 27, 48: 27, 49: 27, 50: 28, 51: 28, 52: 29, 53: 29, 54: 30, 55: 31, 56: 31, 57: 32, 58: 33, 59: 33, 60: 34, 61: 34}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 16, 11: 18, 12: 21, 13: 22, 14: 23, 15: 24, 16: 25, 17: 26, 18: 27, 19: 29, 20: 30, 21: 31, 22: 32, 23: 34, 24: 35, 25: 43, 26: 44, 27: 49, 28: 51, 29: 53, 30: 54, 31: 56, 32: 57, 33: 59, 34: 61}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 12, 36: 13}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 34, 12: 35, 13: 36}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 34, Last requested goal index = 34, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.390264s, Solving = 0.015415s, Total = 0.405679s, Memory = (RSS = 896.906250Mb, VMS = 889.093750Mb), Step range = [59-61]), Calls = 2
Model :: Total atoms = 4524, Cost = (3, 0, -1), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 2 :: Actions = 3                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 11:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 12:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 14:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
        talos : grasp(manipulator_end_2,(block,5))
Step 15:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : release(manipulator_end_2,(block,5))
Step 16:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 17:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 18:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 19:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 20:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 21:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 22:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 13] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 23:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 24:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 25:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 26:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 27:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 28:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 29:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 30:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 31:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 32:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 33:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 34:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 35:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 36:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 37:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 38:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 39:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 40:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 41:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 42:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 43:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 44:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 45:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 46:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 47:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 48:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 49:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 50:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 51:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 52:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 29] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 53:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 29] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 29] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 54:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
        talos : release(manipulator_end_2,(block,5))
Step 55:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 56:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 57:
    Current Sub-goals:
        [Index = 32] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 32] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 32] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 32] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_end_2,(block,4),(block,5))
        talos : release(manipulator_end_1,(block,3))
Step 58:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 33] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 59:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 33] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 33] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
        talos : release(manipulator_end_2,(block,4))
Step 60:
    Current Sub-goals:
        [Index = 34] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 34] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,1)))
Step 61:
    Current Sub-goals:
        [Index = 34] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 34] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 34] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 34] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,1))
        talos : put(manipulator_end_1,(block,2),(block,3))

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Monolevel problem 11 at level 1 solved.

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Online planning increment 11 finished.

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 6 : Total constraining sub-goal stages = 13 : Goals achieved = 13 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 11 : Total constraining sub-goal stages = 36 : Goals achieved = 34 : Goals unachieved = 2 : Complete = False

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 12 by method ground-first is [1-1].

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 12 at level 1:
Total Templated Partial Problems = 2, Problem Range = [11-12], Size = 3, Sub-goal Stage Range = [34-36]
Division points [total=1] : [(Index = 34, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [35-36]

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [35-36], problem number = 12, increment number = 12

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 35)
	('last_sgoals', 36)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001F88E5CDA60>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [35-36] : Concurrency enabled : Minimum search length bound enabled with value 62

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 35
last_sgoals = 36
start_step = 61
is_initial = False
is_final = True
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 62

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[09-02-2022_19-45-39] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[09-02-2022_19-45-39] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 61 as problem start state.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'S': 61})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,2))', 'S': 61})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,1))', 'S': 61})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 61})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 61})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 61})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 61})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 61})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'S': 61})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'S': 61})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,2)', 'S': 61})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,1)', 'S': 61})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 61})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 61})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 61})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,1)', 'S': 61})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 61})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 61})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 61})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 61})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 61})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 61})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 61})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 61})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 61})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 61})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 61})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 61})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 61})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 61})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 61})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'S': 61})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 61})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 61})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 61})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 61})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 61})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'S': 61})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 61})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 61})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 61})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 61})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 61})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 61})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'S': 61})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 61})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 61})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 61})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 61})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 61})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'S': 61})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'S': 61})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 61})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 61})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 61})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 61})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 61})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 61})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 61})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 61})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 61})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 61})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 61})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 61})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 61})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'S': 61})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 61})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 61})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 61})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 61})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 61})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'S': 61})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 61})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 61})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 61})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 61})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 61})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 61})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 61})

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), true, 61).
holds(1, complete_tower(red,puzzle_room_table), false, 61).
holds(1, configuration(manipulator_end_1), aligned_with((block,2)), 61).
holds(1, configuration(manipulator_end_2), aligned_with((block,1)), 61).
holds(1, configuration(manipulator_limb_1), extended, 61).
holds(1, configuration(manipulator_limb_2), extended, 61).
holds(1, configuration(puzzle_room_door), open, 61).
holds(1, configuration(starting_room_door), closed, 61).
holds(1, configuration(store_room_door), open, 61).
holds(1, grasping(manipulator_arm_1), (block,2), 61).
holds(1, grasping(manipulator_arm_2), (block,1), 61).
holds(1, grasping(manipulator_end_1), (block,2), 61).
holds(1, grasping(manipulator_end_2), (block,1), 61).
holds(1, in((block,1)), (puzzle_room,1), 61).
holds(1, in((block,2)), (puzzle_room,1), 61).
holds(1, in((block,3)), (puzzle_room,1), 61).
holds(1, in((block,4)), (puzzle_room,1), 61).
holds(1, in((block,5)), (puzzle_room,1), 61).
holds(1, in((block,6)), (puzzle_room,1), 61).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 61).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 61).
holds(1, in(manipulator_end_1), (puzzle_room,1), 61).
holds(1, in(manipulator_end_2), (puzzle_room,1), 61).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 61).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 61).
holds(1, in(puzzle_room_table), (puzzle_room,1), 61).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 61).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 61).
holds(1, in(talos), (puzzle_room,1), 61).
holds(1, in_tower((block,1),(block,1)), true, 61).
holds(1, in_tower((block,1),(block,2)), false, 61).
holds(1, in_tower((block,1),(block,3)), false, 61).
holds(1, in_tower((block,1),(block,4)), false, 61).
holds(1, in_tower((block,1),(block,5)), false, 61).
holds(1, in_tower((block,1),(block,6)), false, 61).
holds(1, in_tower((block,2),(block,1)), false, 61).
holds(1, in_tower((block,2),(block,2)), false, 61).
holds(1, in_tower((block,2),(block,3)), false, 61).
holds(1, in_tower((block,2),(block,4)), false, 61).
holds(1, in_tower((block,2),(block,5)), false, 61).
holds(1, in_tower((block,2),(block,6)), false, 61).
holds(1, in_tower((block,3),(block,1)), false, 61).
holds(1, in_tower((block,3),(block,2)), true, 61).
holds(1, in_tower((block,3),(block,3)), true, 61).
holds(1, in_tower((block,3),(block,4)), false, 61).
holds(1, in_tower((block,3),(block,5)), false, 61).
holds(1, in_tower((block,3),(block,6)), false, 61).
holds(1, in_tower((block,4),(block,1)), false, 61).
holds(1, in_tower((block,4),(block,2)), false, 61).
holds(1, in_tower((block,4),(block,3)), false, 61).
holds(1, in_tower((block,4),(block,4)), false, 61).
holds(1, in_tower((block,4),(block,5)), false, 61).
holds(1, in_tower((block,4),(block,6)), false, 61).
holds(1, in_tower((block,5),(block,1)), false, 61).
holds(1, in_tower((block,5),(block,2)), false, 61).
holds(1, in_tower((block,5),(block,3)), false, 61).
holds(1, in_tower((block,5),(block,4)), false, 61).
holds(1, in_tower((block,5),(block,5)), false, 61).
holds(1, in_tower((block,5),(block,6)), false, 61).
holds(1, in_tower((block,6),(block,1)), false, 61).
holds(1, in_tower((block,6),(block,2)), false, 61).
holds(1, in_tower((block,6),(block,3)), false, 61).
holds(1, in_tower((block,6),(block,4)), true, 61).
holds(1, in_tower((block,6),(block,5)), true, 61).
holds(1, in_tower((block,6),(block,6)), true, 61).
holds(1, on((block,1)), puzzle_room_table_left, 61).
holds(1, on((block,2)), (block,3), 61).
holds(1, on((block,3)), puzzle_room_table_left, 61).
holds(1, on((block,4)), (block,5), 61).
holds(1, on((block,5)), (block,6), 61).
holds(1, on((block,6)), puzzle_room_table_right, 61).
holds(1, tower_base((block,1),puzzle_room_table), true, 61).
holds(1, tower_base((block,2),puzzle_room_table), false, 61).
holds(1, tower_base((block,3),puzzle_room_table), true, 61).
holds(1, tower_base((block,4),puzzle_room_table), false, 61).
holds(1, tower_base((block,5),puzzle_room_table), false, 61).
holds(1, tower_base((block,6),puzzle_room_table), true, 61).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 61).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 61).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 61).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 61).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 61).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 61).
holds(2, complete_tower(blue,puzzle_room_table), true, 61).
holds(2, complete_tower(red,puzzle_room_table), false, 61).
holds(2, configuration(manipulator_arm_1), extended, 61).
holds(2, configuration(manipulator_arm_2), extended, 61).
holds(2, configuration(puzzle_room_door), open, 61).
holds(2, configuration(starting_room_door), closed, 61).
holds(2, configuration(store_room_door), open, 61).
holds(2, grasping(manipulator_arm_1), (block,2), 61).
holds(2, grasping(manipulator_arm_2), (block,1), 61).
holds(2, in((block,1)), puzzle_room, 61).
holds(2, in((block,2)), puzzle_room, 61).
holds(2, in((block,3)), puzzle_room, 61).
holds(2, in((block,4)), puzzle_room, 61).
holds(2, in((block,5)), puzzle_room, 61).
holds(2, in((block,6)), puzzle_room, 61).
holds(2, in(manipulator_arm_1), puzzle_room, 61).
holds(2, in(manipulator_arm_2), puzzle_room, 61).
holds(2, in(puzzle_room_table), puzzle_room, 61).
holds(2, in(talos), puzzle_room, 61).
holds(2, in_tower((block,1),(block,1)), true, 61).
holds(2, in_tower((block,1),(block,2)), false, 61).
holds(2, in_tower((block,1),(block,3)), false, 61).
holds(2, in_tower((block,1),(block,4)), false, 61).
holds(2, in_tower((block,1),(block,5)), false, 61).
holds(2, in_tower((block,1),(block,6)), false, 61).
holds(2, in_tower((block,2),(block,1)), false, 61).
holds(2, in_tower((block,2),(block,2)), false, 61).
holds(2, in_tower((block,2),(block,3)), false, 61).
holds(2, in_tower((block,2),(block,4)), false, 61).
holds(2, in_tower((block,2),(block,5)), false, 61).
holds(2, in_tower((block,2),(block,6)), false, 61).
holds(2, in_tower((block,3),(block,1)), false, 61).
holds(2, in_tower((block,3),(block,2)), true, 61).
holds(2, in_tower((block,3),(block,3)), true, 61).
holds(2, in_tower((block,3),(block,4)), false, 61).
holds(2, in_tower((block,3),(block,5)), false, 61).
holds(2, in_tower((block,3),(block,6)), false, 61).
holds(2, in_tower((block,4),(block,1)), false, 61).
holds(2, in_tower((block,4),(block,2)), false, 61).
holds(2, in_tower((block,4),(block,3)), false, 61).
holds(2, in_tower((block,4),(block,4)), false, 61).
holds(2, in_tower((block,4),(block,5)), false, 61).
holds(2, in_tower((block,4),(block,6)), false, 61).
holds(2, in_tower((block,5),(block,1)), false, 61).
holds(2, in_tower((block,5),(block,2)), false, 61).
holds(2, in_tower((block,5),(block,3)), false, 61).
holds(2, in_tower((block,5),(block,4)), false, 61).
holds(2, in_tower((block,5),(block,5)), false, 61).
holds(2, in_tower((block,5),(block,6)), false, 61).
holds(2, in_tower((block,6),(block,1)), false, 61).
holds(2, in_tower((block,6),(block,2)), false, 61).
holds(2, in_tower((block,6),(block,3)), false, 61).
holds(2, in_tower((block,6),(block,4)), true, 61).
holds(2, in_tower((block,6),(block,5)), true, 61).
holds(2, in_tower((block,6),(block,6)), true, 61).
holds(2, on((block,1)), puzzle_room_table, 61).
holds(2, on((block,2)), (block,3), 61).
holds(2, on((block,3)), puzzle_room_table, 61).
holds(2, on((block,4)), (block,5), 61).
holds(2, on((block,5)), (block,6), 61).
holds(2, on((block,6)), puzzle_room_table, 61).
holds(2, tower_base((block,1),puzzle_room_table), true, 61).
holds(2, tower_base((block,2),puzzle_room_table), false, 61).
holds(2, tower_base((block,3),puzzle_room_table), true, 61).
holds(2, tower_base((block,4),puzzle_room_table), false, 61).
holds(2, tower_base((block,5),puzzle_room_table), false, 61).
holds(2, tower_base((block,6),puzzle_room_table), true, 61).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 61).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 61).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 61).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 61).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 61).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 61).

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=62']

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 35})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 36})

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 2 rules into program part base:

sub_goal(2, talos, release(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), nothing, 35).
sub_goal(2, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 36).

[09-02-2022_19-45-39] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=62']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001F8C07D1D30>]
	incrementor = SolveIncrementor(step_start=61, step_increase=1, step_increase_initial=2, step_end_min=63, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 61), range_=None), IncPart(name='plan_module', args=('#inc', 61, 'true', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 61, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 61, 35, 36, 'sequential', 'false'), range_=None)]

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 809 rules

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0045094000001881795s

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[09-02-2022_19-45-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[09-02-2022_19-45-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.029552s.

[09-02-2022_19-45-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005127s with result Satisfiable.

[09-02-2022_19-45-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[09-02-2022_19-45-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001F8C11A7C20>

[09-02-2022_19-45-40] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 61)
	('last_sgoals', 36)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001F88E5CDA60>)
	('first_sgoals', 35)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001F8C11A7C20>)

[09-02-2022_19-45-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 61). %* None *%
#program plan_module(#inc, 61, true, true). %* None *%
#program optimisation_module(#inc, 61, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 61, 35, 36, sequential, false). %* None *%

[09-02-2022_19-45-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     60 : Current =     62
Incrementor step ends | Minimum  =     63 : Maximum =    200

[09-02-2022_19-45-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(62)]), ('state_module', [Number(61), Number(61)]), ('plan_module', [Number(61), Number(61), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(61), Number(61), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(61)]), ('action_preconditions', [Number(61)]), ('variable_relations', [Number(61)]), ('abstraction_mappings', [Number(61)]), ('conformance_module', [Number(61), Number(61), Number(35), Number(36), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(62), Number(61)]), ('plan_module', [Number(62), Number(61), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(62), Number(61), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(62)]), ('action_preconditions', [Number(62)]), ('variable_relations', [Number(62)]), ('abstraction_mappings', [Number(62)]), ('conformance_module', [Number(62), Number(61), Number(35), Number(36), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.260055s.

[09-02-2022_19-45-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017560s with result Satisfiable.

[09-02-2022_19-45-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2776153999998314, Incremental time limit = None
Running cumulative time = 0.2776153999998314, Cumulative time limit = 1800
Used memory = (RSS = 897.031250Mb, VMS = 889.093750Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.260055s, Solving = 0.017560s, Total = 0.277615s, Memory = (RSS = 897.031250Mb, VMS = 889.093750Mb), Step range = [61-62]), Calls = 1
Final Model :: Total atoms = 4432, Cost = (1, 0, -1), Optimality proven = False, Number = 3, Thread ID = 2, Model type = ModelType.StableModel

[09-02-2022_19-45-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     62 : Current =     63
Incrementor step ends | Minimum  =     63 : Maximum =    200

[09-02-2022_19-45-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(63)]), ('state_module', [Number(63), Number(61)]), ('plan_module', [Number(63), Number(61), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(63), Number(61), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(63)]), ('action_preconditions', [Number(63)]), ('variable_relations', [Number(63)]), ('abstraction_mappings', [Number(63)]), ('conformance_module', [Number(63), Number(61), Number(35), Number(36), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_19-45-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.133062s.

[09-02-2022_19-45-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_19-45-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006821s with result Satisfiable.

[09-02-2022_19-45-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.13988259999973707, Incremental time limit = None
Running cumulative time = 0.4174979999995685, Cumulative time limit = 1800
Used memory = (RSS = 897.218750Mb, VMS = 889.343750Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_19-45-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.393117s, Solving = 0.024381s, Total = 0.417498s, Memory = (RSS = 897.218750Mb, VMS = 889.343750Mb), Step range = [61-63]), Calls = 2
Final Model :: Total atoms = 4952, Cost = (2, 0, -1), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[09-02-2022_19-45-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.260055s, Solving = 0.017560s, Total = 0.277615s, Memory = (RSS = 897.031250Mb, VMS = 889.093750Mb), Step range = [61-62]
2 : Statistics :: Grounding = 0.133062s, Solving = 0.006821s, Total = 0.139883s, Memory = (RSS = 897.218750Mb, VMS = 889.343750Mb), Step range = [63-63]

[09-02-2022_19-45-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.417498s due to: Stop condition reached.

[09-02-2022_19-45-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[09-02-2022_19-45-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[09-02-2022_19-45-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_19-45-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_19-45-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[09-02-2022_19-45-40] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 10, 17: 11, 18: 11, 19: 12, 20: 12, 21: 12, 22: 13, 23: 14, 24: 15, 25: 16, 26: 17, 27: 18, 28: 19, 29: 19, 30: 20, 31: 21, 32: 22, 33: 23, 34: 23, 35: 24, 36: 25, 37: 25, 38: 25, 39: 25, 40: 25, 41: 25, 42: 25, 43: 25, 44: 26, 45: 27, 46: 27, 47: 27, 48: 27, 49: 27, 50: 28, 51: 28, 52: 29, 53: 29, 54: 30, 55: 31, 56: 31, 57: 32, 58: 33, 59: 33, 60: 34, 61: 34}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 16, 11: 18, 12: 21, 13: 22, 14: 23, 15: 24, 16: 25, 17: 26, 18: 27, 19: 29, 20: 30, 21: 31, 22: 32, 23: 34, 24: 35, 25: 43, 26: 44, 27: 49, 28: 51, 29: 53, 30: 54, 31: 56, 32: 57, 33: 59, 34: 61}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 12, 36: 13}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 34, 12: 35, 13: 36}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_19-45-40] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 8, 13: 9, 14: 9, 15: 10, 16: 10, 17: 11, 18: 11, 19: 12, 20: 12, 21: 12, 22: 13, 23: 14, 24: 15, 25: 16, 26: 17, 27: 18, 28: 19, 29: 19, 30: 20, 31: 21, 32: 22, 33: 23, 34: 23, 35: 24, 36: 25, 37: 25, 38: 25, 39: 25, 40: 25, 41: 25, 42: 25, 43: 25, 44: 26, 45: 27, 46: 27, 47: 27, 48: 27, 49: 27, 50: 28, 51: 28, 52: 29, 53: 29, 54: 30, 55: 31, 56: 31, 57: 32, 58: 33, 59: 33, 60: 34, 61: 34, 62: 35, 63: 36}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 12, 9: 14, 10: 16, 11: 18, 12: 21, 13: 22, 14: 23, 15: 24, 16: 25, 17: 26, 18: 27, 19: 29, 20: 30, 21: 31, 22: 32, 23: 34, 24: 35, 25: 43, 26: 44, 27: 49, 28: 51, 29: 53, 30: 54, 31: 56, 32: 57, 33: 59, 34: 61, 35: 62, 36: 63}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 12, 36: 13}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 34, 12: 35, 13: 36}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_19-45-40] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 36, Last requested goal index = 36, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[09-02-2022_19-45-40] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.393117s, Solving = 0.024381s, Total = 0.417498s, Memory = (RSS = 897.218750Mb, VMS = 889.343750Mb), Step range = [61-63]), Calls = 2
Model :: Total atoms = 4952, Cost = (2, 0, -1), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[09-02-2022_19-45-40] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 2 :: Actions = 2                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 11:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 12:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 14:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
        talos : grasp(manipulator_end_2,(block,5))
Step 15:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : release(manipulator_end_2,(block,5))
Step 16:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 17:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 18:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 19:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 20:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 21:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 22:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 13] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 23:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 24:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 25:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 26:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 27:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 28:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 29:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 30:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 31:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 32:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 33:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 34:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 35:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 36:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 37:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 38:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 39:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 40:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 41:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 42:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 43:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 44:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 45:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 46:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 47:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 48:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 49:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 50:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 51:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 52:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 29] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 53:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 29] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 29] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 54:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
        talos : release(manipulator_end_2,(block,5))
Step 55:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 56:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 57:
    Current Sub-goals:
        [Index = 32] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 32] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 32] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 32] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_end_2,(block,4),(block,5))
        talos : release(manipulator_end_1,(block,3))
Step 58:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 33] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 59:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 33] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 33] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
        talos : release(manipulator_end_2,(block,4))
Step 60:
    Current Sub-goals:
        [Index = 34] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 34] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,1)))
Step 61:
    Current Sub-goals:
        [Index = 34] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 34] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 34] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 34] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,1))
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 62:
    Current Sub-goals:
        [Index = 35] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 35] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,2))
Step 63:
    Current Sub-goals:
        [Index = 36] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 36] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_end_2,(block,1),(block,2))

[09-02-2022_19-45-40] DEBUG :: ASH Planner Main #1 >> Monolevel problem 12 at level 1 solved.

[09-02-2022_19-45-40] DEBUG :: ASH Planner Main #1 >> Online planning increment 12 finished.

[09-02-2022_19-45-40] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=63, step_range=range(0, 64)

[09-02-2022_19-45-40] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 13, Total actions = 19, Produced sub-goal stages = 19
Level [2]: Length = 36, Total actions = 45, Produced sub-goal stages = 45
Level [1]: Length = 63, Total actions = 73, Produced sub-goal stages = 0

[09-02-2022_19-45-40] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=36, step_range=range(0, 37)

[09-02-2022_19-45-40] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 13, Total actions = 19, Produced sub-goal stages = 19
Level [2]: Length = 36, Total actions = 45, Produced sub-goal stages = 45
Level [1]: Length = 63, Total actions = 73, Produced sub-goal stages = 0

[09-02-2022_19-45-40] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=13, step_range=range(0, 14)

[09-02-2022_19-45-40] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 13, Total actions = 19, Produced sub-goal stages = 19
Level [2]: Length = 36, Total actions = 45, Produced sub-goal stages = 45
Level [1]: Length = 63, Total actions = 73, Produced sub-goal stages = 0

[09-02-2022_19-45-40] DEBUG :: ASH Planner Main #1 >> Hierarchical plan generated successfully :: Ground Plan Quality >> Length = 63, Actions = 73

[09-02-2022_19-45-40] DEBUG :: ASH Planner Main #1 >> Hierarchical planning summary: (Execution latency = 3.7526385999990453, Average ground wait time = 1.665503024999661, Absolution time = 19.447186399996554)

     ========================================================================================================================================================================================================     
     |        Lvl = 3 (classic), LE =  13, AC =  19, CF = 0.7, GT =   1.10s, ST =   0.12s, OT = 0.00s, TT =   1.21s, EF = (LE = 1.0, AC = 1.0), ED = (LE = 0.0, AC = 0.0), EB = (LE = 0.0, AC = 0.0)        |     
     |        Lvl = 2 (com-ref), LE =  36, AC =  45, CF = 0.8, GT =   4.15s, ST =   0.34s, OT = 0.00s, TT =   4.49s, EF = (LE = 2.8, AC = 2.4), ED = (LE = 3.0, AC = 2.9), EB = (LE = 1.1, AC = 1.1)        |     
     |        Lvl = 1 (com-ref), LE =  63, AC =  73, CF = 0.9, GT =  12.80s, ST =   0.94s, OT = 0.00s, TT =  13.74s, EF = (LE = 1.8, AC = 1.6), ED = (LE = 1.3, AC = 1.3), EB = (LE = 0.8, AC = 0.8)        |     
     ========================================================================================================================================================================================================     

[09-02-2022_19-45-40] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=63, step_range=range(0, 64)

[09-02-2022_19-45-40] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 13, Total actions = 19, Produced sub-goal stages = 19
Level [2]: Length = 36, Total actions = 45, Produced sub-goal stages = 45
Level [1]: Length = 63, Total actions = 73, Produced sub-goal stages = 0

[09-02-2022_19-45-40] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=36, step_range=range(0, 37)

[09-02-2022_19-45-40] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 13, Total actions = 19, Produced sub-goal stages = 19
Level [2]: Length = 36, Total actions = 45, Produced sub-goal stages = 45
Level [1]: Length = 63, Total actions = 73, Produced sub-goal stages = 0

[09-02-2022_19-45-40] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=13, step_range=range(0, 14)

[09-02-2022_19-45-40] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 13, Total actions = 19, Produced sub-goal stages = 19
Level [2]: Length = 36, Total actions = 45, Produced sub-goal stages = 45
Level [1]: Length = 63, Total actions = 73, Produced sub-goal stages = 0

[09-02-2022_19-45-40] DEBUG :: Experiment >> 

      ================================================      
           Experimental run 50 : Time 24.803913s            
      ================================================      

[09-02-2022_19-45-40] INFO :: Experiment >> 

  ################################################################################################  
        Completed 50 experimental runs : Real time 1215.678592s, Proccess time 1261.125000s         
  ################################################################################################  

[09-02-2022_19-45-40] DEBUG :: Experiment >> Refinement spread at run=0, level=2:
Root Mean Squared Errors: rmse_mchild=7.541208290798439, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.265298736211088
Mean Absolute Errors: mae_mchild=6.538461538461541, mae_div_indices=0.3571428571428568, mae_div_steps=4.714285714285714

[09-02-2022_19-45-40] DEBUG :: Experiment >> Refinement spread at run=0, level=1:
Root Mean Squared Errors: rmse_mchild=1.8948282141710997, rmse_div_indices=6.251495547562726, rmse_div_steps=10.322212791987816
Mean Absolute Errors: mae_mchild=1.4882271468144044, mae_div_indices=4.923076923076923, mae_div_steps=8.038461538461538

[09-02-2022_19-45-40] DEBUG :: Experiment >> Refinement spread at run=1, level=2:
Root Mean Squared Errors: rmse_mchild=7.541208290798439, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.265298736211088
Mean Absolute Errors: mae_mchild=6.538461538461541, mae_div_indices=0.3571428571428568, mae_div_steps=4.714285714285714

[09-02-2022_19-45-40] DEBUG :: Experiment >> Refinement spread at run=1, level=1:
Root Mean Squared Errors: rmse_mchild=1.8553098165092157, rmse_div_indices=6.251495547562726, rmse_div_steps=10.322212791987816
Mean Absolute Errors: mae_mchild=1.435595567867036, mae_div_indices=4.923076923076923, mae_div_steps=8.038461538461538

[09-02-2022_19-45-40] DEBUG :: Experiment >> Refinement spread at run=2, level=2:
Root Mean Squared Errors: rmse_mchild=7.539638840564835, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.138287336755378
Mean Absolute Errors: mae_mchild=6.538461538461538, mae_div_indices=0.3571428571428568, mae_div_steps=4.642857142857143

[09-02-2022_19-45-40] DEBUG :: Experiment >> Refinement spread at run=2, level=1:
Root Mean Squared Errors: rmse_mchild=1.5281707103334714, rmse_div_indices=6.07089525776629, rmse_div_steps=10.036950962089264
Mean Absolute Errors: mae_mchild=1.242603550295858, mae_div_indices=4.8076923076923075, mae_div_steps=7.884615384615385

[09-02-2022_19-45-40] DEBUG :: Experiment >> Refinement spread at run=3, level=2:
Root Mean Squared Errors: rmse_mchild=7.3004012210402305, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.0
Mean Absolute Errors: mae_mchild=6.384615384615387, mae_div_indices=0.3571428571428568, mae_div_steps=4.571428571428571

[09-02-2022_19-45-40] DEBUG :: Experiment >> Refinement spread at run=3, level=1:
Root Mean Squared Errors: rmse_mchild=0.958299784705315, rmse_div_indices=5.98716576070463, rmse_div_steps=9.141398740902341
Mean Absolute Errors: mae_mchild=0.726851851851851, mae_div_indices=4.769230769230769, mae_div_steps=7.5

[09-02-2022_19-45-41] DEBUG :: Experiment >> Refinement spread at run=4, level=2:
Root Mean Squared Errors: rmse_mchild=7.285797158628998, rmse_div_indices=0.46717659215115626, rmse_div_steps=5.86589551208766
Mean Absolute Errors: mae_mchild=6.384615384615385, mae_div_indices=0.3571428571428568, mae_div_steps=4.499999999999999

[09-02-2022_19-45-41] DEBUG :: Experiment >> Refinement spread at run=4, level=1:
Root Mean Squared Errors: rmse_mchild=1.2708451832982426, rmse_div_indices=5.801285592859097, rmse_div_steps=8.897625247375561
Mean Absolute Errors: mae_mchild=1.016070124178232, mae_div_indices=4.653846153846153, mae_div_steps=7.346153846153846

[09-02-2022_19-45-41] DEBUG :: Experiment >> Refinement spread at run=5, level=2:
Root Mean Squared Errors: rmse_mchild=7.541208290798439, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.265298736211088
Mean Absolute Errors: mae_mchild=6.538461538461541, mae_div_indices=0.3571428571428568, mae_div_steps=4.714285714285714

[09-02-2022_19-45-41] DEBUG :: Experiment >> Refinement spread at run=5, level=1:
Root Mean Squared Errors: rmse_mchild=1.9061244055169855, rmse_div_indices=6.251495547562726, rmse_div_steps=10.342686007326812
Mean Absolute Errors: mae_mchild=1.5145429362880887, mae_div_indices=4.923076923076923, mae_div_steps=8.115384615384615

[09-02-2022_19-45-41] DEBUG :: Experiment >> Refinement spread at run=6, level=2:
Root Mean Squared Errors: rmse_mchild=7.285797158628998, rmse_div_indices=0.46717659215115626, rmse_div_steps=5.86589551208766
Mean Absolute Errors: mae_mchild=6.384615384615385, mae_div_indices=0.3571428571428568, mae_div_steps=4.499999999999999

[09-02-2022_19-45-41] DEBUG :: Experiment >> Refinement spread at run=6, level=1:
Root Mean Squared Errors: rmse_mchild=1.2708451832982426, rmse_div_indices=5.801285592859097, rmse_div_steps=8.897625247375561
Mean Absolute Errors: mae_mchild=1.016070124178232, mae_div_indices=4.653846153846153, mae_div_steps=7.346153846153846

[09-02-2022_19-45-41] DEBUG :: Experiment >> Refinement spread at run=7, level=2:
Root Mean Squared Errors: rmse_mchild=7.3004012210402305, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.0
Mean Absolute Errors: mae_mchild=6.384615384615387, mae_div_indices=0.3571428571428568, mae_div_steps=4.571428571428571

[09-02-2022_19-45-41] DEBUG :: Experiment >> Refinement spread at run=7, level=1:
Root Mean Squared Errors: rmse_mchild=0.9453291063653768, rmse_div_indices=5.98716576070463, rmse_div_steps=9.125256113956425
Mean Absolute Errors: mae_mchild=0.7021604938271597, mae_div_indices=4.769230769230769, mae_div_steps=7.423076923076923

[09-02-2022_19-45-41] DEBUG :: Experiment >> Refinement spread at run=8, level=2:
Root Mean Squared Errors: rmse_mchild=7.539638840564835, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.138287336755378
Mean Absolute Errors: mae_mchild=6.538461538461538, mae_div_indices=0.3571428571428568, mae_div_steps=4.642857142857143

[09-02-2022_19-45-41] DEBUG :: Experiment >> Refinement spread at run=8, level=1:
Root Mean Squared Errors: rmse_mchild=1.5403834149615994, rmse_div_indices=6.07089525776629, rmse_div_steps=10.058004848798868
Mean Absolute Errors: mae_mchild=1.2682445759368837, mae_div_indices=4.8076923076923075, mae_div_steps=7.961538461538462

[09-02-2022_19-45-41] DEBUG :: Experiment >> Refinement spread at run=9, level=2:
Root Mean Squared Errors: rmse_mchild=7.541208290798439, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.265298736211088
Mean Absolute Errors: mae_mchild=6.538461538461541, mae_div_indices=0.3571428571428568, mae_div_steps=4.714285714285714

[09-02-2022_19-45-41] DEBUG :: Experiment >> Refinement spread at run=9, level=1:
Root Mean Squared Errors: rmse_mchild=1.8553098165092157, rmse_div_indices=6.251495547562726, rmse_div_steps=10.322212791987816
Mean Absolute Errors: mae_mchild=1.435595567867036, mae_div_indices=4.923076923076923, mae_div_steps=8.038461538461538

[09-02-2022_19-45-41] DEBUG :: Experiment >> Refinement spread at run=10, level=2:
Root Mean Squared Errors: rmse_mchild=7.539638840564835, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.138287336755378
Mean Absolute Errors: mae_mchild=6.538461538461538, mae_div_indices=0.3571428571428568, mae_div_steps=4.642857142857143

[09-02-2022_19-45-41] DEBUG :: Experiment >> Refinement spread at run=10, level=1:
Root Mean Squared Errors: rmse_mchild=1.5403834149615994, rmse_div_indices=6.07089525776629, rmse_div_steps=10.058004848798868
Mean Absolute Errors: mae_mchild=1.2682445759368837, mae_div_indices=4.8076923076923075, mae_div_steps=7.961538461538462

[09-02-2022_19-45-41] DEBUG :: Experiment >> Refinement spread at run=11, level=2:
Root Mean Squared Errors: rmse_mchild=7.285797158628998, rmse_div_indices=0.46717659215115626, rmse_div_steps=5.86589551208766
Mean Absolute Errors: mae_mchild=6.384615384615385, mae_div_indices=0.3571428571428568, mae_div_steps=4.499999999999999

[09-02-2022_19-45-41] DEBUG :: Experiment >> Refinement spread at run=11, level=1:
Root Mean Squared Errors: rmse_mchild=2.476035616463466, rmse_div_indices=5.801285592859097, rmse_div_steps=9.820014883272444
Mean Absolute Errors: mae_mchild=1.8984660336011683, mae_div_indices=4.653846153846153, mae_div_steps=7.730769230769231

[09-02-2022_19-45-41] DEBUG :: Experiment >> Refinement spread at run=12, level=2:
Root Mean Squared Errors: rmse_mchild=7.539638840564835, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.138287336755378
Mean Absolute Errors: mae_mchild=6.538461538461538, mae_div_indices=0.3571428571428568, mae_div_steps=4.642857142857143

[09-02-2022_19-45-41] DEBUG :: Experiment >> Refinement spread at run=12, level=1:
Root Mean Squared Errors: rmse_mchild=1.5403834149615994, rmse_div_indices=6.07089525776629, rmse_div_steps=10.058004848798868
Mean Absolute Errors: mae_mchild=1.2682445759368837, mae_div_indices=4.8076923076923075, mae_div_steps=7.961538461538462

[09-02-2022_19-45-41] DEBUG :: Experiment >> Refinement spread at run=13, level=2:
Root Mean Squared Errors: rmse_mchild=7.539638840564835, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.138287336755378
Mean Absolute Errors: mae_mchild=6.538461538461538, mae_div_indices=0.3571428571428568, mae_div_steps=4.642857142857143

[09-02-2022_19-45-42] DEBUG :: Experiment >> Refinement spread at run=13, level=1:
Root Mean Squared Errors: rmse_mchild=1.5403834149615994, rmse_div_indices=6.07089525776629, rmse_div_steps=10.058004848798868
Mean Absolute Errors: mae_mchild=1.2682445759368837, mae_div_indices=4.8076923076923075, mae_div_steps=7.961538461538462

[09-02-2022_19-45-42] DEBUG :: Experiment >> Refinement spread at run=14, level=2:
Root Mean Squared Errors: rmse_mchild=7.3004012210402305, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.0
Mean Absolute Errors: mae_mchild=6.384615384615387, mae_div_indices=0.3571428571428568, mae_div_steps=4.571428571428571

[09-02-2022_19-45-42] DEBUG :: Experiment >> Refinement spread at run=14, level=1:
Root Mean Squared Errors: rmse_mchild=2.9243945242277647, rmse_div_indices=5.98716576070463, rmse_div_steps=10.111398746730574
Mean Absolute Errors: mae_mchild=2.2222222222222223, mae_div_indices=4.769230769230769, mae_div_steps=7.884615384615385

[09-02-2022_19-45-42] DEBUG :: Experiment >> Refinement spread at run=15, level=2:
Root Mean Squared Errors: rmse_mchild=7.3004012210402305, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.0
Mean Absolute Errors: mae_mchild=6.384615384615387, mae_div_indices=0.3571428571428568, mae_div_steps=4.571428571428571

[09-02-2022_19-45-42] DEBUG :: Experiment >> Refinement spread at run=15, level=1:
Root Mean Squared Errors: rmse_mchild=2.9243945242277647, rmse_div_indices=5.98716576070463, rmse_div_steps=10.111398746730574
Mean Absolute Errors: mae_mchild=2.2222222222222223, mae_div_indices=4.769230769230769, mae_div_steps=7.884615384615385

[09-02-2022_19-45-42] DEBUG :: Experiment >> Refinement spread at run=16, level=2:
Root Mean Squared Errors: rmse_mchild=7.3004012210402305, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.0
Mean Absolute Errors: mae_mchild=6.384615384615387, mae_div_indices=0.3571428571428568, mae_div_steps=4.571428571428571

[09-02-2022_19-45-42] DEBUG :: Experiment >> Refinement spread at run=16, level=1:
Root Mean Squared Errors: rmse_mchild=0.958299784705315, rmse_div_indices=5.98716576070463, rmse_div_steps=9.141398740902341
Mean Absolute Errors: mae_mchild=0.726851851851851, mae_div_indices=4.769230769230769, mae_div_steps=7.5

[09-02-2022_19-45-42] DEBUG :: Experiment >> Refinement spread at run=17, level=2:
Root Mean Squared Errors: rmse_mchild=7.3004012210402305, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.0
Mean Absolute Errors: mae_mchild=6.384615384615387, mae_div_indices=0.3571428571428568, mae_div_steps=4.571428571428571

[09-02-2022_19-45-42] DEBUG :: Experiment >> Refinement spread at run=17, level=1:
Root Mean Squared Errors: rmse_mchild=0.958299784705315, rmse_div_indices=5.98716576070463, rmse_div_steps=9.141398740902341
Mean Absolute Errors: mae_mchild=0.726851851851851, mae_div_indices=4.769230769230769, mae_div_steps=7.5

[09-02-2022_19-45-42] DEBUG :: Experiment >> Refinement spread at run=18, level=2:
Root Mean Squared Errors: rmse_mchild=7.541208290798439, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.265298736211088
Mean Absolute Errors: mae_mchild=6.538461538461541, mae_div_indices=0.3571428571428568, mae_div_steps=4.714285714285714

[09-02-2022_19-45-42] DEBUG :: Experiment >> Refinement spread at run=18, level=1:
Root Mean Squared Errors: rmse_mchild=1.866845147119627, rmse_div_indices=6.251495547562726, rmse_div_steps=10.342686007326812
Mean Absolute Errors: mae_mchild=1.4619113573407203, mae_div_indices=4.923076923076923, mae_div_steps=8.115384615384615

[09-02-2022_19-45-42] DEBUG :: Experiment >> Refinement spread at run=19, level=2:
Root Mean Squared Errors: rmse_mchild=7.539638840564835, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.138287336755378
Mean Absolute Errors: mae_mchild=6.538461538461538, mae_div_indices=0.3571428571428568, mae_div_steps=4.642857142857143

[09-02-2022_19-45-42] DEBUG :: Experiment >> Refinement spread at run=19, level=1:
Root Mean Squared Errors: rmse_mchild=1.5281707103334714, rmse_div_indices=6.07089525776629, rmse_div_steps=10.036950962089264
Mean Absolute Errors: mae_mchild=1.242603550295858, mae_div_indices=4.8076923076923075, mae_div_steps=7.884615384615385

[09-02-2022_19-45-42] DEBUG :: Experiment >> Refinement spread at run=20, level=2:
Root Mean Squared Errors: rmse_mchild=7.3004012210402305, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.0
Mean Absolute Errors: mae_mchild=6.384615384615387, mae_div_indices=0.3571428571428568, mae_div_steps=4.571428571428571

[09-02-2022_19-45-42] DEBUG :: Experiment >> Refinement spread at run=20, level=1:
Root Mean Squared Errors: rmse_mchild=2.9005507139928524, rmse_div_indices=5.98716576070463, rmse_div_steps=10.111398746730574
Mean Absolute Errors: mae_mchild=2.1944444444444446, mae_div_indices=4.769230769230769, mae_div_steps=7.884615384615385

[09-02-2022_19-45-42] DEBUG :: Experiment >> Refinement spread at run=21, level=2:
Root Mean Squared Errors: rmse_mchild=7.3004012210402305, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.0
Mean Absolute Errors: mae_mchild=6.384615384615387, mae_div_indices=0.3571428571428568, mae_div_steps=4.571428571428571

[09-02-2022_19-45-42] DEBUG :: Experiment >> Refinement spread at run=21, level=1:
Root Mean Squared Errors: rmse_mchild=2.9243945242277647, rmse_div_indices=5.98716576070463, rmse_div_steps=10.111398746730574
Mean Absolute Errors: mae_mchild=2.2222222222222223, mae_div_indices=4.769230769230769, mae_div_steps=7.884615384615385

[09-02-2022_19-45-42] DEBUG :: Experiment >> Refinement spread at run=22, level=2:
Root Mean Squared Errors: rmse_mchild=7.3004012210402305, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.0
Mean Absolute Errors: mae_mchild=6.384615384615387, mae_div_indices=0.3571428571428568, mae_div_steps=4.571428571428571

[09-02-2022_19-45-42] DEBUG :: Experiment >> Refinement spread at run=22, level=1:
Root Mean Squared Errors: rmse_mchild=2.9243945242277647, rmse_div_indices=5.98716576070463, rmse_div_steps=10.111398746730574
Mean Absolute Errors: mae_mchild=2.2222222222222223, mae_div_indices=4.769230769230769, mae_div_steps=7.884615384615385

[09-02-2022_19-45-43] DEBUG :: Experiment >> Refinement spread at run=23, level=2:
Root Mean Squared Errors: rmse_mchild=7.541208290798439, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.265298736211088
Mean Absolute Errors: mae_mchild=6.538461538461541, mae_div_indices=0.3571428571428568, mae_div_steps=4.714285714285714

[09-02-2022_19-45-43] DEBUG :: Experiment >> Refinement spread at run=23, level=1:
Root Mean Squared Errors: rmse_mchild=1.9061244055169855, rmse_div_indices=6.251495547562726, rmse_div_steps=10.342686007326812
Mean Absolute Errors: mae_mchild=1.5145429362880887, mae_div_indices=4.923076923076923, mae_div_steps=8.115384615384615

[09-02-2022_19-45-43] DEBUG :: Experiment >> Refinement spread at run=24, level=2:
Root Mean Squared Errors: rmse_mchild=7.3004012210402305, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.0
Mean Absolute Errors: mae_mchild=6.384615384615387, mae_div_indices=0.3571428571428568, mae_div_steps=4.571428571428571

[09-02-2022_19-45-43] DEBUG :: Experiment >> Refinement spread at run=24, level=1:
Root Mean Squared Errors: rmse_mchild=2.914880405398784, rmse_div_indices=5.98716576070463, rmse_div_steps=10.090456267796204
Mean Absolute Errors: mae_mchild=2.1944444444444446, mae_div_indices=4.769230769230769, mae_div_steps=7.8076923076923075

[09-02-2022_19-45-43] DEBUG :: Experiment >> Refinement spread at run=25, level=2:
Root Mean Squared Errors: rmse_mchild=7.285797158628998, rmse_div_indices=0.46717659215115626, rmse_div_steps=5.86589551208766
Mean Absolute Errors: mae_mchild=6.384615384615385, mae_div_indices=0.3571428571428568, mae_div_steps=4.499999999999999

[09-02-2022_19-45-43] DEBUG :: Experiment >> Refinement spread at run=25, level=1:
Root Mean Squared Errors: rmse_mchild=2.476035616463466, rmse_div_indices=5.801285592859097, rmse_div_steps=9.820014883272444
Mean Absolute Errors: mae_mchild=1.8984660336011683, mae_div_indices=4.653846153846153, mae_div_steps=7.730769230769231

[09-02-2022_19-45-43] DEBUG :: Experiment >> Refinement spread at run=26, level=2:
Root Mean Squared Errors: rmse_mchild=7.285797158628998, rmse_div_indices=0.46717659215115626, rmse_div_steps=5.86589551208766
Mean Absolute Errors: mae_mchild=6.384615384615385, mae_div_indices=0.3571428571428568, mae_div_steps=4.499999999999999

[09-02-2022_19-45-43] DEBUG :: Experiment >> Refinement spread at run=26, level=1:
Root Mean Squared Errors: rmse_mchild=2.476035616463466, rmse_div_indices=5.801285592859097, rmse_div_steps=9.820014883272444
Mean Absolute Errors: mae_mchild=1.8984660336011683, mae_div_indices=4.653846153846153, mae_div_steps=7.730769230769231

[09-02-2022_19-45-43] DEBUG :: Experiment >> Refinement spread at run=27, level=2:
Root Mean Squared Errors: rmse_mchild=7.541208290798439, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.265298736211088
Mean Absolute Errors: mae_mchild=6.538461538461541, mae_div_indices=0.3571428571428568, mae_div_steps=4.714285714285714

[09-02-2022_19-45-43] DEBUG :: Experiment >> Refinement spread at run=27, level=1:
Root Mean Squared Errors: rmse_mchild=1.870180787326541, rmse_div_indices=6.251495547562726, rmse_div_steps=10.322212791987816
Mean Absolute Errors: mae_mchild=1.4619113573407203, mae_div_indices=4.923076923076923, mae_div_steps=8.038461538461538

[09-02-2022_19-45-43] DEBUG :: Experiment >> Refinement spread at run=28, level=2:
Root Mean Squared Errors: rmse_mchild=7.3004012210402305, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.0
Mean Absolute Errors: mae_mchild=6.384615384615387, mae_div_indices=0.3571428571428568, mae_div_steps=4.571428571428571

[09-02-2022_19-45-43] DEBUG :: Experiment >> Refinement spread at run=28, level=1:
Root Mean Squared Errors: rmse_mchild=0.958299784705315, rmse_div_indices=5.98716576070463, rmse_div_steps=9.141398740902341
Mean Absolute Errors: mae_mchild=0.726851851851851, mae_div_indices=4.769230769230769, mae_div_steps=7.5

[09-02-2022_19-45-43] DEBUG :: Experiment >> Refinement spread at run=29, level=2:
Root Mean Squared Errors: rmse_mchild=7.3004012210402305, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.0
Mean Absolute Errors: mae_mchild=6.384615384615387, mae_div_indices=0.3571428571428568, mae_div_steps=4.571428571428571

[09-02-2022_19-45-43] DEBUG :: Experiment >> Refinement spread at run=29, level=1:
Root Mean Squared Errors: rmse_mchild=2.9243945242277647, rmse_div_indices=5.98716576070463, rmse_div_steps=10.111398746730574
Mean Absolute Errors: mae_mchild=2.2222222222222223, mae_div_indices=4.769230769230769, mae_div_steps=7.884615384615385

[09-02-2022_19-45-43] DEBUG :: Experiment >> Refinement spread at run=30, level=2:
Root Mean Squared Errors: rmse_mchild=7.541208290798439, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.265298736211088
Mean Absolute Errors: mae_mchild=6.538461538461541, mae_div_indices=0.3571428571428568, mae_div_steps=4.714285714285714

[09-02-2022_19-45-43] DEBUG :: Experiment >> Refinement spread at run=30, level=1:
Root Mean Squared Errors: rmse_mchild=1.870180787326541, rmse_div_indices=6.251495547562726, rmse_div_steps=10.322212791987816
Mean Absolute Errors: mae_mchild=1.4619113573407203, mae_div_indices=4.923076923076923, mae_div_steps=8.038461538461538

[09-02-2022_19-45-43] DEBUG :: Experiment >> Refinement spread at run=31, level=2:
Root Mean Squared Errors: rmse_mchild=7.3004012210402305, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.0
Mean Absolute Errors: mae_mchild=6.384615384615387, mae_div_indices=0.3571428571428568, mae_div_steps=4.571428571428571

[09-02-2022_19-45-43] DEBUG :: Experiment >> Refinement spread at run=31, level=1:
Root Mean Squared Errors: rmse_mchild=2.914880405398784, rmse_div_indices=5.98716576070463, rmse_div_steps=10.090456267796204
Mean Absolute Errors: mae_mchild=2.1944444444444446, mae_div_indices=4.769230769230769, mae_div_steps=7.8076923076923075

[09-02-2022_19-45-43] DEBUG :: Experiment >> Refinement spread at run=32, level=2:
Root Mean Squared Errors: rmse_mchild=7.539638840564835, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.138287336755378
Mean Absolute Errors: mae_mchild=6.538461538461538, mae_div_indices=0.3571428571428568, mae_div_steps=4.642857142857143

[09-02-2022_19-45-44] DEBUG :: Experiment >> Refinement spread at run=32, level=1:
Root Mean Squared Errors: rmse_mchild=1.5403834149615994, rmse_div_indices=6.07089525776629, rmse_div_steps=10.058004848798868
Mean Absolute Errors: mae_mchild=1.2682445759368837, mae_div_indices=4.8076923076923075, mae_div_steps=7.961538461538462

[09-02-2022_19-45-44] DEBUG :: Experiment >> Refinement spread at run=33, level=2:
Root Mean Squared Errors: rmse_mchild=7.539638840564835, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.138287336755378
Mean Absolute Errors: mae_mchild=6.538461538461538, mae_div_indices=0.3571428571428568, mae_div_steps=4.642857142857143

[09-02-2022_19-45-44] DEBUG :: Experiment >> Refinement spread at run=33, level=1:
Root Mean Squared Errors: rmse_mchild=1.5281707103334714, rmse_div_indices=6.07089525776629, rmse_div_steps=10.036950962089264
Mean Absolute Errors: mae_mchild=1.242603550295858, mae_div_indices=4.8076923076923075, mae_div_steps=7.884615384615385

[09-02-2022_19-45-44] DEBUG :: Experiment >> Refinement spread at run=34, level=2:
Root Mean Squared Errors: rmse_mchild=7.3004012210402305, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.0
Mean Absolute Errors: mae_mchild=6.384615384615387, mae_div_indices=0.3571428571428568, mae_div_steps=4.571428571428571

[09-02-2022_19-45-44] DEBUG :: Experiment >> Refinement spread at run=34, level=1:
Root Mean Squared Errors: rmse_mchild=2.9243945242277647, rmse_div_indices=5.98716576070463, rmse_div_steps=10.111398746730574
Mean Absolute Errors: mae_mchild=2.2222222222222223, mae_div_indices=4.769230769230769, mae_div_steps=7.884615384615385

[09-02-2022_19-45-44] DEBUG :: Experiment >> Refinement spread at run=35, level=2:
Root Mean Squared Errors: rmse_mchild=7.539638840564835, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.138287336755378
Mean Absolute Errors: mae_mchild=6.538461538461538, mae_div_indices=0.3571428571428568, mae_div_steps=4.642857142857143

[09-02-2022_19-45-44] DEBUG :: Experiment >> Refinement spread at run=35, level=1:
Root Mean Squared Errors: rmse_mchild=1.5403834149615994, rmse_div_indices=6.07089525776629, rmse_div_steps=10.058004848798868
Mean Absolute Errors: mae_mchild=1.2682445759368837, mae_div_indices=4.8076923076923075, mae_div_steps=7.961538461538462

[09-02-2022_19-45-44] DEBUG :: Experiment >> Refinement spread at run=36, level=2:
Root Mean Squared Errors: rmse_mchild=7.3004012210402305, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.0
Mean Absolute Errors: mae_mchild=6.384615384615387, mae_div_indices=0.3571428571428568, mae_div_steps=4.571428571428571

[09-02-2022_19-45-44] DEBUG :: Experiment >> Refinement spread at run=36, level=1:
Root Mean Squared Errors: rmse_mchild=2.9005507139928524, rmse_div_indices=5.98716576070463, rmse_div_steps=10.111398746730574
Mean Absolute Errors: mae_mchild=2.1944444444444446, mae_div_indices=4.769230769230769, mae_div_steps=7.884615384615385

[09-02-2022_19-45-44] DEBUG :: Experiment >> Refinement spread at run=37, level=2:
Root Mean Squared Errors: rmse_mchild=7.541208290798439, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.265298736211088
Mean Absolute Errors: mae_mchild=6.538461538461541, mae_div_indices=0.3571428571428568, mae_div_steps=4.714285714285714

[09-02-2022_19-45-44] DEBUG :: Experiment >> Refinement spread at run=37, level=1:
Root Mean Squared Errors: rmse_mchild=1.8948282141710997, rmse_div_indices=6.251495547562726, rmse_div_steps=10.322212791987816
Mean Absolute Errors: mae_mchild=1.4882271468144044, mae_div_indices=4.923076923076923, mae_div_steps=8.038461538461538

[09-02-2022_19-45-44] DEBUG :: Experiment >> Refinement spread at run=38, level=2:
Root Mean Squared Errors: rmse_mchild=7.541208290798439, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.265298736211088
Mean Absolute Errors: mae_mchild=6.538461538461541, mae_div_indices=0.3571428571428568, mae_div_steps=4.714285714285714

[09-02-2022_19-45-44] DEBUG :: Experiment >> Refinement spread at run=38, level=1:
Root Mean Squared Errors: rmse_mchild=1.8948282141710997, rmse_div_indices=6.251495547562726, rmse_div_steps=10.322212791987816
Mean Absolute Errors: mae_mchild=1.4882271468144044, mae_div_indices=4.923076923076923, mae_div_steps=8.038461538461538

[09-02-2022_19-45-44] DEBUG :: Experiment >> Refinement spread at run=39, level=2:
Root Mean Squared Errors: rmse_mchild=7.285797158628998, rmse_div_indices=0.46717659215115626, rmse_div_steps=5.86589551208766
Mean Absolute Errors: mae_mchild=6.384615384615385, mae_div_indices=0.3571428571428568, mae_div_steps=4.499999999999999

[09-02-2022_19-45-44] DEBUG :: Experiment >> Refinement spread at run=39, level=1:
Root Mean Squared Errors: rmse_mchild=2.476035616463466, rmse_div_indices=5.801285592859097, rmse_div_steps=9.820014883272444
Mean Absolute Errors: mae_mchild=1.8984660336011683, mae_div_indices=4.653846153846153, mae_div_steps=7.730769230769231

[09-02-2022_19-45-44] DEBUG :: Experiment >> Refinement spread at run=40, level=2:
Root Mean Squared Errors: rmse_mchild=7.3004012210402305, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.0
Mean Absolute Errors: mae_mchild=6.384615384615387, mae_div_indices=0.3571428571428568, mae_div_steps=4.571428571428571

[09-02-2022_19-45-44] DEBUG :: Experiment >> Refinement spread at run=40, level=1:
Root Mean Squared Errors: rmse_mchild=2.914880405398784, rmse_div_indices=5.98716576070463, rmse_div_steps=10.090456267796204
Mean Absolute Errors: mae_mchild=2.1944444444444446, mae_div_indices=4.769230769230769, mae_div_steps=7.8076923076923075

[09-02-2022_19-45-44] DEBUG :: Experiment >> Refinement spread at run=41, level=2:
Root Mean Squared Errors: rmse_mchild=7.541208290798439, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.265298736211088
Mean Absolute Errors: mae_mchild=6.538461538461541, mae_div_indices=0.3571428571428568, mae_div_steps=4.714285714285714

[09-02-2022_19-45-45] DEBUG :: Experiment >> Refinement spread at run=41, level=1:
Root Mean Squared Errors: rmse_mchild=1.9061244055169855, rmse_div_indices=6.251495547562726, rmse_div_steps=10.342686007326812
Mean Absolute Errors: mae_mchild=1.5145429362880887, mae_div_indices=4.923076923076923, mae_div_steps=8.115384615384615

[09-02-2022_19-45-45] DEBUG :: Experiment >> Refinement spread at run=42, level=2:
Root Mean Squared Errors: rmse_mchild=7.3004012210402305, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.0
Mean Absolute Errors: mae_mchild=6.384615384615387, mae_div_indices=0.3571428571428568, mae_div_steps=4.571428571428571

[09-02-2022_19-45-45] DEBUG :: Experiment >> Refinement spread at run=42, level=1:
Root Mean Squared Errors: rmse_mchild=0.9453291063653768, rmse_div_indices=5.98716576070463, rmse_div_steps=9.125256113956425
Mean Absolute Errors: mae_mchild=0.7021604938271597, mae_div_indices=4.769230769230769, mae_div_steps=7.423076923076923

[09-02-2022_19-45-45] DEBUG :: Experiment >> Refinement spread at run=43, level=2:
Root Mean Squared Errors: rmse_mchild=7.285797158628998, rmse_div_indices=0.46717659215115626, rmse_div_steps=5.86589551208766
Mean Absolute Errors: mae_mchild=6.384615384615385, mae_div_indices=0.3571428571428568, mae_div_steps=4.499999999999999

[09-02-2022_19-45-45] DEBUG :: Experiment >> Refinement spread at run=43, level=1:
Root Mean Squared Errors: rmse_mchild=2.476035616463466, rmse_div_indices=5.801285592859097, rmse_div_steps=9.820014883272444
Mean Absolute Errors: mae_mchild=1.8984660336011683, mae_div_indices=4.653846153846153, mae_div_steps=7.730769230769231

[09-02-2022_19-45-45] DEBUG :: Experiment >> Refinement spread at run=44, level=2:
Root Mean Squared Errors: rmse_mchild=7.285797158628998, rmse_div_indices=0.46717659215115626, rmse_div_steps=5.86589551208766
Mean Absolute Errors: mae_mchild=6.384615384615385, mae_div_indices=0.3571428571428568, mae_div_steps=4.499999999999999

[09-02-2022_19-45-45] DEBUG :: Experiment >> Refinement spread at run=44, level=1:
Root Mean Squared Errors: rmse_mchild=2.4661329123287334, rmse_div_indices=5.801285592859097, rmse_div_steps=9.798449641888016
Mean Absolute Errors: mae_mchild=1.8714390065741413, mae_div_indices=4.653846153846153, mae_div_steps=7.653846153846154

[09-02-2022_19-45-45] DEBUG :: Experiment >> Refinement spread at run=45, level=2:
Root Mean Squared Errors: rmse_mchild=7.541208290798439, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.265298736211088
Mean Absolute Errors: mae_mchild=6.538461538461541, mae_div_indices=0.3571428571428568, mae_div_steps=4.714285714285714

[09-02-2022_19-45-45] DEBUG :: Experiment >> Refinement spread at run=45, level=1:
Root Mean Squared Errors: rmse_mchild=1.9061244055169855, rmse_div_indices=6.251495547562726, rmse_div_steps=10.342686007326812
Mean Absolute Errors: mae_mchild=1.5145429362880887, mae_div_indices=4.923076923076923, mae_div_steps=8.115384615384615

[09-02-2022_19-45-45] DEBUG :: Experiment >> Refinement spread at run=46, level=2:
Root Mean Squared Errors: rmse_mchild=7.3004012210402305, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.0
Mean Absolute Errors: mae_mchild=6.384615384615387, mae_div_indices=0.3571428571428568, mae_div_steps=4.571428571428571

[09-02-2022_19-45-45] DEBUG :: Experiment >> Refinement spread at run=46, level=1:
Root Mean Squared Errors: rmse_mchild=2.9243945242277647, rmse_div_indices=5.98716576070463, rmse_div_steps=10.111398746730574
Mean Absolute Errors: mae_mchild=2.2222222222222223, mae_div_indices=4.769230769230769, mae_div_steps=7.884615384615385

[09-02-2022_19-45-45] DEBUG :: Experiment >> Refinement spread at run=47, level=2:
Root Mean Squared Errors: rmse_mchild=7.3004012210402305, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.0
Mean Absolute Errors: mae_mchild=6.384615384615387, mae_div_indices=0.3571428571428568, mae_div_steps=4.571428571428571

[09-02-2022_19-45-45] DEBUG :: Experiment >> Refinement spread at run=47, level=1:
Root Mean Squared Errors: rmse_mchild=0.958299784705315, rmse_div_indices=5.98716576070463, rmse_div_steps=9.141398740902341
Mean Absolute Errors: mae_mchild=0.726851851851851, mae_div_indices=4.769230769230769, mae_div_steps=7.5

[09-02-2022_19-45-45] DEBUG :: Experiment >> Refinement spread at run=48, level=2:
Root Mean Squared Errors: rmse_mchild=7.3004012210402305, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.0
Mean Absolute Errors: mae_mchild=6.384615384615387, mae_div_indices=0.3571428571428568, mae_div_steps=4.571428571428571

[09-02-2022_19-45-45] DEBUG :: Experiment >> Refinement spread at run=48, level=1:
Root Mean Squared Errors: rmse_mchild=2.9005507139928524, rmse_div_indices=5.98716576070463, rmse_div_steps=10.111398746730574
Mean Absolute Errors: mae_mchild=2.1944444444444446, mae_div_indices=4.769230769230769, mae_div_steps=7.884615384615385

[09-02-2022_19-45-45] DEBUG :: Experiment >> Refinement spread at run=49, level=2:
Root Mean Squared Errors: rmse_mchild=7.3004012210402305, rmse_div_indices=0.46717659215115626, rmse_div_steps=6.0
Mean Absolute Errors: mae_mchild=6.384615384615387, mae_div_indices=0.3571428571428568, mae_div_steps=4.571428571428571

[09-02-2022_19-45-45] DEBUG :: Experiment >> Refinement spread at run=49, level=1:
Root Mean Squared Errors: rmse_mchild=2.9005507139928524, rmse_div_indices=5.98716576070463, rmse_div_steps=10.111398746730574
Mean Absolute Errors: mae_mchild=2.1944444444444446, mae_div_indices=4.769230769230769, mae_div_steps=7.884615384615385

[09-02-2022_19-45-46] INFO :: Experiment >> 

          ========================================          
                    Experimental Results                    
          ========================================          

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
                     Concatenated Plans                     

 RU  AL  LE  AC       CF        GT       ST  OT        TT       LT        CT       WT        RSS        VMS  QL_SCORE  LT_SCORE  CT_SCORE  AW_SCORE  AME_SCORE  LT_GRADE  CT_GRADE  AW_GRADE  AME_GRADE    GRADE
  0   3  13  19 0.684211  1.104008 0.115207 0.0  1.219216 1.219216  1.219216 1.219216 219.968750 210.132812  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
  0   2  38  47 0.808511  4.361637 0.573232 0.0  4.934869 2.403138  6.154085 1.049471 228.929688 218.140625  0.723404       1.0  0.897624       1.0        1.0  0.723404  0.649345  0.723404   0.723404 0.723404
  0   1  63  73 0.863014 12.372005 0.872318 0.0 13.244323 3.814179 19.398408 1.659813 252.160156 243.406250  0.726027       1.0  0.635215       1.0        1.0  0.726027  0.461183  0.726027   0.726027 0.726027
  1   3  13  19 0.684211  1.096081 0.120177 0.0  1.216258 1.216258  1.216258 1.216258 225.285156 214.804688  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
  1   2  38  47 0.808511  4.341008 0.597706 0.0  4.938715 2.395628  6.154973 1.049586 236.386719 225.957031  0.723404       1.0  0.897569       1.0        1.0  0.723404  0.649305  0.723404   0.723404 0.723404
  1   1  63  73 0.863014 12.358520 0.857670 0.0 13.216190 3.797525 19.371163 1.657717 255.218750 246.558594  0.726027       1.0  0.635451       1.0        1.0  0.726027  0.461355  0.726027   0.726027 0.726027
  2   3  13  19 0.684211  1.100874 0.124242 0.0  1.225116 1.225116  1.225116 1.225116 234.511719 225.792969  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
  2   2  39  47 0.829787  4.447642 0.425747 0.0  4.873389 2.412328  6.098505 1.040120 253.898438 243.031250  0.723404       1.0  0.901111       1.0        1.0  0.723404  0.651868  0.723404   0.723404 0.723404
  2   1  63  73 0.863014 12.215446 0.777626 0.0 12.993072 3.836775 19.091577 1.639880 264.312500 256.656250  0.726027       1.0  0.637900       1.0        1.0  0.726027  0.463133  0.726027   0.726027 0.726027
  3   3  13  19 0.684211  1.096476 0.117111 0.0  1.213587 1.213587  1.213587 1.213587 256.203125 245.089844  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
  3   2  36  45 0.800000  4.090535 0.419704 0.0  4.510240 2.331414  5.723827 0.977653 264.066406 253.726562  0.755556       1.0  0.927351       1.0        1.0  0.755556  0.700665  0.755556   0.755556 0.755556
  3   1  53  63 0.841270 10.152280 0.954807 0.0 11.107087 3.811919 16.830914 1.445509 268.984375 259.542969  0.841270       1.0  0.659550       1.0        1.0  0.841270  0.554860  0.841270   0.841270 0.841270
  4   3  13  19 0.684211  1.097823 0.116396 0.0  1.214218 1.214218  1.214218 1.214218 264.769531 254.367188  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
  4   2  37  45 0.822222  4.188572 0.427419 0.0  4.615992 2.327532  5.830210 0.995454 279.089844 268.164062  0.755556       1.0  0.919361       1.0        1.0  0.755556  0.694629  0.755556   0.755556 0.755556
  4   1  53  63 0.841270 10.033573 0.913213 0.0 10.946786 3.827280 16.776996 1.441588 283.386719 273.707031  0.841270       1.0  0.660112       1.0        1.0  0.841270  0.555332  0.841270   0.841270 0.841270
  5   3  13  19 0.684211  1.094887 0.106256 0.0  1.201143 1.201143  1.201143 1.201143 279.589844 268.667969  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
  5   2  38  47 0.808511  4.355117 0.374590 0.0  4.729706 2.324527  5.930849 1.012613 291.902344 280.703125  0.723404       1.0  0.912220       1.0        1.0  0.723404  0.659904  0.723404   0.723404 0.723404
  5   1  63  73 0.863014 12.294246 1.016414 0.0 13.310660 3.732928 19.241509 1.655548 308.125000 299.550781  0.726027       1.0  0.636581       1.0        1.0  0.726027  0.462175  0.726027   0.726027 0.726027
  6   3  13  19 0.684211  1.104631 0.239518 0.0  1.344148 1.344148  1.344148 1.344148 292.929688 281.703125  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
  6   2  37  45 0.822222  4.187415 0.465027 0.0  4.652441 2.473606  5.996590 1.023196 305.132812 294.152344  0.755556       1.0  0.907753       1.0        1.0  0.755556  0.685858  0.755556   0.755556 0.755556
  6   1  53  63 0.841270 10.066147 0.726595 0.0 10.792742 3.883017 16.789332 1.442462 307.460938 298.113281  0.841270       1.0  0.659983       1.0        1.0  0.841270  0.555224  0.841270   0.841270 0.841270
  7   3  13  19 0.684211  1.097228 0.246174 0.0  1.343402 1.343402  1.343402 1.343402 305.753906 294.902344  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
  7   2  36  45 0.800000  4.113665 0.614715 0.0  4.728380 2.469557  6.071782 1.035810 317.531250 306.597656  0.755556       1.0  0.902821       1.0        1.0  0.755556  0.682131  0.755556   0.755556 0.755556
  7   1  53  63 0.841270 10.170082 0.634462 0.0 10.804544 3.872273 16.876326 1.461028 321.371094 311.425781  0.841270       1.0  0.659079       1.0        1.0  0.841270  0.554463  0.841270   0.841270 0.841270
  8   3  13  19 0.684211  1.095347 0.116677 0.0  1.212023 1.212023  1.212023 1.212023 319.792969 309.105469  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
  8   2  39  47 0.829787  4.440746 0.500088 0.0  4.940833 2.475052  6.152857 1.048994 331.675781 320.796875  0.723404       1.0  0.897700       1.0        1.0  0.723404  0.649400  0.723404   0.723404 0.723404
  8   1  63  73 0.863014 12.294873 0.815650 0.0 13.110524 3.902575 19.263381 1.672754 347.683594 340.031250  0.726027       1.0  0.636390       1.0        1.0  0.726027  0.462036  0.726027   0.726027 0.726027
  9   3  13  19 0.684211  1.102357 0.111589 0.0  1.213946 1.213946  1.213946 1.213946 334.101562 323.050781  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
  9   2  38  47 0.808511  4.344304 0.533229 0.0  4.877533 2.500250  6.091479 1.039043 346.449219 335.960938  0.723404       1.0  0.901559       1.0        1.0  0.723404  0.652191  0.723404   0.723404 0.723404
  9   1  63  73 0.863014 12.340273 1.142503 0.0 13.482776 3.907975 19.574255 1.674725 362.554688 354.722656  0.726027       1.0  0.633700       1.0        1.0  0.726027  0.460083  0.726027   0.726027 0.726027
 10   3  13  19 0.684211  1.096212 0.121418 0.0  1.217630 1.217630  1.217630 1.217630 349.347656 338.468750  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 10   2  39  47 0.829787  4.445832 0.361945 0.0  4.807777 2.332840  6.025407 1.027755 362.238281 351.644531  0.723404       1.0  0.905841       1.0        1.0  0.723404  0.655289  0.723404   0.723404 0.723404
 10   1  63  73 0.863014 12.220358 0.978949 0.0 13.199307 3.740380 19.224714 1.659637 371.496094 364.472656  0.726027       1.0  0.636728       1.0        1.0  0.726027  0.462282  0.726027   0.726027 0.726027
 11   3  13  19 0.684211  1.100157 0.126311 0.0  1.226467 1.226467  1.226467 1.226467 363.195312 352.593750  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 11   2  37  45 0.822222  4.196980 0.554148 0.0  4.751127 2.362174  5.977595 1.020172 377.902344 367.593750  0.755556       1.0  0.909028       1.0        1.0  0.755556  0.686821  0.755556   0.755556 0.755556
 11   1  63  73 0.863014 12.362045 1.014551 0.0 13.376596 3.771722 19.354191 1.656190 395.949219 390.214844  0.726027       1.0  0.635598       1.0        1.0  0.726027  0.461462  0.726027   0.726027 0.726027
 12   3  13  19 0.684211  1.091823 0.114564 0.0  1.206387 1.206387  1.206387 1.206387 381.210938 371.152344  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 12   2  39  47 0.829787  4.444034 0.783286 0.0  5.227319 2.535777  6.433707 1.096130 395.566406 385.050781  0.723404       1.0  0.881341       1.0        1.0  0.723404  0.637566  0.723404   0.723404 0.723404
 12   1  63  73 0.863014 12.279563 1.014257 0.0 13.293820 3.944556 19.727527 1.687062 407.492188 399.574219  0.726027       1.0  0.632393       1.0        1.0  0.726027  0.459135  0.726027   0.726027 0.726027
 13   3  13  19 0.684211  1.096239 0.107003 0.0  1.203241 1.203241  1.203241 1.203241 395.597656 385.050781  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 13   2  39  47 0.829787  4.441955 0.354275 0.0  4.796230 2.326623  5.999471 1.023613 407.652344 397.308594  0.723404       1.0  0.907561       1.0        1.0  0.723404  0.656533  0.723404   0.723404 0.723404
 13   1  63  73 0.863014 12.219435 1.481745 0.0 13.701180 3.753541 19.700651 1.685082 420.187500 412.753906  0.726027       1.0  0.632621       1.0        1.0  0.726027  0.459300  0.726027   0.726027 0.726027
 14   3  13  19 0.684211  1.098514 0.114635 0.0  1.213149 1.213149  1.213149 1.213149 409.871094 399.316406  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 14   2  36  45 0.800000  4.080614 0.592410 0.0  4.673025 2.342878  5.886174 1.004849 424.773438 414.972656  0.755556       1.0  0.915343       1.0        1.0  0.755556  0.691592  0.755556   0.755556 0.755556
 14   1  63  73 0.863014 12.432015 1.112270 0.0 13.544285 3.752282 19.430459 1.662633 448.187500 441.562500  0.726027       1.0  0.634937       1.0        1.0  0.726027  0.460982  0.726027   0.726027 0.726027
 15   3  13  19 0.684211  1.096472 0.112126 0.0  1.208598 1.208598  1.208598 1.208598 426.058594 415.726562  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 15   2  36  45 0.800000  4.089136 0.602214 0.0  4.691350 2.583074  5.899948 1.007162 440.417969 431.335938  0.755556       1.0  0.914372       1.0        1.0  0.755556  0.690859  0.755556   0.755556 0.755556
 15   1  63  73 0.863014 12.502778 1.400135 0.0 13.902913 4.005169 19.802861 1.693672 463.656250 456.652344  0.726027       1.0  0.631756       1.0        1.0  0.726027  0.458672  0.726027   0.726027 0.726027
 16   3  13  19 0.684211  1.101159 0.113535 0.0  1.214694 1.214694  1.214694 1.214694 440.195312 430.835938  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 16   2  36  45 0.800000  4.091773 0.614059 0.0  4.705832 2.338503  5.920527 1.010426 452.746094 443.539062  0.755556       1.0  0.912935       1.0        1.0  0.755556  0.689773  0.755556   0.755556 0.755556
 16   1  53  63 0.841270 10.145991 0.635920 0.0 10.781911 3.749305 16.702438 1.435176 455.234375 446.617188  0.841270       1.0  0.660893       1.0        1.0  0.841270  0.555989  0.841270   0.841270 0.841270
 17   3  13  19 0.684211  1.090872 0.119134 0.0  1.210006 1.210006  1.210006 1.210006 453.539062 444.289062  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 17   2  36  45 0.800000  4.091257 0.639479 0.0  4.730736 2.331516  5.940742 1.013885 463.519531 454.199219  0.755556       1.0  0.911538       1.0        1.0  0.755556  0.688718  0.755556   0.755556 0.755556
 17   1  53  63 0.841270 10.168823 0.913375 0.0 11.082198 3.755969 17.022940 1.461853 466.667969 458.035156  0.841270       1.0  0.657568       1.0        1.0  0.841270  0.553192  0.841270   0.841270 0.841270
 18   3  13  19 0.684211  1.095664 0.130118 0.0  1.225783 1.225783  1.225783 1.225783 465.515625 455.953125  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 18   2  38  47 0.808511  4.346838 0.673514 0.0  5.020352 2.352024  6.246135 1.064857 475.777344 466.425781  0.723404       1.0  0.892041       1.0        1.0  0.723404  0.645306  0.723404   0.723404 0.723404
 18   1  63  73 0.863014 12.379450 1.121035 0.0 13.500485 3.781547 19.746620 1.688945 489.539062 481.957031  0.726027       1.0  0.632231       1.0        1.0  0.726027  0.459017  0.726027   0.726027 0.726027
 19   3  13  19 0.684211  1.101678 0.114091 0.0  1.215769 1.215769  1.215769 1.215769 476.433594 466.925781  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 19   2  39  47 0.829787  4.447661 0.655316 0.0  5.102977 2.340934  6.318746 1.076860 489.078125 479.699219  0.723404       1.0  0.887796       1.0        1.0  0.723404  0.642236  0.723404   0.723404 0.723404
 19   1  63  73 0.863014 12.294951 0.796803 0.0 13.091754 3.761806 19.410500 1.660848 502.117188 495.707031  0.726027       1.0  0.635110       1.0        1.0  0.726027  0.461107  0.726027   0.726027 0.726027
 20   3  13  19 0.684211  1.093570 0.119281 0.0  1.212851 1.212851  1.212851 1.212851 489.171875 479.964844  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 20   2  36  45 0.800000  4.073786 0.350848 0.0  4.424635 2.334909  5.637486 0.963124 503.863281 494.601562  0.755556       1.0  0.934206       1.0        1.0  0.755556  0.705845  0.755556   0.755556 0.755556
 20   1  63  73 0.863014 12.446651 1.168847 0.0 13.615498 3.739443 19.252984 1.647504 523.246094 517.312500  0.726027       1.0  0.636481       1.0        1.0  0.726027  0.462102  0.726027   0.726027 0.726027
 21   3  13  19 0.684211  1.103298 0.113439 0.0  1.216737 1.216737  1.216737 1.216737 505.796875 496.945312  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 21   2  36  45 0.800000  4.095009 0.698802 0.0  4.793811 2.354183  6.010548 1.025480 518.332031 509.257812  0.755556       1.0  0.906824       1.0        1.0  0.755556  0.685156  0.755556   0.755556 0.755556
 21   1  63  73 0.863014 12.488604 0.885124 0.0 13.373727 3.780625 19.384276 1.658511 539.625000 533.839844  0.726027       1.0  0.635337       1.0        1.0  0.726027  0.461272  0.726027   0.726027 0.726027
 22   3  13  19 0.684211  1.095690 0.125398 0.0  1.221089 1.221089  1.221089 1.221089 522.175781 512.867188  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 22   2  36  45 0.800000  4.083584 0.705064 0.0  4.788648 2.333265  6.009737 1.025531 535.695312 527.000000  0.755556       1.0  0.906877       1.0        1.0  0.755556  0.685196  0.755556   0.755556 0.755556
 22   1  63  73 0.863014 12.460770 1.223610 0.0 13.684380 3.736571 19.694117 1.684454 553.828125 547.984375  0.726027       1.0  0.632677       1.0        1.0  0.726027  0.459341  0.726027   0.726027 0.726027
 23   3  13  19 0.684211  1.100346 0.114566 0.0  1.214912 1.214912  1.214912 1.214912 535.937500 526.996094  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 23   2  38  47 0.808511  4.350619 0.398537 0.0  4.749155 2.345901  5.964067 1.017918 547.945312 538.847656  0.723404       1.0  0.909944       1.0        1.0  0.723404  0.658257  0.723404   0.723404 0.723404
 23   1  63  73 0.863014 12.370241 1.196400 0.0 13.566641 3.757007 19.530709 1.670988 560.363281 552.894531  0.726027       1.0  0.634073       1.0        1.0  0.726027  0.460355  0.726027   0.726027 0.726027
 24   3  13  19 0.684211  1.096980 0.121881 0.0  1.218860 1.218860  1.218860 1.218860 549.550781 540.554688  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 24   2  36  45 0.800000  4.078796 1.086175 0.0  5.164971 2.712188  6.383831 1.087660 561.472656 552.578125  0.755556       1.0  0.884103       1.0        1.0  0.755556  0.667989  0.755556   0.755556 0.755556
 24   1  63  73 0.863014 12.410680 0.867916 0.0 13.278596 4.132633 19.662427 1.681684 578.531250 572.453125  0.726027       1.0  0.632947       1.0        1.0  0.726027  0.459537  0.726027   0.726027 0.726027
 25   3  13  19 0.684211  1.096233 0.113635 0.0  1.209868 1.209868  1.209868 1.209868 561.988281 552.832031  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 25   2  37  45 0.822222  4.196689 0.336628 0.0  4.533317 2.336231  5.743185 0.981004 575.039062 566.097656  0.755556       1.0  0.925861       1.0        1.0  0.755556  0.699539  0.755556   0.755556 0.755556
 25   1  63  73 0.863014 12.367801 0.817912 0.0 13.185713 3.761384 18.928899 1.620628 589.671875 584.468750  0.726027       1.0  0.639346       1.0        1.0  0.726027  0.464183  0.726027   0.726027 0.726027
 26   3  13  19 0.684211  1.103124 0.109400 0.0  1.212525 1.212525  1.212525 1.212525 575.539062 566.597656  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 26   2  37  45 0.822222  4.186062 0.753742 0.0  4.939804 2.342652  6.152329 1.049269 586.906250 577.945312  0.755556       1.0  0.897732       1.0        1.0  0.755556  0.678287  0.755556   0.755556 0.755556
 26   1  63  73 0.863014 12.342195 1.225763 0.0 13.567959 3.742396 19.720288 1.686530 605.117188 599.796875  0.726027       1.0  0.632455       1.0        1.0  0.726027  0.459179  0.726027   0.726027 0.726027
 27   3  13  19 0.684211  1.097233 0.111926 0.0  1.209159 1.209159  1.209159 1.209159 587.929688 578.777344  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 27   2  38  47 0.808511  4.346508 0.362338 0.0  4.708846 2.331761  5.918005 1.010082 600.121094 591.113281  0.723404       1.0  0.913110       1.0        1.0  0.723404  0.660548  0.723404   0.723404 0.723404
 27   1  63  73 0.863014 12.399641 1.264509 0.0 13.664150 3.751551 19.582155 1.675090 613.546875 606.339844  0.726027       1.0  0.633632       1.0        1.0  0.726027  0.460034  0.726027   0.726027 0.726027
 28   3  13  19 0.684211  1.104354 0.109132 0.0  1.213486 1.213486  1.213486 1.213486 601.468750 592.613281  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 28   2  36  45 0.800000  4.076824 0.342269 0.0  4.419092 2.331217  5.632579 0.962534 610.097656 600.925781  0.755556       1.0  0.934606       1.0        1.0  0.755556  0.706147  0.755556   0.755556 0.755556
 28   1  53  63 0.841270 10.160387 1.114945 0.0 11.275331 3.754554 16.907910 1.452596 614.761719 606.734375  0.841270       1.0  0.658752       1.0        1.0  0.841270  0.554188  0.841270   0.841270 0.841270
 29   3  13  19 0.684211  1.092800 0.570144 0.0  1.662944 1.662944  1.662944 1.662944 612.687500 603.691406  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 29   2  36  45 0.800000  4.086076 0.784632 0.0  4.870708 2.794378  6.533652 1.112704 624.589844 615.988281  0.755556       1.0  0.875971       1.0        1.0  0.755556  0.661845  0.755556   0.755556 0.755556
 29   1  63  73 0.863014 12.463315 0.865762 0.0 13.329077 4.218363 19.862729 1.698500 647.261719 642.093750  0.726027       1.0  0.631251       1.0        1.0  0.726027  0.458306  0.726027   0.726027 0.726027
 30   3  13  19 0.684211  1.098640 0.120851 0.0  1.219492 1.219492  1.219492 1.219492 626.300781 617.839844  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 30   2  38  47 0.808511  4.363398 0.384372 0.0  4.747770 2.357063  5.967262 1.018204 638.523438 629.726562  0.723404       1.0  0.909727       1.0        1.0  0.723404  0.658101  0.723404   0.723404 0.723404
 30   1  63  73 0.863014 12.365893 1.283603 0.0 13.649496 3.766965 19.616758 1.678042 652.636719 646.109375  0.726027       1.0  0.633336       1.0        1.0  0.726027  0.459819  0.726027   0.726027 0.726027
 31   3  13  19 0.684211  1.102241 0.107320 0.0  1.209561 1.209561  1.209561 1.209561 639.292969 630.312500  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 31   2  36  45 0.800000  4.089909 0.336710 0.0  4.426618 2.332773  5.636180 0.962989 651.964844 643.347656  0.755556       1.0  0.934312       1.0        1.0  0.755556  0.705925  0.755556   0.755556 0.755556
 31   1  63  73 0.863014 12.495011 1.369911 0.0 13.864922 3.765837 19.501102 1.668254 674.175781 668.542969  0.726027       1.0  0.634328       1.0        1.0  0.726027  0.460539  0.726027   0.726027 0.726027
 32   3  13  19 0.684211  1.095588 0.121886 0.0  1.217474 1.217474  1.217474 1.217474 653.253906 644.351562  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 32   2  39  47 0.829787  4.449574 0.376421 0.0  4.825995 2.336574  6.043470 1.031070 666.664062 657.738281  0.723404       1.0  0.904657       1.0        1.0  0.723404  0.654433  0.723404   0.723404 0.723404
 32   1  63  73 0.863014 12.235494 1.277178 0.0 13.512672 3.761034 19.556142 1.673045 676.468750 670.582031  0.726027       1.0  0.633855       1.0        1.0  0.726027  0.460196  0.726027   0.726027 0.726027
 33   3  13  19 0.684211  1.103738 0.112027 0.0  1.215765 1.215765  1.215765 1.215765 667.183594 658.238281  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 33   2  39  47 0.829787  4.444815 0.878093 0.0  5.322908 2.339584  6.538673 1.113335 680.203125 671.777344  0.723404       1.0  0.875707       1.0        1.0  0.723404  0.633490  0.723404   0.723404 0.723404
 33   1  63  73 0.863014 12.247792 0.807204 0.0 13.054997 3.753033 19.593670 1.676073 692.382812 686.015625  0.726027       1.0  0.633533       1.0        1.0  0.726027  0.459963  0.726027   0.726027 0.726027
 34   3  13  19 0.684211  1.096840 0.115789 0.0  1.212629 1.212629  1.212629 1.212629 681.984375 673.281250  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 34   2  36  45 0.800000  4.086790 0.338637 0.0  4.425426 2.329121  5.638055 0.963336 693.800781 685.214844  0.755556       1.0  0.934160       1.0        1.0  0.755556  0.705809  0.755556   0.755556 0.755556
 34   1  63  73 0.863014 12.439207 0.861448 0.0 13.300655 3.737641 18.938710 1.621450 712.753906 707.046875  0.726027       1.0  0.639258       1.0        1.0  0.726027  0.464119  0.726027   0.726027 0.726027
 35   3  13  19 0.684211  1.100055 0.647037 0.0  1.747092 1.747092  1.747092 1.747092 695.339844 686.718750  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 35   2  39  47 0.829787  4.466691 0.934611 0.0  5.401302 2.877042  7.148394 1.215038 707.242188 698.792969  0.723404       1.0  0.846990       1.0        1.0  0.723404  0.612716  0.723404   0.723404 0.723404
 35   1  63  73 0.863014 12.301693 0.809705 0.0 13.111398 4.312279 20.259792 1.731666 719.265625 713.214844  0.726027       1.0  0.627953       1.0        1.0  0.726027  0.455911  0.726027   0.726027 0.726027
 36   3  13  19 0.684211  1.094673 0.122950 0.0  1.217624 1.217624  1.217624 1.217624 709.082031 700.546875  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 36   2  36  45 0.800000  4.085239 0.916942 0.0  5.002181 2.344963  6.219805 1.060480 721.507812 713.171875  0.755556       1.0  0.893614       1.0        1.0  0.755556  0.675175  0.755556   0.755556 0.755556
 36   1  63  73 0.863014 12.474535 0.933842 0.0 13.408377 3.787327 19.628182 1.679253 744.035156 738.703125  0.726027       1.0  0.633239       1.0        1.0  0.726027  0.459749  0.726027   0.726027 0.726027
 37   3  13  19 0.684211  1.101422 0.114567 0.0  1.215989 1.215989  1.215989 1.215989 722.410156 713.921875  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 37   2  38  47 0.808511  4.352186 0.372954 0.0  4.725141 2.342966  5.941130 1.013746 735.472656 727.007812  0.723404       1.0  0.911511       1.0        1.0  0.723404  0.659391  0.723404   0.723404 0.723404
 37   1  63  73 0.863014 12.395072 0.833914 0.0 13.228985 3.747513 19.170115 1.640794 749.859375 743.042969  0.726027       1.0  0.637207       1.0        1.0  0.726027  0.462630  0.726027   0.726027 0.726027
 38   3  13  19 0.684211  1.095390 0.118347 0.0  1.213737 1.213737  1.213737 1.213737 736.683594 728.257812  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 38   2  38  47 0.808511  4.347723 0.403095 0.0  4.750818 2.329315  5.964555 1.017852 748.621094 740.261719  0.723404       1.0  0.909911       1.0        1.0  0.723404  0.658234  0.723404   0.723404 0.723404
 38   1  63  73 0.863014 12.343945 0.818416 0.0 13.162361 3.757426 19.126916 1.637507 762.343750 755.613281  0.726027       1.0  0.637588       1.0        1.0  0.726027  0.462906  0.726027   0.726027 0.726027
 39   3  13  19 0.684211  1.100642 0.114849 0.0  1.215491 1.215491  1.215491 1.215491 749.292969 740.761719  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 39   2  37  45 0.822222  4.191916 0.354136 0.0  4.546052 2.341651  5.761543 0.983993 760.585938 752.007812  0.755556       1.0  0.924463       1.0        1.0  0.755556  0.698483  0.755556   0.755556 0.755556
 39   1  63  73 0.863014 12.346293 1.458719 0.0 13.805012 3.768281 19.566555 1.673837 781.699219 777.730469  0.726027       1.0  0.633766       1.0        1.0  0.726027  0.460131  0.726027   0.726027 0.726027
 40   3  13  19 0.684211  1.096399 0.118778 0.0  1.215177 1.215177  1.215177 1.215177 763.347656 754.773438  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 40   2  36  45 0.800000  4.084339 0.351628 0.0  4.435967 2.336083  5.651144 0.965411 778.269531 770.292969  0.755556       1.0  0.933098       1.0        1.0  0.755556  0.705007  0.755556   0.755556 0.755556
 40   1  63  73 0.863014 12.417671 1.449316 0.0 13.866987 3.732945 19.518131 1.669589 795.386719 790.359375  0.726027       1.0  0.634181       1.0        1.0  0.726027  0.460433  0.726027   0.726027 0.726027
 41   3  13  19 0.684211  1.105439 0.123837 0.0  1.229277 1.229277  1.229277 1.229277 780.582031 772.546875  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 41   2  38  47 0.808511  4.354741 0.355891 0.0  4.710632 2.353732  5.939909 1.013572 793.039062 784.652344  0.723404       1.0  0.911595       1.0        1.0  0.723404  0.659452  0.723404   0.723404 0.723404
 41   1  63  73 0.863014 12.337776 0.821243 0.0 13.159019 3.775359 19.098928 1.634932 804.550781 797.699219  0.726027       1.0  0.637835       1.0        1.0  0.726027  0.463086  0.726027   0.726027 0.726027
 42   3  13  19 0.684211  1.099709 0.116119 0.0  1.215828 1.215828  1.215828 1.215828 795.136719 786.656250  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 42   2  36  45 0.800000  4.092585 0.335463 0.0  4.428049 2.332079  5.643876 0.964546 808.191406 800.023438  0.755556       1.0  0.933686       1.0        1.0  0.755556  0.705452  0.755556   0.755556 0.755556
 42   1  53  63 0.841270 10.147677 0.650429 0.0 10.798105 3.758456 16.441982 1.467435 813.175781 806.789062  0.841270       1.0  0.663657       1.0        1.0  0.841270  0.558314  0.841270   0.841270 0.841270
 43   3  13  19 0.684211  1.098211 0.106876 0.0  1.205087 1.205087  1.205087 1.205087 808.691406 800.523438  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 43   2  37  45 0.822222  4.192793 0.343928 0.0  4.536721 2.330737  5.741808 0.980478 820.480469 812.109375  0.755556       1.0  0.925966       1.0        1.0  0.755556  0.699619  0.755556   0.755556 0.755556
 43   1  63  73 0.863014 12.337888 0.819003 0.0 13.156891 3.737027 18.898699 1.618051 835.402344 830.175781  0.726027       1.0  0.639616       1.0        1.0  0.726027  0.464379  0.726027   0.726027 0.726027
 44   3  13  19 0.684211  1.107844 0.104226 0.0  1.212070 1.212070  1.212070 1.212070 820.730469 812.363281  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 44   2  37  45 0.822222  4.190006 0.996455 0.0  5.186461 3.005320  6.398531 1.090227 831.550781 823.269531  0.755556       1.0  0.883283       1.0        1.0  0.755556  0.667369  0.755556   0.755556 0.755556
 44   1  63  73 0.863014 12.368832 0.836713 0.0 13.205545 4.438595 19.604077 1.677277 847.929688 843.007812  0.726027       1.0  0.633444       1.0        1.0  0.726027  0.459898  0.726027   0.726027 0.726027
 45   3  13  19 0.684211  1.098601 0.115922 0.0  1.214523 1.214523  1.214523 1.214523 832.738281 824.519531  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 45   2  38  47 0.808511  4.346438 0.371227 0.0  4.717665 2.346305  5.932188 1.012631 844.738281 836.285156  0.723404       1.0  0.912127       1.0        1.0  0.723404  0.659837  0.723404   0.723404 0.723404
 45   1  63  73 0.863014 12.345765 1.523254 0.0 13.869019 3.753694 19.801207 1.693379 855.238281 848.917969  0.726027       1.0  0.631770       1.0        1.0  0.726027  0.458682  0.726027   0.726027 0.726027
 46   3  13  19 0.684211  1.102034 0.119262 0.0  1.221295 1.221295  1.221295 1.221295 846.425781 838.039062  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 46   2  36  45 0.800000  4.102643 0.346509 0.0  4.449152 2.350483  5.670448 0.968850 857.941406 849.808594  0.755556       1.0  0.931547       1.0        1.0  0.755556  0.703836  0.755556   0.755556 0.755556
 46   1  63  73 0.863014 12.457359 1.558003 0.0 14.015361 3.774197 19.685809 1.683896 875.566406 870.101562  0.726027       1.0  0.632748       1.0        1.0  0.726027  0.459392  0.726027   0.726027 0.726027
 47   3  13  19 0.684211  1.095767 0.105154 0.0  1.200920 1.200920  1.200920 1.200920 857.742188 849.558594  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 47   2  36  45 0.800000  4.088516 0.358165 0.0  4.446681 2.332610  5.647601 0.965007 870.527344 862.296875  0.755556       1.0  0.933384       1.0        1.0  0.755556  0.705224  0.755556   0.755556 0.755556
 47   1  53  63 0.841270 10.155838 0.642541 0.0 10.798379 3.746674 16.445980 1.413902 875.414062 868.796875  0.841270       1.0  0.663614       1.0        1.0  0.841270  0.558278  0.841270   0.841270 0.841270
 48   3  13  19 0.684211  1.096755 0.117784 0.0  1.214539 1.214539  1.214539 1.214539 872.777344 864.550781  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 48   2  36  45 0.800000  4.081110 0.335363 0.0  4.416474 2.343002  5.631013 0.962158 882.769531 875.066406  0.755556       1.0  0.934734       1.0        1.0  0.755556  0.706244  0.755556   0.755556 0.755556
 48   1  63  73 0.863014 12.474876 0.896062 0.0 13.370938 3.770141 19.001951 1.626891 902.082031 897.000000  0.726027       1.0  0.638695       1.0        1.0  0.726027  0.463710  0.726027   0.726027 0.726027
 49   3  13  19 0.684211  1.099018 0.115843 0.0  1.214861 1.214861  1.214861 1.214861 884.117188 876.316406  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 49   2  36  45 0.800000  4.152649 0.338781 0.0  4.491430 2.332350  5.706291 0.975785 896.781250 888.843750  0.755556       1.0  0.928715       1.0        1.0  0.755556  0.701696  0.755556   0.755556 0.755556
 49   1  63  73 0.863014 12.802800 0.938095 0.0 13.740895 3.752639 19.447186 1.665503 916.046875 911.058594  0.726027       1.0  0.634793       1.0        1.0  0.726027  0.460877  0.726027   0.726027 0.726027

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
                      Level-wise Means                      

 AL    LE    AC       CF        GT       ST  OT        TT       LT        CT       WT        RSS        VMS  QL_SCORE  LT_SCORE  CT_SCORE  AW_SCORE  AME_SCORE  LT_GRADE  CT_GRADE  AW_GRADE  AME_GRADE    GRADE
  3 13.00 19.00 0.684211  1.098623 0.140690 0.0  1.239313 1.239313  1.239313 1.239313 551.584609 542.276953  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
  2 37.18 45.84 0.810960  4.233695 0.520210 0.0  4.753905 2.403396  5.993218 1.022633 563.953437 554.701016  0.742052       1.0  0.909306       1.0        1.0  0.742052  0.674886  0.742052   0.742052 0.742052
  1 61.20 71.20 0.859100 11.974091 1.007994 0.0 12.982085 3.823486 18.975303 1.626988 578.083047 571.313750  0.746771       1.0  0.639303       1.0        1.0  0.746771  0.477850  0.746771   0.746771 0.746771

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
               Level-wise Standard Deviation                

 AL       LE       AC       CF       GT       ST  OT       TT       LT       CT       WT        RSS        VMS  QL_SCORE  LT_SCORE  CT_SCORE  AW_SCORE  AME_SCORE  LT_GRADE  CT_GRADE  AW_GRADE  AME_GRADE    GRADE
  3 0.000000 0.000000 0.000000 0.003728 0.100154 0.0 0.099898 0.099898 0.099898 0.099898 200.784531 201.636534  0.000000       0.0  0.000000       0.0        0.0  0.000000  0.000000  0.000000   0.000000 0.000000
  2 1.172647 0.997139 0.011780 0.144582 0.203720 0.0 0.248714 0.147532 0.296397 0.049385 200.597867 201.536369  0.016030       0.0  0.018670       0.0        0.0  0.016030  0.024232  0.016030   0.016030 0.016030
  1 3.880879 3.880879 0.008439 0.876463 0.251326 0.0 1.003683 0.149965 1.085994 0.088127 201.588045 202.671525  0.044724       0.0  0.010252       0.0        0.0  0.044724  0.036812  0.044724   0.044724 0.044724

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
                       Partial Plans                        

 RU  AL  IT  PN       GT       ST  OT       TT        YT       WT       ET        RSS        VMS  LE  AC       CF  PSG  START_S  END_S  SIZE  SGLITS_T  FIRST_I  LAST_I  PP_EF_L  PP_EF_A  SP_ED_L  SP_ED_A  SP_EB_L  SP_EB_A  SP_EBS_L  SP_EBS_A  TOT_CHOICES  PRE_CHOICES
  0   3   1   1 1.104008 0.115207 0.0 1.219216  1.219216 1.219216 0.000000 219.968750 210.132812  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   2   1   1 1.053891 0.130031 0.0 1.183922  2.403138 2.403138 1.415140 221.308594 211.625000   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
  0   2   2   2 1.261810 0.153330 0.0 1.415140  3.818278 1.415140 1.443304 226.835938 216.167969  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
  0   2   3   3 1.327070 0.116234 0.0 1.443304  5.261582 1.443304 0.325692 228.929688 218.140625  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
  0   2   4   4 0.250801 0.074891 0.0 0.325692  5.587274 0.325692 0.274510 214.757812 208.613281   2   4 0.500000    4       32     33     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  0   2   5   5 0.251662 0.022848 0.0 0.274510  5.861784 0.274510 0.435040 213.523438 203.011719   2   3 0.666667    3       34     35     2         3        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  0   2   6   6 0.339331 0.095710 0.0 0.435040  6.296825 0.435040 0.000000 217.570312 206.433594   3   4 0.750000    4       36     38     3         4       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
  0   1   1   1 1.331112 0.079929 0.0 1.411041  3.814179 3.814179 2.831438 227.125000 216.746094   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
  0   1   2   2 1.325172 0.091125 0.0 1.416297  6.645616 2.831438 3.320056 225.515625 215.257812   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
  0   1   3   3 1.742171 0.134582 0.0 1.876752  9.965672 3.320056 1.789614 233.011719 222.343750   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.464811  0.622260  0.622260            0            0
  0   1   4   4 1.324898 0.139024 0.0 1.463922 11.755286 1.789614 1.994730 225.664062 216.660156   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
  0   1   5   5 1.609089 0.111131 0.0 1.720220 13.750017 1.994730 3.850966 233.761719 223.761719   8   8 1.000000    0       31     38     5         5       21      25 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
  0   1   6   6 3.170540 0.245386 0.0 3.415925 17.600983 3.850966 0.292680 252.160156 243.406250  15  17 0.882353    0       39     53     6         8       26      31 2.500000 2.125000 1.516575 1.505545 0.606630 0.645234  0.484920  0.487372            0            1
  0   1   7   7 0.273601 0.019079 0.0 0.292680 17.893663 0.292680 0.429936 209.945312 198.992188   1   2 0.500000    0       54     54     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  0   1   8   8 0.406235 0.023702 0.0 0.429936 18.323599 0.429936 0.291293 212.394531 202.078125   2   3 0.666667    0       55     56     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   1   9   9 0.274478 0.016815 0.0 0.291293 18.614892 0.291293 0.428559 214.058594 203.386719   1   1 1.000000    0       57     57     1         1       34      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  0   1  10  10 0.408963 0.019597 0.0 0.428559 19.043452 0.428559 0.294815 214.347656 203.550781   2   3 0.666667    0       58     59     1         2       35      35 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   1  11  11 0.278998 0.015816 0.0 0.294815 19.338267 0.294815 0.579493 217.832031 206.808594   1   1 1.000000    0       60     60     1         1       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  0   1  12  12 0.546419 0.033075 0.0 0.579493 19.917760 0.579493 0.000000 219.023438 207.917969   3   4 0.750000    0       61     63     2         3       37      38 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
  1   3   1   1 1.096081 0.120177 0.0 1.216258  1.216258 1.216258 0.000000 225.285156 214.804688  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   2   1   1 1.049718 0.129651 0.0 1.179369  2.395628 2.395628 1.359592 229.289062 218.632812   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
  1   2   2   2 1.265368 0.094224 0.0 1.359592  3.755220 1.359592 1.497504 231.484375 220.632812  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
  1   2   3   3 1.308885 0.188619 0.0 1.497504  5.252724 1.497504 0.327468 236.386719 225.957031  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
  1   2   4   4 0.249103 0.078366 0.0 0.327468  5.580192 0.327468 0.275869 219.171875 212.039062   2   3 0.666667    3       32     33     2         3        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  1   2   5   5 0.249368 0.026500 0.0 0.275869  5.856061 0.275869 0.441456 221.042969 214.222656   2   4 0.500000    4       34     35     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  1   2   6   6 0.340914 0.100543 0.0 0.441456  6.297517 0.441456 0.000000 225.972656 218.203125   3   4 0.750000    4       36     38     3         4       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
  1   1   1   1 1.325425 0.076472 0.0 1.401898  3.797525 3.797525 2.779832 230.910156 220.500000   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
  1   1   2   2 1.331290 0.088949 0.0 1.420239  6.577357 2.779832 3.384255 232.445312 221.781250   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
  1   1   3   3 1.716760 0.169991 0.0 1.886752  9.961612 3.384255 1.749493 233.632812 224.718750   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.492153  0.622260  0.622260            0            0
  1   1   4   4 1.328950 0.093075 0.0 1.422025 11.711105 1.749493 2.006256 236.171875 226.394531   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
  1   1   5   5 1.618726 0.111661 0.0 1.730387 13.717361 2.006256 3.863554 241.171875 231.003906   8   8 1.000000    0       31     38     5         5       21      25 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
  1   1   6   6 3.174341 0.247757 0.0 3.422098 17.580915 3.863554 0.293901 255.218750 246.558594  15  17 0.882353    0       39     53     6         8       26      31 2.500000 2.125000 1.516575 1.505545 0.606630 0.645234  0.484920  0.487372            0            1
  1   1   7   7 0.275080 0.018822 0.0 0.293901 17.874816 0.293901 0.425443 219.882812 212.957031   1   1 1.000000    0       54     54     1         1       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   1   8   8 0.404499 0.020944 0.0 0.425443 18.300259 0.425443 0.292000 220.843750 213.968750   2   3 0.666667    0       55     56     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  1   1   9   9 0.273445 0.018554 0.0 0.292000 18.592259 0.292000 0.427920 221.613281 214.707031   1   2 0.500000    0       57     57     1         2       34      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  1   1  10  10 0.407448 0.020472 0.0 0.427920 19.020179 0.427920 0.293528 222.941406 215.890625   2   3 0.666667    0       58     59     1         2       35      35 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   1  11  11 0.277992 0.015536 0.0 0.293528 19.313706 0.293528 0.578894 226.058594 218.917969   1   1 1.000000    0       60     60     1         1       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  1   1  12  12 0.546231 0.032663 0.0 0.578894 19.892600 0.578894 0.000000 226.660156 219.363281   3   4 0.750000    0       61     63     2         3       37      38 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
  2   3   1   1 1.100874 0.124242 0.0 1.225116  1.225116 1.225116 0.000000 234.511719 225.792969  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  2   2   1   1 1.050708 0.136503 0.0 1.187212  2.412328 2.412328 1.359740 238.316406 228.070312   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
  2   2   2   2 1.260019 0.099721 0.0 1.359740  3.772068 1.359740 1.440253 245.398438 234.375000  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
  2   2   3   3 1.316120 0.124132 0.0 1.440253  5.212321 1.440253 0.375143 249.261719 238.113281  11  11 1.000000   11       21     31     2         2        5       6 5.500000 5.500000 6.363961 6.363961 1.157084 1.157084 -1.880482 -1.880482            0            1
  2   2   4   4 0.348931 0.026212 0.0 0.375143  5.587464 0.375143 0.277268 252.554688 241.656250   3   5 0.600000    5       32     34     2         4        7       8 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
  2   2   5   5 0.251691 0.025577 0.0 0.277268  5.864732 0.277268 0.375991 252.988281 242.160156   2   4 0.500000    4       35     36     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  2   2   6   6 0.342358 0.033633 0.0 0.375991  6.240722 0.375991 0.000000 253.898438 243.031250   3   4 0.750000    4       37     39     3         4       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
  2   1   1   1 1.347278 0.077169 0.0 1.424448  3.836775 3.836775 2.750925 241.660156 231.085938   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
  2   1   2   2 1.314880 0.076305 0.0 1.391185  6.587701 2.750925 3.319613 243.605469 232.710938   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
  2   1   3   3 1.741021 0.138339 0.0 1.879360  9.907314 3.319613 1.797532 251.730469 241.132812   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.894427 0.464811 0.470751  0.622260  0.603019            0            0
  2   1   4   4 1.336051 0.086338 0.0 1.422389 11.704845 1.797532 2.009601 250.078125 239.019531   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
  2   1   5   5 1.614046 0.118287 0.0 1.732333 13.714446 2.009601 3.433165 250.664062 242.570312   8   8 1.000000    0       31     38     5         5       21      25 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
  2   1   6   6 2.850139 0.207035 0.0 3.057174 17.147611 3.433165 0.290205 264.312500 256.656250  14  14 1.000000    0       39     52     6         6       26      31 2.333333 2.333333 1.505545 1.505545 0.645234 0.645234  0.487372  0.487372            0            1
  2   1   7   7 0.274660 0.015544 0.0 0.290205 17.437815 0.290205 0.576278 252.558594 241.656250   1   1 1.000000    0       53     53     1         1       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  2   1   8   8 0.547643 0.028635 0.0 0.576278 18.014093 0.576278 0.292422 252.613281 241.656250   3   6 0.500000    0       54     56     2         4       33      34 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
  2   1   9   9 0.274912 0.017509 0.0 0.292422 18.306515 0.292422 0.428317 253.246094 242.421875   1   2 0.500000    0       57     57     1         2       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  2   1  10  10 0.408723 0.019594 0.0 0.428317 18.734832 0.428317 0.363511 253.343750 242.531250   2   3 0.666667    0       58     59     1         2       36      36 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  2   1  11  11 0.280331 0.083179 0.0 0.363511 19.098343 0.363511 0.580213 254.273438 243.281250   1   1 1.000000    0       60     60     1         1       37      37 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  2   1  12  12 0.548028 0.032185 0.0 0.580213 19.678556 0.580213 0.000000 254.273438 243.281250   3   4 0.750000    0       61     63     2         3       38      39 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
  3   3   1   1 1.096476 0.117111 0.0 1.213587  1.213587 1.213587 0.000000 256.203125 245.089844  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   2   1   1 1.046759 0.071068 0.0 1.117827  2.331414 2.331414 1.372100 257.757812 246.480469   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
  3   2   2   2 1.266804 0.105295 0.0 1.372100  3.703514 1.372100 1.142108 262.207031 250.945312  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
  3   2   3   3 1.057706 0.084402 0.0 1.142108  4.845621 1.142108 0.273475 258.488281 248.742188   9  11 0.818182   11       21     29     2         3        5       6 4.500000 3.666667 4.949747 2.828427 1.099944 0.942809 -1.572828 -0.936752            0            1
  3   2   4   4 0.249975 0.023500 0.0 0.273475  5.119096 0.273475 0.277492 262.613281 252.226562   2   3 0.666667    3       30     31     2         3        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  3   2   5   5 0.252398 0.025094 0.0 0.277492  5.396588 0.277492 0.469331 262.617188 252.226562   2   4 0.500000    4       32     33     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  3   2   6   6 0.339869 0.129462 0.0 0.469331  5.865919 0.469331 0.000000 264.066406 253.726562   3   4 0.750000    4       34     36     3         4       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
  3   1   1   1 1.330263 0.150243 0.0 1.480505  3.811919 3.811919 2.780467 259.414062 248.132812   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
  3   1   2   2 1.328868 0.079500 0.0 1.408368  6.592387 2.780467 3.092127 259.984375 248.765625   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
  3   1   3   3 1.749882 0.200138 0.0 1.950019  9.684514 3.092127 1.698914 264.574219 253.339844   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.464811  0.622260  0.622260            0            0
  3   1   4   4 1.326226 0.099213 0.0 1.425439 11.383428 1.698914 1.413112 254.878906 245.414062   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
  3   1   5   5 0.976303 0.159317 0.0 1.135620 12.796540 1.413112 2.181225 261.878906 251.609375   5   5 1.000000    0       31     35     4         4       21      24 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
  3   1   6   6 1.596355 0.115539 0.0 1.711894 14.977765 2.181225 0.370747 268.984375 259.542969   8  10 0.800000    0       36     43     5         7       25      29 1.600000 1.428571 0.894427 0.547723 0.559017 0.391230  0.603019  0.728611            0            1
  3   1   7   7 0.272475 0.098272 0.0 0.370747 15.348512 0.370747 0.422885 262.613281 252.226562   1   1 1.000000    0       44     44     1         1       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   1   8   8 0.403470 0.019415 0.0 0.422885 15.771397 0.422885 0.289519 262.613281 252.226562   2   3 0.666667    0       45     46     1         2       31      31 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  3   1   9   9 0.271718 0.017801 0.0 0.289519 16.060917 0.289519 0.427950 262.617188 252.226562   1   2 0.500000    0       47     47     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  3   1  10  10 0.407097 0.020853 0.0 0.427950 16.488867 0.427950 0.423337 262.617188 252.226562   2   3 0.666667    0       48     49     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   1  11  11 0.403827 0.019510 0.0 0.423337 16.912204 0.423337 0.433903 263.636719 253.476562   2   3 0.666667    0       50     51     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  3   1  12  12 0.405607 0.028296 0.0 0.433903 17.346106 0.433903 0.000000 263.820312 253.476562   2   2 1.000000    0       52     53     2         2       35      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  4   3   1   1 1.097823 0.116396 0.0 1.214218  1.214218 1.214218 0.000000 264.769531 254.367188  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   2   1   1 1.043010 0.070304 0.0 1.113314  2.327532 2.327532 1.376026 266.820312 256.453125   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
  4   2   2   2 1.274886 0.101141 0.0 1.376026  3.703559 1.376026 1.143521 272.695312 261.664062  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
  4   2   3   3 1.055034 0.088488 0.0 1.143521  4.847080 1.143521 0.375645 278.214844 267.394531   9   9 1.000000    9       21     29     2         2        5       6 4.500000 4.500000 4.949747 4.949747 1.099944 1.099944 -1.572828 -1.572828            0            1
  4   2   4   4 0.350244 0.025401 0.0 0.375645  5.222724 0.375645 0.368563 276.234375 265.406250   3   5 0.600000    5       30     32     2         4        7       8 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
  4   2   5   5 0.249193 0.119370 0.0 0.368563  5.591287 0.368563 0.381434 277.230469 266.410156   2   4 0.500000    4       33     34     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  4   2   6   6 0.338178 0.043256 0.0 0.381434  5.972722 0.381434 0.000000 279.089844 268.164062   3   4 0.750000    4       35     37     3         4       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
  4   1   1   1 1.330241 0.169506 0.0 1.499748  3.827280 3.827280 2.776610 270.292969 259.546875   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
  4   1   2   2 1.318641 0.081943 0.0 1.400583  6.603890 2.776610 3.100095 271.332031 260.343750   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
  4   1   3   3 1.739276 0.217298 0.0 1.956574  9.703985 3.100095 1.800617 277.824219 267.035156   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.464811  0.622260  0.622260            0            0
  4   1   4   4 1.319469 0.105503 0.0 1.424972 11.504602 1.800617 1.419641 278.777344 268.089844   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
  4   1   5   5 0.979205 0.071872 0.0 1.051078 12.924243 1.419641 1.846666 279.226562 268.406250   5   5 1.000000    0       31     35     4         4       21      24 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
  4   1   6   6 1.371511 0.093721 0.0 1.465231 14.770909 1.846666 0.288381 283.386719 273.707031   7   7 1.000000    0       36     42     5         5       25      29 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            1
  4   1   7   7 0.272666 0.015715 0.0 0.288381 15.059290 0.288381 0.568273 276.230469 265.406250   1   2 0.500000    0       43     43     1         2       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   1   8   8 0.540070 0.028203 0.0 0.568273 15.627563 0.568273 0.291361 276.242188 265.406250   3   5 0.600000    0       44     46     2         3       31      32 1.500000 1.666667 0.707107 1.414214 0.471405 0.707107  0.228447 -0.271553            0            1
  4   1   9   9 0.272942 0.018419 0.0 0.291361 15.918924 0.291361 0.422424 277.503906 266.664062   1   2 0.500000    0       47     47     1         2       33      33 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  4   1  10  10 0.402335 0.020089 0.0 0.422424 16.341348 0.422424 0.424901 277.503906 266.664062   2   3 0.666667    0       48     49     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   1  11  11 0.404165 0.020736 0.0 0.424901 16.766249 0.424901 0.532809 278.464844 267.414062   2   3 0.666667    0       50     51     1         2       35      35 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  4   1  12  12 0.406451 0.126358 0.0 0.532809 17.299059 0.532809 0.000000 278.839844 267.914062   2   2 1.000000    0       52     53     2         2       36      37 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  5   3   1   1 1.094887 0.106256 0.0 1.201143  1.201143 1.201143 0.000000 279.589844 268.667969  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  5   2   1   1 1.050463 0.072922 0.0 1.123385  2.324527 2.324527 1.372580 281.140625 270.300781   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
  5   2   2   2 1.264829 0.107751 0.0 1.372580  3.697107 1.372580 1.441173 285.832031 274.863281  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
  5   2   3   3 1.318939 0.122234 0.0 1.441173  5.138280 1.441173 0.276340 288.500000 277.703125  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
  5   2   4   4 0.251851 0.024490 0.0 0.276340  5.414621 0.276340 0.276083 289.820312 278.699219   2   3 0.666667    3       32     33     2         3        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  5   2   5   5 0.251054 0.025029 0.0 0.276083  5.690704 0.276083 0.384975 289.878906 278.699219   2   4 0.500000    4       34     35     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  5   2   6   6 0.341839 0.043136 0.0 0.384975  6.075678 0.384975 0.000000 291.902344 280.703125   3   4 0.750000    4       36     38     3         4       11      13 1.000000 1.000000 0.000000 0.763763 0.000000 0.654654  1.000000  0.483485            0            2
  5   1   1   1 1.332989 0.075412 0.0 1.408400  3.732928 3.732928 2.869072 283.140625 272.101562   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
  5   1   2   2 1.312484 0.184008 0.0 1.496492  6.602000 2.869072 3.413154 283.937500 272.898438   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
  5   1   3   3 1.738214 0.233767 0.0 1.971981 10.015154 3.413154 1.678345 288.640625 277.777344   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.464811  0.622260  0.622260            0            0
  5   1   4   4 1.317416 0.084589 0.0 1.402005 11.693500 1.678345 2.113400 289.269531 278.281250   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
  5   1   5   5 1.613737 0.223580 0.0 1.837317 13.806900 2.113400 3.754013 292.750000 281.871094   8   8 1.000000    0       31     38     5         5       21      25 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
  5   1   6   6 3.121328 0.247710 0.0 3.369038 17.560913 3.754013 0.292735 308.125000 299.550781  15  17 0.882353    0       39     53     6         8       26      31 2.500000 2.125000 1.516575 1.505545 0.606630 0.645234  0.484920  0.487372            0            1
  5   1   7   7 0.273609 0.019126 0.0 0.292735 17.853647 0.292735 0.424844 289.859375 278.699219   1   2 0.500000    0       54     54     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  5   1   8   8 0.404134 0.020710 0.0 0.424844 18.278491 0.424844 0.291756 289.871094 278.699219   2   2 1.000000    0       55     56     1         1       33      33 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  5   1   9   9 0.275756 0.015999 0.0 0.291756 18.570247 0.291756 0.427360 290.128906 278.949219   1   2 0.500000    0       57     57     1         2       34      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  5   1  10  10 0.408329 0.019030 0.0 0.427360 18.997607 0.427360 0.430199 290.136719 278.949219   2   3 0.666667    0       58     59     1         2       35      35 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  5   1  11  11 0.410420 0.019779 0.0 0.430199 19.427806 0.430199 0.438774 291.703125 280.703125   2   3 0.666667    0       60     61     1         2       36      36 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  5   1  12  12 0.409579 0.029195 0.0 0.438774 19.866580 0.438774 0.000000 291.902344 280.703125   2   2 1.000000    0       62     63     2         2       37      38 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  6   3   1   1 1.104631 0.239518 0.0 1.344148  1.344148 1.344148 0.000000 292.929688 281.703125  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  6   2   1   1 1.052359 0.077099 0.0 1.129458  2.473606 2.473606 1.480600 294.421875 283.343750   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
  6   2   2   2 1.258370 0.222230 0.0 1.480600  3.954206 1.480600 1.147417 298.453125 287.285156  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
  6   2   3   3 1.059006 0.088410 0.0 1.147417  5.101623 1.147417 0.376875 300.089844 288.816406   9   9 1.000000    9       21     29     2         2        5       6 4.500000 4.500000 4.949747 4.949747 1.099944 1.099944 -1.572828 -1.572828            0            1
  6   2   4   4 0.348528 0.028348 0.0 0.376875  5.478498 0.376875 0.275672 301.886719 291.148438   3   5 0.600000    5       30     32     2         4        7       8 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
  6   2   5   5 0.251479 0.024193 0.0 0.275672  5.754171 0.275672 0.385008 302.632812 291.648438   2   4 0.500000    4       33     34     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  6   2   6   6 0.339727 0.045281 0.0 0.385008  6.139178 0.385008 0.000000 305.132812 294.152344   3   4 0.750000    4       35     37     3         4       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
  6   1   1   1 1.332979 0.076432 0.0 1.409411  3.883017 3.883017 2.879429 296.179688 284.890625   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
  6   1   2   2 1.316370 0.082459 0.0 1.398829  6.762447 2.879429 3.026052 296.921875 285.691406   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
  6   1   3   3 1.750011 0.128624 0.0 1.878635  9.788499 3.026052 1.918101 304.054688 293.347656   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.464811  0.622260  0.622260            0            0
  6   1   4   4 1.334087 0.207139 0.0 1.541226 11.706600 1.918101 1.317198 302.445312 291.375000   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
  6   1   5   5 0.975394 0.066131 0.0 1.041526 13.023799 1.317198 1.843558 302.222656 291.082031   5   5 1.000000    0       31     35     4         4       21      24 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
  6   1   6   6 1.367547 0.091003 0.0 1.458550 14.867356 1.843558 0.290852 307.460938 298.113281   7   7 1.000000    0       36     42     5         5       25      29 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            1
  6   1   7   7 0.275007 0.015845 0.0 0.290852 15.158208 0.290852 0.572632 302.062500 291.148438   1   1 1.000000    0       43     43     1         1       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  6   1   8   8 0.541465 0.031168 0.0 0.572632 15.730840 0.572632 0.290499 302.132812 291.148438   3   6 0.500000    0       44     46     2         4       31      32 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
  6   1   9   9 0.274206 0.016293 0.0 0.290499 16.021340 0.290499 0.425477 302.882812 291.898438   1   2 0.500000    0       47     47     1         2       33      33 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  6   1  10  10 0.406523 0.018953 0.0 0.425477 16.446817 0.425477 0.426833 302.882812 291.898438   2   3 0.666667    0       48     49     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  6   1  11  11 0.407248 0.019586 0.0 0.426833 16.873650 0.426833 0.435895 304.179688 293.402344   2   3 0.666667    0       50     51     1         2       35      35 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  6   1  12  12 0.407348 0.028547 0.0 0.435895 17.309545 0.435895 0.000000 304.507812 293.652344   2   2 1.000000    0       52     53     2         2       36      37 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  7   3   1   1 1.097228 0.246174 0.0 1.343402  1.343402 1.343402 0.000000 305.753906 294.902344  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   2   1   1 1.049789 0.076365 0.0 1.126154  2.469557 2.469557 1.522931 307.214844 296.238281   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
  7   2   2   2 1.276895 0.246035 0.0 1.522931  3.992488 1.522931 1.299227 311.953125 301.097656  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
  7   2   3   3 1.066204 0.233023 0.0 1.299227  5.291715 1.299227 0.274735 314.230469 303.117188   9  11 0.818182   11       21     29     2         3        5       6 4.500000 3.666667 4.949747 2.828427 1.099944 0.942809 -1.572828 -0.936752            0            1
  7   2   4   4 0.251106 0.023630 0.0 0.274735  5.566450 0.274735 0.271322 315.316406 304.593750   2   3 0.666667    3       30     31     2         3        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  7   2   5   5 0.251497 0.019826 0.0 0.271322  5.837773 0.271322 0.377085 315.906250 305.097656   2   4 0.500000    4       32     33     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  7   2   6   6 0.341689 0.035395 0.0 0.377085  6.214857 0.377085 0.000000 317.531250 306.597656   3   4 0.750000    4       34     36     3         4       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
  7   1   1   1 1.327766 0.074950 0.0 1.402716  3.872273 3.872273 2.928749 309.113281 298.339844   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
  7   1   2   2 1.328679 0.077139 0.0 1.405818  6.801022 2.928749 3.182078 309.382812 298.386719   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
  7   1   3   3 1.750711 0.132140 0.0 1.882851  9.983100 3.182078 1.723680 316.152344 305.621094   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.464811  0.622260  0.622260            0            0
  7   1   4   4 1.347618 0.101326 0.0 1.448944 11.706780 1.723680 1.318585 314.886719 303.890625   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
  7   1   5   5 0.975570 0.071693 0.0 1.047263 13.025365 1.318585 2.079999 315.992188 304.875000   5   5 1.000000    0       31     35     4         4       21      24 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
  7   1   6   6 1.592024 0.110890 0.0 1.702914 15.105364 2.079999 0.290854 321.371094 311.425781   8  10 0.800000    0       36     43     5         7       25      29 1.600000 1.428571 0.894427 0.547723 0.559017 0.391230  0.603019  0.728611            0            1
  7   1   7   7 0.272539 0.018314 0.0 0.290854 15.396218 0.290854 0.425031 315.582031 304.843750   1   1 1.000000    0       44     44     1         1       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   1   8   8 0.405263 0.019768 0.0 0.425031 15.821248 0.425031 0.426062 315.585938 304.843750   2   3 0.666667    0       45     46     1         2       31      31 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  7   1   9   9 0.273233 0.152829 0.0 0.426062 16.247310 0.426062 0.423865 316.218750 305.347656   1   2 0.500000    0       47     47     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  7   1  10  10 0.404001 0.019864 0.0 0.423865 16.671176 0.423865 0.289589 316.281250 305.347656   2   3 0.666667    0       48     49     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   1  11  11 0.273889 0.015700 0.0 0.289589 16.960765 0.289589 0.571572 317.656250 306.851562   1   1 1.000000    0       50     50     1         1       34      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  7   1  12  12 0.540399 0.031173 0.0 0.571572 17.532337 0.571572 0.000000 317.781250 306.851562   3   4 0.750000    0       51     53     2         3       35      36 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
  8   3   1   1 1.095347 0.116677 0.0 1.212023  1.212023 1.212023 0.000000 319.792969 309.105469  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   2   1   1 1.043049 0.219979 0.0 1.263028  2.475052 2.475052 1.364067 319.878906 308.765625   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
  8   2   2   2 1.268879 0.095188 0.0 1.364067  3.839119 1.364067 1.427226 322.574219 311.546875  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
  8   2   3   3 1.312787 0.114440 0.0 1.427226  5.266345 1.427226 0.376896 325.601562 314.527344  11  11 1.000000   11       21     31     2         2        5       6 5.500000 5.500000 6.363961 6.363961 1.157084 1.157084 -1.880482 -1.880482            0            1
  8   2   4   4 0.348555 0.028341 0.0 0.376896  5.643241 0.376896 0.275086 329.886719 319.042969   3   5 0.600000    5       32     34     2         4        7       8 1.500000 1.250000 0.707107 1.060660 0.471405 0.848528  0.228447 -0.043107            0            1
  8   2   5   5 0.249541 0.025546 0.0 0.275086  5.918328 0.275086 0.375636 330.527344 319.792969   2   4 0.500000    4       35     36     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  8   2   6   6 0.340029 0.035607 0.0 0.375636  6.293964 0.375636 0.000000 331.675781 320.796875   3   4 0.750000    4       37     39     3         4       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
  8   1   1   1 1.345976 0.081548 0.0 1.427524  3.902575 3.902575 2.761913 321.593750 310.492188   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
  8   1   2   2 1.317298 0.080548 0.0 1.397846  6.664488 2.761913 3.440730 322.003906 310.914062   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
  8   1   3   3 1.739382 0.274121 0.0 2.013504 10.105218 3.440730 1.802967 327.285156 316.457031   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.894427 0.464811 0.470751  0.622260  0.603019            0            0
  8   1   4   4 1.329579 0.096492 0.0 1.426070 11.908185 1.802967 2.004763 325.734375 314.683594   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
  8   1   5   5 1.619717 0.109960 0.0 1.729677 13.912949 2.004763 3.549481 330.121094 319.441406   8   8 1.000000    0       31     38     5         5       21      25 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
  8   1   6   6 2.940112 0.233733 0.0 3.173845 17.462430 3.549481 0.294844 347.683594 340.031250  14  14 1.000000    0       39     52     6         6       26      31 2.333333 2.333333 1.505545 1.505545 0.645234 0.645234  0.487372  0.487372            0            1
  8   1   7   7 0.277217 0.017627 0.0 0.294844 17.757273 0.294844 0.571884 329.886719 319.042969   1   2 0.500000    0       53     53     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   1   8   8 0.540743 0.031141 0.0 0.571884 18.329157 0.571884 0.294667 329.902344 319.042969   3   5 0.600000    0       54     56     2         3       33      34 1.500000 1.666667 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
  8   1   9   9 0.275790 0.018876 0.0 0.294667 18.623824 0.294667 0.578385 330.777344 320.046875   1   2 0.500000    0       57     57     1         2       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  8   1  10  10 0.409215 0.169170 0.0 0.578385 19.202209 0.578385 0.430045 330.777344 320.046875   2   3 0.666667    0       58     59     1         2       36      36 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   1  11  11 0.410171 0.019874 0.0 0.430045 19.632254 0.430045 0.440797 331.957031 321.296875   2   3 0.666667    0       60     61     1         2       37      37 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  8   1  12  12 0.411828 0.028968 0.0 0.440797 20.073051 0.440797 0.000000 332.171875 321.296875   2   2 1.000000    0       62     63     2         2       38      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  9   3   1   1 1.102357 0.111589 0.0 1.213946  1.213946 1.213946 0.000000 334.101562 323.050781  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  9   2   1   1 1.051012 0.235292 0.0 1.286304  2.500250 2.500250 1.364991 335.015625 323.886719   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
  9   2   2   2 1.256104 0.108888 0.0 1.364991  3.865242 1.364991 1.440082 339.679688 328.582031  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
  9   2   3   3 1.315419 0.124664 0.0 1.440082  5.305324 1.440082 0.273898 342.316406 331.367188  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
  9   2   4   4 0.250487 0.023411 0.0 0.273898  5.579222 0.273898 0.277315 344.820312 334.457031   2   3 0.666667    3       32     33     2         3        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  9   2   5   5 0.252521 0.024794 0.0 0.277315  5.856536 0.277315 0.377722 345.042969 334.457031   2   3 0.666667    3       34     35     2         3        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  9   2   6   6 0.341387 0.036335 0.0 0.377722  6.234258 0.377722 0.000000 346.449219 335.960938   3   5 0.600000    5       36     38     3         5       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
  9   1   1   1 1.331661 0.076064 0.0 1.407725  3.907975 3.907975 2.768173 337.875000 326.726562   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
  9   1   2   2 1.320990 0.082192 0.0 1.403181  6.676148 2.768173 3.493080 337.500000 326.582031   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
  9   1   3   3 1.752348 0.300650 0.0 2.052998 10.169229 3.493080 1.689435 344.605469 334.425781   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.492153  0.622260  0.622260            0            0
  9   1   4   4 1.322157 0.093381 0.0 1.415537 11.858664 1.689435 2.001353 342.390625 331.453125   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
  9   1   5   5 1.610565 0.113474 0.0 1.724038 13.860017 2.001353 3.917182 348.945312 338.648438   8   8 1.000000    0       31     38     5         5       21      25 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
  9   1   6   6 3.126985 0.412476 0.0 3.539460 17.777199 3.917182 0.295265 362.554688 354.722656  15  17 0.882353    0       39     53     6         8       26      31 2.500000 2.125000 1.516575 1.505545 0.606630 0.645234  0.484920  0.487372            0            1
  9   1   7   7 0.277041 0.018223 0.0 0.295265 18.072464 0.295265 0.425237 344.820312 334.457031   1   2 0.500000    0       54     54     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  9   1   8   8 0.405638 0.019599 0.0 0.425237 18.497701 0.425237 0.294914 344.820312 334.457031   2   2 1.000000    0       55     56     1         1       33      33 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  9   1   9   9 0.278512 0.016402 0.0 0.294914 18.792615 0.294914 0.429922 345.167969 334.707031   1   2 0.500000    0       57     57     1         2       34      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  9   1  10  10 0.410832 0.019090 0.0 0.429922 19.222537 0.429922 0.293984 345.292969 334.707031   2   2 1.000000    0       58     59     1         1       35      35 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  9   1  11  11 0.279279 0.014705 0.0 0.293984 19.516521 0.293984 0.580178 346.511719 335.960938   1   2 0.500000    0       60     60     1         2       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  9   1  12  12 0.547752 0.032426 0.0 0.580178 20.096699 0.580178 0.000000 346.605469 335.960938   3   4 0.750000    0       61     63     2         3       37      38 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 10   3   1   1 1.096212 0.121418 0.0 1.217630  1.217630 1.217630 0.000000 349.347656 338.468750  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 10   2   1   1 1.044690 0.070519 0.0 1.115210  2.332840 2.332840 1.379878 349.945312 339.050781   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 10   2   2   2 1.275984 0.103894 0.0 1.379878  3.712717 1.379878 1.415963 356.554688 345.804688  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 10   2   3   3 1.307214 0.108748 0.0 1.415963  5.128680 1.415963 0.374113 358.738281 348.000000  11  11 1.000000   11       21     31     2         2        5       6 5.500000 5.500000 6.363961 6.363961 1.157084 1.157084 -1.880482 -1.880482            0            1
 10   2   4   4 0.347859 0.026254 0.0 0.374113  5.502793 0.374113 0.275773 358.648438 348.019531   3   5 0.600000    5       32     34     2         4        7       8 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 10   2   5   5 0.250584 0.025189 0.0 0.275773  5.778566 0.275773 0.387961 359.957031 349.269531   2   4 0.500000    4       35     36     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 10   2   6   6 0.341482 0.046479 0.0 0.387961  6.166527 0.387961 0.000000 362.238281 351.644531   3   4 0.750000    4       37     39     3         4       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 10   1   1   1 1.328346 0.079193 0.0 1.407540  3.740380 3.740380 2.774666 353.644531 343.542969   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 10   1   2   2 1.318253 0.076536 0.0 1.394789  6.515046 2.774666 3.284012 352.972656 342.339844   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 10   1   3   3 1.743672 0.124378 0.0 1.868049  9.799058 3.284012 1.965229 361.441406 351.097656   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.464811  0.622260  0.622260            0            0
 10   1   4   4 1.323020 0.268096 0.0 1.591116 11.764287 1.965229 2.005712 359.023438 348.406250   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 10   1   5   5 1.615389 0.114550 0.0 1.729939 13.769999 2.005712 3.494645 360.296875 352.355469   8   8 1.000000    0       31     38     5         5       21      25 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 10   1   6   6 2.889844 0.216841 0.0 3.106684 17.264644 3.494645 0.295134 371.496094 364.472656  14  14 1.000000    0       39     52     6         6       26      31 2.333333 2.333333 1.505545 1.505545 0.645234 0.645234  0.487372  0.487372            0            1
 10   1   7   7 0.275131 0.020004 0.0 0.295134 17.559779 0.295134 0.760245 358.710938 348.269531   1   1 1.000000    0       53     53     1         1       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 10   1   8   8 0.542282 0.217962 0.0 0.760245 18.320024 0.760245 0.291262 359.582031 349.019531   3   6 0.500000    0       54     56     2         4       33      34 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 10   1   9   9 0.275105 0.016157 0.0 0.291262 18.611286 0.291262 0.431620 359.968750 349.269531   1   2 0.500000    0       57     57     1         2       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 10   1  10  10 0.407645 0.023976 0.0 0.431620 19.042906 0.431620 0.430110 360.070312 349.378906   2   3 0.666667    0       58     59     1         2       36      36 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 10   1  11  11 0.409444 0.020666 0.0 0.430110 19.473017 0.430110 0.442622 361.558594 350.894531   2   3 0.666667    0       60     61     1         2       37      37 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 10   1  12  12 0.413628 0.028994 0.0 0.442622 19.915639 0.442622 0.000000 361.621094 350.894531   2   2 1.000000    0       62     63     2         2       38      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 11   3   1   1 1.100157 0.126311 0.0 1.226467  1.226467 1.226467 0.000000 363.195312 352.593750  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   2   1   1 1.058495 0.077212 0.0 1.135706  2.362174 2.362174 1.375819 364.773438 353.992188   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 11   2   2   2 1.263560 0.112259 0.0 1.375819  3.737993 1.375819 1.144343 371.078125 360.648438  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 11   2   3   3 1.057167 0.087177 0.0 1.144343  4.882336 1.144343 0.379080 369.410156 361.257812   9   9 1.000000    9       21     29     2         2        5       6 4.500000 4.500000 4.949747 4.949747 1.099944 1.099944 -1.572828 -1.572828            0            1
 11   2   4   4 0.349463 0.029616 0.0 0.379080  5.261416 0.379080 0.473048 374.593750 364.285156   3   5 0.600000    5       30     32     2         4        7       8 1.500000 1.250000 0.707107 1.060660 0.471405 0.848528  0.228447 -0.043107            0            1
 11   2   5   5 0.251385 0.221663 0.0 0.473048  5.734464 0.473048 0.386570 375.730469 365.285156   2   4 0.500000    4       33     34     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 11   2   6   6 0.339833 0.046736 0.0 0.386570  6.121034 0.386570 0.000000 377.902344 367.593750   3   4 0.750000    4       35     37     3         4       11      13 1.000000 1.000000 0.000000 0.763763 0.000000 0.654654  1.000000  0.483485            0            2
 11   1   1   1 1.334805 0.074743 0.0 1.409548  3.771722 3.771722 2.785511 367.769531 357.292969   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 11   1   2   2 1.327122 0.082569 0.0 1.409692  6.557232 2.785511 3.219629 366.910156 356.203125   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 11   1   3   3 1.745882 0.329404 0.0 2.075285  9.776861 3.219629 1.805873 376.445312 366.289062   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.492153  0.622260  0.622260            0            0
 11   1   4   4 1.329837 0.096957 0.0 1.426794 11.582735 1.805873 1.521496 366.144531 358.265625   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 11   1   5   5 0.981059 0.067389 0.0 1.048448 13.104231 1.521496 4.309371 370.375000 361.375000   5   5 1.000000    0       31     35     4         4       21      24 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 11   1   6   6 3.640272 0.282529 0.0 3.922801 17.413601 4.309371 0.290370 395.949219 390.214844  17  17 1.000000    0       36     52     5         5       25      29 3.400000 3.400000 3.049590 3.049590 0.896938 0.896938  0.130991  0.130991            0            1
 11   1   7   7 0.274338 0.016033 0.0 0.290370 17.703972 0.290370 0.573454 374.917969 364.535156   1   2 0.500000    0       53     53     1         2       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   1   8   8 0.541343 0.032111 0.0 0.573454 18.277426 0.573454 0.293565 375.039062 364.785156   3   5 0.600000    0       54     56     2         3       31      32 1.500000 1.666667 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 11   1   9   9 0.275655 0.017910 0.0 0.293565 18.570991 0.293565 0.431021 375.980469 365.535156   1   2 0.500000    0       57     57     1         2       33      33 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 11   1  10  10 0.410288 0.020733 0.0 0.431021 19.002012 0.431021 0.431294 376.027344 365.589844   2   3 0.666667    0       58     59     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   1  11  11 0.410313 0.020981 0.0 0.431294 19.433306 0.431294 0.440976 377.964844 367.593750   2   3 0.666667    0       60     61     1         2       35      35 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 11   1  12  12 0.411913 0.029062 0.0 0.440976 19.874282 0.440976 0.000000 378.027344 367.593750   2   2 1.000000    0       62     63     2         2       36      37 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 12   3   1   1 1.091823 0.114564 0.0 1.206387  1.206387 1.206387 0.000000 381.210938 371.152344  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 12   2   1   1 1.047095 0.282295 0.0 1.329390  2.535777 2.535777 1.362044 383.253906 372.703125   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 12   2   2   2 1.267331 0.094714 0.0 1.362044  3.897821 1.362044 1.636771 386.121094 375.347656  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 12   2   3   3 1.310587 0.326184 0.0 1.636771  5.534592 1.636771 0.380062 390.839844 380.300781  11  11 1.000000   11       21     31     2         2        5       6 5.500000 5.500000 6.363961 6.363961 1.157084 1.157084 -1.880482 -1.880482            0            1
 12   2   4   4 0.351060 0.029002 0.0 0.380062  5.914654 0.380062 0.276213 392.812500 382.296875   3   5 0.600000    5       32     34     2         4        7       8 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 12   2   5   5 0.251203 0.025010 0.0 0.276213  6.190867 0.276213 0.385912 393.480469 382.796875   2   4 0.500000    4       35     36     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 12   2   6   6 0.340484 0.045428 0.0 0.385912  6.576779 0.385912 0.000000 395.566406 385.050781   3   4 0.750000    4       37     39     3         4       11      13 1.000000 1.000000 0.000000 0.763763 0.000000 0.654654  1.000000  0.483485            0            2
 12   1   1   1 1.328139 0.080640 0.0 1.408780  3.944556 3.944556 2.771969 385.550781 375.628906   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 12   1   2   2 1.329047 0.080877 0.0 1.409925  6.716525 2.771969 3.515424 386.246094 375.496094   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 12   1   3   3 1.748586 0.130067 0.0 1.878653 10.231949 3.515424 1.792474 394.929688 384.902344   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.894427 0.464811 0.470751  0.622260  0.603019            0            0
 12   1   4   4 1.325301 0.087111 0.0 1.412412 12.024423 1.792474 2.009829 391.277344 381.125000   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 12   1   5   5 1.616760 0.116856 0.0 1.733616 14.034252 2.009829 3.547479 396.726562 386.800781   8   8 1.000000    0       31     38     5         5       21      25 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 12   1   6   6 2.937228 0.224340 0.0 3.161568 17.581732 3.547479 0.294369 407.492188 399.574219  14  14 1.000000    0       39     52     6         6       26      31 2.333333 2.333333 1.505545 1.505545 0.645234 0.645234  0.487372  0.487372            0            1
 12   1   7   7 0.275238 0.019130 0.0 0.294369 17.876100 0.294369 0.573480 392.812500 382.296875   1   1 1.000000    0       53     53     1         1       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 12   1   8   8 0.541946 0.031534 0.0 0.573480 18.449580 0.573480 0.292078 392.917969 382.296875   3   6 0.500000    0       54     56     2         4       33      34 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 12   1   9   9 0.274761 0.017317 0.0 0.292078 18.741658 0.292078 0.639648 393.730469 383.046875   1   2 0.500000    0       57     57     1         2       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 12   1  10  10 0.408247 0.231401 0.0 0.639648 19.381306 0.639648 0.427459 393.792969 383.046875   2   3 0.666667    0       58     59     1         2       36      36 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 12   1  11  11 0.407095 0.020363 0.0 0.427459 19.808764 0.427459 0.435980 395.417969 384.800781   2   3 0.666667    0       60     61     1         2       37      37 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 12   1  12  12 0.407392 0.028588 0.0 0.435980 20.244744 0.435980 0.000000 395.542969 384.800781   2   2 1.000000    0       62     63     2         2       38      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 13   3   1   1 1.096239 0.107003 0.0 1.203241  1.203241 1.203241 0.000000 395.597656 385.050781  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 13   2   1   1 1.048043 0.075338 0.0 1.123382  2.326623 2.326623 1.352386 397.613281 387.121094   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 13   2   2   2 1.261734 0.090652 0.0 1.352386  3.679008 1.352386 1.428446 401.359375 391.046875  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 13   2   3   3 1.313068 0.115378 0.0 1.428446  5.107455 1.428446 0.375552 405.437500 395.195312  11  11 1.000000   11       21     31     2         2        5       6 5.500000 5.500000 6.363961 6.363961 1.157084 1.157084 -1.880482 -1.880482            0            1
 13   2   4   4 0.349278 0.026275 0.0 0.375552  5.483007 0.375552 0.275409 405.378906 395.050781   3   5 0.600000    5       32     34     2         4        7       8 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 13   2   5   5 0.251640 0.023769 0.0 0.275409  5.758416 0.275409 0.383259 405.507812 395.300781   2   4 0.500000    4       35     36     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 13   2   6   6 0.340967 0.042292 0.0 0.383259  6.141675 0.383259 0.000000 407.652344 397.308594   3   4 0.750000    4       37     39     3         4       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 13   1   1   1 1.344642 0.082276 0.0 1.426919  3.753541 3.753541 2.972543 400.324219 389.808594   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 13   1   2   2 1.320284 0.299873 0.0 1.620157  6.726084 2.972543 3.271896 399.832031 389.253906   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 13   1   3   3 1.713959 0.129490 0.0 1.843449  9.997980 3.271896 1.802722 409.000000 399.671875   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.464811  0.622260  0.622260            0            0
 13   1   4   4 1.330962 0.096208 0.0 1.427170 11.800702 1.802722 2.235549 404.914062 394.960938   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 13   1   5   5 1.615902 0.344238 0.0 1.960140 14.036251 2.235549 3.504640 412.347656 402.613281   8   8 1.000000    0       31     38     5         5       21      25 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 13   1   6   6 2.896225 0.225156 0.0 3.121381 17.540891 3.504640 0.291972 420.187500 412.753906  14  14 1.000000    0       39     52     6         6       26      31 2.333333 2.333333 1.505545 1.505545 0.645234 0.645234  0.487372  0.487372            0            1
 13   1   7   7 0.276168 0.015803 0.0 0.291972 17.832863 0.291972 0.574316 405.503906 395.050781   1   1 1.000000    0       53     53     1         1       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 13   1   8   8 0.542796 0.031520 0.0 0.574316 18.407179 0.574316 0.290999 405.503906 395.050781   3   6 0.500000    0       54     56     2         4       33      34 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 13   1   9   9 0.274368 0.016631 0.0 0.290999 18.698178 0.290999 0.428372 405.773438 395.550781   1   2 0.500000    0       57     57     1         2       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 13   1  10  10 0.408918 0.019454 0.0 0.428372 19.126550 0.428372 0.429042 405.773438 395.550781   2   3 0.666667    0       58     59     1         2       36      36 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 13   1  11  11 0.409288 0.019754 0.0 0.429042 19.555591 0.429042 0.665397 407.257812 396.808594   2   3 0.666667    0       60     61     1         2       37      37 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 13   1  12  12 0.408552 0.256845 0.0 0.665397 20.220988 0.665397 0.000000 407.382812 397.058594   2   2 1.000000    0       62     63     2         2       38      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 14   3   1   1 1.098514 0.114635 0.0 1.213149  1.213149 1.213149 0.000000 409.871094 399.316406  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   2   1   1 1.047598 0.082130 0.0 1.129728  2.342878 2.342878 1.365220 411.781250 401.152344   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 14   2   2   2 1.264341 0.100879 0.0 1.365220  3.708098 1.365220 1.144581 416.246094 405.742188  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 14   2   3   3 1.052856 0.091725 0.0 1.144581  4.852679 1.144581 0.512113 419.492188 409.128906   9  11 0.818182   11       21     29     2         3        5       6 4.500000 3.666667 4.949747 2.828427 1.099944 0.942809 -1.572828 -0.936752            0            1
 14   2   4   4 0.250162 0.261950 0.0 0.512113  5.364791 0.512113 0.275932 422.281250 412.468750   2   3 0.666667    3       30     31     2         3        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 14   2   5   5 0.250242 0.025690 0.0 0.275932  5.640723 0.275932 0.388374 422.468750 412.468750   2   4 0.500000    4       32     33     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 14   2   6   6 0.338615 0.049759 0.0 0.388374  6.029097 0.388374 0.000000 424.773438 414.972656   3   4 0.750000    4       34     36     3         4       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 14   1   1   1 1.327089 0.082316 0.0 1.409404  3.752282 3.752282 2.773811 414.253906 403.886719   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 14   1   2   2 1.323290 0.085301 0.0 1.408591  6.526093 2.773811 3.232729 416.207031 405.488281   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 14   1   3   3 1.718647 0.369501 0.0 2.088148  9.758822 3.232729 1.939753 422.339844 412.628906   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.492153  0.622260  0.622260            0            0
 14   1   4   4 1.326236 0.101405 0.0 1.427641 11.698575 1.939753 1.321581 420.179688 409.640625   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 14   1   5   5 0.975243 0.070406 0.0 1.045649 13.020156 1.321581 4.617604 419.789062 409.183594   5   5 1.000000    0       31     35     4         4       21      24 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 14   1   6   6 3.896446 0.332783 0.0 4.229230 17.637759 4.617604 0.294179 448.187500 441.562500  18  20 0.900000    0       36     53     5         7       25      29 3.600000 2.857143 2.966479 3.049590 0.824022 0.896938  0.143876  0.130991            0            1
 14   1   7   7 0.275796 0.018383 0.0 0.294179 17.931938 0.294179 0.423401 422.281250 412.468750   1   1 1.000000    0       54     54     1         1       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   1   8   8 0.403339 0.020062 0.0 0.423401 18.355339 0.423401 0.296543 422.281250 412.468750   2   3 0.666667    0       55     56     1         2       31      31 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 14   1   9   9 0.278185 0.018359 0.0 0.296543 18.651883 0.296543 0.431639 422.511719 412.718750   1   2 0.500000    0       57     57     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 14   1  10  10 0.412212 0.019427 0.0 0.431639 19.083522 0.431639 0.429052 422.511719 412.718750   2   3 0.666667    0       58     59     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   1  11  11 0.408978 0.020074 0.0 0.429052 19.512574 0.429052 0.439025 424.406250 414.472656   2   3 0.666667    0       60     61     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 14   1  12  12 0.410317 0.028707 0.0 0.439025 19.951599 0.439025 0.000000 424.468750 414.472656   2   2 1.000000    0       62     63     2         2       35      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 15   3   1   1 1.096472 0.112126 0.0 1.208598  1.208598 1.208598 0.000000 426.058594 415.726562  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   2   1   1 1.050968 0.323509 0.0 1.374476  2.583074 2.583074 1.356342 427.546875 417.062500   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 15   2   2   2 1.259206 0.097136 0.0 1.356342  3.939416 1.356342 1.162620 432.371094 421.960938  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 15   2   3   3 1.061689 0.100930 0.0 1.162620  5.102036 1.162620 0.274058 437.335938 426.832031   9  11 0.818182   11       21     29     2         3        5       6 4.500000 3.666667 4.949747 2.828427 1.099944 0.942809 -1.572828 -0.936752            0            1
 15   2   4   4 0.250144 0.023915 0.0 0.274058  5.376094 0.274058 0.278325 438.824219 430.101562   2   3 0.666667    3       30     31     2         3        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 15   2   5   5 0.249837 0.028488 0.0 0.278325  5.654419 0.278325 0.388555 439.058594 430.101562   2   4 0.500000    4       32     33     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 15   2   6   6 0.339876 0.048679 0.0 0.388555  6.042974 0.388555 0.000000 440.417969 431.335938   3   4 0.750000    4       34     36     3         4       11      13 1.000000 1.000000 0.000000 0.763763 0.000000 0.654654  1.000000  0.483485            0            2
 15   1   1   1 1.344280 0.077814 0.0 1.422095  4.005169 4.005169 2.748890 431.402344 421.308594   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 15   1   2   2 1.314973 0.077576 0.0 1.392549  6.754059 2.748890 3.041139 431.394531 420.863281   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 15   1   3   3 1.749366 0.129154 0.0 1.878520  9.795199 3.041139 1.706725 439.957031 429.996094   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.492153  0.622260  0.622260            0            0
 15   1   4   4 1.341901 0.090766 0.0 1.432667 11.501924 1.706725 1.600762 437.281250 426.804688   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 15   1   5   5 0.993154 0.329282 0.0 1.322437 13.102686 1.600762 4.650667 437.500000 427.121094   5   5 1.000000    0       31     35     4         4       21      24 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 15   1   6   6 3.889806 0.372306 0.0 4.262112 17.753353 4.650667 0.293796 463.656250 456.652344  18  20 0.900000    0       36     53     5         7       25      29 3.600000 2.857143 2.966479 3.049590 0.824022 0.896938  0.143876  0.130991            0            1
 15   1   7   7 0.275747 0.018049 0.0 0.293796 18.047149 0.293796 0.425278 439.015625 430.101562   1   1 1.000000    0       54     54     1         1       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   1   8   8 0.405421 0.019857 0.0 0.425278 18.472426 0.425278 0.294731 439.046875 430.101562   2   3 0.666667    0       55     56     1         2       31      31 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 15   1   9   9 0.277166 0.017565 0.0 0.294731 18.767158 0.294731 0.429143 438.289062 429.335938   1   2 0.500000    0       57     57     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 15   1  10  10 0.409457 0.019686 0.0 0.429143 19.196301 0.429143 0.686354 438.531250 429.335938   2   3 0.666667    0       58     59     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   1  11  11 0.411632 0.274722 0.0 0.686354 19.882655 0.686354 0.441412 439.980469 430.835938   2   3 0.666667    0       60     61     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 15   1  12  12 0.413031 0.028382 0.0 0.441412 20.324067 0.441412 0.000000 439.546875 430.335938   2   2 1.000000    0       62     63     2         2       35      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 16   3   1   1 1.101159 0.113535 0.0 1.214694  1.214694 1.214694 0.000000 440.195312 430.835938  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   2   1   1 1.048614 0.075194 0.0 1.123809  2.338503 2.338503 1.371161 442.359375 432.917969   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 16   2   2   2 1.269334 0.101827 0.0 1.371161  3.709664 1.371161 1.145844 446.773438 437.472656  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 16   2   3   3 1.054200 0.091643 0.0 1.145844  4.855507 1.145844 0.274407 451.355469 441.859375   9  11 0.818182   11       21     29     2         3        5       6 4.500000 3.666667 4.949747 2.828427 1.099944 0.942809 -1.572828 -0.936752            0            1
 16   2   4   4 0.250736 0.023671 0.0 0.274407  5.129915 0.274407 0.274315 449.898438 440.531250   2   3 0.666667    3       30     31     2         3        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 16   2   5   5 0.251798 0.022517 0.0 0.274315  5.404230 0.274315 0.658326 450.523438 441.281250   2   4 0.500000    4       32     33     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 16   2   6   6 0.339986 0.318340 0.0 0.658326  6.062556 0.658326 0.000000 452.746094 443.539062   3   4 0.750000    4       34     36     3         4       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 16   1   1   1 1.334317 0.076485 0.0 1.410802  3.749305 3.749305 2.761988 444.835938 435.468750   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 16   1   2   2 1.312350 0.078477 0.0 1.390827  6.511293 2.761988 3.029175 445.117188 435.761719   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 16   1   3   3 1.754788 0.128544 0.0 1.883331  9.540468 3.029175 1.709713 452.769531 443.675781   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.464811  0.622260  0.622260            0            0
 16   1   4   4 1.331115 0.104191 0.0 1.435306 11.250181 1.709713 1.319288 451.800781 442.386719   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 16   1   5   5 0.978679 0.066293 0.0 1.044972 12.569469 1.319288 2.352402 450.976562 441.425781   5   5 1.000000    0       31     35     4         4       21      24 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 16   1   6   6 1.588547 0.105529 0.0 1.694076 14.921871 2.352402 0.289910 455.234375 446.617188   8  10 0.800000    0       36     43     5         7       25      29 1.600000 1.428571 0.894427 0.547723 0.559017 0.391230  0.603019  0.728611            0            1
 16   1   7   7 0.271530 0.018380 0.0 0.289910 15.211781 0.289910 0.425920 449.898438 440.531250   1   1 1.000000    0       44     44     1         1       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   1   8   8 0.405870 0.020050 0.0 0.425920 15.637701 0.425920 0.291493 449.898438 440.531250   2   3 0.666667    0       45     46     1         2       31      31 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 16   1   9   9 0.273996 0.017496 0.0 0.291493 15.929194 0.291493 0.428044 450.765625 441.535156   1   2 0.500000    0       47     47     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 16   1  10  10 0.405138 0.022906 0.0 0.428044 16.357237 0.428044 0.427039 450.898438 441.535156   2   3 0.666667    0       48     49     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   1  11  11 0.407100 0.019940 0.0 0.427039 16.784277 0.427039 0.437831 452.398438 443.039062   2   3 0.666667    0       50     51     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 16   1  12  12 0.405038 0.032793 0.0 0.437831 17.222108 0.437831 0.000000 452.585938 443.289062   2   2 1.000000    0       52     53     2         2       35      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 17   3   1   1 1.090872 0.119134 0.0 1.210006  1.210006 1.210006 0.000000 453.539062 444.289062  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   2   1   1 1.044732 0.076779 0.0 1.121510  2.331516 2.331516 1.378514 455.011719 445.625000   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 17   2   2   2 1.271280 0.107234 0.0 1.378514  3.710031 1.378514 1.161036 459.617188 450.144531  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 17   2   3   3 1.057880 0.103156 0.0 1.161036  4.871066 1.161036 0.273571 460.777344 451.207031   9  11 0.818182   11       21     29     2         3        5       6 4.500000 3.666667 4.949747 2.828427 1.099944 0.942809 -1.572828 -0.936752            0            1
 17   2   4   4 0.249319 0.024252 0.0 0.273571  5.144637 0.273571 0.273165 461.515625 451.945312   2   3 0.666667    3       30     31     2         3        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 17   2   5   5 0.249741 0.023424 0.0 0.273165  5.417802 0.273165 0.665508 461.953125 452.445312   2   4 0.500000    4       32     33     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 17   2   6   6 0.340561 0.324947 0.0 0.665508  6.083310 0.665508 0.000000 463.519531 454.199219   3   4 0.750000    4       34     36     3         4       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 17   1   1   1 1.341642 0.082810 0.0 1.424453  3.755969 3.755969 2.795658 457.281250 447.902344   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 17   1   2   2 1.328099 0.089044 0.0 1.417144  6.551627 2.795658 3.319780 458.199219 448.664062   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 17   1   3   3 1.750968 0.407776 0.0 2.158744  9.871406 3.319780 1.705201 464.574219 455.421875   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.464811  0.622260  0.622260            0            0
 17   1   4   4 1.341635 0.089996 0.0 1.431630 11.576608 1.705201 1.314059 462.050781 452.488281   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 17   1   5   5 0.978065 0.062829 0.0 1.040894 12.890667 1.314059 2.360401 462.031250 452.460938   5   5 1.000000    0       31     35     4         4       21      24 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 17   1   6   6 1.587986 0.106908 0.0 1.694894 15.251068 2.360401 0.291336 466.667969 458.035156   8  10 0.800000    0       36     43     5         7       25      29 1.600000 1.428571 0.894427 0.547723 0.559017 0.391230  0.603019  0.728611            0            1
 17   1   7   7 0.272478 0.018858 0.0 0.291336 15.542405 0.291336 0.423118 461.515625 451.945312   1   1 1.000000    0       44     44     1         1       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   1   8   8 0.402738 0.020380 0.0 0.423118 15.965523 0.423118 0.291730 461.515625 451.945312   2   3 0.666667    0       45     46     1         2       31      31 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 17   1   9   9 0.273396 0.018334 0.0 0.291730 16.257253 0.291730 0.430968 462.265625 452.695312   1   2 0.500000    0       47     47     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 17   1  10  10 0.407863 0.023105 0.0 0.430968 16.688221 0.430968 0.421890 462.265625 452.695312   2   3 0.666667    0       48     49     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   1  11  11 0.401402 0.020489 0.0 0.421890 17.110111 0.421890 0.432124 463.890625 454.449219   2   3 0.666667    0       50     51     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 17   1  12  12 0.403500 0.028624 0.0 0.432124 17.542235 0.432124 0.000000 464.015625 454.449219   2   2 1.000000    0       52     53     2         2       35      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 18   3   1   1 1.095664 0.130118 0.0 1.225783  1.225783 1.225783 0.000000 465.515625 455.953125  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 18   2   1   1 1.049079 0.077163 0.0 1.126242  2.352024 2.352024 1.360865 466.656250 457.093750   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 18   2   2   2 1.265699 0.095166 0.0 1.360865  3.712889 1.360865 1.437342 469.582031 460.085938  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 18   2   3   3 1.313697 0.123644 0.0 1.437342  5.150231 1.437342 0.276417 472.609375 463.058594  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 18   2   4   4 0.250072 0.026345 0.0 0.276417  5.426648 0.276417 0.275759 472.953125 463.671875   2   3 0.666667    3       32     33     2         3        7       8 1.000000 1.000000 0.000000 1.060660 0.000000 0.848528  1.000000 -0.043107            0            1
 18   2   5   5 0.251196 0.024564 0.0 0.275759  5.702408 0.275759 0.686733 473.203125 463.921875   2   4 0.500000    4       34     35     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 18   2   6   6 0.339956 0.346777 0.0 0.686733  6.389141 0.686733 0.000000 475.777344 466.425781   3   4 0.750000    4       36     38     3         4       11      13 1.000000 1.000000 0.000000 0.763763 0.000000 0.654654  1.000000  0.483485            0            2
 18   1   1   1 1.344857 0.084665 0.0 1.429523  3.781547 3.781547 2.779105 468.570312 459.011719   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 18   1   2   2 1.325332 0.092908 0.0 1.418240  6.560652 2.779105 3.572452 469.890625 460.527344   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 18   1   3   3 1.714346 0.420764 0.0 2.135110 10.133103 3.572452 1.705697 475.476562 466.671875   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.492153  0.622260  0.622260            0            0
 18   1   4   4 1.332758 0.096521 0.0 1.429279 11.838800 1.705697 2.003942 473.250000 463.699219   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 18   1   5   5 1.616265 0.111918 0.0 1.728183 13.842743 2.003942 4.114460 477.988281 469.152344   8   8 1.000000    0       31     38     5         5       21      25 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 18   1   6   6 3.180415 0.247312 0.0 3.427727 17.957202 4.114460 0.292914 489.539062 481.957031  15  17 0.882353    0       39     53     6         8       26      31 2.500000 2.125000 1.516575 1.505545 0.606630 0.645234  0.484920  0.487372            0            1
 18   1   7   7 0.274759 0.018155 0.0 0.292914 18.250116 0.292914 0.425698 472.953125 463.671875   1   2 0.500000    0       54     54     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 18   1   8   8 0.405955 0.019743 0.0 0.425698 18.675814 0.425698 0.290934 472.953125 463.671875   2   2 1.000000    0       55     56     1         1       33      33 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 18   1   9   9 0.274799 0.016135 0.0 0.290934 18.966748 0.290934 0.428771 473.453125 464.171875   1   2 0.500000    0       57     57     1         2       34      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 18   1  10  10 0.409863 0.018908 0.0 0.428771 19.395519 0.428771 0.431478 473.457031 464.171875   2   3 0.666667    0       58     59     1         2       35      35 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 18   1  11  11 0.411801 0.019677 0.0 0.431478 19.826997 0.431478 0.440346 475.589844 466.175781   2   3 0.666667    0       60     61     1         2       36      36 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 18   1  12  12 0.411702 0.028644 0.0 0.440346 20.267344 0.440346 0.000000 475.589844 466.175781   2   2 1.000000    0       62     63     2         2       37      38 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 19   3   1   1 1.101678 0.114091 0.0 1.215769  1.215769 1.215769 0.000000 476.433594 466.925781  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   2   1   1 1.054071 0.071094 0.0 1.125165  2.340934 2.340934 1.351100 478.015625 468.511719   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 19   2   2   2 1.258006 0.093094 0.0 1.351100  3.692034 1.351100 1.737710 480.500000 470.960938  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 19   2   3   3 1.315422 0.422288 0.0 1.737710  5.429744 1.737710 0.376217 484.867188 475.398438  11  11 1.000000   11       21     31     2         2        5       6 5.500000 5.500000 6.363961 6.363961 1.157084 1.157084 -1.880482 -1.880482            0            1
 19   2   4   4 0.350233 0.025984 0.0 0.376217  5.805961 0.376217 0.275718 487.015625 477.699219   3   5 0.600000    5       32     34     2         4        7       8 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 19   2   5   5 0.251914 0.023804 0.0 0.275718  6.081678 0.275718 0.379484 487.140625 477.949219   2   3 0.666667    3       35     36     2         3        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 19   2   6   6 0.340516 0.038968 0.0 0.379484  6.461162 0.379484 0.000000 489.078125 479.699219   3   5 0.600000    5       37     39     3         5       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 19   1   1   1 1.337694 0.083178 0.0 1.420872  3.761806 3.761806 2.756407 480.835938 471.632812   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 19   1   2   2 1.324664 0.080643 0.0 1.405307  6.518213 2.756407 3.610785 481.660156 472.132812   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 19   1   3   3 1.741547 0.131528 0.0 1.873075 10.128998 3.610785 1.799439 488.855469 479.937500   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.464811  0.622260  0.622260            0            0
 19   1   4   4 1.330302 0.092920 0.0 1.423223 11.928438 1.799439 2.011770 485.515625 476.054688   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 19   1   5   5 1.621959 0.114093 0.0 1.736052 13.940207 2.011770 3.530563 491.667969 483.171875   8   8 1.000000    0       31     38     5         5       21      25 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 19   1   6   6 2.929491 0.221589 0.0 3.151080 17.470771 3.530563 0.292203 502.117188 495.707031  14  14 1.000000    0       39     52     6         6       26      31 2.333333 2.333333 1.505545 1.505545 0.645234 0.645234  0.487372  0.487372            0            1
 19   1   7   7 0.276277 0.015927 0.0 0.292203 17.762974 0.292203 0.574053 487.015625 477.699219   1   1 1.000000    0       53     53     1         1       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   1   8   8 0.543123 0.030930 0.0 0.574053 18.337027 0.574053 0.292076 487.015625 477.699219   3   6 0.500000    0       54     56     2         4       33      34 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 19   1   9   9 0.276077 0.015999 0.0 0.292076 18.629103 0.292076 0.429182 487.390625 478.199219   1   2 0.500000    0       57     57     1         2       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 19   1  10  10 0.410263 0.018919 0.0 0.429182 19.058285 0.429182 0.294093 487.453125 478.199219   2   2 1.000000    0       58     59     1         1       36      36 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   1  11  11 0.279673 0.014420 0.0 0.294093 19.352378 0.294093 0.577798 489.105469 479.953125   1   2 0.500000    0       60     60     1         2       37      37 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 19   1  12  12 0.545765 0.032033 0.0 0.577798 19.930176 0.577798 0.000000 489.328125 479.953125   3   4 0.750000    0       61     63     2         3       38      39 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 20   3   1   1 1.093570 0.119281 0.0 1.212851  1.212851 1.212851 0.000000 489.171875 479.964844  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   2   1   1 1.041466 0.080591 0.0 1.122057  2.334909 2.334909 1.372387 491.949219 482.453125   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 20   2   2   2 1.264768 0.107618 0.0 1.372387  3.707295 1.372387 1.141708 496.691406 487.246094  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 20   2   3   3 1.049635 0.092073 0.0 1.141708  4.849004 1.141708 0.273354 499.078125 489.820312   9  11 0.818182   11       21     29     2         3        5       6 4.500000 3.666667 4.949747 2.828427 1.099944 0.942809 -1.572828 -0.936752            0            1
 20   2   4   4 0.249435 0.023919 0.0 0.273354  5.122357 0.273354 0.274412 500.953125 491.847656   2   3 0.666667    3       30     31     2         3        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 20   2   5   5 0.249519 0.024893 0.0 0.274412  5.396769 0.274412 0.381974 501.949219 492.597656   2   4 0.500000    4       32     33     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 20   2   6   6 0.340510 0.041464 0.0 0.381974  5.778744 0.381974 0.000000 503.863281 494.601562   3   4 0.750000    4       34     36     3         4       11      13 1.000000 1.000000 0.000000 0.763763 0.000000 0.654654  1.000000  0.483485            0            2
 20   1   1   1 1.328446 0.076088 0.0 1.404534  3.739443 3.739443 2.784841 494.851562 485.546875   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 20   1   2   2 1.332718 0.079737 0.0 1.412455  6.524284 2.784841 3.021380 495.187500 485.679688   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 20   1   3   3 1.741438 0.138234 0.0 1.879672  9.545664 3.021380 1.692164 503.476562 494.675781   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.492153  0.622260  0.622260            0            0
 20   1   4   4 1.321681 0.097130 0.0 1.418810 11.237828 1.692164 1.319413 499.628906 490.250000   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 20   1   5   5 0.977438 0.067563 0.0 1.045002 12.557242 1.319413 4.907709 500.585938 491.328125   5   5 1.000000    0       31     35     4         4       21      24 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 20   1   6   6 3.884004 0.641731 0.0 4.525735 17.464951 4.907709 0.295023 523.246094 517.312500  18  20 0.900000    0       36     53     5         7       25      29 3.600000 2.857143 2.880972 3.029026 0.800270 0.890890  0.157417  0.134154            0            1
 20   1   7   7 0.277216 0.017807 0.0 0.295023 17.759974 0.295023 0.424674 501.195312 491.847656   1   1 1.000000    0       54     54     1         1       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   1   8   8 0.404901 0.019773 0.0 0.424674 18.184648 0.424674 0.291869 501.199219 491.847656   2   3 0.666667    0       55     56     1         2       31      31 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 20   1   9   9 0.274307 0.017561 0.0 0.291869 18.476516 0.291869 0.430222 502.210938 493.097656   1   2 0.500000    0       57     57     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 20   1  10  10 0.410685 0.019537 0.0 0.430222 18.906738 0.430222 0.427502 502.210938 493.097656   2   3 0.666667    0       58     59     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   1  11  11 0.408098 0.019405 0.0 0.427502 19.334240 0.427502 0.435813 503.679688 494.351562   2   3 0.666667    0       60     61     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 20   1  12  12 0.407330 0.028483 0.0 0.435813 19.770053 0.435813 0.000000 503.742188 494.351562   2   2 1.000000    0       62     63     2         2       35      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 21   3   1   1 1.103298 0.113439 0.0 1.216737  1.216737 1.216737 0.000000 505.796875 496.945312  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 21   2   1   1 1.055204 0.082241 0.0 1.137446  2.354183 2.354183 1.362378 508.031250 499.089844   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 21   2   2   2 1.260272 0.102106 0.0 1.362378  3.716561 1.362378 1.156329 512.230469 503.664062  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 21   2   3   3 1.061582 0.094748 0.0 1.156329  4.872890 1.156329 0.614584 514.914062 506.234375   9  11 0.818182   11       21     29     2         3        5       6 4.500000 3.666667 4.949747 2.828427 1.099944 0.942809 -1.572828 -0.936752            0            1
 21   2   4   4 0.250098 0.364486 0.0 0.614584  5.487474 0.614584 0.276902 516.132812 507.003906   2   3 0.666667    3       30     31     2         3        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 21   2   5   5 0.251189 0.025713 0.0 0.276902  5.764376 0.276902 0.388502 516.257812 507.003906   2   4 0.500000    4       32     33     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 21   2   6   6 0.339757 0.048744 0.0 0.388502  6.152878 0.388502 0.000000 518.332031 509.257812   3   4 0.750000    4       34     36     3         4       11      13 1.000000 1.000000 0.000000 0.763763 0.000000 0.654654  1.000000  0.483485            0            2
 21   1   1   1 1.348386 0.078056 0.0 1.426442  3.780625 3.780625 2.777906 510.554688 502.093750   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 21   1   2   2 1.326552 0.088976 0.0 1.415528  6.558531 2.777906 3.031625 511.996094 502.671875   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 21   1   3   3 1.745405 0.129890 0.0 1.875296  9.590156 3.031625 2.052139 518.421875 509.917969   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.492153  0.622260  0.622260            0            0
 21   1   4   4 1.331362 0.106194 0.0 1.437556 11.642295 2.052139 1.335761 516.085938 506.968750   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 21   1   5   5 0.979239 0.079620 0.0 1.058860 12.978057 1.335761 4.610628 515.250000 505.835938   5   5 1.000000    0       31     35     4         4       21      24 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 21   1   6   6 3.889087 0.333039 0.0 4.222126 17.588685 4.610628 0.293781 539.625000 533.839844  18  20 0.900000    0       36     53     5         7       25      29 3.600000 2.857143 2.966479 3.049590 0.824022 0.896938  0.143876  0.130991            0            1
 21   1   7   7 0.275700 0.018081 0.0 0.293781 17.882466 0.293781 0.425257 516.132812 507.003906   1   1 1.000000    0       54     54     1         1       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 21   1   8   8 0.405662 0.019594 0.0 0.425257 18.307723 0.425257 0.292560 516.132812 507.003906   2   3 0.666667    0       55     56     1         2       31      31 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 21   1   9   9 0.274560 0.018000 0.0 0.292560 18.600284 0.292560 0.430319 516.257812 507.003906   1   2 0.500000    0       57     57     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 21   1  10  10 0.410391 0.019928 0.0 0.430319 19.030602 0.430319 0.430961 516.261719 507.003906   2   3 0.666667    0       58     59     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 21   1  11  11 0.410960 0.020001 0.0 0.430961 19.461563 0.430961 0.440571 517.457031 508.257812   2   3 0.666667    0       60     61     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 21   1  12  12 0.412444 0.028126 0.0 0.440571 19.902134 0.440571 0.000000 517.519531 508.257812   2   2 1.000000    0       62     63     2         2       35      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 22   3   1   1 1.095690 0.125398 0.0 1.221089  1.221089 1.221089 0.000000 522.175781 512.867188  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   2   1   1 1.044940 0.067237 0.0 1.112176  2.333265 2.333265 1.371424 522.765625 513.632812   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 22   2   2   2 1.266135 0.105289 0.0 1.371424  3.704689 1.371424 1.155380 528.425781 519.078125  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 22   2   3   3 1.056284 0.099096 0.0 1.155380  4.860068 1.155380 0.273800 529.375000 520.699219   9  11 0.818182   11       21     29     2         3        5       6 4.500000 3.666667 4.949747 2.828427 1.099944 0.942809 -1.572828 -0.936752            0            1
 22   2   4   4 0.249218 0.024582 0.0 0.273800  5.133868 0.273800 0.275888 533.160156 524.246094   2   3 0.666667    3       30     31     2         3        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 22   2   5   5 0.249574 0.026313 0.0 0.275888  5.409756 0.275888 0.743430 533.214844 524.496094   2   4 0.500000    4       32     33     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 22   2   6   6 0.340195 0.403235 0.0 0.743430  6.153186 0.743430 0.000000 535.695312 527.000000   3   4 0.750000    4       34     36     3         4       11      13 1.000000 1.000000 0.000000 0.763763 0.000000 0.654654  1.000000  0.483485            0            2
 22   1   1   1 1.329696 0.073609 0.0 1.403306  3.736571 3.736571 2.779167 524.542969 515.375000   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 22   1   2   2 1.328513 0.079231 0.0 1.407744  6.515738 2.779167 3.373993 524.410156 515.046875   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 22   1   3   3 1.744674 0.473939 0.0 2.218613  9.889731 3.373993 1.694411 532.550781 523.812500   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.492153  0.622260  0.622260            0            0
 22   1   4   4 1.325077 0.095534 0.0 1.420611 11.584142 1.694411 1.318724 529.449219 520.160156   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 22   1   5   5 0.973356 0.069481 0.0 1.042837 12.902866 1.318724 4.999000 530.089844 520.746094   5   5 1.000000    0       31     35     4         4       21      24 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 22   1   6   6 3.902083 0.353487 0.0 4.255570 17.901866 4.999000 0.293623 553.828125 547.984375  18  20 0.900000    0       36     53     5         7       25      29 3.600000 2.857143 2.966479 3.049590 0.824022 0.896938  0.143876  0.130991            0            1
 22   1   7   7 0.275029 0.018594 0.0 0.293623 18.195489 0.293623 0.428997 533.160156 524.246094   1   1 1.000000    0       54     54     1         1       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   1   8   8 0.404984 0.024013 0.0 0.428997 18.624486 0.428997 0.291385 533.160156 524.246094   2   3 0.666667    0       55     56     1         2       31      31 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 22   1   9   9 0.273173 0.018212 0.0 0.291385 18.915871 0.291385 0.431550 533.539062 524.746094   1   2 0.500000    0       57     57     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 22   1  10  10 0.407501 0.024049 0.0 0.431550 19.347421 0.431550 0.428829 533.546875 524.746094   2   3 0.666667    0       58     59     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   1  11  11 0.408798 0.020030 0.0 0.428829 19.776250 0.428829 0.437193 534.800781 525.996094   2   3 0.666667    0       60     61     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 22   1  12  12 0.408374 0.028819 0.0 0.437193 20.213442 0.437193 0.000000 534.929688 525.996094   2   2 1.000000    0       62     63     2         2       35      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 23   3   1   1 1.100346 0.114566 0.0 1.214912  1.214912 1.214912 0.000000 535.937500 526.996094  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   2   1   1 1.050351 0.080638 0.0 1.130989  2.345901 2.345901 1.376814 537.894531 529.082031   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 23   2   2   2 1.260237 0.116577 0.0 1.376814  3.722716 1.376814 1.456780 544.441406 535.394531  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 23   2   3   3 1.322240 0.134539 0.0 1.456780  5.179495 1.456780 0.273912 543.554688 534.414062  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 23   2   4   4 0.249852 0.024060 0.0 0.273912  5.453408 0.273912 0.276903 547.320312 538.097656   2   3 0.666667    3       32     33     2         3        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 23   2   5   5 0.251112 0.025791 0.0 0.276903  5.730311 0.276903 0.377195 547.945312 538.847656   2   4 0.500000    4       34     35     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 23   2   6   6 0.340079 0.037116 0.0 0.377195  6.107506 0.377195 0.000000 547.562500 538.550781   3   4 0.750000    4       36     38     3         4       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 23   1   1   1 1.335310 0.075795 0.0 1.411105  3.757007 3.757007 2.777489 539.792969 530.687500   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 23   1   2   2 1.315505 0.085170 0.0 1.400675  6.534496 2.777489 3.698307 540.589844 531.484375   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 23   1   3   3 1.743469 0.498058 0.0 2.241528 10.232803 3.698307 1.701921 547.730469 539.140625   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.894427 0.464811 0.470751  0.622260  0.603019            0            0
 23   1   4   4 1.330866 0.097142 0.0 1.428008 11.934724 1.701921 2.004085 544.644531 535.585938   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 23   1   5   5 1.618237 0.108945 0.0 1.727182 13.938808 2.004085 3.795269 549.968750 541.414062   8   8 1.000000    0       31     38     5         5       21      25 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 23   1   6   6 3.163068 0.255006 0.0 3.418074 17.734077 3.795269 0.295945 560.363281 552.894531  15  17 0.882353    0       39     53     6         8       26      31 2.500000 2.125000 1.516575 1.505545 0.606630 0.645234  0.484920  0.487372            0            1
 23   1   7   7 0.276884 0.019061 0.0 0.295945 18.030022 0.295945 0.427130 547.320312 538.097656   1   1 1.000000    0       54     54     1         1       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   1   8   8 0.406402 0.020728 0.0 0.427130 18.457152 0.427130 0.290956 547.320312 538.097656   2   3 0.666667    0       55     56     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 23   1   9   9 0.273148 0.017809 0.0 0.290956 18.748109 0.290956 0.436852 546.664062 537.546875   1   2 0.500000    0       57     57     1         2       34      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 23   1  10  10 0.412884 0.023968 0.0 0.436852 19.184961 0.436852 0.428843 546.789062 537.546875   2   3 0.666667    0       58     59     1         2       35      35 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   1  11  11 0.408507 0.020336 0.0 0.428843 19.613804 0.428843 0.438050 547.667969 538.550781   2   3 0.666667    0       60     61     1         2       36      36 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 23   1  12  12 0.408093 0.029956 0.0 0.438050 20.051853 0.438050 0.000000 547.980469 538.800781   2   2 1.000000    0       62     63     2         2       37      38 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 24   3   1   1 1.096980 0.121881 0.0 1.218860  1.218860 1.218860 0.000000 549.550781 540.554688  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   2   1   1 1.044543 0.448785 0.0 1.493328  2.712188 2.712188 1.359345 549.925781 540.882812   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 24   2   2   2 1.264790 0.094555 0.0 1.359345  4.071533 1.359345 1.142032 553.414062 544.132812  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 24   2   3   3 1.053999 0.088033 0.0 1.142032  5.213566 1.142032 0.273064 557.335938 548.441406   9  11 0.818182   11       21     29     2         3        5       6 4.500000 3.666667 4.949747 2.828427 1.099944 0.942809 -1.572828 -0.936752            0            1
 24   2   4   4 0.249218 0.023846 0.0 0.273064  5.486629 0.273064 0.658092 559.328125 550.574219   2   3 0.666667    3       30     31     2         3        7       8 1.000000 1.000000 0.000000 1.060660 0.000000 0.848528  1.000000 -0.043107            0            1
 24   2   5   5 0.251301 0.406791 0.0 0.658092  6.144722 0.658092 0.381238 559.453125 550.574219   2   4 0.500000    4       32     33     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 24   2   6   6 0.337741 0.043496 0.0 0.381238  6.525960 0.381238 0.000000 561.472656 552.578125   3   4 0.750000    4       34     36     3         4       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 24   1   1   1 1.339411 0.081034 0.0 1.420445  4.132633 4.132633 2.748812 551.812500 542.531250   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 24   1   2   2 1.312789 0.076678 0.0 1.389467  6.881445 2.748812 2.989249 552.312500 543.031250   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 24   1   3   3 1.722534 0.124683 0.0 1.847217  9.870694 2.989249 1.676758 559.554688 551.015625   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.492153  0.622260  0.622260            0            0
 24   1   4   4 1.311459 0.092235 0.0 1.403694 11.547452 1.676758 1.701929 558.445312 549.347656   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 24   1   5   5 0.973647 0.070190 0.0 1.043837 13.249380 1.701929 4.610944 559.730469 550.695312   5   5 1.000000    0       31     35     4         4       21      24 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 24   1   6   6 3.884669 0.345038 0.0 4.229706 17.860325 4.610944 0.294903 578.531250 572.453125  18  20 0.900000    0       36     53     5         7       25      29 3.600000 2.857143 2.966479 3.049590 0.824022 0.896938  0.143876  0.130991            0            1
 24   1   7   7 0.275633 0.019270 0.0 0.294903 18.155228 0.294903 0.423100 559.453125 550.574219   1   2 0.500000    0       54     54     1         2       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 24   1   8   8 0.403159 0.019941 0.0 0.423100 18.578328 0.423100 0.291134 559.453125 550.574219   2   2 1.000000    0       55     56     1         1       31      31 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   1   9   9 0.273920 0.017214 0.0 0.291134 18.869463 0.291134 0.430656 559.578125 550.824219   1   2 0.500000    0       57     57     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 24   1  10  10 0.407222 0.023435 0.0 0.430656 19.300119 0.430656 0.295376 559.707031 550.824219   2   3 0.666667    0       58     59     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   1  11  11 0.278995 0.016380 0.0 0.295376 19.595495 0.295376 0.584715 561.238281 552.578125   1   1 1.000000    0       60     60     1         1       34      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 24   1  12  12 0.547752 0.036964 0.0 0.584715 20.180210 0.584715 0.000000 561.476562 552.582031   3   4 0.750000    0       61     63     2         3       35      36 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 25   3   1   1 1.096233 0.113635 0.0 1.209868  1.209868 1.209868 0.000000 561.988281 552.832031  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 25   2   1   1 1.054081 0.072281 0.0 1.126363  2.336231 2.336231 1.363638 563.750000 554.722656   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 25   2   2   2 1.263071 0.100567 0.0 1.363638  3.699869 1.363638 1.145705 567.968750 558.718750  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 25   2   3   3 1.059414 0.086291 0.0 1.145705  4.845574 1.145705 0.374429 570.722656 561.589844   9   9 1.000000    9       21     29     2         2        5       6 4.500000 4.500000 4.949747 4.949747 1.099944 1.099944 -1.572828 -1.572828            0            1
 25   2   4   4 0.349399 0.025030 0.0 0.374429  5.220002 0.374429 0.275162 571.785156 562.847656   3   5 0.600000    5       30     32     2         4        7       8 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 25   2   5   5 0.252317 0.022845 0.0 0.275162  5.495164 0.275162 0.390860 572.222656 563.347656   2   4 0.500000    4       33     34     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 25   2   6   6 0.341720 0.049140 0.0 0.390860  5.886024 0.390860 0.000000 575.039062 566.097656   3   4 0.750000    4       35     37     3         4       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 25   1   1   1 1.346382 0.078771 0.0 1.425153  3.761384 3.761384 2.773060 565.832031 556.585938   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 25   1   2   2 1.325199 0.084224 0.0 1.409422  6.534444 2.773060 3.009114 566.835938 557.652344   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 25   1   3   3 1.741492 0.121916 0.0 1.863409  9.543558 3.009114 1.804783 573.382812 564.734375   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.492153  0.622260  0.622260            0            0
 25   1   4   4 1.331648 0.098706 0.0 1.430354 11.348341 1.804783 1.321613 572.460938 563.578125   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 25   1   5   5 0.977906 0.068545 0.0 1.046451 12.669954 1.321613 4.320341 572.042969 563.101562   5   5 1.000000    0       31     35     4         4       21      24 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 25   1   6   6 3.639111 0.290370 0.0 3.929481 16.990295 4.320341 0.291083 589.671875 584.468750  17  17 1.000000    0       36     52     5         5       25      29 3.400000 3.400000 3.049590 3.049590 0.896938 0.896938  0.130991  0.130991            0            1
 25   1   7   7 0.275202 0.015880 0.0 0.291083 17.281378 0.291083 0.570695 571.785156 562.847656   1   2 0.500000    0       53     53     1         2       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 25   1   8   8 0.542985 0.027710 0.0 0.570695 17.852072 0.570695 0.292181 571.785156 562.847656   3   5 0.600000    0       54     56     2         3       31      32 1.500000 1.666667 0.707107 1.414214 0.471405 0.707107  0.228447 -0.271553            0            1
 25   1   9   9 0.274819 0.017361 0.0 0.292181 18.144253 0.292181 0.433814 572.535156 563.597656   1   2 0.500000    0       57     57     1         2       33      33 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 25   1  10  10 0.414272 0.019541 0.0 0.433814 18.578066 0.433814 0.428559 572.535156 563.597656   2   3 0.666667    0       58     59     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 25   1  11  11 0.408683 0.019877 0.0 0.428559 19.006626 0.428559 0.440913 574.914062 566.097656   2   3 0.666667    0       60     61     1         2       35      35 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 25   1  12  12 0.412248 0.028665 0.0 0.440913 19.447539 0.440913 0.000000 575.039062 566.097656   2   2 1.000000    0       62     63     2         2       36      37 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 26   3   1   1 1.103124 0.109400 0.0 1.212525  1.212525 1.212525 0.000000 575.539062 566.597656  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   2   1   1 1.049386 0.080741 0.0 1.130127  2.342652 2.342652 1.376491 577.562500 568.488281   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 26   2   2   2 1.267380 0.109110 0.0 1.376491  3.719143 1.376491 1.141906 581.710938 572.546875  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 26   2   3   3 1.053507 0.088398 0.0 1.141906  4.861048 1.141906 0.375754 583.742188 574.886719   9   9 1.000000    9       21     29     2         2        5       6 4.500000 4.500000 4.949747 4.949747 1.099944 1.099944 -1.572828 -1.572828            0            1
 26   2   4   4 0.350220 0.025534 0.0 0.375754  5.236803 0.375754 0.273150 585.656250 576.695312   3   5 0.600000    5       30     32     2         4        7       8 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 26   2   5   5 0.249119 0.024031 0.0 0.273150  5.509953 0.273150 0.785659 585.878906 576.695312   2   4 0.500000    4       33     34     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 26   2   6   6 0.339455 0.446204 0.0 0.785659  6.295612 0.785659 0.000000 586.906250 577.945312   3   4 0.750000    4       35     37     3         4       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 26   1   1   1 1.324562 0.075182 0.0 1.399744  3.742396 3.742396 3.169961 580.503906 571.289062   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 26   1   2   2 1.312036 0.481434 0.0 1.793471  6.912357 3.169961 3.020173 579.554688 570.335938   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 26   1   3   3 1.748071 0.130196 0.0 1.878267  9.932529 3.020173 1.800726 587.074219 578.507812   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.492153  0.622260  0.622260            0            0
 26   1   4   4 1.330199 0.094772 0.0 1.424972 11.733255 1.800726 1.332412 585.515625 576.828125   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 26   1   5   5 0.974832 0.084429 0.0 1.059262 13.065667 1.332412 4.716311 586.984375 577.898438   5   5 1.000000    0       31     35     4         4       21      24 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 26   1   6   6 3.647442 0.283211 0.0 3.930652 17.781978 4.716311 0.297383 605.117188 599.796875  17  17 1.000000    0       36     52     5         5       25      29 3.400000 3.400000 3.049590 3.049590 0.896938 0.896938  0.130991  0.130991            0            1
 26   1   7   7 0.281616 0.015767 0.0 0.297383 18.079361 0.297383 0.574054 585.656250 576.695312   1   1 1.000000    0       53     53     1         1       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   1   8   8 0.542643 0.031410 0.0 0.574054 18.653415 0.574054 0.292161 585.878906 576.695312   3   6 0.500000    0       54     56     2         4       31      32 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 26   1   9   9 0.275550 0.016610 0.0 0.292161 18.945576 0.292161 0.428620 585.878906 576.695312   1   2 0.500000    0       57     57     1         2       33      33 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 26   1  10  10 0.409140 0.019480 0.0 0.428620 19.374196 0.428620 0.426728 585.882812 576.695312   2   3 0.666667    0       58     59     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   1  11  11 0.406913 0.019815 0.0 0.426728 19.800924 0.426728 0.437433 585.585938 576.523438   2   3 0.666667    0       60     61     1         2       35      35 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 26   1  12  12 0.409015 0.028418 0.0 0.437433 20.238357 0.437433 0.000000 586.085938 577.023438   2   2 1.000000    0       62     63     2         2       36      37 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 27   3   1   1 1.097233 0.111926 0.0 1.209159  1.209159 1.209159 0.000000 587.929688 578.777344  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   2   1   1 1.047488 0.075113 0.0 1.122601  2.331761 2.331761 1.363929 588.828125 579.863281   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 27   2   2   2 1.260596 0.103333 0.0 1.363929  3.695689 1.363929 1.437236 593.046875 583.843750  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 27   2   3   3 1.318916 0.118321 0.0 1.437236  5.132926 1.437236 0.273506 596.226562 587.253906  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 27   2   4   4 0.249989 0.023517 0.0 0.273506  5.406432 0.273506 0.273092 598.242188 589.359375   2   4 0.500000    4       32     33     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 27   2   5   5 0.250216 0.022876 0.0 0.273092  5.679524 0.273092 0.380969 598.367188 589.359375   2   2 1.000000    2       34     35     2         2        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 27   2   6   6 0.341955 0.039014 0.0 0.380969  6.060493 0.380969 0.000000 600.121094 591.113281   3   5 0.600000    5       36     38     3         5       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 27   1   1   1 1.343750 0.076041 0.0 1.419791  3.751551 3.751551 2.769603 590.960938 581.753906   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 27   1   2   2 1.325905 0.079769 0.0 1.405674  6.521154 2.769603 3.309920 591.054688 581.847656   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 27   1   3   3 1.749049 0.123635 0.0 1.872684  9.831074 3.309920 1.695792 598.769531 590.359375   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.464811  0.622260  0.622260            0            0
 27   1   4   4 1.321231 0.101054 0.0 1.422285 11.526866 1.695792 2.445586 597.886719 589.152344   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 27   1   5   5 1.619014 0.553481 0.0 2.172495 13.972452 2.445586 3.813844 603.761719 595.980469   8   8 1.000000    0       31     38     5         5       21      25 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 27   1   6   6 3.171472 0.261403 0.0 3.432875 17.786296 3.813844 0.293263 613.546875 606.339844  15  17 0.882353    0       39     53     6         8       26      31 2.500000 2.125000 1.378405 1.471960 0.551362 0.630840  0.516436  0.494904            0            1
 27   1   7   7 0.274726 0.018537 0.0 0.293263 18.079560 0.293263 0.426526 598.367188 589.359375   1   2 0.500000    0       54     54     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 27   1   8   8 0.403722 0.022805 0.0 0.426526 18.506086 0.426526 0.291378 598.367188 589.359375   2   3 0.666667    0       55     56     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   1   9   9 0.275118 0.016260 0.0 0.291378 18.797464 0.291378 0.427391 598.371094 589.359375   1   1 1.000000    0       57     57     1         1       34      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 27   1  10  10 0.408143 0.019248 0.0 0.427391 19.224855 0.427391 0.295062 598.371094 589.359375   2   2 1.000000    0       58     59     1         1       35      35 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   1  11  11 0.280243 0.014818 0.0 0.295062 19.519917 0.295062 0.581166 599.671875 590.863281   1   2 0.500000    0       60     60     1         2       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 27   1  12  12 0.549245 0.031920 0.0 0.581166 20.101083 0.581166 0.000000 599.871094 590.863281   3   4 0.750000    0       61     63     2         3       37      38 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 28   3   1   1 1.104354 0.109132 0.0 1.213486  1.213486 1.213486 0.000000 601.468750 592.613281  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   2   1   1 1.047580 0.070150 0.0 1.117731  2.331217 2.331217 1.350466 602.515625 593.433594   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 28   2   2   2 1.258331 0.092135 0.0 1.350466  3.681683 1.350466 1.156306 605.675781 596.500000  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 28   2   3   3 1.053047 0.103259 0.0 1.156306  4.837990 1.156306 0.273800 608.996094 600.593750   9  11 0.818182   11       21     29     2         3        5       6 4.500000 3.666667 4.949747 2.828427 1.099944 0.942809 -1.572828 -0.936752            0            1
 28   2   4   4 0.248657 0.025143 0.0 0.273800  5.111790 0.273800 0.278438 607.062500 597.917969   2   3 0.666667    3       30     31     2         3        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 28   2   5   5 0.251995 0.026443 0.0 0.278438  5.390228 0.278438 0.384976 607.820312 598.921875   2   4 0.500000    4       32     33     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 28   2   6   6 0.338995 0.045981 0.0 0.384976  5.775204 0.384976 0.000000 610.097656 600.925781   3   4 0.750000    4       34     36     3         4       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 28   1   1   1 1.341142 0.082195 0.0 1.423337  3.754554 3.754554 2.750758 604.703125 595.593750   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 28   1   2   2 1.315088 0.085204 0.0 1.400292  6.505312 2.750758 3.534922 606.007812 596.847656   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 28   1   3   3 1.783530 0.595086 0.0 2.378616 10.040234 3.534922 1.689958 613.800781 605.191406   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.464811  0.622260  0.622260            0            0
 28   1   4   4 1.315213 0.100946 0.0 1.416158 11.730192 1.689958 1.329252 610.628906 602.152344   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 28   1   5   5 0.975146 0.075668 0.0 1.050814 13.059445 1.329252 2.071097 608.519531 599.437500   5   5 1.000000    0       31     35     4         4       21      24 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 28   1   6   6 1.585492 0.100629 0.0 1.686121 15.130542 2.071097 0.290822 614.761719 606.734375   8  10 0.800000    0       36     43     5         7       25      29 1.600000 1.428571 0.894427 0.547723 0.559017 0.391230  0.603019  0.728611            0            1
 28   1   7   7 0.272563 0.018259 0.0 0.290822 15.421364 0.290822 0.426691 607.062500 597.917969   1   1 1.000000    0       44     44     1         1       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   1   8   8 0.406160 0.020531 0.0 0.426691 15.848055 0.426691 0.291265 607.066406 597.921875   2   3 0.666667    0       45     46     1         2       31      31 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 28   1   9   9 0.272950 0.018315 0.0 0.291265 16.139320 0.291265 0.428801 608.093750 599.171875   1   2 0.500000    0       47     47     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 28   1  10  10 0.404654 0.024148 0.0 0.428801 16.568121 0.428801 0.427336 608.195312 599.171875   2   3 0.666667    0       48     49     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   1  11  11 0.406545 0.020791 0.0 0.427336 16.995457 0.427336 0.435692 609.894531 600.925781   2   3 0.666667    0       50     51     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 28   1  12  12 0.405871 0.029821 0.0 0.435692 17.431149 0.435692 0.000000 610.097656 600.925781   2   2 1.000000    0       52     53     2         2       35      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 29   3   1   1 1.092800 0.570144 0.0 1.662944  1.662944 1.662944 0.000000 612.687500 603.691406  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   2   1   1 1.049303 0.082132 0.0 1.131434  2.794378 2.794378 1.357404 613.628906 604.585938   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 29   2   2   2 1.266274 0.091130 0.0 1.357404  4.151783 1.357404 1.138690 614.226562 605.929688  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 29   2   3   3 1.052749 0.085941 0.0 1.138690  5.290472 1.138690 0.275207 619.292969 611.441406   9  11 0.818182   11       21     29     2         3        5       6 4.500000 3.666667 4.949747 2.828427 1.099944 0.942809 -1.572828 -0.936752            0            1
 29   2   4   4 0.251473 0.023734 0.0 0.275207  5.565679 0.275207 0.728105 622.863281 614.238281   2   3 0.666667    3       30     31     2         3        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 29   2   5   5 0.249707 0.478397 0.0 0.728105  6.293784 0.728105 0.382439 622.894531 614.238281   2   4 0.500000    4       32     33     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 29   2   6   6 0.339003 0.043436 0.0 0.382439  6.676223 0.382439 0.000000 624.589844 615.988281   3   4 0.750000    4       34     36     3         4       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 29   1   1   1 1.341862 0.082123 0.0 1.423985  4.218363 4.218363 2.770556 616.289062 607.910156   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 29   1   2   2 1.326723 0.086429 0.0 1.413152  6.988919 2.770556 3.011167 608.058594 600.378906   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 29   1   3   3 1.743966 0.128512 0.0 1.872478 10.000086 3.011167 1.693307 622.726562 614.605469   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.492153  0.622260  0.622260            0            0
 29   1   4   4 1.326026 0.092073 0.0 1.418100 11.693393 1.693307 1.775848 621.355469 613.414062   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 29   1   5   5 0.977054 0.070689 0.0 1.047743 13.469241 1.775848 4.610642 621.128906 612.460938   5   5 1.000000    0       31     35     4         4       21      24 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 29   1   6   6 3.889569 0.338634 0.0 4.228203 18.079882 4.610642 0.294902 647.261719 642.093750  18  20 0.900000    0       36     53     5         7       25      29 3.600000 2.857143 2.966479 3.049590 0.824022 0.896938  0.143876  0.130991            0            1
 29   1   7   7 0.276301 0.018601 0.0 0.294902 18.374784 0.294902 0.423162 622.886719 614.238281   1   2 0.500000    0       54     54     1         2       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 29   1   8   8 0.403612 0.019550 0.0 0.423162 18.797946 0.423162 0.290567 622.894531 614.238281   2   2 1.000000    0       55     56     1         1       31      31 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   1   9   9 0.274478 0.016089 0.0 0.290567 19.088513 0.290567 0.426557 622.894531 614.238281   1   2 0.500000    0       57     57     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 29   1  10  10 0.407770 0.018786 0.0 0.426557 19.515070 0.426557 0.428361 622.902344 614.238281   2   3 0.666667    0       58     59     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   1  11  11 0.408301 0.020060 0.0 0.428361 19.943431 0.428361 0.438570 624.406250 615.738281   2   3 0.666667    0       60     61     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 29   1  12  12 0.409590 0.028981 0.0 0.438570 20.382001 0.438570 0.000000 624.406250 615.738281   2   2 1.000000    0       62     63     2         2       35      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 30   3   1   1 1.098640 0.120851 0.0 1.219492  1.219492 1.219492 0.000000 626.300781 617.839844  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   2   1   1 1.056199 0.081373 0.0 1.137572  2.357063 2.357063 1.355273 627.355469 618.417969   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 30   2   2   2 1.264039 0.091234 0.0 1.355273  3.712336 1.355273 1.456777 630.738281 622.308594  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 30   2   3   3 1.322131 0.134646 0.0 1.456777  5.169113 1.456777 0.273383 635.550781 626.753906  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 30   2   4   4 0.249989 0.023394 0.0 0.273383  5.442496 0.273383 0.277117 635.957031 627.222656   2   3 0.666667    3       32     33     2         3        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 30   2   5   5 0.251224 0.025892 0.0 0.277117  5.719613 0.277117 0.389608 636.335938 627.472656   2   4 0.500000    4       34     35     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 30   2   6   6 0.342574 0.047035 0.0 0.389608  6.109221 0.389608 0.000000 638.523438 629.726562   3   4 0.750000    4       36     38     3         4       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 30   1   1   1 1.335266 0.074635 0.0 1.409901  3.766965 3.766965 2.769004 629.667969 621.304688   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 30   1   2   2 1.330041 0.083691 0.0 1.413732  6.535969 2.769004 3.291964 629.957031 621.160156   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 30   1   3   3 1.715716 0.119471 0.0 1.835187  9.827933 3.291964 1.699071 637.054688 629.472656   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.464811  0.622260  0.622260            0            0
 30   1   4   4 1.333957 0.091731 0.0 1.425688 11.527004 1.699071 2.009841 634.992188 626.417969   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 30   1   5   5 1.618667 0.114057 0.0 1.732724 13.536845 2.009841 4.271252 640.425781 632.246094   8   8 1.000000    0       31     38     5         5       21      25 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 30   1   6   6 3.160165 0.721479 0.0 3.881644 17.808097 4.271252 0.294730 652.636719 646.109375  15  17 0.882353    0       39     53     6         8       26      31 2.500000 2.125000 1.378405 1.471960 0.551362 0.630840  0.516436  0.494904            0            1
 30   1   7   7 0.276313 0.018417 0.0 0.294730 18.102828 0.294730 0.423853 635.957031 627.222656   1   1 1.000000    0       54     54     1         1       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   1   8   8 0.403150 0.020704 0.0 0.423853 18.526681 0.423853 0.293680 635.960938 627.222656   2   3 0.666667    0       55     56     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 30   1   9   9 0.276044 0.017637 0.0 0.293680 18.820361 0.293680 0.433332 636.648438 627.722656   1   2 0.500000    0       57     57     1         2       34      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 30   1  10  10 0.409258 0.024074 0.0 0.433332 19.253693 0.433332 0.296708 636.648438 627.722656   2   3 0.666667    0       58     59     1         2       35      35 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   1  11  11 0.280194 0.016513 0.0 0.296708 19.550401 0.296708 0.586100 638.398438 629.476562   1   1 1.000000    0       60     60     1         1       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 30   1  12  12 0.550545 0.035554 0.0 0.586100 20.136501 0.586100 0.000000 638.398438 629.476562   3   4 0.750000    0       61     63     2         3       37      38 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 31   3   1   1 1.102241 0.107320 0.0 1.209561  1.209561 1.209561 0.000000 639.292969 630.312500  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 31   2   1   1 1.046706 0.076505 0.0 1.123211  2.332773 2.332773 1.359457 641.062500 632.109375   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 31   2   2   2 1.265185 0.094273 0.0 1.359457  3.692230 1.359457 1.153606 646.023438 637.265625  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 31   2   3   3 1.057806 0.095799 0.0 1.153606  4.845836 1.153606 0.274614 648.800781 639.929688   9  11 0.818182   11       21     29     2         3        5       6 4.500000 3.666667 4.949747 2.828427 1.099944 0.942809 -1.572828 -0.936752            0            1
 31   2   4   4 0.251131 0.023484 0.0 0.274614  5.120450 0.274614 0.279210 651.191406 642.347656   2   3 0.666667    3       30     31     2         3        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 31   2   5   5 0.251257 0.027953 0.0 0.279210  5.399660 0.279210 0.378271 651.195312 642.347656   2   4 0.500000    4       32     33     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 31   2   6   6 0.340149 0.038122 0.0 0.378271  5.777932 0.378271 0.000000 651.964844 643.347656   3   4 0.750000    4       34     36     3         4       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 31   1   1   1 1.354110 0.078955 0.0 1.433065  3.765837 3.765837 2.765590 643.855469 634.847656   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 31   1   2   2 1.320804 0.085328 0.0 1.406133  6.531427 2.765590 3.030445 645.636719 636.757812   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 31   1   3   3 1.748664 0.128175 0.0 1.876839  9.561872 3.030445 2.178204 652.539062 644.085938   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.492153  0.622260  0.622260            0            0
 31   1   4   4 1.328576 0.575014 0.0 1.903590 11.740076 2.178204 1.327146 649.644531 640.652344   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 31   1   5   5 0.976994 0.070942 0.0 1.047936 13.067222 1.327146 4.636559 650.445312 641.687500   5   5 1.000000    0       31     35     4         4       21      24 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 31   1   6   6 3.895263 0.363025 0.0 4.258288 17.703781 4.636559 0.294447 674.175781 668.542969  18  20 0.900000    0       36     53     5         7       25      29 3.600000 2.857143 2.966479 3.049590 0.824022 0.896938  0.143876  0.130991            0            1
 31   1   7   7 0.276069 0.018378 0.0 0.294447 17.998228 0.294447 0.427009 651.195312 642.347656   1   1 1.000000    0       54     54     1         1       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 31   1   8   8 0.406557 0.020452 0.0 0.427009 18.425237 0.427009 0.293120 651.195312 642.347656   2   3 0.666667    0       55     56     1         2       31      31 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 31   1   9   9 0.275219 0.017900 0.0 0.293120 18.718357 0.293120 0.427541 651.382812 642.597656   1   2 0.500000    0       57     57     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 31   1  10  10 0.407584 0.019957 0.0 0.427541 19.145898 0.427541 0.293797 651.445312 642.597656   2   3 0.666667    0       58     59     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 31   1  11  11 0.277856 0.015942 0.0 0.293797 19.439696 0.293797 0.579351 652.320312 643.597656   1   1 1.000000    0       60     60     1         1       34      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 31   1  12  12 0.548050 0.031301 0.0 0.579351 20.019047 0.579351 0.000000 652.445312 643.597656   3   4 0.750000    0       61     63     2         3       35      36 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 32   3   1   1 1.095588 0.121886 0.0 1.217474  1.217474 1.217474 0.000000 653.253906 644.351562  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 32   2   1   1 1.046911 0.072188 0.0 1.119100  2.336574 2.336574 1.376120 654.898438 645.937500   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 32   2   2   2 1.267570 0.108550 0.0 1.376120  3.712694 1.376120 1.441575 659.906250 651.011719  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 32   2   3   3 1.316595 0.124979 0.0 1.441575  5.154269 1.441575 0.376788 661.394531 652.492188  11  11 1.000000   11       21     31     2         2        5       6 5.500000 5.500000 6.363961 6.363961 1.157084 1.157084 -1.880482 -1.880482            0            1
 32   2   4   4 0.350108 0.026680 0.0 0.376788  5.531057 0.376788 0.273845 663.914062 654.984375   3   5 0.600000    5       32     34     2         4        7       8 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 32   2   5   5 0.249343 0.024502 0.0 0.273845  5.804901 0.273845 0.381519 664.914062 655.984375   2   4 0.500000    4       35     36     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 32   2   6   6 0.341687 0.039833 0.0 0.381519  6.186421 0.381519 0.000000 666.664062 657.738281   3   4 0.750000    4       37     39     3         4       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 32   1   1   1 1.343791 0.080669 0.0 1.424460  3.761034 3.761034 2.783726 656.972656 648.078125   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 32   1   2   2 1.328994 0.078612 0.0 1.407606  6.544761 2.783726 3.805258 658.843750 649.890625   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 32   1   3   3 1.738990 0.624694 0.0 2.363684 10.350019 3.805258 1.800888 666.199219 657.710938   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.464811  0.622260  0.622260            0            0
 32   1   4   4 1.326745 0.097355 0.0 1.424100 12.150907 1.800888 2.002066 662.859375 654.097656   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 32   1   5   5 1.615561 0.112661 0.0 1.728222 14.152973 2.002066 3.473741 667.921875 659.742188   8   8 1.000000    0       31     38     5         5       21      25 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 32   1   6   6 2.885996 0.206226 0.0 3.092222 17.626714 3.473741 0.289004 676.468750 670.582031  14  14 1.000000    0       39     52     6         6       26      31 2.333333 2.333333 1.505545 1.505545 0.645234 0.645234  0.487372  0.487372            0            1
 32   1   7   7 0.273401 0.015603 0.0 0.289004 17.915718 0.289004 0.571723 663.914062 654.984375   1   1 1.000000    0       53     53     1         1       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 32   1   8   8 0.540311 0.031412 0.0 0.571723 18.487442 0.571723 0.291063 664.414062 655.484375   3   6 0.500000    0       54     56     2         4       33      34 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 32   1   9   9 0.274648 0.016415 0.0 0.291063 18.778505 0.291063 0.430046 665.164062 656.234375   1   2 0.500000    0       57     57     1         2       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 32   1  10  10 0.410507 0.019539 0.0 0.430046 19.208551 0.430046 0.429202 665.164062 656.234375   2   3 0.666667    0       58     59     1         2       36      36 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 32   1  11  11 0.409378 0.019825 0.0 0.429202 19.637754 0.429202 0.438787 666.789062 657.988281   2   3 0.666667    0       60     61     1         2       37      37 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 32   1  12  12 0.409608 0.029179 0.0 0.438787 20.076541 0.438787 0.000000 666.914062 657.988281   2   2 1.000000    0       62     63     2         2       38      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 33   3   1   1 1.103738 0.112027 0.0 1.215765  1.215765 1.215765 0.000000 667.183594 658.238281  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   2   1   1 1.048395 0.075424 0.0 1.123819  2.339584 2.339584 1.872545 669.515625 660.574219   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 33   2   2   2 1.261266 0.611279 0.0 1.872545  4.212129 1.872545 1.437587 673.503906 664.570312  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 33   2   3   3 1.313102 0.124486 0.0 1.437587  5.649716 1.437587 0.377133 675.460938 666.535156  11  11 1.000000   11       21     31     2         2        5       6 5.500000 5.500000 6.363961 6.363961 1.157084 1.157084 -1.880482 -1.880482            0            1
 33   2   4   4 0.351340 0.025793 0.0 0.377133  6.026849 0.377133 0.276758 678.433594 669.777344   3   5 0.600000    5       32     34     2         4        7       8 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 33   2   5   5 0.252660 0.024097 0.0 0.276758  6.303606 0.276758 0.376407 678.808594 670.277344   2   4 0.500000    4       35     36     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 33   2   6   6 0.340384 0.036023 0.0 0.376407  6.680013 0.376407 0.000000 680.203125 671.777344   3   4 0.750000    4       37     39     3         4       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 33   1   1   1 1.336298 0.077152 0.0 1.413449  3.753033 3.753033 3.272312 671.171875 662.484375   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 33   1   2   2 1.314836 0.084930 0.0 1.399767  7.025345 3.272312 3.284948 672.433594 663.722656   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 33   1   3   3 1.721393 0.125968 0.0 1.847361 10.310293 3.284948 1.793658 679.261719 671.398438   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.894427 0.464811 0.470751  0.622260  0.603019            0            0
 33   1   4   4 1.318454 0.098071 0.0 1.416525 12.103951 1.793658 2.008850 676.882812 668.105469   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 33   1   5   5 1.615195 0.116897 0.0 1.732093 14.112801 2.008850 3.540344 681.890625 673.582031   8   8 1.000000    0       31     38     5         5       21      25 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 33   1   6   6 2.935539 0.228398 0.0 3.163938 17.653145 3.540344 0.293235 692.382812 686.015625  14  14 1.000000    0       39     52     6         6       26      31 2.333333 2.333333 1.505545 1.505545 0.645234 0.645234  0.487372  0.487372            0            1
 33   1   7   7 0.277376 0.015858 0.0 0.293235 17.946380 0.293235 0.572507 678.433594 669.777344   1   2 0.500000    0       53     53     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   1   8   8 0.541175 0.031332 0.0 0.572507 18.518887 0.572507 0.293015 678.433594 669.777344   3   5 0.600000    0       54     56     2         3       33      34 1.500000 1.666667 0.707107 1.414214 0.471405 0.707107  0.228447 -0.271553            0            1
 33   1   9   9 0.276813 0.016202 0.0 0.293015 18.811902 0.293015 0.428961 679.042969 670.527344   1   2 0.500000    0       57     57     1         2       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 33   1  10  10 0.409428 0.019533 0.0 0.428961 19.240863 0.428961 0.293255 679.042969 670.527344   2   3 0.666667    0       58     59     1         2       36      36 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   1  11  11 0.277559 0.015695 0.0 0.293255 19.534118 0.293255 0.578755 680.046875 671.531250   1   1 1.000000    0       60     60     1         1       37      37 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 33   1  12  12 0.547459 0.031296 0.0 0.578755 20.112873 0.578755 0.000000 680.308594 671.781250   3   4 0.750000    0       61     63     2         3       38      39 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 34   3   1   1 1.096840 0.115789 0.0 1.212629  1.212629 1.212629 0.000000 681.984375 673.281250  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   2   1   1 1.049120 0.067372 0.0 1.116492  2.329121 2.329121 1.367785 682.875000 674.171875   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 34   2   2   2 1.265366 0.102419 0.0 1.367785  3.696906 1.367785 1.153647 686.996094 678.417969  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 34   2   3   3 1.057344 0.096303 0.0 1.153647  4.850553 1.153647 0.274200 690.230469 681.746094   9  11 0.818182   11       21     29     2         3        5       6 4.500000 3.666667 4.949747 2.828427 1.099944 0.942809 -1.572828 -0.936752            0            1
 34   2   4   4 0.249018 0.025183 0.0 0.274200  5.124753 0.274200 0.274356 691.648438 682.960938   2   3 0.666667    3       30     31     2         3        7       8 1.000000 1.000000 0.000000 1.060660 0.000000 0.848528  1.000000 -0.043107            0            1
 34   2   5   5 0.249365 0.024991 0.0 0.274356  5.399108 0.274356 0.380906 691.648438 682.960938   2   4 0.500000    4       32     33     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 34   2   6   6 0.338522 0.042384 0.0 0.380906  5.780014 0.380906 0.000000 693.800781 685.214844   3   4 0.750000    4       34     36     3         4       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 34   1   1   1 1.328010 0.080510 0.0 1.408520  3.737641 3.737641 2.768053 684.976562 676.468750   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 34   1   2   2 1.318488 0.081780 0.0 1.400268  6.505694 2.768053 3.034061 685.777344 677.015625   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 34   1   3   3 1.742783 0.137632 0.0 1.880414  9.539755 3.034061 1.689454 694.343750 686.359375   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.492153  0.622260  0.622260            0            0
 34   1   4   4 1.327902 0.087352 0.0 1.415254 11.229209 1.689454 1.328281 690.632812 681.968750   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 34   1   5   5 0.978155 0.075771 0.0 1.053925 12.557490 1.328281 4.596402 692.300781 683.753906   5   5 1.000000    0       31     35     4         4       21      24 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 34   1   6   6 3.885629 0.329867 0.0 4.215496 17.153892 4.596402 0.291896 712.753906 707.046875  18  20 0.900000    0       36     53     5         7       25      29 3.600000 2.857143 2.966479 3.049590 0.824022 0.896938  0.143876  0.130991            0            1
 34   1   7   7 0.273119 0.018777 0.0 0.291896 17.445788 0.291896 0.425265 691.648438 682.960938   1   2 0.500000    0       54     54     1         2       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 34   1   8   8 0.404807 0.020458 0.0 0.425265 17.871054 0.425265 0.292562 691.648438 682.960938   2   2 1.000000    0       55     56     1         1       31      31 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   1   9   9 0.276288 0.016274 0.0 0.292562 18.163615 0.292562 0.428250 691.898438 683.210938   1   2 0.500000    0       57     57     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 34   1  10  10 0.408868 0.019382 0.0 0.428250 18.591866 0.428250 0.428894 691.898438 683.210938   2   3 0.666667    0       58     59     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   1  11  11 0.408714 0.020180 0.0 0.428894 19.020760 0.428894 0.436646 693.175781 684.464844   2   3 0.666667    0       60     61     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 34   1  12  12 0.407459 0.029186 0.0 0.436646 19.457405 0.436646 0.000000 693.550781 684.964844   2   2 1.000000    0       62     63     2         2       35      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 35   3   1   1 1.100055 0.647037 0.0 1.747092  1.747092 1.747092 0.000000 695.339844 686.718750  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   2   1   1 1.057387 0.072562 0.0 1.129950  2.877042 2.877042 1.367926 695.480469 687.179688   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 35   2   2   2 1.269816 0.098110 0.0 1.367926  4.244968 1.367926 1.463214 698.714844 690.273438  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 35   2   3   3 1.316095 0.147120 0.0 1.463214  5.708183 1.463214 0.377799 703.773438 695.144531  11  11 1.000000   11       21     31     2         2        5       6 5.500000 5.500000 6.363961 6.363961 1.157084 1.157084 -1.880482 -1.880482            0            1
 35   2   4   4 0.352263 0.025536 0.0 0.377799  6.085981 0.377799 0.276230 705.160156 696.789062   3   5 0.600000    5       32     34     2         4        7       8 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 35   2   5   5 0.251258 0.024972 0.0 0.276230  6.362211 0.276230 0.928020 705.804688 697.289062   2   4 0.500000    4       35     36     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 35   2   6   6 0.342071 0.585949 0.0 0.928020  7.290231 0.928020 0.000000 707.242188 698.792969   3   4 0.750000    4       37     39     3         4       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 35   1   1   1 1.354331 0.080907 0.0 1.435238  4.312279 4.312279 2.778618 698.156250 689.312500   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 35   1   2   2 1.326019 0.084672 0.0 1.410691  7.090897 2.778618 3.339687 698.542969 689.750000   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 35   1   3   3 1.745640 0.130832 0.0 1.876472 10.430584 3.339687 1.804070 706.746094 698.695312   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.464811  0.622260  0.622260            0            0
 35   1   4   4 1.332821 0.093451 0.0 1.426271 12.234654 1.804070 2.007355 703.457031 694.792969   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 35   1   5   5 1.617657 0.113468 0.0 1.731125 14.242008 2.007355 4.084479 708.101562 700.023438   8   8 1.000000    0       31     38     5         5       21      25 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 35   1   6   6 2.926489 0.229970 0.0 3.156459 18.326487 4.084479 0.293527 719.265625 713.214844  14  14 1.000000    0       39     52     6         6       26      31 2.333333 2.333333 1.505545 1.505545 0.645234 0.645234  0.487372  0.487372            0            1
 35   1   7   7 0.277193 0.016334 0.0 0.293527 18.620014 0.293527 0.571619 705.160156 696.789062   1   1 1.000000    0       53     53     1         1       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   1   8   8 0.544255 0.027364 0.0 0.571619 19.191633 0.571619 0.294399 705.160156 696.789062   3   6 0.500000    0       54     56     2         4       33      34 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 35   1   9   9 0.275712 0.018687 0.0 0.294399 19.486032 0.294399 0.431979 706.117188 697.539062   1   2 0.500000    0       57     57     1         2       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 35   1  10  10 0.408493 0.023486 0.0 0.431979 19.918011 0.431979 0.426285 706.117188 697.539062   2   3 0.666667    0       58     59     1         2       36      36 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   1  11  11 0.406849 0.019435 0.0 0.426285 20.344296 0.426285 0.435702 707.304688 698.792969   2   3 0.666667    0       60     61     1         2       37      37 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 35   1  12  12 0.407783 0.027919 0.0 0.435702 20.779998 0.435702 0.000000 707.367188 698.792969   2   2 1.000000    0       62     63     2         2       38      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 36   3   1   1 1.094673 0.122950 0.0 1.217624  1.217624 1.217624 0.000000 709.082031 700.546875  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 36   2   1   1 1.049417 0.077922 0.0 1.127339  2.344963 2.344963 1.382746 710.207031 701.437500   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 36   2   2   2 1.263804 0.118942 0.0 1.382746  3.727708 1.382746 1.150164 717.000000 708.179688  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 36   2   3   3 1.056235 0.093928 0.0 1.150164  4.877872 1.150164 0.829945 718.230469 709.687500   9  11 0.818182   11       21     29     2         3        5       6 4.500000 3.666667 4.949747 2.828427 1.099944 0.942809 -1.572828 -0.936752            0            1
 36   2   4   4 0.248654 0.581291 0.0 0.829945  5.707817 0.829945 0.275397 719.914062 711.667969   2   3 0.666667    3       30     31     2         3        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 36   2   5   5 0.250254 0.025143 0.0 0.275397  5.983215 0.275397 0.379664 719.937500 711.667969   2   4 0.500000    4       32     33     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 36   2   6   6 0.339489 0.040175 0.0 0.379664  6.362878 0.379664 0.000000 721.507812 713.171875   3   4 0.750000    4       34     36     3         4       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 36   1   1   1 1.357906 0.084459 0.0 1.442364  3.787327 3.787327 2.807161 712.500000 703.675781   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 36   1   2   2 1.340107 0.084308 0.0 1.424415  6.594488 2.807161 2.996965 712.734375 704.117188   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 36   1   3   3 1.716252 0.130549 0.0 1.846802  9.591454 2.996965 2.257238 721.187500 713.441406   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.492153  0.622260  0.622260            0            0
 36   1   4   4 1.325307 0.101986 0.0 1.427293 11.848692 2.257238 1.322941 719.949219 711.589844   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 36   1   5   5 0.979438 0.068106 0.0 1.047543 13.171632 1.322941 4.668883 719.175781 710.695312   5   5 1.000000    0       31     35     4         4       21      24 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 36   1   6   6 3.894681 0.394538 0.0 4.289219 17.840515 4.668883 0.292293 744.035156 738.703125  18  20 0.900000    0       36     53     5         7       25      29 3.600000 2.857143 2.880972 3.029026 0.800270 0.890890  0.157417  0.134154            0            1
 36   1   7   7 0.273649 0.018644 0.0 0.292293 18.132808 0.292293 0.423752 719.914062 711.667969   1   2 0.500000    0       54     54     1         2       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 36   1   8   8 0.403536 0.020216 0.0 0.423752 18.556561 0.423752 0.290713 719.914062 711.667969   2   2 1.000000    0       55     56     1         1       31      31 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 36   1   9   9 0.273972 0.016741 0.0 0.290713 18.847274 0.290713 0.431853 720.132812 711.667969   1   2 0.500000    0       57     57     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 36   1  10  10 0.408462 0.023392 0.0 0.431853 19.279127 0.431853 0.432221 720.132812 711.667969   2   3 0.666667    0       58     59     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 36   1  11  11 0.412242 0.019979 0.0 0.432221 19.711348 0.432221 0.439693 721.382812 712.921875   2   3 0.666667    0       60     61     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 36   1  12  12 0.410478 0.029215 0.0 0.439693 20.151041 0.439693 0.000000 721.613281 713.171875   2   2 1.000000    0       62     63     2         2       35      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 37   3   1   1 1.101422 0.114567 0.0 1.215989  1.215989 1.215989 0.000000 722.410156 713.921875  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   2   1   1 1.050076 0.076901 0.0 1.126977  2.342966 2.342966 1.357443 724.503906 716.007812   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 37   2   2   2 1.261261 0.096182 0.0 1.357443  3.700410 1.357443 1.452385 728.609375 719.992188  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 37   2   3   3 1.318641 0.133744 0.0 1.452385  5.152795 1.452385 0.275841 735.160156 726.816406  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 37   2   4   4 0.251899 0.023942 0.0 0.275841  5.428636 0.275841 0.277581 733.285156 724.753906   2   3 0.666667    3       32     33     2         3        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 37   2   5   5 0.252273 0.025307 0.0 0.277581  5.706217 0.277581 0.376260 734.285156 725.753906   2   4 0.500000    4       34     35     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 37   2   6   6 0.339849 0.036412 0.0 0.376260  6.082477 0.376260 0.000000 735.472656 727.007812   3   4 0.750000    4       36     38     3         4       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 37   1   1   1 1.329114 0.075432 0.0 1.404546  3.747513 3.747513 2.762733 727.218750 718.601562   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 37   1   2   2 1.325922 0.079368 0.0 1.405290  6.510246 2.762733 3.334951 727.648438 719.230469   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 37   1   3   3 1.751641 0.130925 0.0 1.882566  9.845197 3.334951 1.707791 736.164062 727.992188   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.894427 0.464811 0.470751  0.622260  0.603019            0            0
 37   1   4   4 1.331335 0.100614 0.0 1.431949 11.552988 1.707791 2.009809 735.296875 726.960938   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 37   1   5   5 1.613868 0.118361 0.0 1.732229 13.562797 2.009809 3.808589 739.445312 731.679688   8   8 1.000000    0       31     38     5         5       21      25 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 37   1   6   6 3.170443 0.261886 0.0 3.432329 17.371386 3.808589 0.293642 749.859375 743.042969  15  17 0.882353    0       39     53     6         8       26      31 2.500000 2.125000 1.516575 1.505545 0.606630 0.645234  0.484920  0.487372            0            1
 37   1   7   7 0.275422 0.018220 0.0 0.293642 17.665028 0.293642 0.426341 733.472656 725.003906   1   1 1.000000    0       54     54     1         1       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   1   8   8 0.406492 0.019849 0.0 0.426341 18.091369 0.426341 0.293696 733.535156 725.003906   2   3 0.666667    0       55     56     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 37   1   9   9 0.275776 0.017920 0.0 0.293696 18.385066 0.293696 0.432230 734.550781 726.253906   1   2 0.500000    0       57     57     1         2       34      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 37   1  10  10 0.412093 0.020136 0.0 0.432230 18.817295 0.432230 0.294304 734.550781 726.253906   2   3 0.666667    0       58     59     1         2       35      35 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   1  11  11 0.278311 0.015993 0.0 0.294304 19.111599 0.294304 0.577935 735.785156 727.257812   1   1 1.000000    0       60     60     1         1       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 37   1  12  12 0.546609 0.031326 0.0 0.577935 19.689533 0.577935 0.000000 735.785156 727.257812   3   4 0.750000    0       61     63     2         3       37      38 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 38   3   1   1 1.095390 0.118347 0.0 1.213737  1.213737 1.213737 0.000000 736.683594 728.257812  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 38   2   1   1 1.043387 0.072190 0.0 1.115577  2.329315 2.329315 1.375912 738.203125 729.593750   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 38   2   2   2 1.269612 0.106300 0.0 1.375912  3.705227 1.375912 1.463497 743.441406 734.902344  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 38   2   3   3 1.316110 0.147387 0.0 1.463497  5.168724 1.463497 0.273743 745.269531 736.847656  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 38   2   4   4 0.249549 0.024195 0.0 0.273743  5.442467 0.273743 0.276583 745.355469 736.753906   2   3 0.666667    3       32     33     2         3        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 38   2   5   5 0.250105 0.026477 0.0 0.276583  5.719050 0.276583 0.388061 746.390625 738.007812   2   4 0.500000    4       34     35     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 38   2   6   6 0.341162 0.046899 0.0 0.388061  6.107111 0.388061 0.000000 748.621094 740.261719   3   4 0.750000    4       36     38     3         4       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 38   1   1   1 1.343765 0.084347 0.0 1.428111  3.757426 3.757426 2.775012 740.417969 732.003906   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 38   1   2   2 1.317906 0.081193 0.0 1.399099  6.532438 2.775012 3.298159 741.140625 732.742188   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 38   1   3   3 1.711972 0.122690 0.0 1.834661  9.830596 3.298159 1.687313 747.593750 739.812500   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.464811  0.622260  0.622260            0            0
 38   1   4   4 1.325567 0.088003 0.0 1.413570 11.517909 1.687313 2.009699 745.097656 736.492188   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 38   1   5   5 1.614049 0.119067 0.0 1.733116 13.527608 2.009699 3.801319 751.777344 744.097656   8   8 1.000000    0       31     38     5         5       21      25 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 38   1   6   6 3.166876 0.246382 0.0 3.413258 17.328927 3.801319 0.292363 762.343750 755.613281  15  17 0.882353    0       39     53     6         8       26      31 2.500000 2.125000 1.516575 1.505545 0.606630 0.645234  0.484920  0.487372            0            1
 38   1   7   7 0.273712 0.018651 0.0 0.292363 17.621290 0.292363 0.427863 745.605469 737.003906   1   1 1.000000    0       54     54     1         1       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 38   1   8   8 0.403475 0.024389 0.0 0.427863 18.049153 0.427863 0.293568 745.605469 737.003906   2   3 0.666667    0       55     56     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 38   1   9   9 0.273989 0.019579 0.0 0.293568 18.342721 0.293568 0.432248 746.660156 738.257812   1   2 0.500000    0       57     57     1         2       34      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 38   1  10  10 0.408843 0.023405 0.0 0.432248 18.774969 0.432248 0.293823 746.855469 738.257812   2   3 0.666667    0       58     59     1         2       35      35 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 38   1  11  11 0.277885 0.015939 0.0 0.293823 19.068792 0.293823 0.581291 747.980469 739.511719   1   1 1.000000    0       60     60     1         1       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 38   1  12  12 0.548592 0.032699 0.0 0.581291 19.650083 0.581291 0.000000 748.105469 739.511719   3   4 0.750000    0       61     63     2         3       37      38 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 39   3   1   1 1.100642 0.114849 0.0 1.215491  1.215491 1.215491 0.000000 749.292969 740.761719  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 39   2   1   1 1.048405 0.077754 0.0 1.126160  2.341651 2.341651 1.378760 750.785156 742.347656   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 39   2   2   2 1.265457 0.113303 0.0 1.378760  3.720410 1.378760 1.145007 756.082031 747.402344  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 39   2   3   3 1.056592 0.088415 0.0 1.145007  4.865417 1.145007 0.375828 758.347656 749.914062   9   9 1.000000    9       21     29     2         2        5       6 4.500000 4.500000 4.949747 4.949747 1.099944 1.099944 -1.572828 -1.572828            0            1
 39   2   4   4 0.350137 0.025691 0.0 0.375828  5.241245 0.375828 0.275647 759.007812 750.550781   3   5 0.600000    5       30     32     2         4        7       8 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 39   2   5   5 0.252528 0.023119 0.0 0.275647  5.516892 0.275647 0.387064 759.382812 750.804688   2   4 0.500000    4       33     34     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 39   2   6   6 0.341355 0.045709 0.0 0.387064  5.903956 0.387064 0.000000 760.585938 752.007812   3   4 0.750000    4       35     37     3         4       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 39   1   1   1 1.343497 0.083134 0.0 1.426631  3.768281 3.768281 2.764927 752.917969 744.242188   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 39   1   2   2 1.308771 0.077396 0.0 1.386167  6.533208 2.764927 3.035111 753.210938 744.750000   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 39   1   3   3 1.743972 0.146131 0.0 1.890104  9.568320 3.035111 1.800055 762.003906 753.914062   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.492153  0.622260  0.622260            0            0
 39   1   4   4 1.332421 0.091806 0.0 1.424228 11.368375 1.800055 1.316858 759.335938 751.140625   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 39   1   5   5 0.975028 0.066183 0.0 1.041211 12.685233 1.316858 4.947419 760.230469 751.921875   5   5 1.000000    0       31     35     4         4       21      24 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 39   1   6   6 3.639058 0.921297 0.0 4.560355 17.632652 4.947419 0.291851 781.699219 777.730469  17  17 1.000000    0       36     52     5         5       25      29 3.400000 3.400000 3.049590 3.049590 0.896938 0.896938  0.130991  0.130991            0            1
 39   1   7   7 0.276189 0.015662 0.0 0.291851 17.924502 0.291851 0.571743 759.132812 750.550781   1   1 1.000000    0       53     53     1         1       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 39   1   8   8 0.544323 0.027420 0.0 0.571743 18.496245 0.571743 0.291433 759.132812 750.550781   3   6 0.500000    0       54     56     2         4       31      32 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 39   1   9   9 0.273801 0.017632 0.0 0.291433 18.787678 0.291433 0.429209 758.335938 749.757812   1   2 0.500000    0       57     57     1         2       33      33 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 39   1  10  10 0.409403 0.019806 0.0 0.429209 19.216887 0.429209 0.433921 758.335938 749.757812   2   3 0.666667    0       58     59     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 39   1  11  11 0.414302 0.019619 0.0 0.433921 19.650807 0.433921 0.435234 760.136719 751.757812   2   3 0.666667    0       60     61     1         2       35      35 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 39   1  12  12 0.406105 0.029129 0.0 0.435234 20.086041 0.435234 0.000000 760.335938 751.757812   2   2 1.000000    0       62     63     2         2       36      37 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 40   3   1   1 1.096399 0.118778 0.0 1.215177  1.215177 1.215177 0.000000 763.347656 754.773438  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   2   1   1 1.043850 0.077056 0.0 1.120906  2.336083 2.336083 1.385262 763.179688 754.609375   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 40   2   2   2 1.271687 0.113575 0.0 1.385262  3.721345 1.385262 1.147423 771.039062 762.800781  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 40   2   3   3 1.052582 0.094840 0.0 1.147423  4.868767 1.147423 0.273194 771.738281 763.523438   9  11 0.818182   11       21     29     2         3        5       6 4.500000 3.666667 4.949747 2.828427 1.099944 0.942809 -1.572828 -0.936752            0            1
 40   2   4   4 0.249488 0.023706 0.0 0.273194  5.141961 0.273194 0.274100 776.320312 768.539062   2   3 0.666667    3       30     31     2         3        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 40   2   5   5 0.249461 0.024639 0.0 0.274100  5.416062 0.274100 0.376407 776.707031 768.789062   2   3 0.666667    3       32     33     2         3        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 40   2   6   6 0.339412 0.036995 0.0 0.376407  5.792469 0.376407 0.000000 778.269531 770.292969   3   5 0.600000    5       34     36     3         5       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 40   1   1   1 1.322439 0.074423 0.0 1.396862  3.732945 3.732945 2.786433 766.855469 758.402344   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 40   1   2   2 1.315552 0.085619 0.0 1.401171  6.519378 2.786433 2.992535 767.210938 758.753906   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 40   1   3   3 1.722743 0.122370 0.0 1.845113  9.511913 2.992535 1.694587 772.781250 765.117188   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.492153  0.622260  0.622260            0            0
 40   1   4   4 1.323828 0.097565 0.0 1.421393 11.206500 1.694587 1.325230 772.367188 763.996094   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 40   1   5   5 0.980560 0.070569 0.0 1.051129 12.531730 1.325230 5.194654 773.687500 765.281250   5   5 1.000000    0       31     35     4         4       21      24 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 40   1   6   6 3.883708 0.934540 0.0 4.818248 17.726384 5.194654 0.291940 795.386719 790.359375  18  20 0.900000    0       36     53     5         7       25      29 3.600000 2.857143 2.966479 3.049590 0.824022 0.896938  0.143876  0.130991            0            1
 40   1   7   7 0.273831 0.018109 0.0 0.291940 18.018325 0.291940 0.423360 776.457031 768.539062   1   2 0.500000    0       54     54     1         2       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 40   1   8   8 0.404246 0.019114 0.0 0.423360 18.441685 0.423360 0.290979 776.582031 768.539062   2   2 1.000000    0       55     56     1         1       31      31 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   1   9   9 0.274508 0.016471 0.0 0.290979 18.732664 0.290979 0.428782 777.011719 769.039062   1   2 0.500000    0       57     57     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 40   1  10  10 0.409600 0.019182 0.0 0.428782 19.161446 0.428782 0.295083 777.082031 769.039062   2   2 1.000000    0       58     59     1         1       33      33 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   1  11  11 0.280303 0.014780 0.0 0.295083 19.456528 0.295083 0.578545 778.332031 770.292969   1   2 0.500000    0       60     60     1         2       34      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 40   1  12  12 0.547360 0.031184 0.0 0.578545 20.035073 0.578545 0.000000 778.402344 770.292969   3   4 0.750000    0       61     63     2         3       35      36 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 41   3   1   1 1.105439 0.123837 0.0 1.229277  1.229277 1.229277 0.000000 780.582031 772.546875  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 41   2   1   1 1.052714 0.071741 0.0 1.124455  2.353732 2.353732 1.351469 781.457031 773.132812   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 41   2   2   2 1.256921 0.094547 0.0 1.351469  3.705201 1.351469 1.448002 785.746094 777.328125  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 41   2   3   3 1.320121 0.127881 0.0 1.448002  5.153203 1.448002 0.275192 788.992188 780.636719  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 41   2   4   4 0.251621 0.023571 0.0 0.275192  5.428395 0.275192 0.276426 791.363281 783.148438   2   3 0.666667    3       32     33     2         3        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 41   2   5   5 0.253332 0.023094 0.0 0.276426  5.704821 0.276426 0.376611 791.976562 783.648438   2   4 0.500000    4       34     35     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 41   2   6   6 0.342413 0.034198 0.0 0.376611  6.081432 0.376611 0.000000 793.039062 784.652344   3   4 0.750000    4       36     38     3         4       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 41   1   1   1 1.343550 0.078077 0.0 1.421628  3.775359 3.775359 2.745328 783.187500 774.855469   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 41   1   2   2 1.315550 0.078309 0.0 1.393860  6.520688 2.745328 3.295340 784.691406 776.480469   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 41   1   3   3 1.713562 0.133775 0.0 1.847337  9.816027 3.295340 1.697384 791.675781 783.980469   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.894427 0.464811 0.470751  0.622260  0.603019            0            0
 41   1   4   4 1.326346 0.095846 0.0 1.422193 11.513412 1.697384 1.998505 788.894531 780.781250   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 41   1   5   5 1.607722 0.114358 0.0 1.722079 13.511917 1.998505 3.790775 795.031250 787.167969   8   8 1.000000    0       31     38     5         5       21      25 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 41   1   6   6 3.163381 0.250783 0.0 3.414164 17.302692 3.790775 0.295049 804.550781 797.699219  15  17 0.882353    0       39     53     6         8       26      31 2.500000 2.125000 1.516575 1.505545 0.606630 0.645234  0.484920  0.487372            0            1
 41   1   7   7 0.276832 0.018217 0.0 0.295049 17.597741 0.295049 0.427910 791.601562 783.148438   1   1 1.000000    0       54     54     1         1       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 41   1   8   8 0.407608 0.020302 0.0 0.427910 18.025651 0.427910 0.294848 791.601562 783.148438   2   3 0.666667    0       55     56     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 41   1   9   9 0.275801 0.019047 0.0 0.294848 18.320500 0.294848 0.430932 792.226562 783.898438   1   2 0.500000    0       57     57     1         2       34      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 41   1  10  10 0.411454 0.019477 0.0 0.430932 18.751431 0.430932 0.430394 792.226562 783.898438   2   3 0.666667    0       58     59     1         2       35      35 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 41   1  11  11 0.411047 0.019347 0.0 0.430394 19.181826 0.430394 0.437354 793.351562 784.902344   2   3 0.666667    0       60     61     1         2       36      36 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 41   1  12  12 0.408857 0.028497 0.0 0.437354 19.619180 0.437354 0.000000 793.789062 785.406250   2   2 1.000000    0       62     63     2         2       37      38 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 42   3   1   1 1.099709 0.116119 0.0 1.215828  1.215828 1.215828 0.000000 795.136719 786.656250  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 42   2   1   1 1.044474 0.071777 0.0 1.116252  2.332079 2.332079 1.377692 796.292969 787.742188   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 42   2   2   2 1.275836 0.101857 0.0 1.377692  3.709772 1.377692 1.148407 800.390625 791.847656  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 42   2   3   3 1.054859 0.093548 0.0 1.148407  4.858179 1.148407 0.276302 805.011719 796.730469   9  11 0.818182   11       21     29     2         3        5       6 4.500000 3.666667 4.949747 2.828427 1.099944 0.942809 -1.572828 -0.936752            0            1
 42   2   4   4 0.250860 0.025442 0.0 0.276302  5.134481 0.276302 0.274798 806.253906 798.019531   2   4 0.500000    4       30     31     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 42   2   5   5 0.251540 0.023258 0.0 0.274798  5.409279 0.274798 0.377999 806.253906 798.019531   2   2 1.000000    2       32     33     2         2        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 42   2   6   6 0.337727 0.040272 0.0 0.377999  5.787278 0.377999 0.000000 808.191406 800.023438   3   5 0.600000    5       34     36     3         5       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 42   1   1   1 1.344409 0.081967 0.0 1.426377  3.758456 3.758456 2.791971 798.445312 789.960938   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 42   1   2   2 1.328672 0.085607 0.0 1.414278  6.550427 2.791971 3.024742 799.273438 790.730469   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 42   1   3   3 1.741013 0.135322 0.0 1.876335  9.575169 3.024742 1.685003 806.074219 797.871094   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.464811  0.622260  0.622260            0            0
 42   1   4   4 1.312878 0.095823 0.0 1.408701 11.260172 1.685003 1.333346 805.699219 797.425781   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 42   1   5   5 0.979657 0.078891 0.0 1.058548 12.593518 1.333346 2.072422 807.703125 799.484375   5   5 1.000000    0       31     35     4         4       21      24 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 42   1   6   6 1.591544 0.102878 0.0 1.694422 14.665940 2.072422 0.292713 813.175781 806.789062   8  10 0.800000    0       36     43     5         7       25      29 1.600000 1.428571 0.894427 0.547723 0.559017 0.391230  0.603019  0.728611            0            1
 42   1   7   7 0.273580 0.019133 0.0 0.292713 14.958653 0.292713 0.426879 806.253906 798.019531   1   2 0.500000    0       44     44     1         2       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 42   1   8   8 0.403087 0.023793 0.0 0.426879 15.385532 0.426879 0.292578 806.253906 798.019531   2   3 0.666667    0       45     46     1         2       31      31 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 42   1   9   9 0.276181 0.016397 0.0 0.292578 15.678110 0.292578 0.421966 806.378906 798.269531   1   1 1.000000    0       47     47     1         1       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 42   1  10  10 0.402549 0.019417 0.0 0.421966 16.100076 0.421966 0.934328 806.378906 798.269531   2   2 1.000000    0       48     49     1         1       33      33 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 42   1  11  11 0.273403 0.660925 0.0 0.934328 17.034404 0.934328 0.574817 808.035156 800.023438   1   2 0.500000    0       50     50     1         2       34      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 42   1  12  12 0.542807 0.032009 0.0 0.574817 17.609221 0.574817 0.000000 808.253906 800.023438   3   4 0.750000    0       51     53     2         3       35      36 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 43   3   1   1 1.098211 0.106876 0.0 1.205087  1.205087 1.205087 0.000000 808.691406 800.523438  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 43   2   1   1 1.048781 0.076869 0.0 1.125650  2.330737 2.330737 1.373882 810.710938 802.609375   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 43   2   2   2 1.270678 0.103204 0.0 1.373882  3.704619 1.373882 1.137646 813.648438 805.480469  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 43   2   3   3 1.051440 0.086206 0.0 1.137646  4.842265 1.137646 0.378123 816.289062 807.996094   9   9 1.000000    9       21     29     2         2        5       6 4.500000 4.500000 4.949747 4.949747 1.099944 1.099944 -1.572828 -1.572828            0            1
 43   2   4   4 0.349119 0.029004 0.0 0.378123  5.220387 0.378123 0.275456 818.230469 809.855469   3   5 0.600000    5       30     32     2         4        7       8 1.500000 1.250000 0.707107 1.060660 0.471405 0.848528  0.228447 -0.043107            0            1
 43   2   5   5 0.250315 0.025141 0.0 0.275456  5.495844 0.275456 0.387025 818.605469 810.355469   2   4 0.500000    4       33     34     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 43   2   6   6 0.344471 0.042554 0.0 0.387025  5.882868 0.387025 0.000000 820.480469 812.109375   3   4 0.750000    4       35     37     3         4       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 43   1   1   1 1.331060 0.075230 0.0 1.406291  3.737027 3.737027 2.771009 811.355469 803.777344   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 43   1   2   2 1.315266 0.081861 0.0 1.397127  6.508037 2.771009 3.009007 812.398438 804.019531   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 43   1   3   3 1.741197 0.130165 0.0 1.871362  9.517044 3.009007 1.794459 817.152344 808.890625   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.492153  0.622260  0.622260            0            0
 43   1   4   4 1.329005 0.087330 0.0 1.416336 11.311503 1.794459 1.328773 817.382812 809.218750   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 43   1   5   5 0.979077 0.074240 0.0 1.053316 12.640275 1.328773 4.315571 818.804688 810.753906   5   5 1.000000    0       31     35     4         4       21      24 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 43   1   6   6 3.638237 0.290310 0.0 3.928547 16.955847 4.315571 0.290872 835.402344 830.175781  17  17 1.000000    0       36     52     5         5       25      29 3.400000 3.400000 3.049590 3.049590 0.896938 0.896938  0.130991  0.130991            0            1
 43   1   7   7 0.275064 0.015807 0.0 0.290872 17.246718 0.290872 0.574298 818.230469 809.855469   1   2 0.500000    0       53     53     1         2       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 43   1   8   8 0.541186 0.033112 0.0 0.574298 17.821017 0.574298 0.293313 818.230469 809.855469   3   5 0.600000    0       54     56     2         3       31      32 1.500000 1.666667 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 43   1   9   9 0.275703 0.017611 0.0 0.293313 18.114330 0.293313 0.434465 818.855469 810.609375   1   2 0.500000    0       57     57     1         2       33      33 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 43   1  10  10 0.414326 0.020138 0.0 0.434465 18.548794 0.434465 0.429260 818.980469 810.609375   2   3 0.666667    0       58     59     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 43   1  11  11 0.409719 0.019541 0.0 0.429260 18.978055 0.429260 0.438554 820.535156 812.363281   2   3 0.666667    0       60     61     1         2       35      35 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 43   1  12  12 0.409828 0.028727 0.0 0.438554 19.416609 0.438554 0.000000 820.730469 812.363281   2   2 1.000000    0       62     63     2         2       36      37 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 44   3   1   1 1.107844 0.104226 0.0 1.212070  1.212070 1.212070 0.000000 820.730469 812.363281  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   2   1   1 1.049094 0.744156 0.0 1.793250  3.005320 3.005320 1.353448 822.839844 814.699219   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 44   2   2   2 1.260383 0.093066 0.0 1.353448  4.358769 1.353448 1.153497 825.371094 816.996094  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 44   2   3   3 1.060338 0.093158 0.0 1.153497  5.512265 1.153497 0.376450 827.601562 819.207031   9   9 1.000000    9       21     29     2         2        5       6 4.500000 4.500000 4.949747 4.949747 1.099944 1.099944 -1.572828 -1.572828            0            1
 44   2   4   4 0.350982 0.025468 0.0 0.376450  5.888715 0.376450 0.276385 830.113281 821.769531   3   5 0.600000    5       30     32     2         4        7       8 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 44   2   5   5 0.251579 0.024805 0.0 0.276385  6.165100 0.276385 0.376260 830.113281 821.769531   2   4 0.500000    4       33     34     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 44   2   6   6 0.340323 0.035937 0.0 0.376260  6.541359 0.376260 0.000000 831.550781 823.269531   3   4 0.750000    4       35     37     3         4       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 44   1   1   1 1.349687 0.083588 0.0 1.433275  4.438595 4.438595 2.753516 824.406250 816.093750   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 44   1   2   2 1.313380 0.086687 0.0 1.400068  7.192112 2.753516 3.032055 825.656250 817.343750   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 44   1   3   3 1.745960 0.132599 0.0 1.878559 10.224167 3.032055 1.806145 829.917969 821.718750   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.492153  0.622260  0.622260            0            0
 44   1   4   4 1.332730 0.096965 0.0 1.429695 12.030312 1.806145 1.322366 828.093750 819.933594   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 44   1   5   5 0.978014 0.067968 0.0 1.045982 13.352678 1.322366 4.305029 829.117188 820.968750   5   5 1.000000    0       31     35     4         4       21      24 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 44   1   6   6 3.634391 0.294378 0.0 3.928769 17.657707 4.305029 0.292981 847.929688 843.007812  17  17 1.000000    0       36     52     5         5       25      29 3.400000 3.400000 3.049590 3.049590 0.896938 0.896938  0.130991  0.130991            0            1
 44   1   7   7 0.277144 0.015836 0.0 0.292981 17.950687 0.292981 0.576412 830.113281 821.769531   1   2 0.500000    0       53     53     1         2       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   1   8   8 0.544672 0.031740 0.0 0.576412 18.527100 0.576412 0.292751 830.113281 821.769531   3   5 0.600000    0       54     56     2         3       31      32 1.500000 1.666667 0.707107 1.414214 0.471405 0.707107  0.228447 -0.271553            0            1
 44   1   9   9 0.276247 0.016504 0.0 0.292751 18.819851 0.292751 0.433421 830.378906 822.269531   1   2 0.500000    0       57     57     1         2       33      33 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 44   1  10  10 0.414147 0.019275 0.0 0.433421 19.253272 0.433421 0.294668 830.378906 822.269531   2   3 0.666667    0       58     59     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   1  11  11 0.278996 0.015672 0.0 0.294668 19.547940 0.294668 0.579387 831.648438 823.519531   1   1 1.000000    0       60     60     1         1       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 44   1  12  12 0.547485 0.031902 0.0 0.579387 20.127327 0.579387 0.000000 831.863281 823.519531   3   4 0.750000    0       61     63     2         3       36      37 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 45   3   1   1 1.098601 0.115922 0.0 1.214523  1.214523 1.214523 0.000000 832.738281 824.519531  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   2   1   1 1.049393 0.082389 0.0 1.131782  2.346305 2.346305 1.362687 835.261719 827.164062   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 45   2   2   2 1.267664 0.095022 0.0 1.362687  3.708992 1.362687 1.439613 838.949219 830.632812  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 45   2   3   3 1.311442 0.128171 0.0 1.439613  5.148605 1.439613 0.272612 842.253906 833.800781  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 45   2   4   4 0.249210 0.023401 0.0 0.272612  5.421216 0.272612 0.277675 843.183594 834.785156   2   3 0.666667    3       32     33     2         3        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 45   2   5   5 0.251026 0.026649 0.0 0.277675  5.698891 0.277675 0.376893 843.535156 835.285156   2   4 0.500000    4       34     35     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 45   2   6   6 0.341250 0.035643 0.0 0.376893  6.075784 0.376893 0.000000 844.738281 836.285156   3   4 0.750000    4       36     38     3         4       11      13 1.000000 1.000000 0.000000 0.763763 0.000000 0.654654  1.000000  0.483485            0            2
 45   1   1   1 1.327324 0.080065 0.0 1.407389  3.753694 3.753694 2.761407 837.785156 829.453125   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 45   1   2   2 1.315746 0.082974 0.0 1.398721  6.515102 2.761407 4.035227 838.375000 829.996094   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 45   1   3   3 1.778003 0.817611 0.0 2.595614 10.550329 4.035227 1.704382 845.031250 836.980469   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.894427 0.464811 0.470751  0.622260  0.603019            0            0
 45   1   4   4 1.326142 0.105629 0.0 1.431771 12.254711 1.704382 2.008607 842.386719 833.937500   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 45   1   5   5 1.613991 0.116941 0.0 1.730933 14.263319 2.008607 3.750203 846.023438 838.160156   8   8 1.000000    0       31     38     5         5       21      25 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 45   1   6   6 3.127063 0.246247 0.0 3.373311 18.013522 3.750203 0.292752 855.238281 848.917969  15  17 0.882353    0       39     53     6         8       26      31 2.500000 2.125000 1.516575 1.505545 0.606630 0.645234  0.484920  0.487372            0            1
 45   1   7   7 0.274634 0.018118 0.0 0.292752 18.306274 0.292752 0.425169 843.238281 834.785156   1   1 1.000000    0       54     54     1         1       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   1   8   8 0.404650 0.020519 0.0 0.425169 18.731443 0.425169 0.293024 843.238281 834.785156   2   3 0.666667    0       55     56     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 45   1   9   9 0.275353 0.017672 0.0 0.293024 19.024468 0.293024 0.432254 843.863281 835.535156   1   2 0.500000    0       57     57     1         2       34      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 45   1  10  10 0.408484 0.023770 0.0 0.432254 19.456722 0.432254 0.427671 843.988281 835.535156   2   3 0.666667    0       58     59     1         2       35      35 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   1  11  11 0.408082 0.019589 0.0 0.427671 19.884393 0.427671 0.436155 844.785156 836.539062   2   3 0.666667    0       60     61     1         2       36      36 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 45   1  12  12 0.407659 0.028496 0.0 0.436155 20.320548 0.436155 0.000000 845.175781 836.789062   2   2 1.000000    0       62     63     2         2       37      38 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 46   3   1   1 1.102034 0.119262 0.0 1.221295  1.221295 1.221295 0.000000 846.425781 838.039062  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   2   1   1 1.055077 0.074111 0.0 1.129188  2.350483 2.350483 1.358897 847.632812 839.187500   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 46   2   2   2 1.259231 0.099665 0.0 1.358897  3.709380 1.358897 1.164463 851.480469 843.105469  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 46   2   3   3 1.064878 0.099584 0.0 1.164463  4.873842 1.164463 0.274492 854.261719 846.007812   9  11 0.818182   11       21     29     2         3        5       6 4.500000 3.666667 4.949747 2.828427 1.099944 0.942809 -1.572828 -0.936752            0            1
 46   2   4   4 0.250868 0.023624 0.0 0.274492  5.148334 0.274492 0.279054 854.816406 846.554688   2   3 0.666667    3       30     31     2         3        7       8 1.000000 1.000000 0.000000 1.060660 0.000000 0.848528  1.000000 -0.043107            0            1
 46   2   5   5 0.254967 0.024088 0.0 0.279054  5.427388 0.279054 0.385711 855.503906 847.304688   2   4 0.500000    4       32     33     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 46   2   6   6 0.340551 0.045160 0.0 0.385711  5.813099 0.385711 0.000000 857.941406 849.808594   3   4 0.750000    4       34     36     3         4       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 46   1   1   1 1.341694 0.082019 0.0 1.423714  3.774197 3.774197 2.757684 849.664062 841.347656   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 46   1   2   2 1.314763 0.084024 0.0 1.398787  6.531880 2.757684 3.006131 850.460938 842.023438   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 46   1   3   3 1.719765 0.121902 0.0 1.841668  9.538011 3.006131 2.420234 856.902344 849.269531   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.492153  0.622260  0.622260            0            0
 46   1   4   4 1.333335 0.812407 0.0 2.145742 11.958245 2.420234 1.343265 854.980469 846.730469   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 46   1   5   5 0.984926 0.079285 0.0 1.064210 13.301509 1.343265 4.589027 856.457031 848.265625   5   5 1.000000    0       31     35     4         4       21      24 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 46   1   6   6 3.890025 0.313290 0.0 4.203316 17.890536 4.589027 0.292411 875.566406 870.101562  18  20 0.900000    0       36     53     5         7       25      29 3.600000 2.857143 2.966479 3.049590 0.824022 0.896938  0.143876  0.130991            0            1
 46   1   7   7 0.274487 0.017924 0.0 0.292411 18.182947 0.292411 0.429881 854.941406 846.804688   1   2 0.500000    0       54     54     1         2       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 46   1   8   8 0.410494 0.019386 0.0 0.429881 18.612827 0.429881 0.294660 854.941406 846.804688   2   2 1.000000    0       55     56     1         1       31      31 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   1   9   9 0.278735 0.015925 0.0 0.294660 18.907487 0.294660 0.431010 855.753906 847.554688   1   2 0.500000    0       57     57     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 46   1  10  10 0.412035 0.018975 0.0 0.431010 19.338497 0.431010 0.429999 855.816406 847.554688   2   3 0.666667    0       58     59     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   1  11  11 0.410543 0.019456 0.0 0.429999 19.768496 0.429999 0.438261 857.566406 849.308594   2   3 0.666667    0       60     61     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 46   1  12  12 0.409754 0.028507 0.0 0.438261 20.206757 0.438261 0.000000 857.566406 849.308594   2   2 1.000000    0       62     63     2         2       35      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 47   3   1   1 1.095767 0.105154 0.0 1.200920  1.200920 1.200920 0.000000 857.742188 849.558594  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   2   1   1 1.051785 0.079904 0.0 1.131689  2.332610 2.332610 1.375200 861.210938 852.906250   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 47   2   2   2 1.262346 0.112853 0.0 1.375200  3.707809 1.375200 1.153341 866.882812 858.648438  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 47   2   3   3 1.053982 0.099359 0.0 1.153341  4.861150 1.153341 0.273791 869.093750 860.980469   9  11 0.818182   11       21     29     2         3        5       6 4.500000 3.666667 4.949747 2.828427 1.099944 0.942809 -1.572828 -0.936752            0            1
 47   2   4   4 0.250426 0.023365 0.0 0.273791  5.134941 0.273791 0.278087 868.398438 860.039062   2   3 0.666667    3       30     31     2         3        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 47   2   5   5 0.252089 0.025997 0.0 0.278087  5.413028 0.278087 0.377014 869.335938 861.039062   2   4 0.500000    4       32     33     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 47   2   6   6 0.340655 0.036360 0.0 0.377014  5.790042 0.377014 0.000000 870.527344 862.296875   3   4 0.750000    4       34     36     3         4       11      13 1.000000 1.000000 0.000000 0.763763 0.000000 0.654654  1.000000  0.483485            0            2
 47   1   1   1 1.332117 0.081948 0.0 1.414065  3.746674 3.746674 2.784321 863.812500 855.449219   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 47   1   2   2 1.320747 0.088375 0.0 1.409122  6.530996 2.784321 3.042917 865.156250 856.992188   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 47   1   3   3 1.756282 0.133293 0.0 1.889576  9.573913 3.042917 1.692660 871.496094 863.472656   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.464811  0.622260  0.622260            0            0
 47   1   4   4 1.330243 0.088626 0.0 1.418869 11.266573 1.692660 1.325606 869.843750 861.503906   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 47   1   5   5 0.976179 0.071340 0.0 1.047519 12.592179 1.325606 2.078227 870.765625 862.488281   5   5 1.000000    0       31     35     4         4       21      24 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 47   1   6   6 1.596109 0.105104 0.0 1.701213 14.670406 2.078227 0.293744 875.414062 868.796875   8  10 0.800000    0       36     43     5         7       25      29 1.600000 1.428571 0.894427 0.547723 0.559017 0.391230  0.603019  0.728611            0            1
 47   1   7   7 0.274537 0.019208 0.0 0.293744 14.964151 0.293744 0.425077 868.433594 860.289062   1   1 1.000000    0       44     44     1         1       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   1   8   8 0.404659 0.020418 0.0 0.425077 15.389228 0.425077 0.291193 868.433594 860.289062   2   3 0.666667    0       45     46     1         2       31      31 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 47   1   9   9 0.273349 0.017844 0.0 0.291193 15.680421 0.291193 0.429996 869.648438 861.289062   1   2 0.500000    0       47     47     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 47   1  10  10 0.406673 0.023323 0.0 0.429996 16.110416 0.429996 0.422507 869.652344 861.292969   2   3 0.666667    0       48     49     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   1  11  11 0.402719 0.019788 0.0 0.422507 16.532923 0.422507 0.433895 870.902344 862.546875   2   3 0.666667    0       50     51     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 47   1  12  12 0.405043 0.028852 0.0 0.433895 16.966819 0.433895 0.000000 870.902344 862.546875   2   2 1.000000    0       52     53     2         2       35      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 48   3   1   1 1.096755 0.117784 0.0 1.214539  1.214539 1.214539 0.000000 872.777344 864.550781  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 48   2   1   1 1.047213 0.081250 0.0 1.128463  2.343002 2.343002 1.357802 874.156250 865.871094   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 48   2   2   2 1.263366 0.094436 0.0 1.357802  3.700804 1.357802 1.147465 876.761719 868.417969  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 48   2   3   3 1.055954 0.091511 0.0 1.147465  4.848269 1.147465 0.271076 880.796875 872.515625   9  11 0.818182   11       21     29     2         3        5       6 4.500000 3.666667 4.949747 2.828427 1.099944 0.942809 -1.572828 -0.936752            0            1
 48   2   4   4 0.247558 0.023518 0.0 0.271076  5.119345 0.271076 0.276088 881.242188 873.312500   2   3 0.666667    3       30     31     2         3        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 48   2   5   5 0.250391 0.025697 0.0 0.276088  5.395433 0.276088 0.377518 881.492188 873.562500   2   4 0.500000    4       32     33     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 48   2   6   6 0.338420 0.039098 0.0 0.377518  5.772951 0.377518 0.000000 882.769531 875.066406   3   4 0.750000    4       34     36     3         4       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 48   1   1   1 1.343346 0.083793 0.0 1.427139  3.770141 3.770141 2.764716 875.953125 867.609375   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 48   1   2   2 1.315530 0.091384 0.0 1.406914  6.534857 2.764716 3.039057 877.000000 868.781250   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 48   1   3   3 1.760715 0.130877 0.0 1.891592  9.573914 3.039057 1.700943 882.453125 874.519531   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.492153  0.622260  0.622260            0            0
 48   1   4   4 1.328078 0.101790 0.0 1.429867 11.274857 1.700943 1.327020 881.265625 872.984375   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 48   1   5   5 0.980352 0.070580 0.0 1.050932 12.601877 1.327020 4.611555 882.304688 874.023438   5   5 1.000000    0       31     35     4         4       21      24 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 48   1   6   6 3.884988 0.349050 0.0 4.234037 17.213432 4.611555 0.293239 902.082031 897.000000  18  20 0.900000    0       36     53     5         7       25      29 3.600000 2.857143 2.880972 3.029026 0.800270 0.890890  0.157417  0.134154            0            1
 48   1   7   7 0.274773 0.018466 0.0 0.293239 17.506671 0.293239 0.424767 881.242188 873.312500   1   1 1.000000    0       54     54     1         1       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 48   1   8   8 0.405002 0.019765 0.0 0.424767 17.931438 0.424767 0.292473 881.242188 873.312500   2   3 0.666667    0       55     56     1         2       31      31 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 48   1   9   9 0.274828 0.017645 0.0 0.292473 18.223911 0.292473 0.428348 881.765625 874.062500   1   2 0.500000    0       57     57     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 48   1  10  10 0.408371 0.019978 0.0 0.428348 18.652259 0.428348 0.431256 881.765625 874.062500   2   3 0.666667    0       58     59     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 48   1  11  11 0.411781 0.019475 0.0 0.431256 19.083515 0.431256 0.439178 882.867188 875.066406   2   3 0.666667    0       60     61     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 48   1  12  12 0.410714 0.028464 0.0 0.439178 19.522693 0.439178 0.000000 882.992188 875.066406   2   2 1.000000    0       62     63     2         2       35      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 49   3   1   1 1.099018 0.115843 0.0 1.214861  1.214861 1.214861 0.000000 884.117188 876.316406  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   2   1   1 1.045865 0.071624 0.0 1.117489  2.332350 2.332350 1.353956 885.558594 877.636719   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 49   2   2   2 1.258709 0.095247 0.0 1.353956  3.686306 1.353956 1.167637 889.894531 881.824219  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 49   2   3   3 1.065466 0.102171 0.0 1.167637  4.853943 1.167637 0.304167 893.757812 885.531250   9  11 0.818182   11       21     29     2         3        5       6 4.500000 3.666667 4.949747 2.828427 1.099944 0.942809 -1.572828 -0.936752            0            1
 49   2   4   4 0.277204 0.026963 0.0 0.304167  5.158111 0.304167 0.300176 895.531250 887.589844   2   3 0.666667    3       30     31     2         3        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 49   2   5   5 0.274156 0.026020 0.0 0.300176  5.458286 0.300176 0.396425 895.531250 887.589844   2   4 0.500000    4       32     33     2         4        9      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 49   2   6   6 0.359654 0.036771 0.0 0.396425  5.854711 0.396425 0.000000 896.781250 888.843750   3   4 0.750000    4       34     36     3         4       11      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 49   1   1   1 1.343170 0.077119 0.0 1.420288  3.752639 3.752639 2.763142 887.523438 879.375000   7   7 1.000000    0        1      7     4         4        1       4 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 49   1   2   2 1.326874 0.082312 0.0 1.409186  6.515780 2.763142 3.040487 889.343750 881.261719   7  10 0.700000    0        8     14     5         7        5       9 1.400000 1.428571 0.547723 0.447214 0.391230 0.344010  0.728611  0.770330            0            0
 49   1   3   3 1.744400 0.128450 0.0 1.872850  9.556267 3.040487 1.763651 895.871094 888.031250   9  10 0.900000    0       15     23     5         6       10      14 1.800000 1.666667 0.836660 0.836660 0.464811 0.492153  0.622260  0.622260            0            0
 49   1   4   4 1.339551 0.119933 0.0 1.459484 11.319919 1.763651 1.363417 894.039062 885.753906   7   7 1.000000    0       24     30     6         6       15      20 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 49   1   5   5 0.984875 0.078366 0.0 1.063242 12.683336 1.363417 4.891370 895.761719 887.535156   5   5 1.000000    0       31     35     4         4       21      24 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 49   1   6   6 4.112090 0.382855 0.0 4.494945 17.574706 4.891370 0.307021 916.046875 911.058594  18  20 0.900000    0       36     53     5         7       25      29 3.600000 2.857143 2.880972 3.029026 0.800270 0.890890  0.157417  0.134154            0            1
 49   1   7   7 0.288245 0.018776 0.0 0.307021 17.881727 0.307021 0.461957 895.531250 887.589844   1   2 0.500000    0       54     54     1         2       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 49   1   8   8 0.440523 0.021434 0.0 0.461957 18.343683 0.461957 0.317719 895.531250 887.589844   2   2 1.000000    0       55     56     1         1       31      31 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   1   9   9 0.301134 0.016585 0.0 0.317719 18.661402 0.317719 0.432280 895.656250 887.839844   1   2 0.500000    0       57     57     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 49   1  10  10 0.413283 0.018997 0.0 0.432280 19.093682 0.432280 0.440177 895.656250 887.839844   2   3 0.666667    0       58     59     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   1  11  11 0.419902 0.020275 0.0 0.440177 19.533859 0.440177 0.452177 896.906250 889.093750   2   3 0.666667    0       60     61     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 49   1  12  12 0.422669 0.029508 0.0 0.452177 19.986036 0.452177 0.000000 897.218750 889.343750   2   2 1.000000    0       62     63     2         2       35      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1

[09-02-2022_19-45-46] INFO :: __main__ >> Saving results to excel file: ./experiments/results/ASH_Excel_2022-02-09_19-24-34_PS2_hcr_online_6_2_min_bound_conc_preach_opt.xlsx

[09-02-2022_19-45-51] INFO :: __main__ >> Saving results to data file: ./experiments/results/ASH_Data_2022-02-09_19-24-34_PS2_hcr_online_6_2_min_bound_conc_preach_opt.dat

[09-02-2022_19-45-51] INFO :: __main__ >> Saving results to figure file: ./experiments/results/ASH_Figure_2022-02-09_19-24-34_PS2_hcr_online_6_2_min_bound_conc_preach_opt.png

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=5.789999999999999.

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[09-02-2022_19-45-51] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=5.789999999999999 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[09-02-2022_19-45-54] INFO :: __main__ >> Overall time: Real = 1279.3790878, Process = 1325.625

[09-02-2022_19-45-54] INFO :: __main__ >> Exiting with code 0

