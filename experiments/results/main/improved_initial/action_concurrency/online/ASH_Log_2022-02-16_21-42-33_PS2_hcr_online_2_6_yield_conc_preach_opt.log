[16-02-2022_21-58-43] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=10, start_step=12, end_step=13, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.9125271000002613, solving_time=0.0884365000000571, total_time=2.0009636000003184, memory=Memory(rss=733.234375, vms=723.79296875), step_range=range(3, 14), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.214171800000031, solving_time=0.013425099999949452, total_time=0.22759689999998045, memory=Memory(rss=733.234375, vms=723.79296875), step_range=range(13, 14), clingo_stats={'problem': {'lp': {'atoms': 37918.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 115656.0, 'bodies_tr': 115656.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2070.0, 'count_bodies_tr': 2070.0, 'sccs': 216.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4221.0, 'rules': 161804.0, 'rules_normal': 159476.0, 'rules_choice': 2298.0, 'rules_minimize': 30.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 161804.0, 'rules_tr_normal': 159476.0, 'rules_tr_choice': 2298.0, 'rules_tr_minimize': 30.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 86456.0, 'eqs_atom': 19944.0, 'eqs_body': 4101.0, 'eqs_other': 62411.0}, 'lpStep': {'atoms': 3400.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12354.0, 'bodies_tr': 12354.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 16545.0, 'rules_normal': 16347.0, 'rules_choice': 195.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 16545.0, 'rules_tr_normal': 16347.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7247.0, 'eqs_atom': 1783.0, 'eqs_body': 66.0, 'eqs_other': 5398.0}, 'generator': {'vars': 16158.0, 'vars_eliminated': 0.0, 'vars_frozen': 9671.0, 'constraints': 3540.0, 'constraints_binary': 72981.0, 'constraints_ternary': 19461.0, 'acyc_edges': 0.0, 'complexity': 96556.0}}, 'solving': {'solvers': {'choices': 86.0, 'conflicts': 42.0, 'conflicts_analyzed': 29.0, 'restarts': 0.0, 'restarts_last': 9.0, 'extra': {'domain_choices': 1.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 24.0, 'distributed_sum_lbd': 60.0, 'integrated': 90.0, 'lemmas': 148.0, 'lits_learnt': 1368.0, 'lemmas_binary': 34.0, 'lemmas_ternary': 29.0, 'cpu_time': 0.0, 'integrated_imps': 32.0, 'integrated_jumps': 30.0, 'guiding_paths_lits': 270.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 28.0, 'lemmas_loop': 33.0, 'lemmas_other': 87.0, 'lits_conflict': 300.0, 'lits_loop': 311.0, 'lits_other': 757.0, 'jumps': {'jumps': 29.0, 'jumps_bounded': 6.0, 'levels': 67.0, 'levels_bounded': 11.0, 'max': 10.0, 'max_executed': 10.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 10.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf, inf], 'lower': [7.0, 0.0, -64.0], 'concurrency': 6.0, 'winner': 2.0, 'times': {'total': 0.23004722595214844, 'cpu': 0.21875, 'solve': 0.0039997100830078125, 'unsat': 0.0039997100830078125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.051511764526367, 'cpu': 2.03125, 'solve': 0.025079727172851562, 'unsat': 0.0220794677734375, 'sat': 0.0}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 344.0, 'conflicts': 184.0, 'conflicts_analyzed': 115.0, 'restarts': 0.0, 'restarts_last': 9.0, 'extra': {'domain_choices': 6.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 104.0, 'distributed_sum_lbd': 262.0, 'integrated': 350.0, 'lemmas': 833.0, 'lits_learnt': 6183.0, 'lemmas_binary': 143.0, 'lemmas_ternary': 82.0, 'cpu_time': 0.0, 'integrated_imps': 108.0, 'integrated_jumps': 110.0, 'guiding_paths_lits': 1506.0, 'guiding_paths': 83.0, 'splits': 0.0, 'lemmas_conflict': 107.0, 'lemmas_loop': 386.0, 'lemmas_other': 340.0, 'lits_conflict': 835.0, 'lits_loop': 3140.0, 'lits_other': 2208.0, 'jumps': {'jumps': 115.0, 'jumps_bounded': 27.0, 'levels': 388.0, 'levels_bounded': 163.0, 'max': 28.0, 'max_executed': 27.0, 'max_bounded': 26.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =      5 : Maximum =    200

[16-02-2022_21-58-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(3)]), ('plan_module', [Number(14), Number(3), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(14), Number(3), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('conformance_module', [Number(14), Number(3), Number(3), Number(4), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.219374s.

[16-02-2022_21-58-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.016178s with result Unsatisfiable.

[16-02-2022_21-58-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.2355522000000292, Incremental time limit = None
Running cumulative time = 2.2365158000003476, Cumulative time limit = 1800
Used memory = (RSS = 737.304688Mb, VMS = 729.871094Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-44] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=11, start_step=13, end_step=14, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=2.1319015000002537, solving_time=0.10461430000009386, total_time=2.2365158000003476, memory=Memory(rss=737.3046875, vms=729.87109375), step_range=range(3, 15), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.21937439999999242, solving_time=0.01617780000003677, total_time=0.2355522000000292, memory=Memory(rss=737.3046875, vms=729.87109375), step_range=range(14, 15), clingo_stats={'problem': {'lp': {'atoms': 41322.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 128017.0, 'bodies_tr': 128017.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2271.0, 'count_bodies_tr': 2271.0, 'sccs': 241.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4815.0, 'rules': 178357.0, 'rules_normal': 175831.0, 'rules_choice': 2493.0, 'rules_minimize': 33.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 178357.0, 'rules_tr_normal': 175831.0, 'rules_tr_choice': 2493.0, 'rules_tr_minimize': 33.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 93721.0, 'eqs_atom': 21731.0, 'eqs_body': 4167.0, 'eqs_other': 67823.0}, 'lpStep': {'atoms': 3404.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12361.0, 'bodies_tr': 12361.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 16553.0, 'rules_normal': 16355.0, 'rules_choice': 195.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 16553.0, 'rules_tr_normal': 16355.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7265.0, 'eqs_atom': 1787.0, 'eqs_body': 66.0, 'eqs_other': 5412.0}, 'generator': {'vars': 18528.0, 'vars_eliminated': 0.0, 'vars_frozen': 11022.0, 'constraints': 4159.0, 'constraints_binary': 85685.0, 'constraints_ternary': 23204.0, 'acyc_edges': 0.0, 'complexity': 113706.0}}, 'solving': {'solvers': {'choices': 345.0, 'conflicts': 86.0, 'conflicts_analyzed': 72.0, 'restarts': 0.0, 'restarts_last': 29.0, 'extra': {'domain_choices': 9.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 68.0, 'distributed_sum_lbd': 173.0, 'integrated': 339.0, 'lemmas': 538.0, 'lits_learnt': 8296.0, 'lemmas_binary': 84.0, 'lemmas_ternary': 55.0, 'cpu_time': 0.0, 'integrated_imps': 63.0, 'integrated_jumps': 122.0, 'guiding_paths_lits': 294.0, 'guiding_paths': 15.0, 'splits': 0.0, 'lemmas_conflict': 71.0, 'lemmas_loop': 142.0, 'lemmas_other': 325.0, 'lits_conflict': 1202.0, 'lits_loop': 1266.0, 'lits_other': 5828.0, 'jumps': {'jumps': 72.0, 'jumps_bounded': 5.0, 'levels': 368.0, 'levels_bounded': 149.0, 'max': 53.0, 'max_executed': 50.0, 'max_bounded': 50.0}}}}, 'summary': {'call': 11.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf, inf], 'lower': [9.0, 0.0, -76.0], 'concurrency': 6.0, 'winner': 2.0, 'times': {'total': 0.23705101013183594, 'cpu': 0.234375, 'solve': 0.0059909820556640625, 'unsat': 0.0059909820556640625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.288562774658203, 'cpu': 2.265625, 'solve': 0.031070709228515625, 'unsat': 0.028070449829101562, 'sat': 0.0}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 689.0, 'conflicts': 270.0, 'conflicts_analyzed': 187.0, 'restarts': 0.0, 'restarts_last': 29.0, 'extra': {'domain_choices': 15.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 172.0, 'distributed_sum_lbd': 435.0, 'integrated': 689.0, 'lemmas': 1371.0, 'lits_learnt': 14479.0, 'lemmas_binary': 227.0, 'lemmas_ternary': 137.0, 'cpu_time': 0.0, 'integrated_imps': 171.0, 'integrated_jumps': 232.0, 'guiding_paths_lits': 1800.0, 'guiding_paths': 98.0, 'splits': 0.0, 'lemmas_conflict': 178.0, 'lemmas_loop': 528.0, 'lemmas_other': 665.0, 'lits_conflict': 2037.0, 'lits_loop': 4406.0, 'lits_other': 8036.0, 'jumps': {'jumps': 187.0, 'jumps_bounded': 32.0, 'levels': 756.0, 'levels_bounded': 312.0, 'max': 53.0, 'max_executed': 50.0, 'max_bounded': 50.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =      5 : Maximum =    200

[16-02-2022_21-58-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(3)]), ('plan_module', [Number(15), Number(3), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(15), Number(3), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('conformance_module', [Number(15), Number(3), Number(3), Number(4), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.220256s.

[16-02-2022_21-58-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.033163s with result Satisfiable.

[16-02-2022_21-58-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.25341869999999744, Incremental time limit = None
Running cumulative time = 2.489934500000345, Cumulative time limit = 1800
Used memory = (RSS = 738.179688Mb, VMS = 730.128906Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.352157s, Solving = 0.137778s, Total = 2.489935s, Memory = (RSS = 738.179688Mb, VMS = 730.128906Mb), Step range = [3-15]), Calls = 12
Final Model :: Total atoms = 8240, Cost = (13, 0, 0), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[16-02-2022_21-58-44] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=12, start_step=14, end_step=15, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.352157000000261, solving_time=0.13777750000008382, total_time=2.489934500000345, memory=Memory(rss=738.1796875, vms=730.12890625), step_range=range(3, 16), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2202555000000075, solving_time=0.033163199999989956, total_time=0.25341869999999744, memory=Memory(rss=738.1796875, vms=730.12890625), step_range=range(15, 16), clingo_stats={'problem': {'lp': {'atoms': 44730.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 140381.0, 'bodies_tr': 140381.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2472.0, 'count_bodies_tr': 2472.0, 'sccs': 266.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5409.0, 'rules': 194916.0, 'rules_normal': 192192.0, 'rules_choice': 2688.0, 'rules_minimize': 36.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 194916.0, 'rules_tr_normal': 192192.0, 'rules_tr_choice': 2688.0, 'rules_tr_minimize': 36.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 100992.0, 'eqs_atom': 23518.0, 'eqs_body': 4233.0, 'eqs_other': 73241.0}, 'lpStep': {'atoms': 3408.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12364.0, 'bodies_tr': 12364.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 16559.0, 'rules_normal': 16361.0, 'rules_choice': 195.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 16559.0, 'rules_tr_normal': 16361.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7271.0, 'eqs_atom': 1787.0, 'eqs_body': 66.0, 'eqs_other': 5418.0}, 'generator': {'vars': 20898.0, 'vars_eliminated': 0.0, 'vars_frozen': 12373.0, 'constraints': 4769.0, 'constraints_binary': 98082.0, 'constraints_ternary': 26895.0, 'acyc_edges': 0.0, 'complexity': 130488.0}}, 'solving': {'solvers': {'choices': 4041.0, 'conflicts': 160.0, 'conflicts_analyzed': 144.0, 'restarts': 0.0, 'restarts_last': 14.0, 'extra': {'domain_choices': 550.0, 'models': 1.0, 'models_level': 198.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 123.0, 'distributed_sum_lbd': 289.0, 'integrated': 574.0, 'lemmas': 1020.0, 'lits_learnt': 8733.0, 'lemmas_binary': 186.0, 'lemmas_ternary': 113.0, 'cpu_time': 0.109375, 'integrated_imps': 204.0, 'integrated_jumps': 1583.0, 'guiding_paths_lits': 318.0, 'guiding_paths': 19.0, 'splits': 0.0, 'lemmas_conflict': 143.0, 'lemmas_loop': 305.0, 'lemmas_other': 572.0, 'lits_conflict': 1334.0, 'lits_loop': 2580.0, 'lits_other': 4819.0, 'jumps': {'jumps': 144.0, 'jumps_bounded': 24.0, 'levels': 3515.0, 'levels_bounded': 1894.0, 'max': 542.0, 'max_executed': 542.0, 'max_bounded': 538.0}}}}, 'summary': {'call': 12.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [13.0, 0.0, 0.0], 'lower': [13.0, 0.0, 0.0], 'concurrency': 6.0, 'winner': 2.0, 'times': {'total': 0.2560558319091797, 'cpu': 0.34375, 'solve': 0.022996902465820312, 'unsat': 0.01000213623046875, 'sat': 0.012994766235351562}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 2.544618606567383, 'cpu': 2.609375, 'solve': 0.05406761169433594, 'unsat': 0.03807258605957031, 'sat': 0.012994766235351562}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 4730.0, 'conflicts': 430.0, 'conflicts_analyzed': 331.0, 'restarts': 0.0, 'restarts_last': 29.0, 'extra': {'domain_choices': 565.0, 'models': 2.0, 'models_level': 199.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 295.0, 'distributed_sum_lbd': 724.0, 'integrated': 1263.0, 'lemmas': 2391.0, 'lits_learnt': 23212.0, 'lemmas_binary': 413.0, 'lemmas_ternary': 250.0, 'cpu_time': 0.109375, 'integrated_imps': 375.0, 'integrated_jumps': 1815.0, 'guiding_paths_lits': 2118.0, 'guiding_paths': 117.0, 'splits': 0.0, 'lemmas_conflict': 321.0, 'lemmas_loop': 833.0, 'lemmas_other': 1237.0, 'lits_conflict': 3371.0, 'lits_loop': 6986.0, 'lits_other': 12855.0, 'jumps': {'jumps': 331.0, 'jumps_bounded': 56.0, 'levels': 4271.0, 'levels_bounded': 2206.0, 'max': 542.0, 'max_executed': 542.0, 'max_bounded': 538.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-44] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{3: 15}

[16-02-2022_21-58-44] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 4 achieved :: Progression >> total requested sgoals = 2, current total achieved sgoals = 2 (100.00% solved)

[16-02-2022_21-58-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(4, 15)', truth=True, inc_range=None)

[16-02-2022_21-58-44] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 4, step = 15]:
sub_goal(2, talos, actuate(manipulator_arm_1,puzzle_room_door), configuration(puzzle_room_door), open, 4)
sub_goal(2, talos, actuate(manipulator_arm_2,store_room_door), configuration(store_room_door), open, 4)

[16-02-2022_21-58-44] DEBUG :: ASH Planner Main #1 >> Reaction at search length 15:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[16-02-2022_21-58-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =      5 : Maximum =    200

[16-02-2022_21-58-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(3)]), ('plan_module', [Number(16), Number(3), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(3), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('conformance_module', [Number(16), Number(3), Number(3), Number(4), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.222519s.

[16-02-2022_21-58-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 16: original = External(symbol='current_last_sgoals(4, 15)', truth=True, inc_range=None), conversion = current_last_sgoals(4,15).

[16-02-2022_21-58-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.020558s with result Unsatisfiable.

[16-02-2022_21-58-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.24307680000003984, Incremental time limit = None
Running cumulative time = 2.733011300000385, Cumulative time limit = 1800
Used memory = (RSS = 739.058594Mb, VMS = 730.378906Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-44] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=13, start_step=15, end_step=16, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=2.5746757000002845, solving_time=0.15833560000010038, total_time=2.733011300000385, memory=Memory(rss=739.05859375, vms=730.37890625), step_range=range(3, 17), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.22251870000002327, solving_time=0.020558100000016566, total_time=0.24307680000003984, memory=Memory(rss=739.05859375, vms=730.37890625), step_range=range(16, 17), clingo_stats={'problem': {'lp': {'atoms': 48138.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 152752.0, 'bodies_tr': 152752.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2673.0, 'count_bodies_tr': 2673.0, 'sccs': 291.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6003.0, 'rules': 211481.0, 'rules_normal': 208559.0, 'rules_choice': 2883.0, 'rules_minimize': 39.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 211481.0, 'rules_tr_normal': 208559.0, 'rules_tr_choice': 2883.0, 'rules_tr_minimize': 39.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 108281.0, 'eqs_atom': 25309.0, 'eqs_body': 4299.0, 'eqs_other': 78673.0}, 'lpStep': {'atoms': 3408.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12371.0, 'bodies_tr': 12371.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 16565.0, 'rules_normal': 16367.0, 'rules_choice': 195.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 16565.0, 'rules_tr_normal': 16367.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7289.0, 'eqs_atom': 1791.0, 'eqs_body': 66.0, 'eqs_other': 5432.0}, 'generator': {'vars': 23268.0, 'vars_eliminated': 0.0, 'vars_frozen': 13724.0, 'constraints': 5196.0, 'constraints_binary': 107712.0, 'constraints_ternary': 29898.0, 'acyc_edges': 0.0, 'complexity': 143616.0}}, 'solving': {'solvers': {'choices': 2358.0, 'conflicts': 63.0, 'conflicts_analyzed': 48.0, 'restarts': 0.0, 'restarts_last': 17.0, 'extra': {'domain_choices': 35.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 45.0, 'distributed_sum_lbd': 84.0, 'integrated': 211.0, 'lemmas': 354.0, 'lits_learnt': 2195.0, 'lemmas_binary': 35.0, 'lemmas_ternary': 123.0, 'cpu_time': 0.046875, 'integrated_imps': 156.0, 'integrated_jumps': 1001.0, 'guiding_paths_lits': 342.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 46.0, 'lemmas_loop': 121.0, 'lemmas_other': 187.0, 'lits_conflict': 284.0, 'lits_loop': 1103.0, 'lits_other': 808.0, 'jumps': {'jumps': 48.0, 'jumps_bounded': 14.0, 'levels': 1930.0, 'levels_bounded': 583.0, 'max': 97.0, 'max_executed': 90.0, 'max_bounded': 58.0}}}}, 'summary': {'call': 13.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf, inf], 'lower': [10.0, 0.0, -94.0], 'concurrency': 6.0, 'winner': 5.0, 'times': {'total': 0.2470531463623047, 'cpu': 0.28125, 'solve': 0.0099945068359375, 'unsat': 0.0099945068359375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.7916717529296875, 'cpu': 2.890625, 'solve': 0.06406211853027344, 'unsat': 0.04806709289550781, 'sat': 0.012994766235351562}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 7088.0, 'conflicts': 493.0, 'conflicts_analyzed': 379.0, 'restarts': 0.0, 'restarts_last': 29.0, 'extra': {'domain_choices': 600.0, 'models': 2.0, 'models_level': 199.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 340.0, 'distributed_sum_lbd': 808.0, 'integrated': 1474.0, 'lemmas': 2745.0, 'lits_learnt': 25407.0, 'lemmas_binary': 448.0, 'lemmas_ternary': 373.0, 'cpu_time': 0.15625, 'integrated_imps': 531.0, 'integrated_jumps': 2816.0, 'guiding_paths_lits': 2460.0, 'guiding_paths': 133.0, 'splits': 0.0, 'lemmas_conflict': 367.0, 'lemmas_loop': 954.0, 'lemmas_other': 1424.0, 'lits_conflict': 3655.0, 'lits_loop': 8089.0, 'lits_other': 13663.0, 'jumps': {'jumps': 379.0, 'jumps_bounded': 70.0, 'levels': 6201.0, 'levels_bounded': 2789.0, 'max': 542.0, 'max_executed': 542.0, 'max_bounded': 538.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-44] DEBUG :: ASH Planner Main #1 >> Reaction at search length 16:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[16-02-2022_21-58-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =      5 : Maximum =    200

[16-02-2022_21-58-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(3)]), ('plan_module', [Number(17), Number(3), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(3), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(3), Number(3), Number(4), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.225108s.

[16-02-2022_21-58-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.055325s with result Satisfiable.

[16-02-2022_21-58-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.280433099999982, Incremental time limit = None
Running cumulative time = 3.013444400000367, Cumulative time limit = 1800
Used memory = (RSS = 740.492188Mb, VMS = 730.886719Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.799784s, Solving = 0.213660s, Total = 3.013444s, Memory = (RSS = 740.492188Mb, VMS = 730.886719Mb), Step range = [3-17]), Calls = 14
Final Model :: Total atoms = 8987, Cost = (15, 0, 0), Optimality proven = False, Number = 3, Thread ID = 2, Model type = ModelType.StableModel

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=14, start_step=16, end_step=17, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.7997840000002725, solving_time=0.21366040000009434, total_time=3.013444400000367, memory=Memory(rss=740.4921875, vms=730.88671875), step_range=range(3, 18), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.22510829999998805, solving_time=0.05532479999999396, total_time=0.280433099999982, memory=Memory(rss=740.4921875, vms=730.88671875), step_range=range(17, 18), clingo_stats={'problem': {'lp': {'atoms': 51550.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 165130.0, 'bodies_tr': 165130.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2874.0, 'count_bodies_tr': 2874.0, 'sccs': 316.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6597.0, 'rules': 228054.0, 'rules_normal': 224934.0, 'rules_choice': 3078.0, 'rules_minimize': 42.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 228054.0, 'rules_tr_normal': 224934.0, 'rules_tr_choice': 3078.0, 'rules_tr_minimize': 42.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 115588.0, 'eqs_atom': 27104.0, 'eqs_body': 4365.0, 'eqs_other': 84119.0}, 'lpStep': {'atoms': 3412.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12378.0, 'bodies_tr': 12378.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 16573.0, 'rules_normal': 16375.0, 'rules_choice': 195.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 16573.0, 'rules_tr_normal': 16375.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7307.0, 'eqs_atom': 1795.0, 'eqs_body': 66.0, 'eqs_other': 5446.0}, 'generator': {'vars': 25638.0, 'vars_eliminated': 0.0, 'vars_frozen': 15075.0, 'constraints': 5807.0, 'constraints_binary': 120345.0, 'constraints_ternary': 33581.0, 'acyc_edges': 0.0, 'complexity': 160627.0}}, 'solving': {'solvers': {'choices': 3281.0, 'conflicts': 286.0, 'conflicts_analyzed': 269.0, 'restarts': 0.0, 'restarts_last': 59.0, 'extra': {'domain_choices': 205.0, 'models': 3.0, 'models_level': 872.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 193.0, 'distributed_sum_lbd': 522.0, 'integrated': 952.0, 'lemmas': 1980.0, 'lits_learnt': 27127.0, 'lemmas_binary': 216.0, 'lemmas_ternary': 187.0, 'cpu_time': 0.1875, 'integrated_imps': 185.0, 'integrated_jumps': 885.0, 'guiding_paths_lits': 366.0, 'guiding_paths': 19.0, 'splits': 0.0, 'lemmas_conflict': 267.0, 'lemmas_loop': 795.0, 'lemmas_other': 918.0, 'lits_conflict': 5667.0, 'lits_loop': 7181.0, 'lits_other': 14279.0, 'jumps': {'jumps': 269.0, 'jumps_bounded': 19.0, 'levels': 2587.0, 'levels_bounded': 1440.0, 'max': 393.0, 'max_executed': 393.0, 'max_bounded': 352.0}}}}, 'summary': {'call': 14.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [15.0, 0.0, 0.0], 'lower': [15.0, 0.0, 0.0], 'concurrency': 6.0, 'winner': 2.0, 'times': {'total': 0.28306007385253906, 'cpu': 0.453125, 'solve': 0.04300117492675781, 'unsat': 0.013002395629882812, 'sat': 0.013994216918945312}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 3.0747318267822266, 'cpu': 3.34375, 'solve': 0.10706329345703125, 'unsat': 0.061069488525390625, 'sat': 0.026988983154296875}, 'models': {'enumerated': 5.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 10369.0, 'conflicts': 779.0, 'conflicts_analyzed': 648.0, 'restarts': 0.0, 'restarts_last': 59.0, 'extra': {'domain_choices': 805.0, 'models': 5.0, 'models_level': 1071.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 533.0, 'distributed_sum_lbd': 1330.0, 'integrated': 2426.0, 'lemmas': 4725.0, 'lits_learnt': 52534.0, 'lemmas_binary': 664.0, 'lemmas_ternary': 560.0, 'cpu_time': 0.34375, 'integrated_imps': 716.0, 'integrated_jumps': 3701.0, 'guiding_paths_lits': 2826.0, 'guiding_paths': 152.0, 'splits': 0.0, 'lemmas_conflict': 634.0, 'lemmas_loop': 1749.0, 'lemmas_other': 2342.0, 'lits_conflict': 9322.0, 'lits_loop': 15270.0, 'lits_other': 27942.0, 'jumps': {'jumps': 648.0, 'jumps_bounded': 89.0, 'levels': 8788.0, 'levels_bounded': 4229.0, 'max': 542.0, 'max_executed': 542.0, 'max_bounded': 538.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{3: 15, 4: 17}

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 5 achieved :: Progression >> total requested sgoals = 2, current total achieved sgoals = 3 (150.00% solved)

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 4 was achieved successfully.

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.238218s, Solving = 0.008615s, Total = 0.246833s, Memory = (RSS = 728.523438Mb, VMS = 718.718750Mb), Step range = [3-4]
2 : Statistics :: Grounding = 0.126976s, Solving = 0.003291s, Total = 0.130267s, Memory = (RSS = 728.523438Mb, VMS = 718.718750Mb), Step range = [5-5]
3 : Statistics :: Grounding = 0.144051s, Solving = 0.004247s, Total = 0.148299s, Memory = (RSS = 728.523438Mb, VMS = 718.718750Mb), Step range = [6-6]
4 : Statistics :: Grounding = 0.170831s, Solving = 0.005503s, Total = 0.176334s, Memory = (RSS = 728.523438Mb, VMS = 718.718750Mb), Step range = [7-7]
5 : Statistics :: Grounding = 0.184698s, Solving = 0.007446s, Total = 0.192143s, Memory = (RSS = 728.523438Mb, VMS = 718.718750Mb), Step range = [8-8]
6 : Statistics :: Grounding = 0.201183s, Solving = 0.009883s, Total = 0.211067s, Memory = (RSS = 728.523438Mb, VMS = 718.718750Mb), Step range = [9-9]
7 : Statistics :: Grounding = 0.198947s, Solving = 0.010279s, Total = 0.209226s, Memory = (RSS = 729.363281Mb, VMS = 719.832031Mb), Step range = [10-10]
8 : Statistics :: Grounding = 0.216320s, Solving = 0.012512s, Total = 0.228832s, Memory = (RSS = 730.800781Mb, VMS = 721.054688Mb), Step range = [11-11]
9 : Statistics :: Grounding = 0.217132s, Solving = 0.013236s, Total = 0.230368s, Memory = (RSS = 732.546875Mb, VMS = 723.539062Mb), Step range = [12-12]
10 : Statistics :: Grounding = 0.214172s, Solving = 0.013425s, Total = 0.227597s, Memory = (RSS = 733.234375Mb, VMS = 723.792969Mb), Step range = [13-13]
11 : Statistics :: Grounding = 0.219374s, Solving = 0.016178s, Total = 0.235552s, Memory = (RSS = 737.304688Mb, VMS = 729.871094Mb), Step range = [14-14]
12 : Statistics :: Grounding = 0.220256s, Solving = 0.033163s, Total = 0.253419s, Memory = (RSS = 738.179688Mb, VMS = 730.128906Mb), Step range = [15-15]
13 : Statistics :: Grounding = 0.222519s, Solving = 0.020558s, Total = 0.243077s, Memory = (RSS = 739.058594Mb, VMS = 730.378906Mb), Step range = [16-16]
14 : Statistics :: Grounding = 0.225108s, Solving = 0.055325s, Total = 0.280433s, Memory = (RSS = 740.492188Mb, VMS = 730.886719Mb), Step range = [17-17]

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 3.013444s due to: External generator exit.

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2}
Sub-goal achievement steps: {1: 2, 2: 3}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 16, 4: 17}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 4, Last requested goal index = 4, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.799784s, Solving = 0.213660s, Total = 3.013444s, Memory = (RSS = 740.492188Mb, VMS = 730.886719Mb), Step range = [3-17]), Calls = 14
Model :: Total atoms = 8987, Cost = (15, 0, 0), Optimality proven = False, Number = 3, Thread ID = 2, Model type = ModelType.StableModel

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 14 :: Actions = 15                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 4:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 10:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 11:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 12:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 16:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> Monolevel problem 2 at level 1 solved.

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> Online planning increment 2 finished.

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 1 : Total constraining sub-goal stages = 13 : Goals achieved = 6 : Goals unachieved = 7 : Complete = False
Level = 1 : Solved problems = 2 : Total constraining sub-goal stages = 16 : Goals achieved = 4 : Goals unachieved = 12 : Complete = False

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 2.

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 3 by method ground-first is [1-1].

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 3 at level 1:
Total Templated Partial Problems = 6, Problem Range = [1-6], Size = 16, Sub-goal Stage Range = [1-16]
Division points [total=5] : [(Index = 2, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 4, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 7, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 10, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 13, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [5-7]

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [5-7], problem number = 3, increment number = 3

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 5)
	('last_sgoals', 7)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x000002960D109A60>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [5-7] : Concurrency enabled : Minimum search length bound disabled with value 19

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 5
last_sgoals = 7
start_step = 17
is_initial = False
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 19

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[16-02-2022_21-58-45] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[16-02-2022_21-58-45] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 17 as problem start state.

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(puzzle_room_door_handle_outer)', 'S': 17})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 17})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 17})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 17})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 17})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 17})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 17})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'puzzle_room_door_handle_outer', 'S': 17})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 17})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'puzzle_room_door_handle_outer', 'S': 17})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 17})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 17})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 17})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 17})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,1)', 'S': 17})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 17})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(store_room,0)', 'S': 17})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(hallway,2)', 'S': 17})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(hallway,2)', 'S': 17})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(hallway,2)', 'S': 17})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(hallway,2)', 'S': 17})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(hallway,2)', 'S': 17})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(hallway,2)', 'S': 17})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 17})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 17})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 17})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(hallway,2)', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 17})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 17})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 17})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 17})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 17})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 17})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 17})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 17})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 17})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'S': 17})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 17})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 17})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 17})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 17})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 17})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'puzzle_room_door_handle_outer', 'S': 17})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 17})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 17})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 17})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 17})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 17})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 17})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 17})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'hallway', 'S': 17})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'hallway', 'S': 17})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 17})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'hallway', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 17})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 17})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 17})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 17})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 17})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 17})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 17})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 17})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 17})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'S': 17})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 17})

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 17).
holds(1, complete_tower(red,puzzle_room_table), false, 17).
holds(1, configuration(manipulator_end_1), aligned_with(puzzle_room_door_handle_outer), 17).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 17).
holds(1, configuration(manipulator_limb_1), extended, 17).
holds(1, configuration(manipulator_limb_2), retracted, 17).
holds(1, configuration(puzzle_room_door), open, 17).
holds(1, configuration(starting_room_door), closed, 17).
holds(1, configuration(store_room_door), open, 17).
holds(1, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 17).
holds(1, grasping(manipulator_arm_2), nothing, 17).
holds(1, grasping(manipulator_end_1), puzzle_room_door_handle_outer, 17).
holds(1, grasping(manipulator_end_2), nothing, 17).
holds(1, in((block,1)), (puzzle_room,1), 17).
holds(1, in((block,2)), (puzzle_room,1), 17).
holds(1, in((block,3)), (puzzle_room,1), 17).
holds(1, in((block,4)), (puzzle_room,1), 17).
holds(1, in((block,5)), (store_room,0), 17).
holds(1, in((block,6)), (store_room,0), 17).
holds(1, in(manipulator_arm_1), (hallway,2), 17).
holds(1, in(manipulator_arm_2), (hallway,2), 17).
holds(1, in(manipulator_end_1), (hallway,2), 17).
holds(1, in(manipulator_end_2), (hallway,2), 17).
holds(1, in(manipulator_limb_1), (hallway,2), 17).
holds(1, in(manipulator_limb_2), (hallway,2), 17).
holds(1, in(puzzle_room_table), (puzzle_room,1), 17).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 17).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 17).
holds(1, in(talos), (hallway,2), 17).
holds(1, in_tower((block,1),(block,1)), true, 17).
holds(1, in_tower((block,1),(block,2)), false, 17).
holds(1, in_tower((block,1),(block,3)), true, 17).
holds(1, in_tower((block,1),(block,4)), false, 17).
holds(1, in_tower((block,1),(block,5)), false, 17).
holds(1, in_tower((block,1),(block,6)), false, 17).
holds(1, in_tower((block,2),(block,1)), false, 17).
holds(1, in_tower((block,2),(block,2)), true, 17).
holds(1, in_tower((block,2),(block,3)), false, 17).
holds(1, in_tower((block,2),(block,4)), true, 17).
holds(1, in_tower((block,2),(block,5)), false, 17).
holds(1, in_tower((block,2),(block,6)), false, 17).
holds(1, in_tower((block,3),(block,1)), false, 17).
holds(1, in_tower((block,3),(block,2)), false, 17).
holds(1, in_tower((block,3),(block,3)), false, 17).
holds(1, in_tower((block,3),(block,4)), false, 17).
holds(1, in_tower((block,3),(block,5)), false, 17).
holds(1, in_tower((block,3),(block,6)), false, 17).
holds(1, in_tower((block,4),(block,1)), false, 17).
holds(1, in_tower((block,4),(block,2)), false, 17).
holds(1, in_tower((block,4),(block,3)), false, 17).
holds(1, in_tower((block,4),(block,4)), false, 17).
holds(1, in_tower((block,4),(block,5)), false, 17).
holds(1, in_tower((block,4),(block,6)), false, 17).
holds(1, in_tower((block,5),(block,1)), false, 17).
holds(1, in_tower((block,5),(block,2)), false, 17).
holds(1, in_tower((block,5),(block,3)), false, 17).
holds(1, in_tower((block,5),(block,4)), false, 17).
holds(1, in_tower((block,5),(block,5)), false, 17).
holds(1, in_tower((block,5),(block,6)), false, 17).
holds(1, in_tower((block,6),(block,1)), false, 17).
holds(1, in_tower((block,6),(block,2)), false, 17).
holds(1, in_tower((block,6),(block,3)), false, 17).
holds(1, in_tower((block,6),(block,4)), false, 17).
holds(1, in_tower((block,6),(block,5)), false, 17).
holds(1, in_tower((block,6),(block,6)), false, 17).
holds(1, on((block,1)), puzzle_room_table_left, 17).
holds(1, on((block,2)), puzzle_room_table_right, 17).
holds(1, on((block,3)), (block,1), 17).
holds(1, on((block,4)), (block,2), 17).
holds(1, on((block,5)), nothing, 17).
holds(1, on((block,6)), nothing, 17).
holds(1, tower_base((block,1),puzzle_room_table), true, 17).
holds(1, tower_base((block,2),puzzle_room_table), true, 17).
holds(1, tower_base((block,3),puzzle_room_table), false, 17).
holds(1, tower_base((block,4),puzzle_room_table), false, 17).
holds(1, tower_base((block,5),puzzle_room_table), false, 17).
holds(1, tower_base((block,6),puzzle_room_table), false, 17).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 17).
holds(1, unordered_tower((block,2),puzzle_room_table), true, 17).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 17).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 17).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 17).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 17).
holds(2, complete_tower(blue,puzzle_room_table), false, 17).
holds(2, complete_tower(red,puzzle_room_table), false, 17).
holds(2, configuration(manipulator_arm_1), extended, 17).
holds(2, configuration(manipulator_arm_2), retracted, 17).
holds(2, configuration(puzzle_room_door), open, 17).
holds(2, configuration(starting_room_door), closed, 17).
holds(2, configuration(store_room_door), open, 17).
holds(2, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 17).
holds(2, grasping(manipulator_arm_2), nothing, 17).
holds(2, in((block,1)), puzzle_room, 17).
holds(2, in((block,2)), puzzle_room, 17).
holds(2, in((block,3)), puzzle_room, 17).
holds(2, in((block,4)), puzzle_room, 17).
holds(2, in((block,5)), store_room, 17).
holds(2, in((block,6)), store_room, 17).
holds(2, in(manipulator_arm_1), hallway, 17).
holds(2, in(manipulator_arm_2), hallway, 17).
holds(2, in(puzzle_room_table), puzzle_room, 17).
holds(2, in(talos), hallway, 17).
holds(2, in_tower((block,1),(block,1)), true, 17).
holds(2, in_tower((block,1),(block,2)), false, 17).
holds(2, in_tower((block,1),(block,3)), true, 17).
holds(2, in_tower((block,1),(block,4)), false, 17).
holds(2, in_tower((block,1),(block,5)), false, 17).
holds(2, in_tower((block,1),(block,6)), false, 17).
holds(2, in_tower((block,2),(block,1)), false, 17).
holds(2, in_tower((block,2),(block,2)), true, 17).
holds(2, in_tower((block,2),(block,3)), false, 17).
holds(2, in_tower((block,2),(block,4)), true, 17).
holds(2, in_tower((block,2),(block,5)), false, 17).
holds(2, in_tower((block,2),(block,6)), false, 17).
holds(2, in_tower((block,3),(block,1)), false, 17).
holds(2, in_tower((block,3),(block,2)), false, 17).
holds(2, in_tower((block,3),(block,3)), false, 17).
holds(2, in_tower((block,3),(block,4)), false, 17).
holds(2, in_tower((block,3),(block,5)), false, 17).
holds(2, in_tower((block,3),(block,6)), false, 17).
holds(2, in_tower((block,4),(block,1)), false, 17).
holds(2, in_tower((block,4),(block,2)), false, 17).
holds(2, in_tower((block,4),(block,3)), false, 17).
holds(2, in_tower((block,4),(block,4)), false, 17).
holds(2, in_tower((block,4),(block,5)), false, 17).
holds(2, in_tower((block,4),(block,6)), false, 17).
holds(2, in_tower((block,5),(block,1)), false, 17).
holds(2, in_tower((block,5),(block,2)), false, 17).
holds(2, in_tower((block,5),(block,3)), false, 17).
holds(2, in_tower((block,5),(block,4)), false, 17).
holds(2, in_tower((block,5),(block,5)), false, 17).
holds(2, in_tower((block,5),(block,6)), false, 17).
holds(2, in_tower((block,6),(block,1)), false, 17).
holds(2, in_tower((block,6),(block,2)), false, 17).
holds(2, in_tower((block,6),(block,3)), false, 17).
holds(2, in_tower((block,6),(block,4)), false, 17).
holds(2, in_tower((block,6),(block,5)), false, 17).
holds(2, in_tower((block,6),(block,6)), false, 17).
holds(2, on((block,1)), puzzle_room_table, 17).
holds(2, on((block,2)), puzzle_room_table, 17).
holds(2, on((block,3)), (block,1), 17).
holds(2, on((block,4)), (block,2), 17).
holds(2, on((block,5)), nothing, 17).
holds(2, on((block,6)), nothing, 17).
holds(2, tower_base((block,1),puzzle_room_table), true, 17).
holds(2, tower_base((block,2),puzzle_room_table), true, 17).
holds(2, tower_base((block,3),puzzle_room_table), false, 17).
holds(2, tower_base((block,4),puzzle_room_table), false, 17).
holds(2, tower_base((block,5),puzzle_room_table), false, 17).
holds(2, tower_base((block,6),puzzle_room_table), false, 17).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 17).
holds(2, unordered_tower((block,2),puzzle_room_table), true, 17).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 17).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 17).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 17).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 17).

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,puzzle_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 5})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,store_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 5})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 6})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 6})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 7})

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 5 rules into program part base:

sub_goal(2, talos, release(manipulator_arm_1,puzzle_room_door_handle_outer), grasping(manipulator_arm_1), nothing, 5).
sub_goal(2, talos, release(manipulator_arm_2,store_room_door_handle_outer), grasping(manipulator_arm_2), nothing, 5).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 6).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 6).
sub_goal(2, talos, move(store_room), in(talos), store_room, 7).

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000002960C0C2700>]
	incrementor = SolveIncrementor(step_start=17, step_increase=1, step_increase_initial=2, step_end_min=20, step_end_max=200, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 17), range_=None), IncPart(name='plan_module', args=('#inc', 17, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 17, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 17, 5, 7, 'sequential', 'true'), range_=None)]

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 812 rules

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004663700000037352s

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.029180s.

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005057s with result Satisfiable.

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000002963420EB80>

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 17)
	('last_sgoals', 7)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002960D109A60>)
	('first_sgoals', 5)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000002963420EB80>)

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(5, 18)', truth=True, inc_range=None)

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 17). %* None *%
#program plan_module(#inc, 17, true, false). %* None *%
#program optimisation_module(#inc, 17, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 17, 5, 7, sequential, true). %* None *%

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     16 : Current =     18
Incrementor step ends | Minimum  =     20 : Maximum =    200

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('state_module', [Number(17), Number(17)]), ('plan_module', [Number(17), Number(17), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(17), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(17), Number(5), Number(7), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(18), Number(17)]), ('plan_module', [Number(18), Number(17), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(18), Number(17), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('conformance_module', [Number(18), Number(17), Number(5), Number(7), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.237968s.

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 17: original = External(symbol='current_last_sgoals(5, 18)', truth=True, inc_range=None), conversion = current_last_sgoals(5,18).

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 18: original = External(symbol='current_last_sgoals(5, 18)', truth=True, inc_range=None), conversion = current_last_sgoals(5,18).

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010038s with result Satisfiable.

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.2480056000000559, Incremental time limit = None
Running cumulative time = 0.2480056000000559, Cumulative time limit = 1800
Used memory = (RSS = 731.886719Mb, VMS = 722.144531Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.237968s, Solving = 0.010038s, Total = 0.248006s, Memory = (RSS = 731.886719Mb, VMS = 722.144531Mb), Step range = [17-18]), Calls = 1
Final Model :: Total atoms = 4159, Cost = (1, 0, 0), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=16, end_step=18, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.2379675000000816, solving_time=0.010038099999974293, total_time=0.2480056000000559, memory=Memory(rss=731.88671875, vms=722.14453125), step_range=range(17, 19), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2379675000000816, solving_time=0.010038099999974293, total_time=0.2480056000000559, memory=Memory(rss=731.88671875, vms=722.14453125), step_range=range(17, 19), clingo_stats={'problem': {'lp': {'atoms': 12183.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 14912.0, 'bodies_tr': 14912.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 259.0, 'count_bodies_tr': 259.0, 'sccs': 22.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 199.0, 'rules': 26085.0, 'rules_normal': 25539.0, 'rules_choice': 543.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 26085.0, 'rules_tr_normal': 25539.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 23174.0, 'eqs_atom': 6381.0, 'eqs_body': 2101.0, 'eqs_other': 14692.0}, 'lpStep': {'atoms': 5663.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12293.0, 'bodies_tr': 12293.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 259.0, 'count_bodies_tr': 259.0, 'sccs': 22.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 199.0, 'rules': 18655.0, 'rules_normal': 18109.0, 'rules_choice': 543.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 18655.0, 'rules_tr_normal': 18109.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 10118.0, 'eqs_atom': 1471.0, 'eqs_body': 576.0, 'eqs_other': 8071.0}, 'generator': {'vars': 1578.0, 'vars_eliminated': 0.0, 'vars_frozen': 1141.0, 'constraints': 12.0, 'constraints_binary': 684.0, 'constraints_ternary': 101.0, 'acyc_edges': 0.0, 'complexity': 805.0}}, 'solving': {'solvers': {'choices': 38.0, 'conflicts': 1.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 30.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 66.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [1.0, 0.0, 0.0], 'lower': [1.0, 0.0, 0.0], 'concurrency': 6.0, 'winner': 2.0, 'times': {'total': 0.24805259704589844, 'cpu': 0.25, 'solve': 0.0039997100830078125, 'unsat': 0.0030002593994140625, 'sat': 0.00099945068359375}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.2870616912841797, 'cpu': 0.296875, 'solve': 0.006000518798828125, 'unsat': 0.0030002593994140625, 'sat': 0.00099945068359375}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 38.0, 'conflicts': 1.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 31.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 72.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{5: 18}

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 6 achieved :: Progression >> total requested sgoals = 3, current total achieved sgoals = 2 ( 66.67% solved)

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(6, 18)', truth=True, inc_range=None)

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 6, step = 18]:
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 6)
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 6)

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> Reaction at search length 18:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =     20 : Maximum =    200

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('state_module', [Number(19), Number(17)]), ('plan_module', [Number(19), Number(17), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(19), Number(17), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('conformance_module', [Number(19), Number(17), Number(5), Number(7), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.128395s.

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 19: original = External(symbol='current_last_sgoals(6, 18)', truth=True, inc_range=None), conversion = current_last_sgoals(6,18).

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006587s with result Satisfiable.

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.13498230000004696, Incremental time limit = None
Running cumulative time = 0.38298790000010285, Cumulative time limit = 1800
Used memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.366362s, Solving = 0.016626s, Total = 0.382988s, Memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Step range = [17-19]), Calls = 2
Final Model :: Total atoms = 4536, Cost = (2, 0, 0), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=18, end_step=19, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.3663624000000709, solving_time=0.016625500000031934, total_time=0.38298790000010285, memory=Memory(rss=732.01171875, vms=722.14453125), step_range=range(17, 20), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.12839489999998932, solving_time=0.006587400000057642, total_time=0.13498230000004696, memory=Memory(rss=732.01171875, vms=722.14453125), step_range=range(19, 20), clingo_stats={'problem': {'lp': {'atoms': 13914.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24309.0, 'bodies_tr': 24309.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 460.0, 'count_bodies_tr': 460.0, 'sccs': 27.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 266.0, 'rules': 38400.0, 'rules_normal': 37656.0, 'rules_choice': 738.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 38400.0, 'rules_tr_normal': 37656.0, 'rules_tr_choice': 738.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 26271.0, 'eqs_atom': 6943.0, 'eqs_body': 2528.0, 'eqs_other': 16800.0}, 'lpStep': {'atoms': 1731.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 9397.0, 'bodies_tr': 9397.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 5.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 67.0, 'rules': 12315.0, 'rules_normal': 12117.0, 'rules_choice': 195.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 12315.0, 'rules_tr_normal': 12117.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3097.0, 'eqs_atom': 562.0, 'eqs_body': 427.0, 'eqs_other': 2108.0}, 'generator': {'vars': 1785.0, 'vars_eliminated': 0.0, 'vars_frozen': 1303.0, 'constraints': 47.0, 'constraints_binary': 1343.0, 'constraints_ternary': 203.0, 'acyc_edges': 0.0, 'complexity': 1619.0}}, 'solving': {'solvers': {'choices': 415.0, 'conflicts': 16.0, 'conflicts_analyzed': 15.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 40.0, 'models': 1.0, 'models_level': 52.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 14.0, 'distributed_sum_lbd': 17.0, 'integrated': 63.0, 'lemmas': 67.0, 'lits_learnt': 74.0, 'lemmas_binary': 7.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 53.0, 'integrated_jumps': 47.0, 'guiding_paths_lits': 96.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 12.0, 'lemmas_loop': 2.0, 'lemmas_other': 53.0, 'lits_conflict': 13.0, 'lits_loop': 4.0, 'lits_other': 57.0, 'jumps': {'jumps': 15.0, 'jumps_bounded': 15.0, 'levels': 396.0, 'levels_bounded': 191.0, 'max': 36.0, 'max_executed': 19.0, 'max_bounded': 17.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [2.0, 0.0, 0.0], 'lower': [2.0, 0.0, 0.0], 'concurrency': 6.0, 'winner': 4.0, 'times': {'total': 0.1360301971435547, 'cpu': 0.125, 'solve': 0.004001617431640625, 'unsat': 0.0030002593994140625, 'sat': 0.0010013580322265625}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.4230918884277344, 'cpu': 0.421875, 'solve': 0.01000213623046875, 'unsat': 0.006000518798828125, 'sat': 0.0020008087158203125}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 453.0, 'conflicts': 17.0, 'conflicts_analyzed': 15.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 40.0, 'models': 3.0, 'models_level': 83.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 14.0, 'distributed_sum_lbd': 17.0, 'integrated': 63.0, 'lemmas': 67.0, 'lits_learnt': 74.0, 'lemmas_binary': 7.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 53.0, 'integrated_jumps': 47.0, 'guiding_paths_lits': 168.0, 'guiding_paths': 18.0, 'splits': 0.0, 'lemmas_conflict': 12.0, 'lemmas_loop': 2.0, 'lemmas_other': 53.0, 'lits_conflict': 13.0, 'lits_loop': 4.0, 'lits_other': 57.0, 'jumps': {'jumps': 15.0, 'jumps_bounded': 15.0, 'levels': 396.0, 'levels_bounded': 191.0, 'max': 36.0, 'max_executed': 19.0, 'max_bounded': 17.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{5: 18, 6: 19}

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 7 achieved :: Progression >> total requested sgoals = 3, current total achieved sgoals = 3 (100.00% solved)

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(7, 19)', truth=True, inc_range=None)

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 7, step = 19]:
sub_goal(2, talos, move(store_room), in(talos), store_room, 7)

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> Reaction at search length 19:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =     20 : Maximum =    200

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('state_module', [Number(20), Number(17)]), ('plan_module', [Number(20), Number(17), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(20), Number(17), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('conformance_module', [Number(20), Number(17), Number(5), Number(7), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.141041s.

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 20: original = External(symbol='current_last_sgoals(7, 19)', truth=True, inc_range=None), conversion = current_last_sgoals(7,19).

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004051s with result Unsatisfiable.

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.14509220000013556, Incremental time limit = None
Running cumulative time = 0.5280801000002384, Cumulative time limit = 1800
Used memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=19, end_step=20, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.5074034000001575, solving_time=0.020676700000080928, total_time=0.5280801000002384, memory=Memory(rss=732.01171875, vms=722.14453125), step_range=range(17, 21), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.14104100000008657, solving_time=0.004051200000048993, total_time=0.14509220000013556, memory=Memory(rss=732.01171875, vms=722.14453125), step_range=range(20, 21), clingo_stats={'problem': {'lp': {'atoms': 15887.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 33886.0, 'bodies_tr': 33886.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 661.0, 'count_bodies_tr': 661.0, 'sccs': 40.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 452.0, 'rules': 51090.0, 'rules_normal': 50148.0, 'rules_choice': 933.0, 'rules_minimize': 9.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 51090.0, 'rules_tr_normal': 50148.0, 'rules_tr_choice': 933.0, 'rules_tr_minimize': 9.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 30516.0, 'eqs_atom': 7783.0, 'eqs_body': 2957.0, 'eqs_other': 19776.0}, 'lpStep': {'atoms': 1973.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 9577.0, 'bodies_tr': 9577.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 186.0, 'rules': 12690.0, 'rules_normal': 12492.0, 'rules_choice': 195.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 12690.0, 'rules_tr_normal': 12492.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4245.0, 'eqs_atom': 840.0, 'eqs_body': 429.0, 'eqs_other': 2976.0}, 'generator': {'vars': 2146.0, 'vars_eliminated': 0.0, 'vars_frozen': 1589.0, 'constraints': 153.0, 'constraints_binary': 2961.0, 'constraints_ternary': 411.0, 'acyc_edges': 0.0, 'complexity': 3587.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 2.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 0.0, 'lemmas': 1.0, 'lits_learnt': 2.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 126.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 1.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 2.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 3.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf, inf], 'lower': [0.0, 0.0, 0.0], 'concurrency': 6.0, 'winner': 5.0, 'times': {'total': 0.14603233337402344, 'cpu': 0.15625, 'solve': 0.00099945068359375, 'unsat': 0.00099945068359375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.5691242218017578, 'cpu': 0.578125, 'solve': 0.0110015869140625, 'unsat': 0.006999969482421875, 'sat': 0.0020008087158203125}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 453.0, 'conflicts': 19.0, 'conflicts_analyzed': 15.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 40.0, 'models': 3.0, 'models_level': 83.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 15.0, 'distributed_sum_lbd': 19.0, 'integrated': 63.0, 'lemmas': 68.0, 'lits_learnt': 76.0, 'lemmas_binary': 8.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 53.0, 'integrated_jumps': 47.0, 'guiding_paths_lits': 294.0, 'guiding_paths': 24.0, 'splits': 0.0, 'lemmas_conflict': 12.0, 'lemmas_loop': 3.0, 'lemmas_other': 53.0, 'lits_conflict': 13.0, 'lits_loop': 6.0, 'lits_other': 57.0, 'jumps': {'jumps': 15.0, 'jumps_bounded': 15.0, 'levels': 396.0, 'levels_bounded': 191.0, 'max': 36.0, 'max_executed': 19.0, 'max_bounded': 17.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-45] DEBUG :: ASH Planner Main #1 >> Reaction at search length 20:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     20 : Current =     21
Incrementor step ends | Minimum  =     20 : Maximum =    200

[16-02-2022_21-58-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('state_module', [Number(21), Number(17)]), ('plan_module', [Number(21), Number(17), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(17), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('conformance_module', [Number(21), Number(17), Number(5), Number(7), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.181556s.

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007032s with result Unsatisfiable.

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.1885887000000821, Incremental time limit = None
Running cumulative time = 0.7166688000003205, Cumulative time limit = 1800
Used memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-46] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=20, end_step=21, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.6889597000001686, solving_time=0.02770910000015192, total_time=0.7166688000003205, memory=Memory(rss=732.01171875, vms=722.14453125), step_range=range(17, 22), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1815563000000111, solving_time=0.007032400000070993, total_time=0.1885887000000821, memory=Memory(rss=732.01171875, vms=722.14453125), step_range=range(21, 22), clingo_stats={'problem': {'lp': {'atoms': 18505.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 43764.0, 'bodies_tr': 43764.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 862.0, 'count_bodies_tr': 862.0, 'sccs': 53.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 686.0, 'rules': 64642.0, 'rules_normal': 63502.0, 'rules_choice': 1128.0, 'rules_minimize': 12.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 64642.0, 'rules_tr_normal': 63502.0, 'rules_tr_choice': 1128.0, 'rules_tr_minimize': 12.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 37536.0, 'eqs_atom': 9225.0, 'eqs_body': 3546.0, 'eqs_other': 24765.0}, 'lpStep': {'atoms': 2618.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 9878.0, 'bodies_tr': 9878.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 234.0, 'rules': 13552.0, 'rules_normal': 13354.0, 'rules_choice': 195.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 13552.0, 'rules_tr_normal': 13354.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7020.0, 'eqs_atom': 1442.0, 'eqs_body': 589.0, 'eqs_other': 4989.0}, 'generator': {'vars': 2756.0, 'vars_eliminated': 0.0, 'vars_frozen': 2007.0, 'constraints': 308.0, 'constraints_binary': 5895.0, 'constraints_ternary': 976.0, 'acyc_edges': 0.0, 'complexity': 7285.0}}, 'solving': {'solvers': {'choices': 34.0, 'conflicts': 16.0, 'conflicts_analyzed': 12.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 1.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 17.0, 'distributed_sum_lbd': 39.0, 'integrated': 54.0, 'lemmas': 91.0, 'lits_learnt': 596.0, 'lemmas_binary': 26.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 26.0, 'integrated_jumps': 11.0, 'guiding_paths_lits': 130.0, 'guiding_paths': 5.0, 'splits': 0.0, 'lemmas_conflict': 12.0, 'lemmas_loop': 33.0, 'lemmas_other': 46.0, 'lits_conflict': 110.0, 'lits_loop': 234.0, 'lits_other': 252.0, 'jumps': {'jumps': 12.0, 'jumps_bounded': 3.0, 'levels': 26.0, 'levels_bounded': 4.0, 'max': 5.0, 'max_executed': 5.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 4.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf, inf], 'lower': [0.0, 0.0, 0.0], 'concurrency': 6.0, 'winner': 2.0, 'times': {'total': 0.1890411376953125, 'cpu': 0.1875, 'solve': 0.00099945068359375, 'unsat': 0.00099945068359375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.7581653594970703, 'cpu': 0.765625, 'solve': 0.01200103759765625, 'unsat': 0.007999420166015625, 'sat': 0.0020008087158203125}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 487.0, 'conflicts': 35.0, 'conflicts_analyzed': 27.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 41.0, 'models': 3.0, 'models_level': 83.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 32.0, 'distributed_sum_lbd': 58.0, 'integrated': 117.0, 'lemmas': 159.0, 'lits_learnt': 672.0, 'lemmas_binary': 34.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 79.0, 'integrated_jumps': 58.0, 'guiding_paths_lits': 424.0, 'guiding_paths': 29.0, 'splits': 0.0, 'lemmas_conflict': 24.0, 'lemmas_loop': 36.0, 'lemmas_other': 99.0, 'lits_conflict': 123.0, 'lits_loop': 240.0, 'lits_other': 309.0, 'jumps': {'jumps': 27.0, 'jumps_bounded': 18.0, 'levels': 422.0, 'levels_bounded': 195.0, 'max': 36.0, 'max_executed': 19.0, 'max_bounded': 17.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-46] DEBUG :: ASH Planner Main #1 >> Reaction at search length 21:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     21 : Current =     22
Incrementor step ends | Minimum  =     20 : Maximum =    200

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(22)]), ('state_module', [Number(22), Number(17)]), ('plan_module', [Number(22), Number(17), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(17), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('conformance_module', [Number(22), Number(17), Number(5), Number(7), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.200454s.

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012262s with result Satisfiable.

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.2127159000000347, Incremental time limit = None
Running cumulative time = 0.9293847000003552, Cumulative time limit = 1800
Used memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.889414s, Solving = 0.039971s, Total = 0.929385s, Memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Step range = [17-22]), Calls = 5
Final Model :: Total atoms = 5657, Cost = (5, 0, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[16-02-2022_21-58-46] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=21, end_step=22, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.8894137000002047, solving_time=0.039971000000150525, total_time=0.9293847000003552, memory=Memory(rss=732.01171875, vms=722.14453125), step_range=range(17, 23), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2004540000000361, solving_time=0.012261899999998604, total_time=0.2127159000000347, memory=Memory(rss=732.01171875, vms=722.14453125), step_range=range(22, 23), clingo_stats={'problem': {'lp': {'atoms': 21383.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 54442.0, 'bodies_tr': 54442.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1063.0, 'count_bodies_tr': 1063.0, 'sccs': 78.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1084.0, 'rules': 79171.0, 'rules_normal': 77833.0, 'rules_choice': 1323.0, 'rules_minimize': 15.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 79171.0, 'rules_tr_normal': 77833.0, 'rules_tr_choice': 1323.0, 'rules_tr_minimize': 15.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 44406.0, 'eqs_atom': 10663.0, 'eqs_body': 3734.0, 'eqs_other': 30009.0}, 'lpStep': {'atoms': 2878.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 10678.0, 'bodies_tr': 10678.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 398.0, 'rules': 14529.0, 'rules_normal': 14331.0, 'rules_choice': 195.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 14529.0, 'rules_tr_normal': 14331.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 6870.0, 'eqs_atom': 1438.0, 'eqs_body': 188.0, 'eqs_other': 5244.0}, 'generator': {'vars': 4256.0, 'vars_eliminated': 0.0, 'vars_frozen': 2925.0, 'constraints': 681.0, 'constraints_binary': 13396.0, 'constraints_ternary': 2768.0, 'acyc_edges': 0.0, 'complexity': 17019.0}}, 'solving': {'solvers': {'choices': 309.0, 'conflicts': 33.0, 'conflicts_analyzed': 28.0, 'restarts': 0.0, 'restarts_last': 9.0, 'extra': {'domain_choices': 9.0, 'models': 1.0, 'models_level': 77.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 27.0, 'distributed_sum_lbd': 66.0, 'integrated': 135.0, 'lemmas': 216.0, 'lits_learnt': 2673.0, 'lemmas_binary': 23.0, 'lemmas_ternary': 11.0, 'cpu_time': 0.0, 'integrated_imps': 43.0, 'integrated_jumps': 36.0, 'guiding_paths_lits': 186.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 27.0, 'lemmas_loop': 80.0, 'lemmas_other': 109.0, 'lits_conflict': 367.0, 'lits_loop': 629.0, 'lits_other': 1677.0, 'jumps': {'jumps': 28.0, 'jumps_bounded': 3.0, 'levels': 106.0, 'levels_bounded': 66.0, 'max': 34.0, 'max_executed': 34.0, 'max_bounded': 32.0}}}}, 'summary': {'call': 5.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [5.0, 0.0, 0.0], 'lower': [5.0, 0.0, 0.0], 'concurrency': 6.0, 'winner': 3.0, 'times': {'total': 0.21404647827148438, 'cpu': 0.171875, 'solve': 0.006000518798828125, 'unsat': 0.005001068115234375, 'sat': 0.00099945068359375}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.9722118377685547, 'cpu': 0.9375, 'solve': 0.018001556396484375, 'unsat': 0.01300048828125, 'sat': 0.0030002593994140625}, 'models': {'enumerated': 4.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 796.0, 'conflicts': 68.0, 'conflicts_analyzed': 55.0, 'restarts': 0.0, 'restarts_last': 9.0, 'extra': {'domain_choices': 50.0, 'models': 4.0, 'models_level': 160.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 59.0, 'distributed_sum_lbd': 124.0, 'integrated': 252.0, 'lemmas': 375.0, 'lits_learnt': 3345.0, 'lemmas_binary': 57.0, 'lemmas_ternary': 11.0, 'cpu_time': 0.0, 'integrated_imps': 122.0, 'integrated_jumps': 94.0, 'guiding_paths_lits': 610.0, 'guiding_paths': 40.0, 'splits': 0.0, 'lemmas_conflict': 51.0, 'lemmas_loop': 116.0, 'lemmas_other': 208.0, 'lits_conflict': 490.0, 'lits_loop': 869.0, 'lits_other': 1986.0, 'jumps': {'jumps': 55.0, 'jumps_bounded': 21.0, 'levels': 528.0, 'levels_bounded': 261.0, 'max': 36.0, 'max_executed': 34.0, 'max_bounded': 32.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-46] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{5: 18, 6: 19, 7: 22}

[16-02-2022_21-58-46] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 8 achieved :: Progression >> total requested sgoals = 3, current total achieved sgoals = 4 (133.33% solved)

[16-02-2022_21-58-46] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 7 was achieved successfully.

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.237968s, Solving = 0.010038s, Total = 0.248006s, Memory = (RSS = 731.886719Mb, VMS = 722.144531Mb), Step range = [17-18]
2 : Statistics :: Grounding = 0.128395s, Solving = 0.006587s, Total = 0.134982s, Memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Step range = [19-19]
3 : Statistics :: Grounding = 0.141041s, Solving = 0.004051s, Total = 0.145092s, Memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Step range = [20-20]
4 : Statistics :: Grounding = 0.181556s, Solving = 0.007032s, Total = 0.188589s, Memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Step range = [21-21]
5 : Statistics :: Grounding = 0.200454s, Solving = 0.012262s, Total = 0.212716s, Memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Step range = [22-22]

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.929385s due to: External generator exit.

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[16-02-2022_21-58-46] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 16, 4: 17}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[16-02-2022_21-58-46] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 5, 19: 6, 20: 7, 21: 7, 22: 7}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 16, 4: 17, 5: 18, 6: 19, 7: 22}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[16-02-2022_21-58-46] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 7, Last requested goal index = 7, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[16-02-2022_21-58-46] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.889414s, Solving = 0.039971s, Total = 0.929385s, Memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Step range = [17-22]), Calls = 5
Model :: Total atoms = 5657, Cost = (5, 0, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[16-02-2022_21-58-46] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 5 :: Actions = 5                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 4:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 10:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 11:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 12:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 16:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 18:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 19:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 20:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 21:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 22:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))

[16-02-2022_21-58-46] DEBUG :: ASH Planner Main #1 >> Monolevel problem 3 at level 1 solved.

[16-02-2022_21-58-46] DEBUG :: ASH Planner Main #1 >> Online planning increment 3 finished.

[16-02-2022_21-58-46] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 1 : Total constraining sub-goal stages = 13 : Goals achieved = 6 : Goals unachieved = 7 : Complete = False
Level = 1 : Solved problems = 3 : Total constraining sub-goal stages = 16 : Goals achieved = 7 : Goals unachieved = 9 : Complete = False

[16-02-2022_21-58-46] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 2.

[16-02-2022_21-58-46] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 4 by method ground-first is [1-1].

[16-02-2022_21-58-46] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 4 at level 1:
Total Templated Partial Problems = 6, Problem Range = [1-6], Size = 16, Sub-goal Stage Range = [1-16]
Division points [total=5] : [(Index = 2, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 4, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 7, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 10, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 13, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[16-02-2022_21-58-46] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [8-10]

[16-02-2022_21-58-46] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [8-10], problem number = 4, increment number = 4

[16-02-2022_21-58-46] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 8)
	('last_sgoals', 10)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x000002960D109A60>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[16-02-2022_21-58-46] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [8-10] : Concurrency enabled : Minimum search length bound disabled with value 24

[16-02-2022_21-58-46] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 8
last_sgoals = 10
start_step = 22
is_initial = False
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 24

[16-02-2022_21-58-46] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[16-02-2022_21-58-46] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[16-02-2022_21-58-46] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[16-02-2022_21-58-46] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[16-02-2022_21-58-46] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[16-02-2022_21-58-46] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 22 as problem start state.

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 22})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 22})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 22})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 22})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 22})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 22})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 22})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 22})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 22})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 22})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 22})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 22})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 22})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 22})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,1)', 'S': 22})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 22})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(store_room,0)', 'S': 22})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(store_room,1)', 'S': 22})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(store_room,1)', 'S': 22})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(store_room,1)', 'S': 22})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(store_room,1)', 'S': 22})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(store_room,1)', 'S': 22})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(store_room,1)', 'S': 22})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 22})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 22})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 22})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(store_room,1)', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 22})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 22})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 22})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 22})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 22})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 22})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 22})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 22})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 22})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'S': 22})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 22})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 22})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 22})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 22})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 22})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 22})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 22})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 22})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 22})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 22})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 22})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 22})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 22})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'store_room', 'S': 22})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'store_room', 'S': 22})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 22})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'store_room', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 22})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 22})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 22})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 22})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 22})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 22})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 22})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 22})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 22})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'S': 22})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 22})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 22})

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 22).
holds(1, complete_tower(red,puzzle_room_table), false, 22).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 22).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 22).
holds(1, configuration(manipulator_limb_1), retracted, 22).
holds(1, configuration(manipulator_limb_2), retracted, 22).
holds(1, configuration(puzzle_room_door), open, 22).
holds(1, configuration(starting_room_door), closed, 22).
holds(1, configuration(store_room_door), open, 22).
holds(1, grasping(manipulator_arm_1), nothing, 22).
holds(1, grasping(manipulator_arm_2), nothing, 22).
holds(1, grasping(manipulator_end_1), nothing, 22).
holds(1, grasping(manipulator_end_2), nothing, 22).
holds(1, in((block,1)), (puzzle_room,1), 22).
holds(1, in((block,2)), (puzzle_room,1), 22).
holds(1, in((block,3)), (puzzle_room,1), 22).
holds(1, in((block,4)), (puzzle_room,1), 22).
holds(1, in((block,5)), (store_room,0), 22).
holds(1, in((block,6)), (store_room,0), 22).
holds(1, in(manipulator_arm_1), (store_room,1), 22).
holds(1, in(manipulator_arm_2), (store_room,1), 22).
holds(1, in(manipulator_end_1), (store_room,1), 22).
holds(1, in(manipulator_end_2), (store_room,1), 22).
holds(1, in(manipulator_limb_1), (store_room,1), 22).
holds(1, in(manipulator_limb_2), (store_room,1), 22).
holds(1, in(puzzle_room_table), (puzzle_room,1), 22).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 22).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 22).
holds(1, in(talos), (store_room,1), 22).
holds(1, in_tower((block,1),(block,1)), true, 22).
holds(1, in_tower((block,1),(block,2)), false, 22).
holds(1, in_tower((block,1),(block,3)), true, 22).
holds(1, in_tower((block,1),(block,4)), false, 22).
holds(1, in_tower((block,1),(block,5)), false, 22).
holds(1, in_tower((block,1),(block,6)), false, 22).
holds(1, in_tower((block,2),(block,1)), false, 22).
holds(1, in_tower((block,2),(block,2)), true, 22).
holds(1, in_tower((block,2),(block,3)), false, 22).
holds(1, in_tower((block,2),(block,4)), true, 22).
holds(1, in_tower((block,2),(block,5)), false, 22).
holds(1, in_tower((block,2),(block,6)), false, 22).
holds(1, in_tower((block,3),(block,1)), false, 22).
holds(1, in_tower((block,3),(block,2)), false, 22).
holds(1, in_tower((block,3),(block,3)), false, 22).
holds(1, in_tower((block,3),(block,4)), false, 22).
holds(1, in_tower((block,3),(block,5)), false, 22).
holds(1, in_tower((block,3),(block,6)), false, 22).
holds(1, in_tower((block,4),(block,1)), false, 22).
holds(1, in_tower((block,4),(block,2)), false, 22).
holds(1, in_tower((block,4),(block,3)), false, 22).
holds(1, in_tower((block,4),(block,4)), false, 22).
holds(1, in_tower((block,4),(block,5)), false, 22).
holds(1, in_tower((block,4),(block,6)), false, 22).
holds(1, in_tower((block,5),(block,1)), false, 22).
holds(1, in_tower((block,5),(block,2)), false, 22).
holds(1, in_tower((block,5),(block,3)), false, 22).
holds(1, in_tower((block,5),(block,4)), false, 22).
holds(1, in_tower((block,5),(block,5)), false, 22).
holds(1, in_tower((block,5),(block,6)), false, 22).
holds(1, in_tower((block,6),(block,1)), false, 22).
holds(1, in_tower((block,6),(block,2)), false, 22).
holds(1, in_tower((block,6),(block,3)), false, 22).
holds(1, in_tower((block,6),(block,4)), false, 22).
holds(1, in_tower((block,6),(block,5)), false, 22).
holds(1, in_tower((block,6),(block,6)), false, 22).
holds(1, on((block,1)), puzzle_room_table_left, 22).
holds(1, on((block,2)), puzzle_room_table_right, 22).
holds(1, on((block,3)), (block,1), 22).
holds(1, on((block,4)), (block,2), 22).
holds(1, on((block,5)), nothing, 22).
holds(1, on((block,6)), nothing, 22).
holds(1, tower_base((block,1),puzzle_room_table), true, 22).
holds(1, tower_base((block,2),puzzle_room_table), true, 22).
holds(1, tower_base((block,3),puzzle_room_table), false, 22).
holds(1, tower_base((block,4),puzzle_room_table), false, 22).
holds(1, tower_base((block,5),puzzle_room_table), false, 22).
holds(1, tower_base((block,6),puzzle_room_table), false, 22).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 22).
holds(1, unordered_tower((block,2),puzzle_room_table), true, 22).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 22).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 22).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 22).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 22).
holds(2, complete_tower(blue,puzzle_room_table), false, 22).
holds(2, complete_tower(red,puzzle_room_table), false, 22).
holds(2, configuration(manipulator_arm_1), retracted, 22).
holds(2, configuration(manipulator_arm_2), retracted, 22).
holds(2, configuration(puzzle_room_door), open, 22).
holds(2, configuration(starting_room_door), closed, 22).
holds(2, configuration(store_room_door), open, 22).
holds(2, grasping(manipulator_arm_1), nothing, 22).
holds(2, grasping(manipulator_arm_2), nothing, 22).
holds(2, in((block,1)), puzzle_room, 22).
holds(2, in((block,2)), puzzle_room, 22).
holds(2, in((block,3)), puzzle_room, 22).
holds(2, in((block,4)), puzzle_room, 22).
holds(2, in((block,5)), store_room, 22).
holds(2, in((block,6)), store_room, 22).
holds(2, in(manipulator_arm_1), store_room, 22).
holds(2, in(manipulator_arm_2), store_room, 22).
holds(2, in(puzzle_room_table), puzzle_room, 22).
holds(2, in(talos), store_room, 22).
holds(2, in_tower((block,1),(block,1)), true, 22).
holds(2, in_tower((block,1),(block,2)), false, 22).
holds(2, in_tower((block,1),(block,3)), true, 22).
holds(2, in_tower((block,1),(block,4)), false, 22).
holds(2, in_tower((block,1),(block,5)), false, 22).
holds(2, in_tower((block,1),(block,6)), false, 22).
holds(2, in_tower((block,2),(block,1)), false, 22).
holds(2, in_tower((block,2),(block,2)), true, 22).
holds(2, in_tower((block,2),(block,3)), false, 22).
holds(2, in_tower((block,2),(block,4)), true, 22).
holds(2, in_tower((block,2),(block,5)), false, 22).
holds(2, in_tower((block,2),(block,6)), false, 22).
holds(2, in_tower((block,3),(block,1)), false, 22).
holds(2, in_tower((block,3),(block,2)), false, 22).
holds(2, in_tower((block,3),(block,3)), false, 22).
holds(2, in_tower((block,3),(block,4)), false, 22).
holds(2, in_tower((block,3),(block,5)), false, 22).
holds(2, in_tower((block,3),(block,6)), false, 22).
holds(2, in_tower((block,4),(block,1)), false, 22).
holds(2, in_tower((block,4),(block,2)), false, 22).
holds(2, in_tower((block,4),(block,3)), false, 22).
holds(2, in_tower((block,4),(block,4)), false, 22).
holds(2, in_tower((block,4),(block,5)), false, 22).
holds(2, in_tower((block,4),(block,6)), false, 22).
holds(2, in_tower((block,5),(block,1)), false, 22).
holds(2, in_tower((block,5),(block,2)), false, 22).
holds(2, in_tower((block,5),(block,3)), false, 22).
holds(2, in_tower((block,5),(block,4)), false, 22).
holds(2, in_tower((block,5),(block,5)), false, 22).
holds(2, in_tower((block,5),(block,6)), false, 22).
holds(2, in_tower((block,6),(block,1)), false, 22).
holds(2, in_tower((block,6),(block,2)), false, 22).
holds(2, in_tower((block,6),(block,3)), false, 22).
holds(2, in_tower((block,6),(block,4)), false, 22).
holds(2, in_tower((block,6),(block,5)), false, 22).
holds(2, in_tower((block,6),(block,6)), false, 22).
holds(2, on((block,1)), puzzle_room_table, 22).
holds(2, on((block,2)), puzzle_room_table, 22).
holds(2, on((block,3)), (block,1), 22).
holds(2, on((block,4)), (block,2), 22).
holds(2, on((block,5)), nothing, 22).
holds(2, on((block,6)), nothing, 22).
holds(2, tower_base((block,1),puzzle_room_table), true, 22).
holds(2, tower_base((block,2),puzzle_room_table), true, 22).
holds(2, tower_base((block,3),puzzle_room_table), false, 22).
holds(2, tower_base((block,4),puzzle_room_table), false, 22).
holds(2, tower_base((block,5),puzzle_room_table), false, 22).
holds(2, tower_base((block,6),puzzle_room_table), false, 22).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 22).
holds(2, unordered_tower((block,2),puzzle_room_table), true, 22).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 22).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 22).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 22).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 22).

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[16-02-2022_21-58-46] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 8})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 8})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'I': 9})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'I': 9})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 10})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 10})

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 6 rules into program part base:

sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 8).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 8).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), (block,6), 9).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), (block,5), 9).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 10).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 10).

[16-02-2022_21-58-46] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000002960C0C2E50>]
	incrementor = SolveIncrementor(step_start=22, step_increase=1, step_increase_initial=2, step_end_min=25, step_end_max=200, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 22), range_=None), IncPart(name='plan_module', args=('#inc', 22, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 22, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 22, 8, 10, 'sequential', 'true'), range_=None)]

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 813 rules

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004669900000067173s

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.029589s.

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005577s with result Satisfiable.

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000029634A8FEA0>

[16-02-2022_21-58-46] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 22)
	('last_sgoals', 10)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002960D109A60>)
	('first_sgoals', 8)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000029634A8FEA0>)

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(8, 23)', truth=True, inc_range=None)

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 22). %* None *%
#program plan_module(#inc, 22, true, false). %* None *%
#program optimisation_module(#inc, 22, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 22, 8, 10, sequential, true). %* None *%

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     21 : Current =     23
Incrementor step ends | Minimum  =     25 : Maximum =    200

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(23)]), ('state_module', [Number(22), Number(22)]), ('plan_module', [Number(22), Number(22), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(22), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('conformance_module', [Number(22), Number(22), Number(8), Number(10), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(23), Number(22)]), ('plan_module', [Number(23), Number(22), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(22), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('conformance_module', [Number(23), Number(22), Number(8), Number(10), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.244229s.

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 22: original = External(symbol='current_last_sgoals(8, 23)', truth=True, inc_range=None), conversion = current_last_sgoals(8,23).

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 23: original = External(symbol='current_last_sgoals(8, 23)', truth=True, inc_range=None), conversion = current_last_sgoals(8,23).

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011668s with result Satisfiable.

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.2558974999999464, Incremental time limit = None
Running cumulative time = 0.2558974999999464, Cumulative time limit = 1800
Used memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.244229s, Solving = 0.011668s, Total = 0.255897s, Memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Step range = [22-23]), Calls = 1
Final Model :: Total atoms = 4162, Cost = (2, 0, 0), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[16-02-2022_21-58-46] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=21, end_step=23, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.24422949999996035, solving_time=0.011667999999986023, total_time=0.2558974999999464, memory=Memory(rss=732.01171875, vms=722.14453125), step_range=range(22, 24), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.24422949999996035, solving_time=0.011667999999986023, total_time=0.2558974999999464, memory=Memory(rss=732.01171875, vms=722.14453125), step_range=range(22, 24), clingo_stats={'problem': {'lp': {'atoms': 12184.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 16032.0, 'bodies_tr': 16032.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 261.0, 'count_bodies_tr': 261.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 537.0, 'rules': 27982.0, 'rules_normal': 27436.0, 'rules_choice': 543.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 27982.0, 'rules_tr_normal': 27436.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 26412.0, 'eqs_atom': 7034.0, 'eqs_body': 1919.0, 'eqs_other': 17459.0}, 'lpStep': {'atoms': 5663.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13413.0, 'bodies_tr': 13413.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 261.0, 'count_bodies_tr': 261.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 537.0, 'rules': 20551.0, 'rules_normal': 20005.0, 'rules_choice': 543.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 20551.0, 'rules_tr_normal': 20005.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 13356.0, 'eqs_atom': 2124.0, 'eqs_body': 394.0, 'eqs_other': 10838.0}, 'generator': {'vars': 2365.0, 'vars_eliminated': 0.0, 'vars_frozen': 1502.0, 'constraints': 25.0, 'constraints_binary': 923.0, 'constraints_ternary': 135.0, 'acyc_edges': 0.0, 'complexity': 1103.0}}, 'solving': {'solvers': {'choices': 45.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 26.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4.0, 'distributed_sum_lbd': 8.0, 'integrated': 11.0, 'lemmas': 6.0, 'lits_learnt': 10.0, 'lemmas_binary': 4.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 66.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 6.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 10.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [2.0, 0.0, 0.0], 'lower': [2.0, 0.0, 0.0], 'concurrency': 6.0, 'winner': 3.0, 'times': {'total': 0.2550544738769531, 'cpu': 0.25, 'solve': 0.00299835205078125, 'unsat': 0.00299835205078125, 'sat': 0.0}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.2950611114501953, 'cpu': 0.28125, 'solve': 0.0059967041015625, 'unsat': 0.00299835205078125, 'sat': 0.00099945068359375}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 45.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 27.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4.0, 'distributed_sum_lbd': 8.0, 'integrated': 11.0, 'lemmas': 6.0, 'lits_learnt': 10.0, 'lemmas_binary': 4.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 72.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 6.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 10.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-46] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{8: 23}

[16-02-2022_21-58-46] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 9 achieved :: Progression >> total requested sgoals = 3, current total achieved sgoals = 2 ( 66.67% solved)

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(9, 23)', truth=True, inc_range=None)

[16-02-2022_21-58-46] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 9, step = 23]:
sub_goal(2, talos, grasp(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), (block,6), 9)
sub_goal(2, talos, grasp(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), (block,5), 9)

[16-02-2022_21-58-46] DEBUG :: ASH Planner Main #1 >> Reaction at search length 23:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     23 : Current =     24
Incrementor step ends | Minimum  =     25 : Maximum =    200

[16-02-2022_21-58-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(24)]), ('state_module', [Number(24), Number(22)]), ('plan_module', [Number(24), Number(22), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(22), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('conformance_module', [Number(24), Number(22), Number(8), Number(10), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.143958s.

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 24: original = External(symbol='current_last_sgoals(9, 23)', truth=True, inc_range=None), conversion = current_last_sgoals(9,23).

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.003975s with result Unsatisfiable.

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.1479324000000588, Incremental time limit = None
Running cumulative time = 0.4038299000000052, Cumulative time limit = 1800
Used memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-47] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=23, end_step=24, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.3881873999999925, solving_time=0.01564250000001266, total_time=0.4038299000000052, memory=Memory(rss=732.01171875, vms=722.14453125), step_range=range(22, 25), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.14395790000003217, solving_time=0.003974500000026637, total_time=0.1479324000000588, memory=Memory(rss=732.01171875, vms=722.14453125), step_range=range(24, 25), clingo_stats={'problem': {'lp': {'atoms': 14124.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25466.0, 'bodies_tr': 25466.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 462.0, 'count_bodies_tr': 462.0, 'sccs': 47.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 723.0, 'rules': 40539.0, 'rules_normal': 39795.0, 'rules_choice': 738.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 40539.0, 'rules_tr_normal': 39795.0, 'rules_tr_choice': 738.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 30348.0, 'eqs_atom': 7894.0, 'eqs_body': 2355.0, 'eqs_other': 20099.0}, 'lpStep': {'atoms': 1940.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 9434.0, 'bodies_tr': 9434.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 186.0, 'rules': 12557.0, 'rules_normal': 12359.0, 'rules_choice': 195.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 12557.0, 'rules_tr_normal': 12359.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3936.0, 'eqs_atom': 860.0, 'eqs_body': 436.0, 'eqs_other': 2640.0}, 'generator': {'vars': 2633.0, 'vars_eliminated': 0.0, 'vars_frozen': 1731.0, 'constraints': 116.0, 'constraints_binary': 2139.0, 'constraints_ternary': 245.0, 'acyc_edges': 0.0, 'complexity': 2544.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 2.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 3.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf, inf], 'lower': [0.0, 0.0, 0.0], 'concurrency': 6.0, 'winner': 5.0, 'times': {'total': 0.14803314208984375, 'cpu': 0.15625, 'solve': 0.0, 'unsat': 0.0, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.44309425354003906, 'cpu': 0.4375, 'solve': 0.0059967041015625, 'unsat': 0.00299835205078125, 'sat': 0.00099945068359375}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 45.0, 'conflicts': 2.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 27.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4.0, 'distributed_sum_lbd': 8.0, 'integrated': 11.0, 'lemmas': 6.0, 'lits_learnt': 10.0, 'lemmas_binary': 4.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 120.0, 'guiding_paths': 15.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 6.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 10.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-47] DEBUG :: ASH Planner Main #1 >> Reaction at search length 24:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     24 : Current =     25
Incrementor step ends | Minimum  =     25 : Maximum =    200

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(25)]), ('state_module', [Number(25), Number(22)]), ('plan_module', [Number(25), Number(22), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(22), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(22), Number(8), Number(10), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.182712s.

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005502s with result Unsatisfiable.

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.18821390000005067, Incremental time limit = None
Running cumulative time = 0.5920438000000559, Cumulative time limit = 1800
Used memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-47] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=24, end_step=25, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.5708997000000409, solving_time=0.021144100000014987, total_time=0.5920438000000559, memory=Memory(rss=732.01171875, vms=722.14453125), step_range=range(22, 26), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.18271230000004834, solving_time=0.005501600000002327, total_time=0.18821390000005067, memory=Memory(rss=732.01171875, vms=722.14453125), step_range=range(25, 26), clingo_stats={'problem': {'lp': {'atoms': 16729.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 35232.0, 'bodies_tr': 35232.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 663.0, 'count_bodies_tr': 663.0, 'sccs': 60.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 957.0, 'rules': 54007.0, 'rules_normal': 53065.0, 'rules_choice': 933.0, 'rules_minimize': 9.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 54007.0, 'rules_tr_normal': 53065.0, 'rules_tr_choice': 933.0, 'rules_tr_minimize': 9.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 37141.0, 'eqs_atom': 9351.0, 'eqs_body': 2964.0, 'eqs_other': 24826.0}, 'lpStep': {'atoms': 2605.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 9766.0, 'bodies_tr': 9766.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 234.0, 'rules': 13468.0, 'rules_normal': 13270.0, 'rules_choice': 195.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 13468.0, 'rules_tr_normal': 13270.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 6793.0, 'eqs_atom': 1457.0, 'eqs_body': 609.0, 'eqs_other': 4727.0}, 'generator': {'vars': 3204.0, 'vars_eliminated': 0.0, 'vars_frozen': 2133.0, 'constraints': 265.0, 'constraints_binary': 4799.0, 'constraints_ternary': 714.0, 'acyc_edges': 0.0, 'complexity': 5866.0}}, 'solving': {'solvers': {'choices': 3.0, 'conflicts': 8.0, 'conflicts_analyzed': 3.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 14.0, 'integrated': 6.0, 'lemmas': 38.0, 'lits_learnt': 264.0, 'lemmas_binary': 4.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 6.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 84.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 3.0, 'lemmas_loop': 29.0, 'lemmas_other': 6.0, 'lits_conflict': 12.0, 'lits_loop': 228.0, 'lits_other': 24.0, 'jumps': {'jumps': 3.0, 'jumps_bounded': 3.0, 'levels': 8.0, 'levels_bounded': 5.0, 'max': 3.0, 'max_executed': 1.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 3.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf, inf], 'lower': [2.0, 0.0, 0.0], 'concurrency': 6.0, 'winner': 2.0, 'times': {'total': 0.1890411376953125, 'cpu': 0.1875, 'solve': 0.0020008087158203125, 'unsat': 0.0020008087158203125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.6321353912353516, 'cpu': 0.625, 'solve': 0.007997512817382812, 'unsat': 0.0049991607666015625, 'sat': 0.00099945068359375}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 48.0, 'conflicts': 10.0, 'conflicts_analyzed': 3.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 27.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 11.0, 'distributed_sum_lbd': 22.0, 'integrated': 17.0, 'lemmas': 44.0, 'lits_learnt': 274.0, 'lemmas_binary': 8.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 6.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 204.0, 'guiding_paths': 21.0, 'splits': 0.0, 'lemmas_conflict': 3.0, 'lemmas_loop': 35.0, 'lemmas_other': 6.0, 'lits_conflict': 12.0, 'lits_loop': 238.0, 'lits_other': 24.0, 'jumps': {'jumps': 3.0, 'jumps_bounded': 3.0, 'levels': 8.0, 'levels_bounded': 5.0, 'max': 3.0, 'max_executed': 1.0, 'max_bounded': 2.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-47] DEBUG :: ASH Planner Main #1 >> Reaction at search length 25:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     25 : Current =     26
Incrementor step ends | Minimum  =     25 : Maximum =    200

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(26)]), ('state_module', [Number(26), Number(22)]), ('plan_module', [Number(26), Number(22), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(26), Number(22), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('conformance_module', [Number(26), Number(22), Number(8), Number(10), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.199777s.

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012046s with result Satisfiable.

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.2118232000000262, Incremental time limit = None
Running cumulative time = 0.803867000000082, Cumulative time limit = 1800
Used memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.770676s, Solving = 0.033191s, Total = 0.803867s, Memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Step range = [22-26]), Calls = 4
Final Model :: Total atoms = 5284, Cost = (7, 0, 0), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[16-02-2022_21-58-47] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=25, end_step=26, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.7706764000000703, solving_time=0.03319060000001173, total_time=0.803867000000082, memory=Memory(rss=732.01171875, vms=722.14453125), step_range=range(22, 27), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.19977670000002945, solving_time=0.01204649999999674, total_time=0.2118232000000262, memory=Memory(rss=732.01171875, vms=722.14453125), step_range=range(26, 27), clingo_stats={'problem': {'lp': {'atoms': 19612.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 45915.0, 'bodies_tr': 45915.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 864.0, 'count_bodies_tr': 864.0, 'sccs': 85.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1355.0, 'rules': 68542.0, 'rules_normal': 67402.0, 'rules_choice': 1128.0, 'rules_minimize': 12.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 68542.0, 'rules_tr_normal': 67402.0, 'rules_tr_choice': 1128.0, 'rules_tr_minimize': 12.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 44003.0, 'eqs_atom': 10788.0, 'eqs_body': 3151.0, 'eqs_other': 30064.0}, 'lpStep': {'atoms': 2883.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 10683.0, 'bodies_tr': 10683.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 398.0, 'rules': 14535.0, 'rules_normal': 14337.0, 'rules_choice': 195.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 14535.0, 'rules_tr_normal': 14337.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 6862.0, 'eqs_atom': 1437.0, 'eqs_body': 187.0, 'eqs_other': 5238.0}, 'generator': {'vars': 4720.0, 'vars_eliminated': 0.0, 'vars_frozen': 3057.0, 'constraints': 642.0, 'constraints_binary': 12332.0, 'constraints_ternary': 2518.0, 'acyc_edges': 0.0, 'complexity': 15648.0}}, 'solving': {'solvers': {'choices': 396.0, 'conflicts': 33.0, 'conflicts_analyzed': 26.0, 'restarts': 0.0, 'restarts_last': 11.0, 'extra': {'domain_choices': 25.0, 'models': 1.0, 'models_level': 82.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 24.0, 'distributed_sum_lbd': 60.0, 'integrated': 95.0, 'lemmas': 291.0, 'lits_learnt': 2009.0, 'lemmas_binary': 25.0, 'lemmas_ternary': 18.0, 'cpu_time': 0.0, 'integrated_imps': 20.0, 'integrated_jumps': 36.0, 'guiding_paths_lits': 156.0, 'guiding_paths': 10.0, 'splits': 0.0, 'lemmas_conflict': 23.0, 'lemmas_loop': 174.0, 'lemmas_other': 94.0, 'lits_conflict': 143.0, 'lits_loop': 1361.0, 'lits_other': 505.0, 'jumps': {'jumps': 26.0, 'jumps_bounded': 6.0, 'levels': 159.0, 'levels_bounded': 87.0, 'max': 45.0, 'max_executed': 45.0, 'max_bounded': 27.0}}}}, 'summary': {'call': 4.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [7.0, 0.0, 0.0], 'lower': [7.0, 0.0, 0.0], 'concurrency': 6.0, 'winner': 5.0, 'times': {'total': 0.21304702758789062, 'cpu': 0.203125, 'solve': 0.0060024261474609375, 'unsat': 0.0050029754638671875, 'sat': 0.00099945068359375}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.8451824188232422, 'cpu': 0.828125, 'solve': 0.01399993896484375, 'unsat': 0.01000213623046875, 'sat': 0.0019989013671875}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 444.0, 'conflicts': 43.0, 'conflicts_analyzed': 29.0, 'restarts': 0.0, 'restarts_last': 11.0, 'extra': {'domain_choices': 25.0, 'models': 3.0, 'models_level': 109.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 35.0, 'distributed_sum_lbd': 82.0, 'integrated': 112.0, 'lemmas': 335.0, 'lits_learnt': 2283.0, 'lemmas_binary': 33.0, 'lemmas_ternary': 18.0, 'cpu_time': 0.0, 'integrated_imps': 26.0, 'integrated_jumps': 36.0, 'guiding_paths_lits': 360.0, 'guiding_paths': 31.0, 'splits': 0.0, 'lemmas_conflict': 26.0, 'lemmas_loop': 209.0, 'lemmas_other': 100.0, 'lits_conflict': 155.0, 'lits_loop': 1599.0, 'lits_other': 529.0, 'jumps': {'jumps': 29.0, 'jumps_bounded': 9.0, 'levels': 167.0, 'levels_bounded': 92.0, 'max': 45.0, 'max_executed': 45.0, 'max_bounded': 27.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-47] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{8: 23, 9: 26}

[16-02-2022_21-58-47] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 10 achieved :: Progression >> total requested sgoals = 3, current total achieved sgoals = 3 (100.00% solved)

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(10, 26)', truth=True, inc_range=None)

[16-02-2022_21-58-47] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 10, step = 26]:
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 10)
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 10)

[16-02-2022_21-58-47] DEBUG :: ASH Planner Main #1 >> Reaction at search length 26:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     26 : Current =     27
Incrementor step ends | Minimum  =     25 : Maximum =    200

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(27)]), ('state_module', [Number(27), Number(22)]), ('plan_module', [Number(27), Number(22), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(27), Number(22), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('conformance_module', [Number(27), Number(22), Number(8), Number(10), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.220577s.

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 27: original = External(symbol='current_last_sgoals(10, 26)', truth=True, inc_range=None), conversion = current_last_sgoals(10,26).

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013350s with result Satisfiable.

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.23392709999995986, Incremental time limit = None
Running cumulative time = 1.037794100000042, Cumulative time limit = 1800
Used memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.991253s, Solving = 0.046541s, Total = 1.037794s, Memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Step range = [22-27]), Calls = 5
Final Model :: Total atoms = 5660, Cost = (9, 0, 0), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[16-02-2022_21-58-47] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=26, end_step=27, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.9912534000001187, solving_time=0.04654069999992316, total_time=1.037794100000042, memory=Memory(rss=732.01171875, vms=722.14453125), step_range=range(22, 28), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.22057700000004843, solving_time=0.013350099999911436, total_time=0.23392709999995986, memory=Memory(rss=732.01171875, vms=722.14453125), step_range=range(27, 28), clingo_stats={'problem': {'lp': {'atoms': 22755.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 56888.0, 'bodies_tr': 56888.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1065.0, 'count_bodies_tr': 1065.0, 'sccs': 110.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1753.0, 'rules': 83370.0, 'rules_normal': 82032.0, 'rules_choice': 1323.0, 'rules_minimize': 15.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 83370.0, 'rules_tr_normal': 82032.0, 'rules_tr_choice': 1323.0, 'rules_tr_minimize': 15.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 51205.0, 'eqs_atom': 12241.0, 'eqs_body': 3344.0, 'eqs_other': 35620.0}, 'lpStep': {'atoms': 3143.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 10973.0, 'bodies_tr': 10973.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 398.0, 'rules': 14828.0, 'rules_normal': 14630.0, 'rules_choice': 195.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 14828.0, 'rules_tr_normal': 14630.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7202.0, 'eqs_atom': 1453.0, 'eqs_body': 193.0, 'eqs_other': 5556.0}, 'generator': {'vars': 6260.0, 'vars_eliminated': 0.0, 'vars_frozen': 3983.0, 'constraints': 850.0, 'constraints_binary': 17036.0, 'constraints_ternary': 3672.0, 'acyc_edges': 0.0, 'complexity': 21766.0}}, 'solving': {'solvers': {'choices': 322.0, 'conflicts': 11.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 30.0, 'models': 1.0, 'models_level': 97.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 16.0, 'integrated': 28.0, 'lemmas': 96.0, 'lits_learnt': 628.0, 'lemmas_binary': 12.0, 'lemmas_ternary': 4.0, 'cpu_time': 0.03125, 'integrated_imps': 17.0, 'integrated_jumps': 3.0, 'guiding_paths_lits': 186.0, 'guiding_paths': 10.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 67.0, 'lemmas_other': 22.0, 'lits_conflict': 27.0, 'lits_loop': 514.0, 'lits_other': 87.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 4.0, 'levels': 17.0, 'levels_bounded': 7.0, 'max': 4.0, 'max_executed': 4.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 5.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [9.0, 0.0, 0.0], 'lower': [9.0, 0.0, 0.0], 'concurrency': 6.0, 'winner': 4.0, 'times': {'total': 0.23505020141601562, 'cpu': 0.25, 'solve': 0.006000518798828125, 'unsat': 0.0039997100830078125, 'sat': 0.0020008087158203125}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 1.0802326202392578, 'cpu': 1.078125, 'solve': 0.020000457763671875, 'unsat': 0.014001846313476562, 'sat': 0.0039997100830078125}, 'models': {'enumerated': 4.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 766.0, 'conflicts': 54.0, 'conflicts_analyzed': 36.0, 'restarts': 0.0, 'restarts_last': 11.0, 'extra': {'domain_choices': 55.0, 'models': 4.0, 'models_level': 206.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 42.0, 'distributed_sum_lbd': 98.0, 'integrated': 140.0, 'lemmas': 431.0, 'lits_learnt': 2911.0, 'lemmas_binary': 45.0, 'lemmas_ternary': 22.0, 'cpu_time': 0.03125, 'integrated_imps': 43.0, 'integrated_jumps': 39.0, 'guiding_paths_lits': 546.0, 'guiding_paths': 41.0, 'splits': 0.0, 'lemmas_conflict': 33.0, 'lemmas_loop': 276.0, 'lemmas_other': 122.0, 'lits_conflict': 182.0, 'lits_loop': 2113.0, 'lits_other': 616.0, 'jumps': {'jumps': 36.0, 'jumps_bounded': 13.0, 'levels': 184.0, 'levels_bounded': 99.0, 'max': 45.0, 'max_executed': 45.0, 'max_bounded': 27.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-47] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{8: 23, 9: 26, 10: 27}

[16-02-2022_21-58-47] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 11 achieved :: Progression >> total requested sgoals = 3, current total achieved sgoals = 4 (133.33% solved)

[16-02-2022_21-58-47] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 10 was achieved successfully.

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.244229s, Solving = 0.011668s, Total = 0.255897s, Memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Step range = [22-23]
2 : Statistics :: Grounding = 0.143958s, Solving = 0.003975s, Total = 0.147932s, Memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Step range = [24-24]
3 : Statistics :: Grounding = 0.182712s, Solving = 0.005502s, Total = 0.188214s, Memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Step range = [25-25]
4 : Statistics :: Grounding = 0.199777s, Solving = 0.012046s, Total = 0.211823s, Memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Step range = [26-26]
5 : Statistics :: Grounding = 0.220577s, Solving = 0.013350s, Total = 0.233927s, Memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Step range = [27-27]

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 1.037794s due to: External generator exit.

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[16-02-2022_21-58-47] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 5, 19: 6, 20: 7, 21: 7, 22: 7}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 16, 4: 17, 5: 18, 6: 19, 7: 22}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[16-02-2022_21-58-47] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 5, 19: 6, 20: 7, 21: 7, 22: 7, 23: 8, 24: 8, 25: 9, 26: 9, 27: 10}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 16, 4: 17, 5: 18, 6: 19, 7: 22, 8: 24, 9: 26, 10: 27}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[16-02-2022_21-58-47] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 10, Last requested goal index = 10, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[16-02-2022_21-58-47] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.991253s, Solving = 0.046541s, Total = 1.037794s, Memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Step range = [22-27]), Calls = 5
Model :: Total atoms = 5660, Cost = (9, 0, 0), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[16-02-2022_21-58-47] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 5 :: Actions = 9                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 4:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 10:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 11:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 12:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 16:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 18:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 19:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 20:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 21:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 22:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 23:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 24:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 25:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 26:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
        talos : grasp(manipulator_end_2,(block,5))
Step 27:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)

[16-02-2022_21-58-47] DEBUG :: ASH Planner Main #1 >> Monolevel problem 4 at level 1 solved.

[16-02-2022_21-58-47] DEBUG :: ASH Planner Main #1 >> Online planning increment 4 finished.

[16-02-2022_21-58-47] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 1 : Total constraining sub-goal stages = 13 : Goals achieved = 6 : Goals unachieved = 7 : Complete = False
Level = 1 : Solved problems = 4 : Total constraining sub-goal stages = 16 : Goals achieved = 10 : Goals unachieved = 6 : Complete = False

[16-02-2022_21-58-47] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 2.

[16-02-2022_21-58-47] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 5 by method ground-first is [1-1].

[16-02-2022_21-58-47] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 5 at level 1:
Total Templated Partial Problems = 6, Problem Range = [1-6], Size = 16, Sub-goal Stage Range = [1-16]
Division points [total=5] : [(Index = 2, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 4, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 7, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 10, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 13, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[16-02-2022_21-58-47] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [11-13]

[16-02-2022_21-58-47] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [11-13], problem number = 5, increment number = 5

[16-02-2022_21-58-47] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 11)
	('last_sgoals', 13)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x000002960D109A60>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[16-02-2022_21-58-47] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [11-13] : Concurrency enabled : Minimum search length bound disabled with value 29

[16-02-2022_21-58-47] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 11
last_sgoals = 13
start_step = 27
is_initial = False
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 29

[16-02-2022_21-58-47] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[16-02-2022_21-58-47] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[16-02-2022_21-58-47] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[16-02-2022_21-58-47] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[16-02-2022_21-58-47] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[16-02-2022_21-58-47] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 27 as problem start state.

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,6))', 'S': 27})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 27})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 27})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 27})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 27})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 27})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 27})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'S': 27})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 27})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,6)', 'S': 27})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 27})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 27})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 27})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 27})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,1)', 'S': 27})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 27})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(store_room,0)', 'S': 27})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(store_room,0)', 'S': 27})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(store_room,0)', 'S': 27})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(store_room,0)', 'S': 27})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(store_room,0)', 'S': 27})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(store_room,0)', 'S': 27})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(store_room,0)', 'S': 27})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 27})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 27})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 27})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(store_room,0)', 'S': 27})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 27})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 27})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 27})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 27})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 27})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 27})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 27})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 27})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 27})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 27})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 27})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 27})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 27})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'S': 27})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 27})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 27})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 27})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 27})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 27})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 27})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'S': 27})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 27})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 27})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 27})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 27})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 27})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 27})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 27})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'store_room', 'S': 27})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'store_room', 'S': 27})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 27})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'store_room', 'S': 27})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 27})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 27})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 27})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 27})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 27})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 27})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 27})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 27})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 27})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 27})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 27})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 27})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 27})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'S': 27})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 27})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 27})

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 27).
holds(1, complete_tower(red,puzzle_room_table), false, 27).
holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 27).
holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 27).
holds(1, configuration(manipulator_limb_1), retracted, 27).
holds(1, configuration(manipulator_limb_2), retracted, 27).
holds(1, configuration(puzzle_room_door), open, 27).
holds(1, configuration(starting_room_door), closed, 27).
holds(1, configuration(store_room_door), open, 27).
holds(1, grasping(manipulator_arm_1), (block,6), 27).
holds(1, grasping(manipulator_arm_2), (block,5), 27).
holds(1, grasping(manipulator_end_1), (block,6), 27).
holds(1, grasping(manipulator_end_2), (block,5), 27).
holds(1, in((block,1)), (puzzle_room,1), 27).
holds(1, in((block,2)), (puzzle_room,1), 27).
holds(1, in((block,3)), (puzzle_room,1), 27).
holds(1, in((block,4)), (puzzle_room,1), 27).
holds(1, in((block,5)), (store_room,0), 27).
holds(1, in((block,6)), (store_room,0), 27).
holds(1, in(manipulator_arm_1), (store_room,0), 27).
holds(1, in(manipulator_arm_2), (store_room,0), 27).
holds(1, in(manipulator_end_1), (store_room,0), 27).
holds(1, in(manipulator_end_2), (store_room,0), 27).
holds(1, in(manipulator_limb_1), (store_room,0), 27).
holds(1, in(manipulator_limb_2), (store_room,0), 27).
holds(1, in(puzzle_room_table), (puzzle_room,1), 27).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 27).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 27).
holds(1, in(talos), (store_room,0), 27).
holds(1, in_tower((block,1),(block,1)), true, 27).
holds(1, in_tower((block,1),(block,2)), false, 27).
holds(1, in_tower((block,1),(block,3)), true, 27).
holds(1, in_tower((block,1),(block,4)), false, 27).
holds(1, in_tower((block,1),(block,5)), false, 27).
holds(1, in_tower((block,1),(block,6)), false, 27).
holds(1, in_tower((block,2),(block,1)), false, 27).
holds(1, in_tower((block,2),(block,2)), true, 27).
holds(1, in_tower((block,2),(block,3)), false, 27).
holds(1, in_tower((block,2),(block,4)), true, 27).
holds(1, in_tower((block,2),(block,5)), false, 27).
holds(1, in_tower((block,2),(block,6)), false, 27).
holds(1, in_tower((block,3),(block,1)), false, 27).
holds(1, in_tower((block,3),(block,2)), false, 27).
holds(1, in_tower((block,3),(block,3)), false, 27).
holds(1, in_tower((block,3),(block,4)), false, 27).
holds(1, in_tower((block,3),(block,5)), false, 27).
holds(1, in_tower((block,3),(block,6)), false, 27).
holds(1, in_tower((block,4),(block,1)), false, 27).
holds(1, in_tower((block,4),(block,2)), false, 27).
holds(1, in_tower((block,4),(block,3)), false, 27).
holds(1, in_tower((block,4),(block,4)), false, 27).
holds(1, in_tower((block,4),(block,5)), false, 27).
holds(1, in_tower((block,4),(block,6)), false, 27).
holds(1, in_tower((block,5),(block,1)), false, 27).
holds(1, in_tower((block,5),(block,2)), false, 27).
holds(1, in_tower((block,5),(block,3)), false, 27).
holds(1, in_tower((block,5),(block,4)), false, 27).
holds(1, in_tower((block,5),(block,5)), false, 27).
holds(1, in_tower((block,5),(block,6)), false, 27).
holds(1, in_tower((block,6),(block,1)), false, 27).
holds(1, in_tower((block,6),(block,2)), false, 27).
holds(1, in_tower((block,6),(block,3)), false, 27).
holds(1, in_tower((block,6),(block,4)), false, 27).
holds(1, in_tower((block,6),(block,5)), false, 27).
holds(1, in_tower((block,6),(block,6)), false, 27).
holds(1, on((block,1)), puzzle_room_table_left, 27).
holds(1, on((block,2)), puzzle_room_table_right, 27).
holds(1, on((block,3)), (block,1), 27).
holds(1, on((block,4)), (block,2), 27).
holds(1, on((block,5)), nothing, 27).
holds(1, on((block,6)), nothing, 27).
holds(1, tower_base((block,1),puzzle_room_table), true, 27).
holds(1, tower_base((block,2),puzzle_room_table), true, 27).
holds(1, tower_base((block,3),puzzle_room_table), false, 27).
holds(1, tower_base((block,4),puzzle_room_table), false, 27).
holds(1, tower_base((block,5),puzzle_room_table), false, 27).
holds(1, tower_base((block,6),puzzle_room_table), false, 27).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 27).
holds(1, unordered_tower((block,2),puzzle_room_table), true, 27).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 27).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 27).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 27).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 27).
holds(2, complete_tower(blue,puzzle_room_table), false, 27).
holds(2, complete_tower(red,puzzle_room_table), false, 27).
holds(2, configuration(manipulator_arm_1), retracted, 27).
holds(2, configuration(manipulator_arm_2), retracted, 27).
holds(2, configuration(puzzle_room_door), open, 27).
holds(2, configuration(starting_room_door), closed, 27).
holds(2, configuration(store_room_door), open, 27).
holds(2, grasping(manipulator_arm_1), (block,6), 27).
holds(2, grasping(manipulator_arm_2), (block,5), 27).
holds(2, in((block,1)), puzzle_room, 27).
holds(2, in((block,2)), puzzle_room, 27).
holds(2, in((block,3)), puzzle_room, 27).
holds(2, in((block,4)), puzzle_room, 27).
holds(2, in((block,5)), store_room, 27).
holds(2, in((block,6)), store_room, 27).
holds(2, in(manipulator_arm_1), store_room, 27).
holds(2, in(manipulator_arm_2), store_room, 27).
holds(2, in(puzzle_room_table), puzzle_room, 27).
holds(2, in(talos), store_room, 27).
holds(2, in_tower((block,1),(block,1)), true, 27).
holds(2, in_tower((block,1),(block,2)), false, 27).
holds(2, in_tower((block,1),(block,3)), true, 27).
holds(2, in_tower((block,1),(block,4)), false, 27).
holds(2, in_tower((block,1),(block,5)), false, 27).
holds(2, in_tower((block,1),(block,6)), false, 27).
holds(2, in_tower((block,2),(block,1)), false, 27).
holds(2, in_tower((block,2),(block,2)), true, 27).
holds(2, in_tower((block,2),(block,3)), false, 27).
holds(2, in_tower((block,2),(block,4)), true, 27).
holds(2, in_tower((block,2),(block,5)), false, 27).
holds(2, in_tower((block,2),(block,6)), false, 27).
holds(2, in_tower((block,3),(block,1)), false, 27).
holds(2, in_tower((block,3),(block,2)), false, 27).
holds(2, in_tower((block,3),(block,3)), false, 27).
holds(2, in_tower((block,3),(block,4)), false, 27).
holds(2, in_tower((block,3),(block,5)), false, 27).
holds(2, in_tower((block,3),(block,6)), false, 27).
holds(2, in_tower((block,4),(block,1)), false, 27).
holds(2, in_tower((block,4),(block,2)), false, 27).
holds(2, in_tower((block,4),(block,3)), false, 27).
holds(2, in_tower((block,4),(block,4)), false, 27).
holds(2, in_tower((block,4),(block,5)), false, 27).
holds(2, in_tower((block,4),(block,6)), false, 27).
holds(2, in_tower((block,5),(block,1)), false, 27).
holds(2, in_tower((block,5),(block,2)), false, 27).
holds(2, in_tower((block,5),(block,3)), false, 27).
holds(2, in_tower((block,5),(block,4)), false, 27).
holds(2, in_tower((block,5),(block,5)), false, 27).
holds(2, in_tower((block,5),(block,6)), false, 27).
holds(2, in_tower((block,6),(block,1)), false, 27).
holds(2, in_tower((block,6),(block,2)), false, 27).
holds(2, in_tower((block,6),(block,3)), false, 27).
holds(2, in_tower((block,6),(block,4)), false, 27).
holds(2, in_tower((block,6),(block,5)), false, 27).
holds(2, in_tower((block,6),(block,6)), false, 27).
holds(2, on((block,1)), puzzle_room_table, 27).
holds(2, on((block,2)), puzzle_room_table, 27).
holds(2, on((block,3)), (block,1), 27).
holds(2, on((block,4)), (block,2), 27).
holds(2, on((block,5)), nothing, 27).
holds(2, on((block,6)), nothing, 27).
holds(2, tower_base((block,1),puzzle_room_table), true, 27).
holds(2, tower_base((block,2),puzzle_room_table), true, 27).
holds(2, tower_base((block,3),puzzle_room_table), false, 27).
holds(2, tower_base((block,4),puzzle_room_table), false, 27).
holds(2, tower_base((block,5),puzzle_room_table), false, 27).
holds(2, tower_base((block,6),puzzle_room_table), false, 27).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 27).
holds(2, unordered_tower((block,2),puzzle_room_table), true, 27).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 27).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 27).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 27).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 27).

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[16-02-2022_21-58-47] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 11})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 12})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 13})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 13})

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 4 rules into program part base:

sub_goal(2, talos, move(hallway), in(talos), hallway, 11).
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 12).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 13).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 13).

[16-02-2022_21-58-47] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000002960D0DBD30>]
	incrementor = SolveIncrementor(step_start=27, step_increase=1, step_increase_initial=2, step_end_min=30, step_end_max=200, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 27), range_=None), IncPart(name='plan_module', args=('#inc', 27, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 27, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 27, 11, 13, 'sequential', 'true'), range_=None)]

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 811 rules

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.00458400000002257s

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.032183s.

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005281s with result Satisfiable.

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000029634A47860>

[16-02-2022_21-58-47] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 27)
	('last_sgoals', 13)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002960D109A60>)
	('first_sgoals', 11)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000029634A47860>)

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(11, 28)', truth=True, inc_range=None)

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 27). %* None *%
#program plan_module(#inc, 27, true, false). %* None *%
#program optimisation_module(#inc, 27, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 27, 11, 13, sequential, true). %* None *%

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     26 : Current =     28
Incrementor step ends | Minimum  =     30 : Maximum =    200

[16-02-2022_21-58-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(28)]), ('state_module', [Number(27), Number(27)]), ('plan_module', [Number(27), Number(27), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(27), Number(27), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('conformance_module', [Number(27), Number(27), Number(11), Number(13), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(28), Number(27)]), ('plan_module', [Number(28), Number(27), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(28), Number(27), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('conformance_module', [Number(28), Number(27), Number(11), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.245465s.

[16-02-2022_21-58-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 27: original = External(symbol='current_last_sgoals(11, 28)', truth=True, inc_range=None), conversion = current_last_sgoals(11,28).

[16-02-2022_21-58-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 28: original = External(symbol='current_last_sgoals(11, 28)', truth=True, inc_range=None), conversion = current_last_sgoals(11,28).

[16-02-2022_21-58-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008138s with result Unsatisfiable.

[16-02-2022_21-58-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.2536023000000114, Incremental time limit = None
Running cumulative time = 0.2536023000000114, Cumulative time limit = 1800
Used memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-48] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=26, end_step=28, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.2454645000000255, solving_time=0.008137799999985873, total_time=0.2536023000000114, memory=Memory(rss=732.01171875, vms=722.14453125), step_range=range(27, 29), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2454645000000255, solving_time=0.008137799999985873, total_time=0.2536023000000114, memory=Memory(rss=732.01171875, vms=722.14453125), step_range=range(27, 29), clingo_stats={'problem': {'lp': {'atoms': 12179.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15680.0, 'bodies_tr': 15680.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 261.0, 'count_bodies_tr': 261.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 516.0, 'rules': 27665.0, 'rules_normal': 27119.0, 'rules_choice': 543.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 27665.0, 'rules_tr_normal': 27119.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 26197.0, 'eqs_atom': 7056.0, 'eqs_body': 1980.0, 'eqs_other': 17161.0}, 'lpStep': {'atoms': 5660.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13061.0, 'bodies_tr': 13061.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 261.0, 'count_bodies_tr': 261.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 516.0, 'rules': 20236.0, 'rules_normal': 19690.0, 'rules_choice': 543.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 20236.0, 'rules_tr_normal': 19690.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 13141.0, 'eqs_atom': 2146.0, 'eqs_body': 455.0, 'eqs_other': 10540.0}, 'generator': {'vars': 2141.0, 'vars_eliminated': 0.0, 'vars_frozen': 1434.0, 'constraints': 21.0, 'constraints_binary': 795.0, 'constraints_ternary': 119.0, 'acyc_edges': 0.0, 'complexity': 953.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 3.0, 'lits_learnt': 3.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 66.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 3.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf, inf], 'lower': [0.0, 0.0, 0.0], 'concurrency': 6.0, 'winner': 1.0, 'times': {'total': 0.2530536651611328, 'cpu': 0.234375, 'solve': 0.00099945068359375, 'unsat': 0.00099945068359375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.2960624694824219, 'cpu': 0.25, 'solve': 0.003997802734375, 'unsat': 0.00099945068359375, 'sat': 0.00099945068359375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 3.0, 'lits_learnt': 3.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 72.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 3.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     28 : Current =     29
Incrementor step ends | Minimum  =     30 : Maximum =    200

[16-02-2022_21-58-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(29)]), ('state_module', [Number(29), Number(27)]), ('plan_module', [Number(29), Number(27), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(27), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(27), Number(11), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.137526s.

[16-02-2022_21-58-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008288s with result Satisfiable.

[16-02-2022_21-58-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.14581390000000738, Incremental time limit = None
Running cumulative time = 0.39941620000001876, Cumulative time limit = 1800
Used memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.382991s, Solving = 0.016425s, Total = 0.399416s, Memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Step range = [27-29]), Calls = 2
Final Model :: Total atoms = 4523, Cost = (2, 0, 0), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[16-02-2022_21-58-48] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=28, end_step=29, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.38299080000001595, solving_time=0.01642540000000281, total_time=0.39941620000001876, memory=Memory(rss=732.01171875, vms=722.14453125), step_range=range(27, 30), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.13752629999999044, solving_time=0.008287600000016937, total_time=0.14581390000000738, memory=Memory(rss=732.01171875, vms=722.14453125), step_range=range(29, 30), clingo_stats={'problem': {'lp': {'atoms': 14031.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25051.0, 'bodies_tr': 25051.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 462.0, 'count_bodies_tr': 462.0, 'sccs': 47.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 692.0, 'rules': 40052.0, 'rules_normal': 39308.0, 'rules_choice': 738.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 40052.0, 'rules_tr_normal': 39308.0, 'rules_tr_choice': 738.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 29959.0, 'eqs_atom': 7827.0, 'eqs_body': 2395.0, 'eqs_other': 19737.0}, 'lpStep': {'atoms': 1852.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 9371.0, 'bodies_tr': 9371.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 176.0, 'rules': 12387.0, 'rules_normal': 12189.0, 'rules_choice': 195.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 12387.0, 'rules_tr_normal': 12189.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3762.0, 'eqs_atom': 771.0, 'eqs_body': 415.0, 'eqs_other': 2576.0}, 'generator': {'vars': 2483.0, 'vars_eliminated': 0.0, 'vars_frozen': 1678.0, 'constraints': 134.0, 'constraints_binary': 1764.0, 'constraints_ternary': 336.0, 'acyc_edges': 0.0, 'complexity': 2280.0}}, 'solving': {'solvers': {'choices': 454.0, 'conflicts': 13.0, 'conflicts_analyzed': 10.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 10.0, 'models': 1.0, 'models_level': 37.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 12.0, 'integrated': 40.0, 'lemmas': 48.0, 'lits_learnt': 72.0, 'lemmas_binary': 24.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 25.0, 'integrated_jumps': 194.0, 'guiding_paths_lits': 96.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 6.0, 'lemmas_loop': 2.0, 'lemmas_other': 40.0, 'lits_conflict': 8.0, 'lits_loop': 4.0, 'lits_other': 60.0, 'jumps': {'jumps': 10.0, 'jumps_bounded': 4.0, 'levels': 209.0, 'levels_bounded': 68.0, 'max': 31.0, 'max_executed': 31.0, 'max_bounded': 17.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [2.0, 0.0, 0.0], 'lower': [2.0, 0.0, 0.0], 'concurrency': 6.0, 'winner': 1.0, 'times': {'total': 0.1470317840576172, 'cpu': 0.15625, 'solve': 0.0049991607666015625, 'unsat': 0.004001617431640625, 'sat': 0.0009975433349609375}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.44309425354003906, 'cpu': 0.40625, 'solve': 0.008996963500976562, 'unsat': 0.005001068115234375, 'sat': 0.0019969940185546875}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 454.0, 'conflicts': 13.0, 'conflicts_analyzed': 10.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 10.0, 'models': 2.0, 'models_level': 38.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 12.0, 'integrated': 40.0, 'lemmas': 51.0, 'lits_learnt': 75.0, 'lemmas_binary': 24.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 25.0, 'integrated_jumps': 194.0, 'guiding_paths_lits': 168.0, 'guiding_paths': 20.0, 'splits': 0.0, 'lemmas_conflict': 6.0, 'lemmas_loop': 5.0, 'lemmas_other': 40.0, 'lits_conflict': 8.0, 'lits_loop': 7.0, 'lits_other': 60.0, 'jumps': {'jumps': 10.0, 'jumps_bounded': 4.0, 'levels': 209.0, 'levels_bounded': 68.0, 'max': 31.0, 'max_executed': 31.0, 'max_bounded': 17.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-48] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{11: 29}

[16-02-2022_21-58-48] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 12 achieved :: Progression >> total requested sgoals = 3, current total achieved sgoals = 2 ( 66.67% solved)

[16-02-2022_21-58-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(12, 29)', truth=True, inc_range=None)

[16-02-2022_21-58-48] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 12, step = 29]:
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 12)

[16-02-2022_21-58-48] DEBUG :: ASH Planner Main #1 >> Reaction at search length 29:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[16-02-2022_21-58-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     29 : Current =     30
Incrementor step ends | Minimum  =     30 : Maximum =    200

[16-02-2022_21-58-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(30)]), ('state_module', [Number(30), Number(27)]), ('plan_module', [Number(30), Number(27), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(27), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('conformance_module', [Number(30), Number(27), Number(11), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.186187s.

[16-02-2022_21-58-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 30: original = External(symbol='current_last_sgoals(12, 29)', truth=True, inc_range=None), conversion = current_last_sgoals(12,29).

[16-02-2022_21-58-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006101s with result Unsatisfiable.

[16-02-2022_21-58-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.19228869999994913, Incremental time limit = None
Running cumulative time = 0.5917048999999679, Cumulative time limit = 1800
Used memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-48] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=29, end_step=30, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.5691782999999759, solving_time=0.02252659999999196, total_time=0.5917048999999679, memory=Memory(rss=732.01171875, vms=722.14453125), step_range=range(27, 31), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.18618749999995998, solving_time=0.006101199999989149, total_time=0.19228869999994913, memory=Memory(rss=732.01171875, vms=722.14453125), step_range=range(30, 31), clingo_stats={'problem': {'lp': {'atoms': 16813.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 34923.0, 'bodies_tr': 34923.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 663.0, 'count_bodies_tr': 663.0, 'sccs': 64.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 946.0, 'rules': 53765.0, 'rules_normal': 52823.0, 'rules_choice': 933.0, 'rules_minimize': 9.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 53765.0, 'rules_tr_normal': 52823.0, 'rules_tr_choice': 933.0, 'rules_tr_minimize': 9.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 36521.0, 'eqs_atom': 9405.0, 'eqs_body': 2744.0, 'eqs_other': 24372.0}, 'lpStep': {'atoms': 2782.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 9872.0, 'bodies_tr': 9872.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 17.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 254.0, 'rules': 13713.0, 'rules_normal': 13515.0, 'rules_choice': 195.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 13713.0, 'rules_tr_normal': 13515.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 6562.0, 'eqs_atom': 1578.0, 'eqs_body': 349.0, 'eqs_other': 4635.0}, 'generator': {'vars': 3091.0, 'vars_eliminated': 0.0, 'vars_frozen': 2114.0, 'constraints': 295.0, 'constraints_binary': 4040.0, 'constraints_ternary': 852.0, 'acyc_edges': 0.0, 'complexity': 5273.0}}, 'solving': {'solvers': {'choices': 6.0, 'conflicts': 7.0, 'conflicts_analyzed': 1.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5.0, 'distributed_sum_lbd': 10.0, 'integrated': 20.0, 'lemmas': 14.0, 'lits_learnt': 92.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 4.0, 'cpu_time': 0.0, 'integrated_imps': 4.0, 'integrated_jumps': 5.0, 'guiding_paths_lits': 126.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 9.0, 'lemmas_other': 4.0, 'lits_conflict': 7.0, 'lits_loop': 57.0, 'lits_other': 28.0, 'jumps': {'jumps': 1.0, 'jumps_bounded': 1.0, 'levels': 3.0, 'levels_bounded': 2.0, 'max': 3.0, 'max_executed': 1.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 3.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf, inf], 'lower': [1.0, 0.0, -2.0], 'concurrency': 6.0, 'winner': 5.0, 'times': {'total': 0.1930408477783203, 'cpu': 0.171875, 'solve': 0.00099945068359375, 'unsat': 0.00099945068359375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.6361351013183594, 'cpu': 0.578125, 'solve': 0.009996414184570312, 'unsat': 0.006000518798828125, 'sat': 0.0019969940185546875}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 460.0, 'conflicts': 20.0, 'conflicts_analyzed': 11.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 10.0, 'models': 2.0, 'models_level': 38.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 13.0, 'distributed_sum_lbd': 22.0, 'integrated': 60.0, 'lemmas': 65.0, 'lits_learnt': 167.0, 'lemmas_binary': 24.0, 'lemmas_ternary': 4.0, 'cpu_time': 0.015625, 'integrated_imps': 29.0, 'integrated_jumps': 199.0, 'guiding_paths_lits': 294.0, 'guiding_paths': 27.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 14.0, 'lemmas_other': 44.0, 'lits_conflict': 15.0, 'lits_loop': 64.0, 'lits_other': 88.0, 'jumps': {'jumps': 11.0, 'jumps_bounded': 5.0, 'levels': 212.0, 'levels_bounded': 70.0, 'max': 31.0, 'max_executed': 31.0, 'max_bounded': 17.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-48] DEBUG :: ASH Planner Main #1 >> Reaction at search length 30:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[16-02-2022_21-58-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     30 : Current =     31
Incrementor step ends | Minimum  =     30 : Maximum =    200

[16-02-2022_21-58-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(31)]), ('state_module', [Number(31), Number(27)]), ('plan_module', [Number(31), Number(27), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(31), Number(27), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('conformance_module', [Number(31), Number(27), Number(11), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.188098s.

[16-02-2022_21-58-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006804s with result Unsatisfiable.

[16-02-2022_21-58-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.19490259999986392, Incremental time limit = None
Running cumulative time = 0.7866074999998318, Cumulative time limit = 1800
Used memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-48] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=30, end_step=31, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.7572763999999097, solving_time=0.029331099999922117, total_time=0.7866074999998318, memory=Memory(rss=732.01171875, vms=722.14453125), step_range=range(27, 32), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.18809809999993377, solving_time=0.006804499999930158, total_time=0.19490259999986392, memory=Memory(rss=732.01171875, vms=722.14453125), step_range=range(31, 32), clingo_stats={'problem': {'lp': {'atoms': 19646.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 45102.0, 'bodies_tr': 45102.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 864.0, 'count_bodies_tr': 864.0, 'sccs': 81.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1204.0, 'rules': 67791.0, 'rules_normal': 66651.0, 'rules_choice': 1128.0, 'rules_minimize': 12.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 67791.0, 'rules_tr_normal': 66651.0, 'rules_tr_choice': 1128.0, 'rules_tr_minimize': 12.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 44549.0, 'eqs_atom': 11008.0, 'eqs_body': 3239.0, 'eqs_other': 30302.0}, 'lpStep': {'atoms': 2833.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 10179.0, 'bodies_tr': 10179.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 17.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 258.0, 'rules': 14026.0, 'rules_normal': 13828.0, 'rules_choice': 195.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 14026.0, 'rules_tr_normal': 13828.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 8028.0, 'eqs_atom': 1603.0, 'eqs_body': 495.0, 'eqs_other': 5930.0}, 'generator': {'vars': 3899.0, 'vars_eliminated': 0.0, 'vars_frozen': 2632.0, 'constraints': 476.0, 'constraints_binary': 7677.0, 'constraints_ternary': 1670.0, 'acyc_edges': 0.0, 'complexity': 9961.0}}, 'solving': {'solvers': {'choices': 51.0, 'conflicts': 29.0, 'conflicts_analyzed': 23.0, 'restarts': 0.0, 'restarts_last': 8.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 31.0, 'distributed_sum_lbd': 63.0, 'integrated': 153.0, 'lemmas': 229.0, 'lits_learnt': 1822.0, 'lemmas_binary': 29.0, 'lemmas_ternary': 24.0, 'cpu_time': 0.0, 'integrated_imps': 71.0, 'integrated_jumps': 23.0, 'guiding_paths_lits': 156.0, 'guiding_paths': 10.0, 'splits': 0.0, 'lemmas_conflict': 23.0, 'lemmas_loop': 73.0, 'lemmas_other': 133.0, 'lits_conflict': 221.0, 'lits_loop': 596.0, 'lits_other': 1005.0, 'jumps': {'jumps': 23.0, 'jumps_bounded': 8.0, 'levels': 67.0, 'levels_bounded': 39.0, 'max': 29.0, 'max_executed': 29.0, 'max_bounded': 27.0}}}}, 'summary': {'call': 4.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf, inf], 'lower': [4.0, 0.0, -4.0], 'concurrency': 6.0, 'winner': 5.0, 'times': {'total': 0.19504165649414062, 'cpu': 0.1875, 'solve': 0.00099945068359375, 'unsat': 0.00099945068359375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.8311767578125, 'cpu': 0.765625, 'solve': 0.010995864868164062, 'unsat': 0.006999969482421875, 'sat': 0.0019969940185546875}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 511.0, 'conflicts': 49.0, 'conflicts_analyzed': 34.0, 'restarts': 0.0, 'restarts_last': 8.0, 'extra': {'domain_choices': 10.0, 'models': 2.0, 'models_level': 38.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 44.0, 'distributed_sum_lbd': 85.0, 'integrated': 213.0, 'lemmas': 294.0, 'lits_learnt': 1989.0, 'lemmas_binary': 53.0, 'lemmas_ternary': 28.0, 'cpu_time': 0.015625, 'integrated_imps': 100.0, 'integrated_jumps': 222.0, 'guiding_paths_lits': 450.0, 'guiding_paths': 37.0, 'splits': 0.0, 'lemmas_conflict': 30.0, 'lemmas_loop': 87.0, 'lemmas_other': 177.0, 'lits_conflict': 236.0, 'lits_loop': 660.0, 'lits_other': 1093.0, 'jumps': {'jumps': 34.0, 'jumps_bounded': 13.0, 'levels': 279.0, 'levels_bounded': 109.0, 'max': 31.0, 'max_executed': 31.0, 'max_bounded': 27.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-48] DEBUG :: ASH Planner Main #1 >> Reaction at search length 31:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[16-02-2022_21-58-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     31 : Current =     32
Incrementor step ends | Minimum  =     30 : Maximum =    200

[16-02-2022_21-58-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(32)]), ('state_module', [Number(32), Number(27)]), ('plan_module', [Number(32), Number(27), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(32), Number(27), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(32)]), ('action_preconditions', [Number(32)]), ('variable_relations', [Number(32)]), ('abstraction_mappings', [Number(32)]), ('conformance_module', [Number(32), Number(27), Number(11), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.210216s.

[16-02-2022_21-58-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013545s with result Satisfiable.

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.2237607999999227, Incremental time limit = None
Running cumulative time = 1.0103682999997545, Cumulative time limit = 1800
Used memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.967492s, Solving = 0.042876s, Total = 1.010368s, Memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Step range = [27-32]), Calls = 5
Final Model :: Total atoms = 5635, Cost = (5, 0, 0), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[16-02-2022_21-58-49] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=31, end_step=32, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.9674919999998792, solving_time=0.0428762999998753, total_time=1.0103682999997545, memory=Memory(rss=732.01171875, vms=722.14453125), step_range=range(27, 33), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.21021559999996953, solving_time=0.013545199999953184, total_time=0.2237607999999227, memory=Memory(rss=732.01171875, vms=722.14453125), step_range=range(32, 33), clingo_stats={'problem': {'lp': {'atoms': 22537.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 55882.0, 'bodies_tr': 55882.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1065.0, 'count_bodies_tr': 1065.0, 'sccs': 106.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1602.0, 'rules': 82422.0, 'rules_normal': 81084.0, 'rules_choice': 1323.0, 'rules_minimize': 15.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 82422.0, 'rules_tr_normal': 81084.0, 'rules_tr_choice': 1323.0, 'rules_tr_minimize': 15.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 51480.0, 'eqs_atom': 12439.0, 'eqs_body': 3419.0, 'eqs_other': 35622.0}, 'lpStep': {'atoms': 2891.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 10780.0, 'bodies_tr': 10780.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 398.0, 'rules': 14631.0, 'rules_normal': 14433.0, 'rules_choice': 195.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 14631.0, 'rules_tr_normal': 14433.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 6931.0, 'eqs_atom': 1431.0, 'eqs_body': 180.0, 'eqs_other': 5320.0}, 'generator': {'vars': 5424.0, 'vars_eliminated': 0.0, 'vars_frozen': 3554.0, 'constraints': 850.0, 'constraints_binary': 15195.0, 'constraints_ternary': 3495.0, 'acyc_edges': 0.0, 'complexity': 19746.0}}, 'solving': {'solvers': {'choices': 377.0, 'conflicts': 44.0, 'conflicts_analyzed': 39.0, 'restarts': 0.0, 'restarts_last': 12.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 67.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 37.0, 'distributed_sum_lbd': 76.0, 'integrated': 183.0, 'lemmas': 307.0, 'lits_learnt': 2687.0, 'lemmas_binary': 21.0, 'lemmas_ternary': 12.0, 'cpu_time': 0.078125, 'integrated_imps': 109.0, 'integrated_jumps': 87.0, 'guiding_paths_lits': 186.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 38.0, 'lemmas_loop': 116.0, 'lemmas_other': 153.0, 'lits_conflict': 345.0, 'lits_loop': 854.0, 'lits_other': 1488.0, 'jumps': {'jumps': 39.0, 'jumps_bounded': 10.0, 'levels': 330.0, 'levels_bounded': 203.0, 'max': 39.0, 'max_executed': 39.0, 'max_bounded': 35.0}}}}, 'summary': {'call': 5.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [5.0, 0.0, 0.0], 'lower': [5.0, 0.0, 0.0], 'concurrency': 6.0, 'winner': 4.0, 'times': {'total': 0.22504806518554688, 'cpu': 0.296875, 'solve': 0.006999969482421875, 'unsat': 0.005001068115234375, 'sat': 0.0019989013671875}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 1.0562248229980469, 'cpu': 1.0625, 'solve': 0.017995834350585938, 'unsat': 0.01200103759765625, 'sat': 0.0039958953857421875}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 888.0, 'conflicts': 93.0, 'conflicts_analyzed': 73.0, 'restarts': 0.0, 'restarts_last': 12.0, 'extra': {'domain_choices': 10.0, 'models': 3.0, 'models_level': 105.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 81.0, 'distributed_sum_lbd': 161.0, 'integrated': 396.0, 'lemmas': 601.0, 'lits_learnt': 4676.0, 'lemmas_binary': 74.0, 'lemmas_ternary': 40.0, 'cpu_time': 0.09375, 'integrated_imps': 209.0, 'integrated_jumps': 309.0, 'guiding_paths_lits': 636.0, 'guiding_paths': 48.0, 'splits': 0.0, 'lemmas_conflict': 68.0, 'lemmas_loop': 203.0, 'lemmas_other': 330.0, 'lits_conflict': 581.0, 'lits_loop': 1514.0, 'lits_other': 2581.0, 'jumps': {'jumps': 73.0, 'jumps_bounded': 23.0, 'levels': 609.0, 'levels_bounded': 312.0, 'max': 39.0, 'max_executed': 39.0, 'max_bounded': 35.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-49] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{11: 29, 12: 32}

[16-02-2022_21-58-49] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 13 achieved :: Progression >> total requested sgoals = 3, current total achieved sgoals = 3 (100.00% solved)

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(13, 32)', truth=True, inc_range=None)

[16-02-2022_21-58-49] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 13, step = 32]:
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 13)
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 13)

[16-02-2022_21-58-49] DEBUG :: ASH Planner Main #1 >> Reaction at search length 32:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     32 : Current =     33
Incrementor step ends | Minimum  =     30 : Maximum =    200

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(33)]), ('state_module', [Number(33), Number(27)]), ('plan_module', [Number(33), Number(27), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(33), Number(27), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('conformance_module', [Number(33), Number(27), Number(11), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.207696s.

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 33: original = External(symbol='current_last_sgoals(13, 32)', truth=True, inc_range=None), conversion = current_last_sgoals(13,32).

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012586s with result Satisfiable.

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.22028130000001056, Incremental time limit = None
Running cumulative time = 1.230649599999765, Cumulative time limit = 1800
Used memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.175188s, Solving = 0.055462s, Total = 1.230650s, Memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Step range = [27-33]), Calls = 6
Final Model :: Total atoms = 6012, Cost = (7, 0, 0), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[16-02-2022_21-58-49] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=6, start_step=32, end_step=33, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.175187699999924, solving_time=0.05546189999984108, total_time=1.230649599999765, memory=Memory(rss=732.01171875, vms=722.14453125), step_range=range(27, 34), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.20769570000004478, solving_time=0.01258559999996578, total_time=0.22028130000001056, memory=Memory(rss=732.01171875, vms=722.14453125), step_range=range(33, 34), clingo_stats={'problem': {'lp': {'atoms': 25668.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 66842.0, 'bodies_tr': 66842.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1266.0, 'count_bodies_tr': 1266.0, 'sccs': 131.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2000.0, 'rules': 97236.0, 'rules_normal': 95700.0, 'rules_choice': 1518.0, 'rules_minimize': 18.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 97236.0, 'rules_tr_normal': 95700.0, 'rules_tr_choice': 1518.0, 'rules_tr_minimize': 18.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 58669.0, 'eqs_atom': 13886.0, 'eqs_body': 3613.0, 'eqs_other': 41170.0}, 'lpStep': {'atoms': 3131.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 10960.0, 'bodies_tr': 10960.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 398.0, 'rules': 14814.0, 'rules_normal': 14616.0, 'rules_choice': 195.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 14814.0, 'rules_tr_normal': 14616.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7189.0, 'eqs_atom': 1447.0, 'eqs_body': 194.0, 'eqs_other': 5548.0}, 'generator': {'vars': 6947.0, 'vars_eliminated': 0.0, 'vars_frozen': 4474.0, 'constraints': 938.0, 'constraints_binary': 18520.0, 'constraints_ternary': 4505.0, 'acyc_edges': 0.0, 'complexity': 24221.0}}, 'solving': {'solvers': {'choices': 284.0, 'conflicts': 9.0, 'conflicts_analyzed': 3.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 6.0, 'models': 1.0, 'models_level': 86.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2.0, 'distributed_sum_lbd': 4.0, 'integrated': 9.0, 'lemmas': 63.0, 'lits_learnt': 466.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 5.0, 'integrated_jumps': 2.0, 'guiding_paths_lits': 216.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 2.0, 'lemmas_loop': 55.0, 'lemmas_other': 6.0, 'lits_conflict': 11.0, 'lits_loop': 436.0, 'lits_other': 19.0, 'jumps': {'jumps': 3.0, 'jumps_bounded': 2.0, 'levels': 60.0, 'levels_bounded': 3.0, 'max': 55.0, 'max_executed': 55.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 6.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [7.0, 0.0, 0.0], 'lower': [7.0, 0.0, 0.0], 'concurrency': 6.0, 'winner': 4.0, 'times': {'total': 0.22304725646972656, 'cpu': 0.203125, 'solve': 0.006000518798828125, 'unsat': 0.005001068115234375, 'sat': 0.00099945068359375}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 1.2792720794677734, 'cpu': 1.265625, 'solve': 0.023996353149414062, 'unsat': 0.017002105712890625, 'sat': 0.0049953460693359375}, 'models': {'enumerated': 4.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 1172.0, 'conflicts': 102.0, 'conflicts_analyzed': 76.0, 'restarts': 0.0, 'restarts_last': 12.0, 'extra': {'domain_choices': 16.0, 'models': 4.0, 'models_level': 191.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 83.0, 'distributed_sum_lbd': 165.0, 'integrated': 405.0, 'lemmas': 664.0, 'lits_learnt': 5142.0, 'lemmas_binary': 80.0, 'lemmas_ternary': 40.0, 'cpu_time': 0.109375, 'integrated_imps': 214.0, 'integrated_jumps': 311.0, 'guiding_paths_lits': 852.0, 'guiding_paths': 60.0, 'splits': 0.0, 'lemmas_conflict': 70.0, 'lemmas_loop': 258.0, 'lemmas_other': 336.0, 'lits_conflict': 592.0, 'lits_loop': 1950.0, 'lits_other': 2600.0, 'jumps': {'jumps': 76.0, 'jumps_bounded': 25.0, 'levels': 669.0, 'levels_bounded': 315.0, 'max': 55.0, 'max_executed': 55.0, 'max_bounded': 35.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-49] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{11: 29, 12: 32, 13: 33}

[16-02-2022_21-58-49] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 14 achieved :: Progression >> total requested sgoals = 3, current total achieved sgoals = 4 (133.33% solved)

[16-02-2022_21-58-49] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 13 was achieved successfully.

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.245465s, Solving = 0.008138s, Total = 0.253602s, Memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Step range = [27-28]
2 : Statistics :: Grounding = 0.137526s, Solving = 0.008288s, Total = 0.145814s, Memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Step range = [29-29]
3 : Statistics :: Grounding = 0.186187s, Solving = 0.006101s, Total = 0.192289s, Memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Step range = [30-30]
4 : Statistics :: Grounding = 0.188098s, Solving = 0.006804s, Total = 0.194903s, Memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Step range = [31-31]
5 : Statistics :: Grounding = 0.210216s, Solving = 0.013545s, Total = 0.223761s, Memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Step range = [32-32]
6 : Statistics :: Grounding = 0.207696s, Solving = 0.012586s, Total = 0.220281s, Memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Step range = [33-33]

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 1.230650s due to: External generator exit.

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[16-02-2022_21-58-49] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 5, 19: 6, 20: 7, 21: 7, 22: 7, 23: 8, 24: 8, 25: 9, 26: 9, 27: 10}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 16, 4: 17, 5: 18, 6: 19, 7: 22, 8: 24, 9: 26, 10: 27}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[16-02-2022_21-58-49] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 5, 19: 6, 20: 7, 21: 7, 22: 7, 23: 8, 24: 8, 25: 9, 26: 9, 27: 10, 28: 11, 29: 11, 30: 12, 31: 12, 32: 12, 33: 13}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 16, 4: 17, 5: 18, 6: 19, 7: 22, 8: 24, 9: 26, 10: 27, 11: 29, 12: 32, 13: 33}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[16-02-2022_21-58-49] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 13, Last requested goal index = 13, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[16-02-2022_21-58-49] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.175188s, Solving = 0.055462s, Total = 1.230650s, Memory = (RSS = 732.011719Mb, VMS = 722.144531Mb), Step range = [27-33]), Calls = 6
Model :: Total atoms = 6012, Cost = (7, 0, 0), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[16-02-2022_21-58-49] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 6 :: Actions = 7                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 4:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 10:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 11:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 12:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 16:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 18:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 19:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 20:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 21:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 22:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 23:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 24:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 25:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 26:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
        talos : grasp(manipulator_end_2,(block,5))
Step 27:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 28:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 29:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 30:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 31:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 32:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 33:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)

[16-02-2022_21-58-49] DEBUG :: ASH Planner Main #1 >> Monolevel problem 5 at level 1 solved.

[16-02-2022_21-58-49] DEBUG :: ASH Planner Main #1 >> Online planning increment 5 finished.

[16-02-2022_21-58-49] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 1 : Total constraining sub-goal stages = 13 : Goals achieved = 6 : Goals unachieved = 7 : Complete = False
Level = 1 : Solved problems = 5 : Total constraining sub-goal stages = 16 : Goals achieved = 13 : Goals unachieved = 3 : Complete = False

[16-02-2022_21-58-49] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 2.

[16-02-2022_21-58-49] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 6 by method ground-first is [1-1].

[16-02-2022_21-58-49] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 6 at level 1:
Total Templated Partial Problems = 6, Problem Range = [1-6], Size = 16, Sub-goal Stage Range = [1-16]
Division points [total=5] : [(Index = 2, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 4, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 7, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 10, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 13, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[16-02-2022_21-58-49] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [14-16]

[16-02-2022_21-58-49] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [14-16], problem number = 6, increment number = 6

[16-02-2022_21-58-49] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 14)
	('last_sgoals', 16)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x000002960D109A60>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[16-02-2022_21-58-49] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [14-16] : Concurrency enabled : Minimum search length bound disabled with value 35

[16-02-2022_21-58-49] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 14
last_sgoals = 16
start_step = 33
is_initial = False
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 35

[16-02-2022_21-58-49] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[16-02-2022_21-58-49] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[16-02-2022_21-58-49] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[16-02-2022_21-58-49] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[16-02-2022_21-58-49] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[16-02-2022_21-58-49] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 33 as problem start state.

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,6))', 'S': 33})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 33})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 33})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 33})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 33})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 33})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 33})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'S': 33})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 33})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,6)', 'S': 33})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 33})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 33})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 33})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 33})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,1)', 'S': 33})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,0)', 'S': 33})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,0)', 'S': 33})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,0)', 'S': 33})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,0)', 'S': 33})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,0)', 'S': 33})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,0)', 'S': 33})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,0)', 'S': 33})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,0)', 'S': 33})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 33})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 33})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 33})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,0)', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 33})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 33})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 33})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 33})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 33})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 33})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 33})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 33})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 33})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'S': 33})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 33})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 33})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 33})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 33})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 33})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'S': 33})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 33})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 33})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 33})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 33})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 33})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 33})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 33})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 33})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 33})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 33})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'S': 33})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 33})

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 33).
holds(1, complete_tower(red,puzzle_room_table), false, 33).
holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 33).
holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 33).
holds(1, configuration(manipulator_limb_1), extended, 33).
holds(1, configuration(manipulator_limb_2), extended, 33).
holds(1, configuration(puzzle_room_door), open, 33).
holds(1, configuration(starting_room_door), closed, 33).
holds(1, configuration(store_room_door), open, 33).
holds(1, grasping(manipulator_arm_1), (block,6), 33).
holds(1, grasping(manipulator_arm_2), (block,5), 33).
holds(1, grasping(manipulator_end_1), (block,6), 33).
holds(1, grasping(manipulator_end_2), (block,5), 33).
holds(1, in((block,1)), (puzzle_room,1), 33).
holds(1, in((block,2)), (puzzle_room,1), 33).
holds(1, in((block,3)), (puzzle_room,1), 33).
holds(1, in((block,4)), (puzzle_room,1), 33).
holds(1, in((block,5)), (puzzle_room,0), 33).
holds(1, in((block,6)), (puzzle_room,0), 33).
holds(1, in(manipulator_arm_1), (puzzle_room,0), 33).
holds(1, in(manipulator_arm_2), (puzzle_room,0), 33).
holds(1, in(manipulator_end_1), (puzzle_room,0), 33).
holds(1, in(manipulator_end_2), (puzzle_room,0), 33).
holds(1, in(manipulator_limb_1), (puzzle_room,0), 33).
holds(1, in(manipulator_limb_2), (puzzle_room,0), 33).
holds(1, in(puzzle_room_table), (puzzle_room,1), 33).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 33).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 33).
holds(1, in(talos), (puzzle_room,0), 33).
holds(1, in_tower((block,1),(block,1)), true, 33).
holds(1, in_tower((block,1),(block,2)), false, 33).
holds(1, in_tower((block,1),(block,3)), true, 33).
holds(1, in_tower((block,1),(block,4)), false, 33).
holds(1, in_tower((block,1),(block,5)), false, 33).
holds(1, in_tower((block,1),(block,6)), false, 33).
holds(1, in_tower((block,2),(block,1)), false, 33).
holds(1, in_tower((block,2),(block,2)), true, 33).
holds(1, in_tower((block,2),(block,3)), false, 33).
holds(1, in_tower((block,2),(block,4)), true, 33).
holds(1, in_tower((block,2),(block,5)), false, 33).
holds(1, in_tower((block,2),(block,6)), false, 33).
holds(1, in_tower((block,3),(block,1)), false, 33).
holds(1, in_tower((block,3),(block,2)), false, 33).
holds(1, in_tower((block,3),(block,3)), false, 33).
holds(1, in_tower((block,3),(block,4)), false, 33).
holds(1, in_tower((block,3),(block,5)), false, 33).
holds(1, in_tower((block,3),(block,6)), false, 33).
holds(1, in_tower((block,4),(block,1)), false, 33).
holds(1, in_tower((block,4),(block,2)), false, 33).
holds(1, in_tower((block,4),(block,3)), false, 33).
holds(1, in_tower((block,4),(block,4)), false, 33).
holds(1, in_tower((block,4),(block,5)), false, 33).
holds(1, in_tower((block,4),(block,6)), false, 33).
holds(1, in_tower((block,5),(block,1)), false, 33).
holds(1, in_tower((block,5),(block,2)), false, 33).
holds(1, in_tower((block,5),(block,3)), false, 33).
holds(1, in_tower((block,5),(block,4)), false, 33).
holds(1, in_tower((block,5),(block,5)), false, 33).
holds(1, in_tower((block,5),(block,6)), false, 33).
holds(1, in_tower((block,6),(block,1)), false, 33).
holds(1, in_tower((block,6),(block,2)), false, 33).
holds(1, in_tower((block,6),(block,3)), false, 33).
holds(1, in_tower((block,6),(block,4)), false, 33).
holds(1, in_tower((block,6),(block,5)), false, 33).
holds(1, in_tower((block,6),(block,6)), false, 33).
holds(1, on((block,1)), puzzle_room_table_left, 33).
holds(1, on((block,2)), puzzle_room_table_right, 33).
holds(1, on((block,3)), (block,1), 33).
holds(1, on((block,4)), (block,2), 33).
holds(1, on((block,5)), nothing, 33).
holds(1, on((block,6)), nothing, 33).
holds(1, tower_base((block,1),puzzle_room_table), true, 33).
holds(1, tower_base((block,2),puzzle_room_table), true, 33).
holds(1, tower_base((block,3),puzzle_room_table), false, 33).
holds(1, tower_base((block,4),puzzle_room_table), false, 33).
holds(1, tower_base((block,5),puzzle_room_table), false, 33).
holds(1, tower_base((block,6),puzzle_room_table), false, 33).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 33).
holds(1, unordered_tower((block,2),puzzle_room_table), true, 33).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 33).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 33).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 33).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 33).
holds(2, complete_tower(blue,puzzle_room_table), false, 33).
holds(2, complete_tower(red,puzzle_room_table), false, 33).
holds(2, configuration(manipulator_arm_1), extended, 33).
holds(2, configuration(manipulator_arm_2), extended, 33).
holds(2, configuration(puzzle_room_door), open, 33).
holds(2, configuration(starting_room_door), closed, 33).
holds(2, configuration(store_room_door), open, 33).
holds(2, grasping(manipulator_arm_1), (block,6), 33).
holds(2, grasping(manipulator_arm_2), (block,5), 33).
holds(2, in((block,1)), puzzle_room, 33).
holds(2, in((block,2)), puzzle_room, 33).
holds(2, in((block,3)), puzzle_room, 33).
holds(2, in((block,4)), puzzle_room, 33).
holds(2, in((block,5)), puzzle_room, 33).
holds(2, in((block,6)), puzzle_room, 33).
holds(2, in(manipulator_arm_1), puzzle_room, 33).
holds(2, in(manipulator_arm_2), puzzle_room, 33).
holds(2, in(puzzle_room_table), puzzle_room, 33).
holds(2, in(talos), puzzle_room, 33).
holds(2, in_tower((block,1),(block,1)), true, 33).
holds(2, in_tower((block,1),(block,2)), false, 33).
holds(2, in_tower((block,1),(block,3)), true, 33).
holds(2, in_tower((block,1),(block,4)), false, 33).
holds(2, in_tower((block,1),(block,5)), false, 33).
holds(2, in_tower((block,1),(block,6)), false, 33).
holds(2, in_tower((block,2),(block,1)), false, 33).
holds(2, in_tower((block,2),(block,2)), true, 33).
holds(2, in_tower((block,2),(block,3)), false, 33).
holds(2, in_tower((block,2),(block,4)), true, 33).
holds(2, in_tower((block,2),(block,5)), false, 33).
holds(2, in_tower((block,2),(block,6)), false, 33).
holds(2, in_tower((block,3),(block,1)), false, 33).
holds(2, in_tower((block,3),(block,2)), false, 33).
holds(2, in_tower((block,3),(block,3)), false, 33).
holds(2, in_tower((block,3),(block,4)), false, 33).
holds(2, in_tower((block,3),(block,5)), false, 33).
holds(2, in_tower((block,3),(block,6)), false, 33).
holds(2, in_tower((block,4),(block,1)), false, 33).
holds(2, in_tower((block,4),(block,2)), false, 33).
holds(2, in_tower((block,4),(block,3)), false, 33).
holds(2, in_tower((block,4),(block,4)), false, 33).
holds(2, in_tower((block,4),(block,5)), false, 33).
holds(2, in_tower((block,4),(block,6)), false, 33).
holds(2, in_tower((block,5),(block,1)), false, 33).
holds(2, in_tower((block,5),(block,2)), false, 33).
holds(2, in_tower((block,5),(block,3)), false, 33).
holds(2, in_tower((block,5),(block,4)), false, 33).
holds(2, in_tower((block,5),(block,5)), false, 33).
holds(2, in_tower((block,5),(block,6)), false, 33).
holds(2, in_tower((block,6),(block,1)), false, 33).
holds(2, in_tower((block,6),(block,2)), false, 33).
holds(2, in_tower((block,6),(block,3)), false, 33).
holds(2, in_tower((block,6),(block,4)), false, 33).
holds(2, in_tower((block,6),(block,5)), false, 33).
holds(2, in_tower((block,6),(block,6)), false, 33).
holds(2, on((block,1)), puzzle_room_table, 33).
holds(2, on((block,2)), puzzle_room_table, 33).
holds(2, on((block,3)), (block,1), 33).
holds(2, on((block,4)), (block,2), 33).
holds(2, on((block,5)), nothing, 33).
holds(2, on((block,6)), nothing, 33).
holds(2, tower_base((block,1),puzzle_room_table), true, 33).
holds(2, tower_base((block,2),puzzle_room_table), true, 33).
holds(2, tower_base((block,3),puzzle_room_table), false, 33).
holds(2, tower_base((block,4),puzzle_room_table), false, 33).
holds(2, tower_base((block,5),puzzle_room_table), false, 33).
holds(2, tower_base((block,6),puzzle_room_table), false, 33).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 33).
holds(2, unordered_tower((block,2),puzzle_room_table), true, 33).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 33).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 33).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 33).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 33).

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[16-02-2022_21-58-49] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,6),puzzle_room_table)', 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'I': 14})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 15})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'I': 16})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 16})

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 4 rules into program part base:

sub_goal(2, talos, put(manipulator_arm_1,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 14).
sub_goal(2, talos, release(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), nothing, 15).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 16).
sub_goal(2, talos, put(manipulator_arm_2,(block,5),(block,6)), on((block,5)), (block,6), 16).

[16-02-2022_21-58-49] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000002961704F9D0>]
	incrementor = SolveIncrementor(step_start=33, step_increase=1, step_increase_initial=2, step_end_min=36, step_end_max=200, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 33), range_=None), IncPart(name='plan_module', args=('#inc', 33, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 33, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 33, 14, 16, 'sequential', 'true'), range_=None)]

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 811 rules

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004558200000019497s

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.029891s.

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004879s with result Satisfiable.

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000029634BBFF90>

[16-02-2022_21-58-49] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 33)
	('last_sgoals', 16)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002960D109A60>)
	('first_sgoals', 14)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000029634BBFF90>)

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(14, 34)', truth=True, inc_range=None)

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 33). %* None *%
#program plan_module(#inc, 33, true, false). %* None *%
#program optimisation_module(#inc, 33, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 33, 14, 16, sequential, true). %* None *%

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     32 : Current =     34
Incrementor step ends | Minimum  =     36 : Maximum =    200

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(34)]), ('state_module', [Number(33), Number(33)]), ('plan_module', [Number(33), Number(33), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(33), Number(33), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('conformance_module', [Number(33), Number(33), Number(14), Number(16), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(34), Number(33)]), ('plan_module', [Number(34), Number(33), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(34), Number(33), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(34)]), ('action_preconditions', [Number(34)]), ('variable_relations', [Number(34)]), ('abstraction_mappings', [Number(34)]), ('conformance_module', [Number(34), Number(33), Number(14), Number(16), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.241559s.

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 33: original = External(symbol='current_last_sgoals(14, 34)', truth=True, inc_range=None), conversion = current_last_sgoals(14,34).

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 34: original = External(symbol='current_last_sgoals(14, 34)', truth=True, inc_range=None), conversion = current_last_sgoals(14,34).

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008223s with result Unsatisfiable.

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.2497821000000613, Incremental time limit = None
Running cumulative time = 0.2497821000000613, Cumulative time limit = 1800
Used memory = (RSS = 732.449219Mb, VMS = 722.644531Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-49] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=32, end_step=34, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.24155919999998332, solving_time=0.00822290000007797, total_time=0.2497821000000613, memory=Memory(rss=732.44921875, vms=722.64453125), step_range=range(33, 35), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.24155919999998332, solving_time=0.00822290000007797, total_time=0.2497821000000613, memory=Memory(rss=732.44921875, vms=722.64453125), step_range=range(33, 35), clingo_stats={'problem': {'lp': {'atoms': 12179.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15505.0, 'bodies_tr': 15505.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 261.0, 'count_bodies_tr': 261.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 514.0, 'rules': 27478.0, 'rules_normal': 26932.0, 'rules_choice': 543.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 27478.0, 'rules_tr_normal': 26932.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 26267.0, 'eqs_atom': 7052.0, 'eqs_body': 1976.0, 'eqs_other': 17239.0}, 'lpStep': {'atoms': 5660.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12886.0, 'bodies_tr': 12886.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 261.0, 'count_bodies_tr': 261.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 514.0, 'rules': 20049.0, 'rules_normal': 19503.0, 'rules_choice': 543.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 20049.0, 'rules_tr_normal': 19503.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 13211.0, 'eqs_atom': 2142.0, 'eqs_body': 451.0, 'eqs_other': 10618.0}, 'generator': {'vars': 2158.0, 'vars_eliminated': 0.0, 'vars_frozen': 1441.0, 'constraints': 15.0, 'constraints_binary': 731.0, 'constraints_ternary': 131.0, 'acyc_edges': 0.0, 'complexity': 893.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 66.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf, inf], 'lower': [0.0, 0.0, 0.0], 'concurrency': 6.0, 'winner': 5.0, 'times': {'total': 0.249053955078125, 'cpu': 0.25, 'solve': 0.0, 'unsat': 0.0, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.28806114196777344, 'cpu': 0.296875, 'solve': 0.0019989013671875, 'unsat': 0.0, 'sat': 0.0}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 72.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     34 : Current =     35
Incrementor step ends | Minimum  =     36 : Maximum =    200

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(35)]), ('state_module', [Number(35), Number(33)]), ('plan_module', [Number(35), Number(33), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(35), Number(33), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(35)]), ('action_preconditions', [Number(35)]), ('variable_relations', [Number(35)]), ('abstraction_mappings', [Number(35)]), ('conformance_module', [Number(35), Number(33), Number(14), Number(16), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.128546s.

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.003496s with result Unsatisfiable.

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.13204189999999016, Incremental time limit = None
Running cumulative time = 0.38182400000005146, Cumulative time limit = 1800
Used memory = (RSS = 732.449219Mb, VMS = 722.644531Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-49] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=34, end_step=35, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.3701049000000012, solving_time=0.011719100000050275, total_time=0.38182400000005146, memory=Memory(rss=732.44921875, vms=722.64453125), step_range=range(33, 36), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.12854570000001786, solving_time=0.003496199999972305, total_time=0.13204189999999016, memory=Memory(rss=732.44921875, vms=722.64453125), step_range=range(35, 36), clingo_stats={'problem': {'lp': {'atoms': 13912.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24957.0, 'bodies_tr': 24957.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 462.0, 'count_bodies_tr': 462.0, 'sccs': 39.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 581.0, 'rules': 39832.0, 'rules_normal': 39088.0, 'rules_choice': 738.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 39832.0, 'rules_tr_normal': 39088.0, 'rules_tr_choice': 738.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 29203.0, 'eqs_atom': 7595.0, 'eqs_body': 2361.0, 'eqs_other': 19247.0}, 'lpStep': {'atoms': 1733.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 9452.0, 'bodies_tr': 9452.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 5.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 67.0, 'rules': 12354.0, 'rules_normal': 12156.0, 'rules_choice': 195.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 12354.0, 'rules_tr_normal': 12156.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 2936.0, 'eqs_atom': 543.0, 'eqs_body': 385.0, 'eqs_other': 2008.0}, 'generator': {'vars': 2425.0, 'vars_eliminated': 0.0, 'vars_frozen': 1636.0, 'constraints': 57.0, 'constraints_binary': 1561.0, 'constraints_ternary': 311.0, 'acyc_edges': 0.0, 'complexity': 1967.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 80.0, 'guiding_paths': 5.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf, inf], 'lower': [0.0, 0.0, -1.0], 'concurrency': 6.0, 'winner': 5.0, 'times': {'total': 0.13302993774414062, 'cpu': 0.140625, 'solve': 0.0010013580322265625, 'unsat': 0.0010013580322265625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.42109107971191406, 'cpu': 0.4375, 'solve': 0.0030002593994140625, 'unsat': 0.0010013580322265625, 'sat': 0.0}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 152.0, 'guiding_paths': 17.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     35 : Current =     36
Incrementor step ends | Minimum  =     36 : Maximum =    200

[16-02-2022_21-58-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(36)]), ('state_module', [Number(36), Number(33)]), ('plan_module', [Number(36), Number(33), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(36), Number(33), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(36)]), ('action_preconditions', [Number(36)]), ('variable_relations', [Number(36)]), ('abstraction_mappings', [Number(36)]), ('conformance_module', [Number(36), Number(33), Number(14), Number(16), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.145354s.

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005770s with result Unsatisfiable.

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.15112440000007155, Incremental time limit = None
Running cumulative time = 0.532948400000123, Cumulative time limit = 1800
Used memory = (RSS = 732.449219Mb, VMS = 722.644531Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-50] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=35, end_step=36, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.5154589999999644, solving_time=0.01748940000015864, total_time=0.532948400000123, memory=Memory(rss=732.44921875, vms=722.64453125), step_range=range(33, 37), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.14535409999996318, solving_time=0.005770300000108364, total_time=0.15112440000007155, memory=Memory(rss=732.44921875, vms=722.64453125), step_range=range(36, 37), clingo_stats={'problem': {'lp': {'atoms': 15935.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 34706.0, 'bodies_tr': 34706.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 663.0, 'count_bodies_tr': 663.0, 'sccs': 56.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 787.0, 'rules': 52718.0, 'rules_normal': 51776.0, 'rules_choice': 933.0, 'rules_minimize': 9.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 52718.0, 'rules_tr_normal': 51776.0, 'rules_tr_choice': 933.0, 'rules_tr_minimize': 9.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 34830.0, 'eqs_atom': 8458.0, 'eqs_body': 2862.0, 'eqs_other': 23510.0}, 'lpStep': {'atoms': 2023.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 9749.0, 'bodies_tr': 9749.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 17.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 206.0, 'rules': 12886.0, 'rules_normal': 12688.0, 'rules_choice': 195.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 12886.0, 'rules_tr_normal': 12688.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5627.0, 'eqs_atom': 863.0, 'eqs_body': 501.0, 'eqs_other': 4263.0}, 'generator': {'vars': 3118.0, 'vars_eliminated': 0.0, 'vars_frozen': 2075.0, 'constraints': 209.0, 'constraints_binary': 4318.0, 'constraints_ternary': 928.0, 'acyc_edges': 0.0, 'complexity': 5545.0}}, 'solving': {'solvers': {'choices': 53.0, 'conflicts': 11.0, 'conflicts_analyzed': 5.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 2.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 11.0, 'distributed_sum_lbd': 20.0, 'integrated': 37.0, 'lemmas': 58.0, 'lits_learnt': 176.0, 'lemmas_binary': 42.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 13.0, 'integrated_jumps': 24.0, 'guiding_paths_lits': 126.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 4.0, 'lemmas_loop': 17.0, 'lemmas_other': 37.0, 'lits_conflict': 6.0, 'lits_loop': 100.0, 'lits_other': 70.0, 'jumps': {'jumps': 5.0, 'jumps_bounded': 5.0, 'levels': 75.0, 'levels_bounded': 46.0, 'max': 22.0, 'max_executed': 9.0, 'max_bounded': 21.0}}}}, 'summary': {'call': 3.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf, inf], 'lower': [1.0, 0.0, -3.0], 'concurrency': 6.0, 'winner': 5.0, 'times': {'total': 0.15203285217285156, 'cpu': 0.15625, 'solve': 0.00099945068359375, 'unsat': 0.00099945068359375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.5731239318847656, 'cpu': 0.59375, 'solve': 0.0039997100830078125, 'unsat': 0.0020008087158203125, 'sat': 0.0}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 53.0, 'conflicts': 11.0, 'conflicts_analyzed': 5.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 2.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 11.0, 'distributed_sum_lbd': 20.0, 'integrated': 37.0, 'lemmas': 58.0, 'lits_learnt': 176.0, 'lemmas_binary': 42.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 13.0, 'integrated_jumps': 24.0, 'guiding_paths_lits': 278.0, 'guiding_paths': 23.0, 'splits': 0.0, 'lemmas_conflict': 4.0, 'lemmas_loop': 17.0, 'lemmas_other': 37.0, 'lits_conflict': 6.0, 'lits_loop': 100.0, 'lits_other': 70.0, 'jumps': {'jumps': 5.0, 'jumps_bounded': 5.0, 'levels': 75.0, 'levels_bounded': 46.0, 'max': 22.0, 'max_executed': 9.0, 'max_bounded': 21.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     36 : Current =     37
Incrementor step ends | Minimum  =     36 : Maximum =    200

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(37)]), ('state_module', [Number(37), Number(33)]), ('plan_module', [Number(37), Number(33), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(37), Number(33), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(37)]), ('action_preconditions', [Number(37)]), ('variable_relations', [Number(37)]), ('abstraction_mappings', [Number(37)]), ('conformance_module', [Number(37), Number(33), Number(14), Number(16), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.200357s.

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.019515s with result Satisfiable.

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.219872199999827, Incremental time limit = None
Running cumulative time = 0.75282059999995, Cumulative time limit = 1800
Used memory = (RSS = 732.511719Mb, VMS = 722.644531Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.715816s, Solving = 0.037004s, Total = 0.752821s, Memory = (RSS = 732.511719Mb, VMS = 722.644531Mb), Step range = [33-37]), Calls = 4
Final Model :: Total atoms = 5261, Cost = (5, 0, -1), Optimality proven = False, Number = 3, Thread ID = 0, Model type = ModelType.StableModel

[16-02-2022_21-58-50] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=36, end_step=37, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.7158163999998806, solving_time=0.03700420000006943, total_time=0.75282059999995, memory=Memory(rss=732.51171875, vms=722.64453125), step_range=range(33, 38), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2003573999999162, solving_time=0.019514799999910792, total_time=0.219872199999827, memory=Memory(rss=732.51171875, vms=722.64453125), step_range=range(37, 38), clingo_stats={'problem': {'lp': {'atoms': 18787.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 45407.0, 'bodies_tr': 45407.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 864.0, 'count_bodies_tr': 864.0, 'sccs': 81.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1185.0, 'rules': 67263.0, 'rules_normal': 66123.0, 'rules_choice': 1128.0, 'rules_minimize': 12.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 67263.0, 'rules_tr_normal': 66123.0, 'rules_tr_choice': 1128.0, 'rules_tr_minimize': 12.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 41568.0, 'eqs_atom': 9906.0, 'eqs_body': 3063.0, 'eqs_other': 28599.0}, 'lpStep': {'atoms': 2852.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 10701.0, 'bodies_tr': 10701.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 398.0, 'rules': 14545.0, 'rules_normal': 14347.0, 'rules_choice': 195.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 14545.0, 'rules_tr_normal': 14347.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 6738.0, 'eqs_atom': 1448.0, 'eqs_body': 201.0, 'eqs_other': 5089.0}, 'generator': {'vars': 4569.0, 'vars_eliminated': 0.0, 'vars_frozen': 2957.0, 'constraints': 583.0, 'constraints_binary': 11309.0, 'constraints_ternary': 2625.0, 'acyc_edges': 0.0, 'complexity': 14675.0}}, 'solving': {'solvers': {'choices': 1420.0, 'conflicts': 41.0, 'conflicts_analyzed': 34.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 103.0, 'models': 3.0, 'models_level': 199.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 33.0, 'distributed_sum_lbd': 58.0, 'integrated': 160.0, 'lemmas': 242.0, 'lits_learnt': 1090.0, 'lemmas_binary': 12.0, 'lemmas_ternary': 25.0, 'cpu_time': 0.015625, 'integrated_imps': 89.0, 'integrated_jumps': 288.0, 'guiding_paths_lits': 156.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 33.0, 'lemmas_loop': 53.0, 'lemmas_other': 156.0, 'lits_conflict': 135.0, 'lits_loop': 399.0, 'lits_other': 556.0, 'jumps': {'jumps': 34.0, 'jumps_bounded': 18.0, 'levels': 806.0, 'levels_bounded': 401.0, 'max': 66.0, 'max_executed': 66.0, 'max_bounded': 27.0}}}}, 'summary': {'call': 4.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [5.0, 0.0, -1.0], 'lower': [5.0, 0.0, -1.0], 'concurrency': 6.0, 'winner': 0.0, 'times': {'total': 0.22104644775390625, 'cpu': 0.203125, 'solve': 0.014003753662109375, 'unsat': 0.0050029754638671875, 'sat': 0.00099945068359375}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.7941703796386719, 'cpu': 0.796875, 'solve': 0.018003463745117188, 'unsat': 0.0070037841796875, 'sat': 0.00099945068359375}, 'models': {'enumerated': 4.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 1473.0, 'conflicts': 52.0, 'conflicts_analyzed': 39.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 105.0, 'models': 4.0, 'models_level': 200.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 44.0, 'distributed_sum_lbd': 78.0, 'integrated': 197.0, 'lemmas': 300.0, 'lits_learnt': 1266.0, 'lemmas_binary': 54.0, 'lemmas_ternary': 25.0, 'cpu_time': 0.03125, 'integrated_imps': 102.0, 'integrated_jumps': 312.0, 'guiding_paths_lits': 434.0, 'guiding_paths': 34.0, 'splits': 0.0, 'lemmas_conflict': 37.0, 'lemmas_loop': 70.0, 'lemmas_other': 193.0, 'lits_conflict': 141.0, 'lits_loop': 499.0, 'lits_other': 626.0, 'jumps': {'jumps': 39.0, 'jumps_bounded': 23.0, 'levels': 881.0, 'levels_bounded': 447.0, 'max': 66.0, 'max_executed': 66.0, 'max_bounded': 27.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-50] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{14: 37}

[16-02-2022_21-58-50] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 15 achieved :: Progression >> total requested sgoals = 3, current total achieved sgoals = 2 ( 66.67% solved)

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(15, 37)', truth=True, inc_range=None)

[16-02-2022_21-58-50] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 15, step = 37]:
sub_goal(2, talos, release(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), nothing, 15)

[16-02-2022_21-58-50] DEBUG :: ASH Planner Main #1 >> Reaction at search length 37:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     37 : Current =     38
Incrementor step ends | Minimum  =     36 : Maximum =    200

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(38)]), ('state_module', [Number(38), Number(33)]), ('plan_module', [Number(38), Number(33), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(38), Number(33), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(38)]), ('action_preconditions', [Number(38)]), ('variable_relations', [Number(38)]), ('abstraction_mappings', [Number(38)]), ('conformance_module', [Number(38), Number(33), Number(14), Number(16), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.205761s.

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 38: original = External(symbol='current_last_sgoals(15, 37)', truth=True, inc_range=None), conversion = current_last_sgoals(15,37).

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022673s with result Satisfiable.

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.22843399999987923, Incremental time limit = None
Running cumulative time = 0.9812545999998292, Cumulative time limit = 1800
Used memory = (RSS = 733.812500Mb, VMS = 724.144531Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.921577s, Solving = 0.059677s, Total = 0.981255s, Memory = (RSS = 733.812500Mb, VMS = 724.144531Mb), Step range = [33-38]), Calls = 5
Final Model :: Total atoms = 5633, Cost = (6, 0, -1), Optimality proven = False, Number = 3, Thread ID = 5, Model type = ModelType.StableModel

[16-02-2022_21-58-50] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=37, end_step=38, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.9215774999997848, solving_time=0.05967710000004445, total_time=0.9812545999998292, memory=Memory(rss=733.8125, vms=724.14453125), step_range=range(33, 39), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.20576109999990422, solving_time=0.022672899999975016, total_time=0.22843399999987923, memory=Memory(rss=733.8125, vms=724.14453125), step_range=range(38, 39), clingo_stats={'problem': {'lp': {'atoms': 21910.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 56712.0, 'bodies_tr': 56712.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1065.0, 'count_bodies_tr': 1065.0, 'sccs': 106.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1589.0, 'rules': 82592.0, 'rules_normal': 81254.0, 'rules_choice': 1323.0, 'rules_minimize': 15.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 82592.0, 'rules_tr_normal': 81254.0, 'rules_tr_choice': 1323.0, 'rules_tr_minimize': 15.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 52062.0, 'eqs_atom': 11559.0, 'eqs_body': 3352.0, 'eqs_other': 37151.0}, 'lpStep': {'atoms': 3123.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11305.0, 'bodies_tr': 11305.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 404.0, 'rules': 15329.0, 'rules_normal': 15131.0, 'rules_choice': 195.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 15329.0, 'rules_tr_normal': 15131.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 10494.0, 'eqs_atom': 1653.0, 'eqs_body': 289.0, 'eqs_other': 8552.0}, 'generator': {'vars': 6257.0, 'vars_eliminated': 0.0, 'vars_frozen': 3933.0, 'constraints': 981.0, 'constraints_binary': 20057.0, 'constraints_ternary': 4799.0, 'acyc_edges': 0.0, 'complexity': 26063.0}}, 'solving': {'solvers': {'choices': 815.0, 'conflicts': 16.0, 'conflicts_analyzed': 10.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 63.0, 'models': 3.0, 'models_level': 272.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 9.0, 'distributed_sum_lbd': 17.0, 'integrated': 42.0, 'lemmas': 111.0, 'lits_learnt': 665.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 30.0, 'integrated_jumps': 75.0, 'guiding_paths_lits': 186.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 10.0, 'lemmas_loop': 65.0, 'lemmas_other': 36.0, 'lits_conflict': 42.0, 'lits_loop': 520.0, 'lits_other': 103.0, 'jumps': {'jumps': 10.0, 'jumps_bounded': 5.0, 'levels': 197.0, 'levels_bounded': 158.0, 'max': 36.0, 'max_executed': 36.0, 'max_bounded': 32.0}}}}, 'summary': {'call': 5.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [6.0, 0.0, -1.0], 'lower': [6.0, 0.0, -1.0], 'concurrency': 6.0, 'winner': 4.0, 'times': {'total': 0.23004913330078125, 'cpu': 0.21875, 'solve': 0.015003204345703125, 'unsat': 0.0049991607666015625, 'sat': 0.0020008087158203125}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 1.0242195129394531, 'cpu': 1.015625, 'solve': 0.03300666809082031, 'unsat': 0.012002944946289062, 'sat': 0.0030002593994140625}, 'models': {'enumerated': 7.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 2288.0, 'conflicts': 68.0, 'conflicts_analyzed': 49.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 168.0, 'models': 7.0, 'models_level': 472.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 53.0, 'distributed_sum_lbd': 95.0, 'integrated': 239.0, 'lemmas': 411.0, 'lits_learnt': 1931.0, 'lemmas_binary': 54.0, 'lemmas_ternary': 25.0, 'cpu_time': 0.046875, 'integrated_imps': 132.0, 'integrated_jumps': 387.0, 'guiding_paths_lits': 620.0, 'guiding_paths': 45.0, 'splits': 0.0, 'lemmas_conflict': 47.0, 'lemmas_loop': 135.0, 'lemmas_other': 229.0, 'lits_conflict': 183.0, 'lits_loop': 1019.0, 'lits_other': 729.0, 'jumps': {'jumps': 49.0, 'jumps_bounded': 28.0, 'levels': 1078.0, 'levels_bounded': 605.0, 'max': 66.0, 'max_executed': 66.0, 'max_bounded': 32.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-50] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{14: 37, 15: 38}

[16-02-2022_21-58-50] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 16 achieved :: Progression >> total requested sgoals = 3, current total achieved sgoals = 3 (100.00% solved)

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(16, 38)', truth=True, inc_range=None)

[16-02-2022_21-58-50] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 16, step = 38]:
sub_goal(2, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 16)
sub_goal(2, talos, put(manipulator_arm_2,(block,5),(block,6)), on((block,5)), (block,6), 16)

[16-02-2022_21-58-50] DEBUG :: ASH Planner Main #1 >> Reaction at search length 38:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     38 : Current =     39
Incrementor step ends | Minimum  =     36 : Maximum =    200

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(39)]), ('state_module', [Number(39), Number(33)]), ('plan_module', [Number(39), Number(33), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(39), Number(33), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(39)]), ('action_preconditions', [Number(39)]), ('variable_relations', [Number(39)]), ('abstraction_mappings', [Number(39)]), ('conformance_module', [Number(39), Number(33), Number(14), Number(16), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.203435s.

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 39: original = External(symbol='current_last_sgoals(16, 38)', truth=True, inc_range=None), conversion = current_last_sgoals(16,38).

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009481s with result Unsatisfiable.

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.21291560000008758, Incremental time limit = None
Running cumulative time = 1.1941701999999168, Cumulative time limit = 1800
Used memory = (RSS = 734.679688Mb, VMS = 725.156250Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-50] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=6, start_step=38, end_step=39, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.125011999999856, solving_time=0.06915820000006079, total_time=1.1941701999999168, memory=Memory(rss=734.6796875, vms=725.15625), step_range=range(33, 40), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.20343450000007124, solving_time=0.00948110000001634, total_time=0.21291560000008758, memory=Memory(rss=734.6796875, vms=725.15625), step_range=range(39, 40), clingo_stats={'problem': {'lp': {'atoms': 25060.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 68593.0, 'bodies_tr': 68593.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1266.0, 'count_bodies_tr': 1266.0, 'sccs': 131.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2183.0, 'rules': 98500.0, 'rules_normal': 96964.0, 'rules_choice': 1518.0, 'rules_minimize': 18.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 98500.0, 'rules_tr_normal': 96964.0, 'rules_tr_choice': 1518.0, 'rules_tr_minimize': 18.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 58653.0, 'eqs_atom': 13124.0, 'eqs_body': 3428.0, 'eqs_other': 42101.0}, 'lpStep': {'atoms': 3150.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11881.0, 'bodies_tr': 11881.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 15908.0, 'rules_normal': 15710.0, 'rules_choice': 195.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 15908.0, 'rules_tr_normal': 15710.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 6591.0, 'eqs_atom': 1565.0, 'eqs_body': 76.0, 'eqs_other': 4950.0}, 'generator': {'vars': 8553.0, 'vars_eliminated': 0.0, 'vars_frozen': 5273.0, 'constraints': 1566.0, 'constraints_binary': 32531.0, 'constraints_ternary': 8053.0, 'acyc_edges': 0.0, 'complexity': 42460.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 7.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 216.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 6.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf, inf], 'lower': [0.0, 0.0, -30.0], 'concurrency': 6.0, 'winner': 4.0, 'times': {'total': 0.21404647827148438, 'cpu': 0.1875, 'solve': 0.0020008087158203125, 'unsat': 0.0020008087158203125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.2382659912109375, 'cpu': 1.203125, 'solve': 0.035007476806640625, 'unsat': 0.014003753662109375, 'sat': 0.0030002593994140625}, 'models': {'enumerated': 7.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 2288.0, 'conflicts': 75.0, 'conflicts_analyzed': 49.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 168.0, 'models': 7.0, 'models_level': 472.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 53.0, 'distributed_sum_lbd': 95.0, 'integrated': 239.0, 'lemmas': 411.0, 'lits_learnt': 1931.0, 'lemmas_binary': 54.0, 'lemmas_ternary': 25.0, 'cpu_time': 0.046875, 'integrated_imps': 132.0, 'integrated_jumps': 387.0, 'guiding_paths_lits': 836.0, 'guiding_paths': 51.0, 'splits': 0.0, 'lemmas_conflict': 47.0, 'lemmas_loop': 135.0, 'lemmas_other': 229.0, 'lits_conflict': 183.0, 'lits_loop': 1019.0, 'lits_other': 729.0, 'jumps': {'jumps': 49.0, 'jumps_bounded': 28.0, 'levels': 1078.0, 'levels_bounded': 605.0, 'max': 66.0, 'max_executed': 66.0, 'max_bounded': 32.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-50] DEBUG :: ASH Planner Main #1 >> Reaction at search length 39:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     39 : Current =     40
Incrementor step ends | Minimum  =     36 : Maximum =    200

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(40)]), ('state_module', [Number(40), Number(33)]), ('plan_module', [Number(40), Number(33), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(40), Number(33), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(40)]), ('action_preconditions', [Number(40)]), ('variable_relations', [Number(40)]), ('abstraction_mappings', [Number(40)]), ('conformance_module', [Number(40), Number(33), Number(14), Number(16), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.213542s.

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022386s with result Satisfiable.

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.2359280000000581, Incremental time limit = None
Running cumulative time = 1.430098199999975, Cumulative time limit = 1800
Used memory = (RSS = 737.062500Mb, VMS = 727.328125Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 9
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.338554s, Solving = 0.091544s, Total = 1.430098s, Memory = (RSS = 737.062500Mb, VMS = 727.328125Mb), Step range = [33-40]), Calls = 7
Final Model :: Total atoms = 6383, Cost = (10, 0, -2), Optimality proven = False, Number = 2, Thread ID = 5, Model type = ModelType.StableModel

[16-02-2022_21-58-50] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=7, start_step=39, end_step=40, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.3385540999998966, solving_time=0.09154410000007829, total_time=1.430098199999975, memory=Memory(rss=737.0625, vms=727.328125), step_range=range(33, 41), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2135421000000406, solving_time=0.0223859000000175, total_time=0.2359280000000581, memory=Memory(rss=737.0625, vms=727.328125), step_range=range(40, 41), clingo_stats={'problem': {'lp': {'atoms': 28451.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 80933.0, 'bodies_tr': 80933.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1467.0, 'count_bodies_tr': 1467.0, 'sccs': 156.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2777.0, 'rules': 115045.0, 'rules_normal': 113311.0, 'rules_choice': 1713.0, 'rules_minimize': 21.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 115045.0, 'rules_tr_normal': 113311.0, 'rules_tr_choice': 1713.0, 'rules_tr_minimize': 21.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 65864.0, 'eqs_atom': 14895.0, 'eqs_body': 3495.0, 'eqs_other': 47474.0}, 'lpStep': {'atoms': 3391.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12340.0, 'bodies_tr': 12340.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 16545.0, 'rules_normal': 16347.0, 'rules_choice': 195.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 16545.0, 'rules_tr_normal': 16347.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7211.0, 'eqs_atom': 1771.0, 'eqs_body': 67.0, 'eqs_other': 5373.0}, 'generator': {'vars': 10924.0, 'vars_eliminated': 0.0, 'vars_frozen': 6627.0, 'constraints': 2185.0, 'constraints_binary': 45240.0, 'constraints_ternary': 11796.0, 'acyc_edges': 0.0, 'complexity': 59615.0}}, 'solving': {'solvers': {'choices': 888.0, 'conflicts': 52.0, 'conflicts_analyzed': 42.0, 'restarts': 0.0, 'restarts_last': 8.0, 'extra': {'domain_choices': 80.0, 'models': 2.0, 'models_level': 287.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 32.0, 'distributed_sum_lbd': 81.0, 'integrated': 142.0, 'lemmas': 435.0, 'lits_learnt': 4402.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 73.0, 'integrated_jumps': 170.0, 'guiding_paths_lits': 246.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 42.0, 'lemmas_loop': 256.0, 'lemmas_other': 137.0, 'lits_conflict': 569.0, 'lits_loop': 2162.0, 'lits_other': 1671.0, 'jumps': {'jumps': 42.0, 'jumps_bounded': 7.0, 'levels': 105.0, 'levels_bounded': 13.0, 'max': 10.0, 'max_executed': 10.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 7.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [10.0, 0.0, -2.0], 'lower': [10.0, 0.0, -2.0], 'concurrency': 6.0, 'winner': 5.0, 'times': {'total': 0.23704910278320312, 'cpu': 0.234375, 'solve': 0.014001846313476562, 'unsat': 0.0049991607666015625, 'sat': 0.0030002593994140625}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 1.4753150939941406, 'cpu': 1.4375, 'solve': 0.04900932312011719, 'unsat': 0.019002914428710938, 'sat': 0.006000518798828125}, 'models': {'enumerated': 9.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 3176.0, 'conflicts': 127.0, 'conflicts_analyzed': 91.0, 'restarts': 0.0, 'restarts_last': 8.0, 'extra': {'domain_choices': 248.0, 'models': 9.0, 'models_level': 759.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 85.0, 'distributed_sum_lbd': 176.0, 'integrated': 381.0, 'lemmas': 846.0, 'lits_learnt': 6333.0, 'lemmas_binary': 54.0, 'lemmas_ternary': 25.0, 'cpu_time': 0.0625, 'integrated_imps': 205.0, 'integrated_jumps': 557.0, 'guiding_paths_lits': 1082.0, 'guiding_paths': 63.0, 'splits': 0.0, 'lemmas_conflict': 89.0, 'lemmas_loop': 391.0, 'lemmas_other': 366.0, 'lits_conflict': 752.0, 'lits_loop': 3181.0, 'lits_other': 2400.0, 'jumps': {'jumps': 91.0, 'jumps_bounded': 35.0, 'levels': 1183.0, 'levels_bounded': 618.0, 'max': 66.0, 'max_executed': 66.0, 'max_bounded': 32.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-50] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{14: 37, 15: 38, 16: 40}

[16-02-2022_21-58-50] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 17 achieved :: Progression >> total requested sgoals = 3, current total achieved sgoals = 4 (133.33% solved)

[16-02-2022_21-58-50] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 16 was achieved successfully.

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.241559s, Solving = 0.008223s, Total = 0.249782s, Memory = (RSS = 732.449219Mb, VMS = 722.644531Mb), Step range = [33-34]
2 : Statistics :: Grounding = 0.128546s, Solving = 0.003496s, Total = 0.132042s, Memory = (RSS = 732.449219Mb, VMS = 722.644531Mb), Step range = [35-35]
3 : Statistics :: Grounding = 0.145354s, Solving = 0.005770s, Total = 0.151124s, Memory = (RSS = 732.449219Mb, VMS = 722.644531Mb), Step range = [36-36]
4 : Statistics :: Grounding = 0.200357s, Solving = 0.019515s, Total = 0.219872s, Memory = (RSS = 732.511719Mb, VMS = 722.644531Mb), Step range = [37-37]
5 : Statistics :: Grounding = 0.205761s, Solving = 0.022673s, Total = 0.228434s, Memory = (RSS = 733.812500Mb, VMS = 724.144531Mb), Step range = [38-38]
6 : Statistics :: Grounding = 0.203435s, Solving = 0.009481s, Total = 0.212916s, Memory = (RSS = 734.679688Mb, VMS = 725.156250Mb), Step range = [39-39]
7 : Statistics :: Grounding = 0.213542s, Solving = 0.022386s, Total = 0.235928s, Memory = (RSS = 737.062500Mb, VMS = 727.328125Mb), Step range = [40-40]

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 1.430098s due to: External generator exit.

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[16-02-2022_21-58-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 5, 19: 6, 20: 7, 21: 7, 22: 7, 23: 8, 24: 8, 25: 9, 26: 9, 27: 10, 28: 11, 29: 11, 30: 12, 31: 12, 32: 12, 33: 13}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 16, 4: 17, 5: 18, 6: 19, 7: 22, 8: 24, 9: 26, 10: 27, 11: 29, 12: 32, 13: 33}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 5, 19: 6, 20: 7, 21: 7, 22: 7, 23: 8, 24: 8, 25: 9, 26: 9, 27: 10, 28: 11, 29: 11, 30: 12, 31: 12, 32: 12, 33: 13, 34: 14, 35: 14, 36: 14, 37: 14, 38: 15, 39: 16, 40: 16}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 16, 4: 17, 5: 18, 6: 19, 7: 22, 8: 24, 9: 26, 10: 27, 11: 29, 12: 32, 13: 33, 14: 37, 15: 38, 16: 40}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 16, Last requested goal index = 16, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.338554s, Solving = 0.091544s, Total = 1.430098s, Memory = (RSS = 737.062500Mb, VMS = 727.328125Mb), Step range = [33-40]), Calls = 7
Model :: Total atoms = 6383, Cost = (10, 0, -2), Optimality proven = False, Number = 2, Thread ID = 5, Model type = ModelType.StableModel

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 7 :: Actions = 10                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 4:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 10:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 11:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 12:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 16:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 18:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 19:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 20:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 21:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 22:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 23:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 24:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 25:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 26:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
        talos : grasp(manipulator_end_2,(block,5))
Step 27:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 28:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 29:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 30:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 31:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 32:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 33:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 34:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 35:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 36:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 37:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 38:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 39:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
        talos : configure(manipulator_limb_2,extended)
Step 40:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
        talos : put(manipulator_end_2,(block,5),(block,6))

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Monolevel problem 6 at level 1 solved.

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Online planning increment 6 finished.

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 1 : Total constraining sub-goal stages = 13 : Goals achieved = 6 : Goals unachieved = 7 : Complete = False
Level = 1 : Solved problems = 6 : Total constraining sub-goal stages = 16 : Goals achieved = 16 : Goals unachieved = 0 : Complete = False

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 2, Highest = 2.

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 7 by method ground-first is [1-2].

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning problem 2 at level 2:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 13, Sub-goal Stage Range = [1-13]
Division points [total=1] : [(Index = 6, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [7-13]

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [7-13], problem number = 2, increment number = 7

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 7)
	('last_sgoals', 13)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x000002960D109A60>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 2] partial conformance refinement (sequential) with sgoals range [7-13] : Concurrency enabled : Minimum search length bound disabled with value 22

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 7
last_sgoals = 13
start_step = 16
is_initial = False
is_final = True
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 22

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[16-02-2022_21-58-51] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[16-02-2022_21-58-51] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 16 as problem start state.

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 16})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 16})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 16})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 16})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 16})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'S': 16})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 16})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 16})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 16})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 16})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 16})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 16})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 16})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 16})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 16})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 16})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 16})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 16})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 16})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 16})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 16})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 16})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 16})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 16})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 16})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 16})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 16})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'S': 16})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'S': 16})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 16})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 16})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 16})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 16})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 16})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 16})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 16})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 16})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 16})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 16})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 16})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 16})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 16})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 16})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 16})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 16})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 16})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 16})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 16})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 16})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 16})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 16})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 16})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 16})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 16})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 16})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 16})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'S': 16})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 16})

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state:

holds(2, complete_tower(blue,puzzle_room_table), false, 16).
holds(2, complete_tower(red,puzzle_room_table), false, 16).
holds(2, configuration(manipulator_arm_1), extended, 16).
holds(2, configuration(manipulator_arm_2), extended, 16).
holds(2, configuration(puzzle_room_door), open, 16).
holds(2, configuration(starting_room_door), closed, 16).
holds(2, configuration(store_room_door), open, 16).
holds(2, grasping(manipulator_arm_1), (block,3), 16).
holds(2, grasping(manipulator_arm_2), (block,5), 16).
holds(2, in((block,1)), puzzle_room, 16).
holds(2, in((block,2)), puzzle_room, 16).
holds(2, in((block,3)), puzzle_room, 16).
holds(2, in((block,4)), puzzle_room, 16).
holds(2, in((block,5)), puzzle_room, 16).
holds(2, in((block,6)), puzzle_room, 16).
holds(2, in(manipulator_arm_1), puzzle_room, 16).
holds(2, in(manipulator_arm_2), puzzle_room, 16).
holds(2, in(puzzle_room_table), puzzle_room, 16).
holds(2, in(talos), puzzle_room, 16).
holds(2, in_tower((block,1),(block,1)), true, 16).
holds(2, in_tower((block,1),(block,2)), false, 16).
holds(2, in_tower((block,1),(block,3)), true, 16).
holds(2, in_tower((block,1),(block,4)), false, 16).
holds(2, in_tower((block,1),(block,5)), false, 16).
holds(2, in_tower((block,1),(block,6)), false, 16).
holds(2, in_tower((block,2),(block,1)), false, 16).
holds(2, in_tower((block,2),(block,2)), true, 16).
holds(2, in_tower((block,2),(block,3)), false, 16).
holds(2, in_tower((block,2),(block,4)), true, 16).
holds(2, in_tower((block,2),(block,5)), false, 16).
holds(2, in_tower((block,2),(block,6)), false, 16).
holds(2, in_tower((block,3),(block,1)), false, 16).
holds(2, in_tower((block,3),(block,2)), false, 16).
holds(2, in_tower((block,3),(block,3)), false, 16).
holds(2, in_tower((block,3),(block,4)), false, 16).
holds(2, in_tower((block,3),(block,5)), false, 16).
holds(2, in_tower((block,3),(block,6)), false, 16).
holds(2, in_tower((block,4),(block,1)), false, 16).
holds(2, in_tower((block,4),(block,2)), false, 16).
holds(2, in_tower((block,4),(block,3)), false, 16).
holds(2, in_tower((block,4),(block,4)), false, 16).
holds(2, in_tower((block,4),(block,5)), false, 16).
holds(2, in_tower((block,4),(block,6)), false, 16).
holds(2, in_tower((block,5),(block,1)), false, 16).
holds(2, in_tower((block,5),(block,2)), false, 16).
holds(2, in_tower((block,5),(block,3)), false, 16).
holds(2, in_tower((block,5),(block,4)), false, 16).
holds(2, in_tower((block,5),(block,5)), false, 16).
holds(2, in_tower((block,5),(block,6)), false, 16).
holds(2, in_tower((block,6),(block,1)), false, 16).
holds(2, in_tower((block,6),(block,2)), false, 16).
holds(2, in_tower((block,6),(block,3)), false, 16).
holds(2, in_tower((block,6),(block,4)), false, 16).
holds(2, in_tower((block,6),(block,5)), true, 16).
holds(2, in_tower((block,6),(block,6)), true, 16).
holds(2, on((block,1)), puzzle_room_table, 16).
holds(2, on((block,2)), puzzle_room_table, 16).
holds(2, on((block,3)), (block,1), 16).
holds(2, on((block,4)), (block,2), 16).
holds(2, on((block,5)), (block,6), 16).
holds(2, on((block,6)), puzzle_room_table, 16).
holds(2, tower_base((block,1),puzzle_room_table), true, 16).
holds(2, tower_base((block,2),puzzle_room_table), true, 16).
holds(2, tower_base((block,3),puzzle_room_table), false, 16).
holds(2, tower_base((block,4),puzzle_room_table), false, 16).
holds(2, tower_base((block,5),puzzle_room_table), false, 16).
holds(2, tower_base((block,6),puzzle_room_table), true, 16).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 16).
holds(2, unordered_tower((block,2),puzzle_room_table), true, 16).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 16).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 16).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 16).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 16).
holds(3, complete_tower(blue,puzzle_room_table), false, 16).
holds(3, complete_tower(red,puzzle_room_table), false, 16).
holds(3, grasping(manipulator_arm_1), (block,3), 16).
holds(3, grasping(manipulator_arm_2), (block,5), 16).
holds(3, in((block,1)), puzzle_room, 16).
holds(3, in((block,2)), puzzle_room, 16).
holds(3, in((block,3)), puzzle_room, 16).
holds(3, in((block,4)), puzzle_room, 16).
holds(3, in((block,5)), puzzle_room, 16).
holds(3, in((block,6)), puzzle_room, 16).
holds(3, in(manipulator_arm_1), puzzle_room, 16).
holds(3, in(manipulator_arm_2), puzzle_room, 16).
holds(3, in(puzzle_room_table), puzzle_room, 16).
holds(3, in(talos), puzzle_room, 16).
holds(3, in_tower((block,1),(block,1)), true, 16).
holds(3, in_tower((block,1),(block,2)), false, 16).
holds(3, in_tower((block,1),(block,3)), true, 16).
holds(3, in_tower((block,1),(block,4)), false, 16).
holds(3, in_tower((block,1),(block,5)), false, 16).
holds(3, in_tower((block,1),(block,6)), false, 16).
holds(3, in_tower((block,2),(block,1)), false, 16).
holds(3, in_tower((block,2),(block,2)), true, 16).
holds(3, in_tower((block,2),(block,3)), false, 16).
holds(3, in_tower((block,2),(block,4)), true, 16).
holds(3, in_tower((block,2),(block,5)), false, 16).
holds(3, in_tower((block,2),(block,6)), false, 16).
holds(3, in_tower((block,3),(block,1)), false, 16).
holds(3, in_tower((block,3),(block,2)), false, 16).
holds(3, in_tower((block,3),(block,3)), false, 16).
holds(3, in_tower((block,3),(block,4)), false, 16).
holds(3, in_tower((block,3),(block,5)), false, 16).
holds(3, in_tower((block,3),(block,6)), false, 16).
holds(3, in_tower((block,4),(block,1)), false, 16).
holds(3, in_tower((block,4),(block,2)), false, 16).
holds(3, in_tower((block,4),(block,3)), false, 16).
holds(3, in_tower((block,4),(block,4)), false, 16).
holds(3, in_tower((block,4),(block,5)), false, 16).
holds(3, in_tower((block,4),(block,6)), false, 16).
holds(3, in_tower((block,5),(block,1)), false, 16).
holds(3, in_tower((block,5),(block,2)), false, 16).
holds(3, in_tower((block,5),(block,3)), false, 16).
holds(3, in_tower((block,5),(block,4)), false, 16).
holds(3, in_tower((block,5),(block,5)), false, 16).
holds(3, in_tower((block,5),(block,6)), false, 16).
holds(3, in_tower((block,6),(block,1)), false, 16).
holds(3, in_tower((block,6),(block,2)), false, 16).
holds(3, in_tower((block,6),(block,3)), false, 16).
holds(3, in_tower((block,6),(block,4)), false, 16).
holds(3, in_tower((block,6),(block,5)), true, 16).
holds(3, in_tower((block,6),(block,6)), true, 16).
holds(3, on((block,1)), puzzle_room_table, 16).
holds(3, on((block,2)), puzzle_room_table, 16).
holds(3, on((block,3)), (block,1), 16).
holds(3, on((block,4)), (block,2), 16).
holds(3, on((block,5)), (block,6), 16).
holds(3, on((block,6)), puzzle_room_table, 16).
holds(3, tower_base((block,1),puzzle_room_table), true, 16).
holds(3, tower_base((block,2),puzzle_room_table), true, 16).
holds(3, tower_base((block,3),puzzle_room_table), false, 16).
holds(3, tower_base((block,4),puzzle_room_table), false, 16).
holds(3, tower_base((block,5),puzzle_room_table), false, 16).
holds(3, tower_base((block,6),puzzle_room_table), true, 16).
holds(3, unordered_tower((block,1),puzzle_room_table), true, 16).
holds(3, unordered_tower((block,2),puzzle_room_table), true, 16).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 16).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 16).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 16).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 16).

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 284 rules into program part ash_goal_state:

final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 7})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 7})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'I': 8})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 9})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 9})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'I': 10})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 10})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,1))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'I': 11})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 11})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 12})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 13})

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 11 rules into program part base:

sub_goal(3, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 7).
sub_goal(3, talos, release(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), nothing, 7).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), (block,4), 8).
sub_goal(3, talos, put(manipulator_arm_2,(block,4),(block,5)), on((block,4)), (block,5), 9).
sub_goal(3, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 9).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), (block,2), 10).
sub_goal(3, talos, release(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), nothing, 10).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 11).
sub_goal(3, talos, put(manipulator_arm_1,(block,2),(block,3)), on((block,2)), (block,3), 11).
sub_goal(3, talos, release(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), nothing, 12).
sub_goal(3, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 13).

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000002961704FDC0>]
	incrementor = SolveIncrementor(step_start=16, step_increase=1, step_increase_initial=2, step_end_min=23, step_end_max=200, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 16), range_=None), IncPart(name='plan_module', args=('#inc', 16, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 16, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 16, 7, 13, 'sequential', 'true'), range_=None)]

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 797 rules

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004574900000079651s

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.025016s.

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.003904s with result Satisfiable.

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x00000296349452C0>

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 2)
	('start_step', 16)
	('last_sgoals', 13)
	('finalise', True)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002960D109A60>)
	('first_sgoals', 7)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x00000296349452C0>)

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(7, 17)', truth=True, inc_range=None)

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 16). %* None *%
#program plan_module(#inc, 16, true, false). %* None *%
#program optimisation_module(#inc, 16, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 16, 7, 13, sequential, true). %* None *%

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     15 : Current =     17
Incrementor step ends | Minimum  =     23 : Maximum =    200

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(16), Number(16)]), ('plan_module', [Number(16), Number(16), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(16), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('conformance_module', [Number(16), Number(16), Number(7), Number(13), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(17), Number(16)]), ('plan_module', [Number(17), Number(16), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(16), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(16), Number(7), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.130187s.

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 16: original = External(symbol='current_last_sgoals(7, 17)', truth=True, inc_range=None), conversion = current_last_sgoals(7,17).

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 17: original = External(symbol='current_last_sgoals(7, 17)', truth=True, inc_range=None), conversion = current_last_sgoals(7,17).

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007777s with result Satisfiable.

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.13796370000011393, Incremental time limit = None
Running cumulative time = 0.13796370000011393, Cumulative time limit = 1800
Used memory = (RSS = 734.578125Mb, VMS = 724.910156Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.130187s, Solving = 0.007777s, Total = 0.137964s, Memory = (RSS = 734.578125Mb, VMS = 724.910156Mb), Step range = [16-17]), Calls = 1
Final Model :: Total atoms = 3625, Cost = (2, 0, -1), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=15, end_step=17, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.1301868000000468, solving_time=0.007776900000067144, total_time=0.13796370000011393, memory=Memory(rss=734.578125, vms=724.91015625), step_range=range(16, 18), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1301868000000468, solving_time=0.007776900000067144, total_time=0.13796370000011393, memory=Memory(rss=734.578125, vms=724.91015625), step_range=range(16, 18), clingo_stats={'problem': {'lp': {'atoms': 8370.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 9538.0, 'bodies_tr': 9538.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 220.0, 'count_bodies_tr': 220.0, 'sccs': 18.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 179.0, 'rules': 17491.0, 'rules_normal': 17157.0, 'rules_choice': 331.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 17491.0, 'rules_tr_normal': 17157.0, 'rules_tr_choice': 331.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 12854.0, 'eqs_atom': 3436.0, 'eqs_body': 1202.0, 'eqs_other': 8216.0}, 'lpStep': {'atoms': 3872.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8354.0, 'bodies_tr': 8354.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 220.0, 'count_bodies_tr': 220.0, 'sccs': 18.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 179.0, 'rules': 12634.0, 'rules_normal': 12300.0, 'rules_choice': 331.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 12634.0, 'rules_tr_normal': 12300.0, 'rules_tr_choice': 331.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 6692.0, 'eqs_atom': 1153.0, 'eqs_body': 429.0, 'eqs_other': 5110.0}, 'generator': {'vars': 1209.0, 'vars_eliminated': 0.0, 'vars_frozen': 870.0, 'constraints': 28.0, 'constraints_binary': 838.0, 'constraints_ternary': 132.0, 'acyc_edges': 0.0, 'complexity': 1014.0}}, 'solving': {'solvers': {'choices': 50.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 36.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 114.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [2.0, 0.0, -1.0], 'lower': [2.0, 0.0, -1.0], 'concurrency': 6.0, 'winner': 4.0, 'times': {'total': 0.13802719116210938, 'cpu': 0.140625, 'solve': 0.0039997100830078125, 'unsat': 0.00299835205078125, 'sat': 0.0010013580322265625}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.17203521728515625, 'cpu': 0.171875, 'solve': 0.006999969482421875, 'unsat': 0.00299835205078125, 'sat': 0.0020008087158203125}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 50.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 37.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 120.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{7: 17}

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 8 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 2 ( 28.57% solved)

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(8, 17)', truth=True, inc_range=None)

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 8, step = 17]:
sub_goal(3, talos, grasp(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), (block,4), 8)

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Reaction at search length 17:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =     23 : Maximum =    200

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('state_module', [Number(18), Number(16)]), ('plan_module', [Number(18), Number(16), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(18), Number(16), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('conformance_module', [Number(18), Number(16), Number(7), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.101763s.

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 18: original = External(symbol='current_last_sgoals(8, 17)', truth=True, inc_range=None), conversion = current_last_sgoals(8,17).

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006762s with result Satisfiable.

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.10852440000007846, Incremental time limit = None
Running cumulative time = 0.2464881000001924, Cumulative time limit = 1800
Used memory = (RSS = 734.578125Mb, VMS = 724.910156Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.231949s, Solving = 0.014539s, Total = 0.246488s, Memory = (RSS = 734.578125Mb, VMS = 724.910156Mb), Step range = [16-18]), Calls = 2
Final Model :: Total atoms = 3960, Cost = (3, 0, -1), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=17, end_step=18, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.23194930000011027, solving_time=0.01453880000008212, total_time=0.2464881000001924, memory=Memory(rss=734.578125, vms=724.91015625), step_range=range(16, 19), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10176250000006348, solving_time=0.006761900000014975, total_time=0.10852440000007846, memory=Memory(rss=734.578125, vms=724.91015625), step_range=range(18, 19), clingo_stats={'problem': {'lp': {'atoms': 9976.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 16249.0, 'bodies_tr': 16249.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 400.0, 'count_bodies_tr': 400.0, 'sccs': 27.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 239.0, 'rules': 26210.0, 'rules_normal': 25721.0, 'rules_choice': 483.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 26210.0, 'rules_tr_normal': 25721.0, 'rules_tr_choice': 483.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 16523.0, 'eqs_atom': 3932.0, 'eqs_body': 1602.0, 'eqs_other': 10989.0}, 'lpStep': {'atoms': 1606.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 6711.0, 'bodies_tr': 6711.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 9.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 60.0, 'rules': 8719.0, 'rules_normal': 8564.0, 'rules_choice': 152.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 8719.0, 'rules_tr_normal': 8564.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3669.0, 'eqs_atom': 496.0, 'eqs_body': 400.0, 'eqs_other': 2773.0}, 'generator': {'vars': 1594.0, 'vars_eliminated': 0.0, 'vars_frozen': 1147.0, 'constraints': 77.0, 'constraints_binary': 1950.0, 'constraints_ternary': 454.0, 'acyc_edges': 0.0, 'complexity': 2513.0}}, 'solving': {'solvers': {'choices': 370.0, 'conflicts': 5.0, 'conflicts_analyzed': 4.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 18.0, 'models': 1.0, 'models_level': 69.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4.0, 'distributed_sum_lbd': 4.0, 'integrated': 19.0, 'lemmas': 23.0, 'lits_learnt': 23.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 19.0, 'integrated_jumps': 119.0, 'guiding_paths_lits': 168.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 4.0, 'lemmas_loop': 0.0, 'lemmas_other': 19.0, 'lits_conflict': 4.0, 'lits_loop': 0.0, 'lits_other': 19.0, 'jumps': {'jumps': 4.0, 'jumps_bounded': 4.0, 'levels': 183.0, 'levels_bounded': 112.0, 'max': 52.0, 'max_executed': 24.0, 'max_bounded': 28.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [3.0, 0.0, -1.0], 'lower': [3.0, 0.0, -1.0], 'concurrency': 6.0, 'winner': 5.0, 'times': {'total': 0.1090240478515625, 'cpu': 0.078125, 'solve': 0.003002166748046875, 'unsat': 0.003002166748046875, 'sat': 0.0}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.28105926513671875, 'cpu': 0.25, 'solve': 0.01000213623046875, 'unsat': 0.006000518798828125, 'sat': 0.0020008087158203125}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 420.0, 'conflicts': 5.0, 'conflicts_analyzed': 4.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 18.0, 'models': 3.0, 'models_level': 106.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4.0, 'distributed_sum_lbd': 4.0, 'integrated': 19.0, 'lemmas': 23.0, 'lits_learnt': 23.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 19.0, 'integrated_jumps': 119.0, 'guiding_paths_lits': 288.0, 'guiding_paths': 18.0, 'splits': 0.0, 'lemmas_conflict': 4.0, 'lemmas_loop': 0.0, 'lemmas_other': 19.0, 'lits_conflict': 4.0, 'lits_loop': 0.0, 'lits_other': 19.0, 'jumps': {'jumps': 4.0, 'jumps_bounded': 4.0, 'levels': 183.0, 'levels_bounded': 112.0, 'max': 52.0, 'max_executed': 24.0, 'max_bounded': 28.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{7: 17, 8: 18}

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 9 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 3 ( 42.86% solved)

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(9, 18)', truth=True, inc_range=None)

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 9, step = 18]:
sub_goal(3, talos, put(manipulator_arm_2,(block,4),(block,5)), on((block,4)), (block,5), 9)
sub_goal(3, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 9)

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Reaction at search length 18:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =     23 : Maximum =    200

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('state_module', [Number(19), Number(16)]), ('plan_module', [Number(19), Number(16), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(19), Number(16), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('conformance_module', [Number(19), Number(16), Number(7), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.101486s.

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 19: original = External(symbol='current_last_sgoals(9, 18)', truth=True, inc_range=None), conversion = current_last_sgoals(9,18).

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009709s with result Satisfiable.

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.11119479999990745, Incremental time limit = None
Running cumulative time = 0.35768290000009983, Cumulative time limit = 1800
Used memory = (RSS = 734.578125Mb, VMS = 724.910156Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.333435s, Solving = 0.024248s, Total = 0.357683s, Memory = (RSS = 734.578125Mb, VMS = 724.910156Mb), Step range = [16-19]), Calls = 3
Final Model :: Total atoms = 4300, Cost = (5, 0, -2), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=18, end_step=19, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.3334350000000086, solving_time=0.02424790000009125, total_time=0.35768290000009983, memory=Memory(rss=734.578125, vms=724.91015625), step_range=range(16, 20), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10148569999989832, solving_time=0.00970910000000913, total_time=0.11119479999990745, memory=Memory(rss=734.578125, vms=724.91015625), step_range=range(19, 20), clingo_stats={'problem': {'lp': {'atoms': 11740.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 23390.0, 'bodies_tr': 23390.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 580.0, 'count_bodies_tr': 580.0, 'sccs': 45.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 541.0, 'rules': 35487.0, 'rules_normal': 34843.0, 'rules_choice': 635.0, 'rules_minimize': 9.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 35487.0, 'rules_tr_normal': 34843.0, 'rules_tr_choice': 635.0, 'rules_tr_minimize': 9.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 20597.0, 'eqs_atom': 4578.0, 'eqs_body': 1798.0, 'eqs_other': 14221.0}, 'lpStep': {'atoms': 1764.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 7141.0, 'bodies_tr': 7141.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 18.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 302.0, 'rules': 9277.0, 'rules_normal': 9122.0, 'rules_choice': 152.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 9277.0, 'rules_tr_normal': 9122.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4074.0, 'eqs_atom': 646.0, 'eqs_body': 196.0, 'eqs_other': 3232.0}, 'generator': {'vars': 2831.0, 'vars_eliminated': 0.0, 'vars_frozen': 1956.0, 'constraints': 409.0, 'constraints_binary': 7203.0, 'constraints_ternary': 1644.0, 'acyc_edges': 0.0, 'complexity': 9348.0}}, 'solving': {'solvers': {'choices': 408.0, 'conflicts': 8.0, 'conflicts_analyzed': 4.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 20.0, 'models': 1.0, 'models_level': 92.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4.0, 'distributed_sum_lbd': 4.0, 'integrated': 20.0, 'lemmas': 24.0, 'lits_learnt': 24.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 20.0, 'integrated_jumps': 75.0, 'guiding_paths_lits': 222.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 4.0, 'lemmas_loop': 0.0, 'lemmas_other': 20.0, 'lits_conflict': 4.0, 'lits_loop': 0.0, 'lits_other': 20.0, 'jumps': {'jumps': 4.0, 'jumps_bounded': 4.0, 'levels': 234.0, 'levels_bounded': 150.0, 'max': 69.0, 'max_executed': 31.0, 'max_bounded': 38.0}}}}, 'summary': {'call': 3.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [5.0, 0.0, -2.0], 'lower': [5.0, 0.0, -2.0], 'concurrency': 6.0, 'winner': 5.0, 'times': {'total': 0.11202239990234375, 'cpu': 0.109375, 'solve': 0.005001068115234375, 'unsat': 0.004001617431640625, 'sat': 0.00099945068359375}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.3930816650390625, 'cpu': 0.359375, 'solve': 0.015003204345703125, 'unsat': 0.01000213623046875, 'sat': 0.0030002593994140625}, 'models': {'enumerated': 4.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 828.0, 'conflicts': 13.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 38.0, 'models': 4.0, 'models_level': 198.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 8.0, 'integrated': 39.0, 'lemmas': 47.0, 'lits_learnt': 47.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 39.0, 'integrated_jumps': 194.0, 'guiding_paths_lits': 510.0, 'guiding_paths': 25.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 0.0, 'lemmas_other': 39.0, 'lits_conflict': 8.0, 'lits_loop': 0.0, 'lits_other': 39.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 8.0, 'levels': 417.0, 'levels_bounded': 262.0, 'max': 69.0, 'max_executed': 31.0, 'max_bounded': 38.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{7: 17, 8: 18, 9: 19}

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 10 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 4 ( 57.14% solved)

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(10, 19)', truth=True, inc_range=None)

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 10, step = 19]:
sub_goal(3, talos, grasp(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), (block,2), 10)
sub_goal(3, talos, release(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), nothing, 10)

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Reaction at search length 19:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =     23 : Maximum =    200

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('state_module', [Number(20), Number(16)]), ('plan_module', [Number(20), Number(16), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(20), Number(16), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('conformance_module', [Number(20), Number(16), Number(7), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.119558s.

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 20: original = External(symbol='current_last_sgoals(10, 19)', truth=True, inc_range=None), conversion = current_last_sgoals(10,19).

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010119s with result Satisfiable.

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.12967710000009447, Incremental time limit = None
Running cumulative time = 0.4873600000001943, Cumulative time limit = 1800
Used memory = (RSS = 734.578125Mb, VMS = 724.910156Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.452993s, Solving = 0.034367s, Total = 0.487360s, Memory = (RSS = 734.578125Mb, VMS = 724.910156Mb), Step range = [16-20]), Calls = 4
Final Model :: Total atoms = 4641, Cost = (7, 0, -2), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=19, end_step=20, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.4529928000000609, solving_time=0.03436720000013338, total_time=0.4873600000001943, memory=Memory(rss=734.578125, vms=724.91015625), step_range=range(16, 21), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.11955780000005234, solving_time=0.01011930000004213, total_time=0.12967710000009447, memory=Memory(rss=734.578125, vms=724.91015625), step_range=range(20, 21), clingo_stats={'problem': {'lp': {'atoms': 13919.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 31242.0, 'bodies_tr': 31242.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 760.0, 'count_bodies_tr': 760.0, 'sccs': 65.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 873.0, 'rules': 45807.0, 'rules_normal': 45008.0, 'rules_choice': 787.0, 'rules_minimize': 12.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 45807.0, 'rules_tr_normal': 45008.0, 'rules_tr_choice': 787.0, 'rules_tr_minimize': 12.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 26020.0, 'eqs_atom': 5593.0, 'eqs_body': 1987.0, 'eqs_other': 18440.0}, 'lpStep': {'atoms': 2179.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 7852.0, 'bodies_tr': 7852.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 332.0, 'rules': 10320.0, 'rules_normal': 10165.0, 'rules_choice': 152.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 10320.0, 'rules_tr_normal': 10165.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5423.0, 'eqs_atom': 1015.0, 'eqs_body': 189.0, 'eqs_other': 4219.0}, 'generator': {'vars': 4262.0, 'vars_eliminated': 0.0, 'vars_frozen': 2849.0, 'constraints': 777.0, 'constraints_binary': 14093.0, 'constraints_ternary': 3368.0, 'acyc_edges': 0.0, 'complexity': 18390.0}}, 'solving': {'solvers': {'choices': 888.0, 'conflicts': 18.0, 'conflicts_analyzed': 11.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 93.0, 'models': 1.0, 'models_level': 111.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 11.0, 'distributed_sum_lbd': 15.0, 'integrated': 55.0, 'lemmas': 64.0, 'lits_learnt': 120.0, 'lemmas_binary': 11.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 53.0, 'integrated_jumps': 367.0, 'guiding_paths_lits': 276.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 11.0, 'lemmas_loop': 0.0, 'lemmas_other': 53.0, 'lits_conflict': 22.0, 'lits_loop': 0.0, 'lits_other': 98.0, 'jumps': {'jumps': 11.0, 'jumps_bounded': 9.0, 'levels': 594.0, 'levels_bounded': 373.0, 'max': 71.0, 'max_executed': 71.0, 'max_bounded': 47.0}}}}, 'summary': {'call': 4.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [7.0, 0.0, -2.0], 'lower': [7.0, 0.0, -2.0], 'concurrency': 6.0, 'winner': 1.0, 'times': {'total': 0.1310272216796875, 'cpu': 0.140625, 'solve': 0.005001068115234375, 'unsat': 0.0030002593994140625, 'sat': 0.0020008087158203125}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.52410888671875, 'cpu': 0.5, 'solve': 0.0200042724609375, 'unsat': 0.013002395629882812, 'sat': 0.005001068115234375}, 'models': {'enumerated': 5.0, 'optimal': 4.0}, 'solving': {'solvers': {'choices': 1716.0, 'conflicts': 31.0, 'conflicts_analyzed': 19.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 131.0, 'models': 5.0, 'models_level': 309.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 19.0, 'distributed_sum_lbd': 23.0, 'integrated': 94.0, 'lemmas': 111.0, 'lits_learnt': 167.0, 'lemmas_binary': 11.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 92.0, 'integrated_jumps': 561.0, 'guiding_paths_lits': 786.0, 'guiding_paths': 32.0, 'splits': 0.0, 'lemmas_conflict': 19.0, 'lemmas_loop': 0.0, 'lemmas_other': 92.0, 'lits_conflict': 30.0, 'lits_loop': 0.0, 'lits_other': 137.0, 'jumps': {'jumps': 19.0, 'jumps_bounded': 17.0, 'levels': 1011.0, 'levels_bounded': 635.0, 'max': 71.0, 'max_executed': 71.0, 'max_bounded': 47.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{7: 17, 8: 18, 9: 19, 10: 20}

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 11 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 5 ( 71.43% solved)

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(11, 20)', truth=True, inc_range=None)

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 11, step = 20]:
sub_goal(3, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 11)
sub_goal(3, talos, put(manipulator_arm_1,(block,2),(block,3)), on((block,2)), (block,3), 11)

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Reaction at search length 20:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     20 : Current =     21
Incrementor step ends | Minimum  =     23 : Maximum =    200

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('state_module', [Number(21), Number(16)]), ('plan_module', [Number(21), Number(16), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(16), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('conformance_module', [Number(21), Number(16), Number(7), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.119618s.

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 21: original = External(symbol='current_last_sgoals(11, 20)', truth=True, inc_range=None), conversion = current_last_sgoals(11,20).

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011758s with result Satisfiable.

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.131375999999932, Incremental time limit = None
Running cumulative time = 0.6187360000001263, Cumulative time limit = 1800
Used memory = (RSS = 734.773438Mb, VMS = 724.910156Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 6
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.572610s, Solving = 0.046126s, Total = 0.618736s, Memory = (RSS = 734.773438Mb, VMS = 724.910156Mb), Step range = [16-21]), Calls = 5
Final Model :: Total atoms = 4983, Cost = (9, 0, -3), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=20, end_step=21, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.5726104000000305, solving_time=0.0461256000000958, total_time=0.6187360000001263, memory=Memory(rss=734.7734375, vms=724.91015625), step_range=range(16, 22), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.11961759999996957, solving_time=0.011758399999962421, total_time=0.131375999999932, memory=Memory(rss=734.7734375, vms=724.91015625), step_range=range(21, 22), clingo_stats={'problem': {'lp': {'atoms': 16130.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 39320.0, 'bodies_tr': 39320.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 940.0, 'count_bodies_tr': 940.0, 'sccs': 85.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1309.0, 'rules': 56378.0, 'rules_normal': 55424.0, 'rules_choice': 939.0, 'rules_minimize': 15.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 56378.0, 'rules_tr_normal': 55424.0, 'rules_tr_choice': 939.0, 'rules_tr_minimize': 15.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 30604.0, 'eqs_atom': 6600.0, 'eqs_body': 2101.0, 'eqs_other': 21903.0}, 'lpStep': {'atoms': 2211.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8078.0, 'bodies_tr': 8078.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 10571.0, 'rules_normal': 10416.0, 'rules_choice': 152.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 10571.0, 'rules_tr_normal': 10416.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4584.0, 'eqs_atom': 1007.0, 'eqs_body': 114.0, 'eqs_other': 3463.0}, 'generator': {'vars': 5995.0, 'vars_eliminated': 0.0, 'vars_frozen': 3936.0, 'constraints': 1248.0, 'constraints_binary': 22997.0, 'constraints_ternary': 5373.0, 'acyc_edges': 0.0, 'complexity': 29838.0}}, 'solving': {'solvers': {'choices': 536.0, 'conflicts': 9.0, 'conflicts_analyzed': 2.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 47.0, 'models': 1.0, 'models_level': 127.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2.0, 'distributed_sum_lbd': 4.0, 'integrated': 10.0, 'lemmas': 12.0, 'lits_learnt': 54.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 10.0, 'integrated_jumps': 144.0, 'guiding_paths_lits': 330.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 2.0, 'lemmas_loop': 0.0, 'lemmas_other': 10.0, 'lits_conflict': 9.0, 'lits_loop': 0.0, 'lits_other': 45.0, 'jumps': {'jumps': 2.0, 'jumps_bounded': 2.0, 'levels': 30.0, 'levels_bounded': 4.0, 'max': 24.0, 'max_executed': 22.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 5.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [9.0, 0.0, -3.0], 'lower': [9.0, 0.0, -3.0], 'concurrency': 6.0, 'winner': 2.0, 'times': {'total': 0.13302993774414062, 'cpu': 0.140625, 'solve': 0.0070018768310546875, 'unsat': 0.005001068115234375, 'sat': 0.0020008087158203125}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.6571388244628906, 'cpu': 0.640625, 'solve': 0.027006149291992188, 'unsat': 0.018003463745117188, 'sat': 0.0070018768310546875}, 'models': {'enumerated': 6.0, 'optimal': 5.0}, 'solving': {'solvers': {'choices': 2252.0, 'conflicts': 40.0, 'conflicts_analyzed': 21.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 178.0, 'models': 6.0, 'models_level': 436.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 21.0, 'distributed_sum_lbd': 27.0, 'integrated': 104.0, 'lemmas': 123.0, 'lits_learnt': 221.0, 'lemmas_binary': 17.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 102.0, 'integrated_jumps': 705.0, 'guiding_paths_lits': 1116.0, 'guiding_paths': 39.0, 'splits': 0.0, 'lemmas_conflict': 21.0, 'lemmas_loop': 0.0, 'lemmas_other': 102.0, 'lits_conflict': 39.0, 'lits_loop': 0.0, 'lits_other': 182.0, 'jumps': {'jumps': 21.0, 'jumps_bounded': 19.0, 'levels': 1041.0, 'levels_bounded': 639.0, 'max': 71.0, 'max_executed': 71.0, 'max_bounded': 47.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{7: 17, 8: 18, 9: 19, 10: 20, 11: 21}

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 12 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 6 ( 85.71% solved)

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(12, 21)', truth=True, inc_range=None)

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 12, step = 21]:
sub_goal(3, talos, release(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), nothing, 12)

[16-02-2022_21-58-51] DEBUG :: ASH Planner Main #1 >> Reaction at search length 21:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     21 : Current =     22
Incrementor step ends | Minimum  =     23 : Maximum =    200

[16-02-2022_21-58-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(22)]), ('state_module', [Number(22), Number(16)]), ('plan_module', [Number(22), Number(16), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(16), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('conformance_module', [Number(22), Number(16), Number(7), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.124518s.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 22: original = External(symbol='current_last_sgoals(12, 21)', truth=True, inc_range=None), conversion = current_last_sgoals(12,21).

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012365s with result Satisfiable.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.13688330000002225, Incremental time limit = None
Running cumulative time = 0.7556193000001485, Cumulative time limit = 1800
Used memory = (RSS = 734.773438Mb, VMS = 724.910156Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.697129s, Solving = 0.058491s, Total = 0.755619s, Memory = (RSS = 734.773438Mb, VMS = 724.910156Mb), Step range = [16-22]), Calls = 6
Final Model :: Total atoms = 5322, Cost = (10, 0, -3), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=6, start_step=21, end_step=22, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.6971287000000075, solving_time=0.05849060000014106, total_time=0.7556193000001485, memory=Memory(rss=734.7734375, vms=724.91015625), step_range=range(16, 23), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.12451829999997699, solving_time=0.012365000000045256, total_time=0.13688330000002225, memory=Memory(rss=734.7734375, vms=724.91015625), step_range=range(22, 23), clingo_stats={'problem': {'lp': {'atoms': 18410.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 47571.0, 'bodies_tr': 47571.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1120.0, 'count_bodies_tr': 1120.0, 'sccs': 105.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1745.0, 'rules': 67177.0, 'rules_normal': 66068.0, 'rules_choice': 1091.0, 'rules_minimize': 18.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 67177.0, 'rules_tr_normal': 66068.0, 'rules_tr_choice': 1091.0, 'rules_tr_minimize': 18.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 35393.0, 'eqs_atom': 7658.0, 'eqs_body': 2211.0, 'eqs_other': 25524.0}, 'lpStep': {'atoms': 2280.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8251.0, 'bodies_tr': 8251.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 10799.0, 'rules_normal': 10644.0, 'rules_choice': 152.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 10799.0, 'rules_tr_normal': 10644.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4789.0, 'eqs_atom': 1058.0, 'eqs_body': 110.0, 'eqs_other': 3621.0}, 'generator': {'vars': 7769.0, 'vars_eliminated': 0.0, 'vars_frozen': 5035.0, 'constraints': 1735.0, 'constraints_binary': 32074.0, 'constraints_ternary': 7631.0, 'acyc_edges': 0.0, 'complexity': 41728.0}}, 'solving': {'solvers': {'choices': 452.0, 'conflicts': 7.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 36.0, 'models': 1.0, 'models_level': 151.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 18.0, 'lits_learnt': 90.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 384.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 18.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 90.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 6.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [10.0, 0.0, -3.0], 'lower': [10.0, 0.0, -3.0], 'concurrency': 6.0, 'winner': 2.0, 'times': {'total': 0.1380290985107422, 'cpu': 0.140625, 'solve': 0.006000518798828125, 'unsat': 0.0039997100830078125, 'sat': 0.0020008087158203125}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.7951679229736328, 'cpu': 0.78125, 'solve': 0.03300666809082031, 'unsat': 0.022003173828125, 'sat': 0.009002685546875}, 'models': {'enumerated': 7.0, 'optimal': 6.0}, 'solving': {'solvers': {'choices': 2704.0, 'conflicts': 47.0, 'conflicts_analyzed': 21.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 214.0, 'models': 7.0, 'models_level': 587.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 21.0, 'distributed_sum_lbd': 27.0, 'integrated': 104.0, 'lemmas': 141.0, 'lits_learnt': 311.0, 'lemmas_binary': 17.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.046875, 'integrated_imps': 102.0, 'integrated_jumps': 705.0, 'guiding_paths_lits': 1500.0, 'guiding_paths': 46.0, 'splits': 0.0, 'lemmas_conflict': 21.0, 'lemmas_loop': 18.0, 'lemmas_other': 102.0, 'lits_conflict': 39.0, 'lits_loop': 90.0, 'lits_other': 182.0, 'jumps': {'jumps': 21.0, 'jumps_bounded': 19.0, 'levels': 1041.0, 'levels_bounded': 639.0, 'max': 71.0, 'max_executed': 71.0, 'max_bounded': 47.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{7: 17, 8: 18, 9: 19, 10: 20, 11: 21, 12: 22}

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 13 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 7 (100.00% solved)

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(13, 22)', truth=True, inc_range=None)

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 13, step = 22]:
sub_goal(3, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 13)

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='seq_achieve_fgoals(22)', truth=True, inc_range=IncRange(start=None, end=None, step=1))

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Enforcing achievement of final-goal:
final_goal(2, complete_tower(blue,puzzle_room_table), false, false)
final_goal(2, complete_tower(blue,puzzle_room_table), true, true)
final_goal(2, complete_tower(red,puzzle_room_table), false, false)
final_goal(2, complete_tower(red,puzzle_room_table), true, true)
final_goal(2, in_tower((block,1),(block,1)), false, true)
final_goal(2, in_tower((block,1),(block,1)), true, false)
final_goal(2, in_tower((block,1),(block,2)), false, true)
final_goal(2, in_tower((block,1),(block,2)), true, false)
final_goal(2, in_tower((block,1),(block,3)), false, true)
final_goal(2, in_tower((block,1),(block,3)), true, false)
final_goal(2, in_tower((block,1),(block,4)), false, true)
final_goal(2, in_tower((block,1),(block,4)), true, false)
final_goal(2, in_tower((block,1),(block,5)), false, true)
final_goal(2, in_tower((block,1),(block,5)), true, false)
final_goal(2, in_tower((block,1),(block,6)), false, true)
final_goal(2, in_tower((block,1),(block,6)), true, false)
final_goal(2, in_tower((block,2),(block,1)), false, true)
final_goal(2, in_tower((block,2),(block,1)), true, false)
final_goal(2, in_tower((block,2),(block,2)), false, true)
final_goal(2, in_tower((block,2),(block,2)), true, false)
final_goal(2, in_tower((block,2),(block,3)), false, true)
final_goal(2, in_tower((block,2),(block,3)), true, false)
final_goal(2, in_tower((block,2),(block,4)), false, true)
final_goal(2, in_tower((block,2),(block,4)), true, false)
final_goal(2, in_tower((block,2),(block,5)), false, true)
final_goal(2, in_tower((block,2),(block,5)), true, false)
final_goal(2, in_tower((block,2),(block,6)), false, true)
final_goal(2, in_tower((block,2),(block,6)), true, false)
final_goal(2, in_tower((block,3),(block,1)), false, false)
final_goal(2, in_tower((block,3),(block,1)), true, true)
final_goal(2, in_tower((block,3),(block,2)), false, false)
final_goal(2, in_tower((block,3),(block,2)), true, true)
final_goal(2, in_tower((block,3),(block,3)), false, false)
final_goal(2, in_tower((block,3),(block,3)), true, true)
final_goal(2, in_tower((block,3),(block,4)), false, true)
final_goal(2, in_tower((block,3),(block,4)), true, false)
final_goal(2, in_tower((block,3),(block,5)), false, true)
final_goal(2, in_tower((block,3),(block,5)), true, false)
final_goal(2, in_tower((block,3),(block,6)), false, true)
final_goal(2, in_tower((block,3),(block,6)), true, false)
final_goal(2, in_tower((block,4),(block,1)), false, true)
final_goal(2, in_tower((block,4),(block,1)), true, false)
final_goal(2, in_tower((block,4),(block,2)), false, true)
final_goal(2, in_tower((block,4),(block,2)), true, false)
final_goal(2, in_tower((block,4),(block,3)), false, true)
final_goal(2, in_tower((block,4),(block,3)), true, false)
final_goal(2, in_tower((block,4),(block,4)), false, true)
final_goal(2, in_tower((block,4),(block,4)), true, false)
final_goal(2, in_tower((block,4),(block,5)), false, true)
final_goal(2, in_tower((block,4),(block,5)), true, false)
final_goal(2, in_tower((block,4),(block,6)), false, true)
final_goal(2, in_tower((block,4),(block,6)), true, false)
final_goal(2, in_tower((block,5),(block,1)), false, true)
final_goal(2, in_tower((block,5),(block,1)), true, false)
final_goal(2, in_tower((block,5),(block,2)), false, true)
final_goal(2, in_tower((block,5),(block,2)), true, false)
final_goal(2, in_tower((block,5),(block,3)), false, true)
final_goal(2, in_tower((block,5),(block,3)), true, false)
final_goal(2, in_tower((block,5),(block,4)), false, true)
final_goal(2, in_tower((block,5),(block,4)), true, false)
final_goal(2, in_tower((block,5),(block,5)), false, true)
final_goal(2, in_tower((block,5),(block,5)), true, false)
final_goal(2, in_tower((block,5),(block,6)), false, true)
final_goal(2, in_tower((block,5),(block,6)), true, false)
final_goal(2, in_tower((block,6),(block,1)), false, true)
final_goal(2, in_tower((block,6),(block,1)), true, false)
final_goal(2, in_tower((block,6),(block,2)), false, true)
final_goal(2, in_tower((block,6),(block,2)), true, false)
final_goal(2, in_tower((block,6),(block,3)), false, true)
final_goal(2, in_tower((block,6),(block,3)), true, false)
final_goal(2, in_tower((block,6),(block,4)), false, false)
final_goal(2, in_tower((block,6),(block,4)), true, true)
final_goal(2, in_tower((block,6),(block,5)), false, false)
final_goal(2, in_tower((block,6),(block,5)), true, true)
final_goal(2, in_tower((block,6),(block,6)), false, false)
final_goal(2, in_tower((block,6),(block,6)), true, true)
final_goal(2, on((block,1)), (block,2), true)
final_goal(2, on((block,1)), (block,3), false)
final_goal(2, on((block,1)), (block,4), false)
final_goal(2, on((block,1)), (block,5), false)
final_goal(2, on((block,1)), (block,6), false)
final_goal(2, on((block,1)), nothing, false)
final_goal(2, on((block,1)), puzzle_room_table, false)
final_goal(2, on((block,2)), (block,1), false)
final_goal(2, on((block,2)), (block,3), true)
final_goal(2, on((block,2)), (block,4), false)
final_goal(2, on((block,2)), (block,5), false)
final_goal(2, on((block,2)), (block,6), false)
final_goal(2, on((block,2)), nothing, false)
final_goal(2, on((block,2)), puzzle_room_table, false)
final_goal(2, on((block,3)), (block,1), false)
final_goal(2, on((block,3)), (block,2), false)
final_goal(2, on((block,3)), (block,4), false)
final_goal(2, on((block,3)), (block,5), false)
final_goal(2, on((block,3)), (block,6), false)
final_goal(2, on((block,3)), nothing, false)
final_goal(2, on((block,3)), puzzle_room_table, true)
final_goal(2, on((block,4)), (block,1), false)
final_goal(2, on((block,4)), (block,2), false)
final_goal(2, on((block,4)), (block,3), false)
final_goal(2, on((block,4)), (block,5), true)
final_goal(2, on((block,4)), (block,6), false)
final_goal(2, on((block,4)), nothing, false)
final_goal(2, on((block,4)), puzzle_room_table, false)
final_goal(2, on((block,5)), (block,1), false)
final_goal(2, on((block,5)), (block,2), false)
final_goal(2, on((block,5)), (block,3), false)
final_goal(2, on((block,5)), (block,4), false)
final_goal(2, on((block,5)), (block,6), true)
final_goal(2, on((block,5)), nothing, false)
final_goal(2, on((block,5)), puzzle_room_table, false)
final_goal(2, on((block,6)), (block,1), false)
final_goal(2, on((block,6)), (block,2), false)
final_goal(2, on((block,6)), (block,3), false)
final_goal(2, on((block,6)), (block,4), false)
final_goal(2, on((block,6)), (block,5), false)
final_goal(2, on((block,6)), nothing, false)
final_goal(2, on((block,6)), puzzle_room_table, true)
final_goal(2, tower_base((block,1),puzzle_room_table), false, true)
final_goal(2, tower_base((block,1),puzzle_room_table), true, false)
final_goal(2, tower_base((block,2),puzzle_room_table), false, true)
final_goal(2, tower_base((block,2),puzzle_room_table), true, false)
final_goal(2, tower_base((block,3),puzzle_room_table), false, false)
final_goal(2, tower_base((block,3),puzzle_room_table), true, true)
final_goal(2, tower_base((block,4),puzzle_room_table), false, true)
final_goal(2, tower_base((block,4),puzzle_room_table), true, false)
final_goal(2, tower_base((block,5),puzzle_room_table), false, true)
final_goal(2, tower_base((block,5),puzzle_room_table), true, false)
final_goal(2, tower_base((block,6),puzzle_room_table), false, false)
final_goal(2, tower_base((block,6),puzzle_room_table), true, true)
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true)
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false)
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true)
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false)
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true)
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false)
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true)
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false)
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true)
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false)
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true)
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false)

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     22 : Current =     23
Incrementor step ends | Minimum  =     23 : Maximum =    200

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(23)]), ('state_module', [Number(23), Number(16)]), ('plan_module', [Number(23), Number(16), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(16), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('conformance_module', [Number(23), Number(16), Number(7), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.131958s.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 23: original = External(symbol='current_last_sgoals(13, 22)', truth=True, inc_range=None), conversion = current_last_sgoals(13,22).

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 23: original = External(symbol='seq_achieve_fgoals(22)', truth=True, inc_range=IncRange(start=None, end=None, step=1)), conversion = seq_achieve_fgoals(22).

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013572s with result Satisfiable.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.14553000000012162, Incremental time limit = None
Running cumulative time = 0.9011493000002702, Cumulative time limit = 1800
Used memory = (RSS = 735.796875Mb, VMS = 725.937500Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 8
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.829087s, Solving = 0.072062s, Total = 0.901149s, Memory = (RSS = 735.796875Mb, VMS = 725.937500Mb), Step range = [16-23]), Calls = 7
Final Model :: Total atoms = 5939, Cost = (11, 0, -4), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=7, start_step=22, end_step=23, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.8290871000000379, solving_time=0.07206220000023222, total_time=0.9011493000002702, memory=Memory(rss=735.796875, vms=725.9375), step_range=range(16, 24), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.13195840000003045, solving_time=0.013571600000091166, total_time=0.14553000000012162, memory=Memory(rss=735.796875, vms=725.9375), step_range=range(23, 24), clingo_stats={'problem': {'lp': {'atoms': 20706.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 55847.0, 'bodies_tr': 55847.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1300.0, 'count_bodies_tr': 1300.0, 'sccs': 125.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2181.0, 'rules': 78023.0, 'rules_normal': 76759.0, 'rules_choice': 1243.0, 'rules_minimize': 21.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 78023.0, 'rules_tr_normal': 76759.0, 'rules_tr_choice': 1243.0, 'rules_tr_minimize': 21.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 40241.0, 'eqs_atom': 8728.0, 'eqs_body': 2323.0, 'eqs_other': 29190.0}, 'lpStep': {'atoms': 2296.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8276.0, 'bodies_tr': 8276.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 10846.0, 'rules_normal': 10691.0, 'rules_choice': 152.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 10846.0, 'rules_tr_normal': 10691.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4848.0, 'eqs_atom': 1070.0, 'eqs_body': 112.0, 'eqs_other': 3666.0}, 'generator': {'vars': 9549.0, 'vars_eliminated': 0.0, 'vars_frozen': 6138.0, 'constraints': 2223.0, 'constraints_binary': 41194.0, 'constraints_ternary': 9894.0, 'acyc_edges': 0.0, 'complexity': 53667.0}}, 'solving': {'solvers': {'choices': 538.0, 'conflicts': 7.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 45.0, 'models': 1.0, 'models_level': 175.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 438.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 7.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [11.0, 0.0, -4.0], 'lower': [11.0, 0.0, -4.0], 'concurrency': 6.0, 'winner': 1.0, 'times': {'total': 0.14703369140625, 'cpu': 0.15625, 'solve': 0.0070018768310546875, 'unsat': 0.0050029754638671875, 'sat': 0.0019989013671875}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.9422016143798828, 'cpu': 0.9375, 'solve': 0.040008544921875, 'unsat': 0.027006149291992188, 'sat': 0.0110015869140625}, 'models': {'enumerated': 8.0, 'optimal': 7.0}, 'solving': {'solvers': {'choices': 3242.0, 'conflicts': 54.0, 'conflicts_analyzed': 21.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 259.0, 'models': 8.0, 'models_level': 762.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 21.0, 'distributed_sum_lbd': 27.0, 'integrated': 104.0, 'lemmas': 141.0, 'lits_learnt': 311.0, 'lemmas_binary': 17.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0625, 'integrated_imps': 102.0, 'integrated_jumps': 705.0, 'guiding_paths_lits': 1938.0, 'guiding_paths': 53.0, 'splits': 0.0, 'lemmas_conflict': 21.0, 'lemmas_loop': 18.0, 'lemmas_other': 102.0, 'lits_conflict': 39.0, 'lits_loop': 90.0, 'lits_other': 182.0, 'jumps': {'jumps': 21.0, 'jumps_bounded': 19.0, 'levels': 1041.0, 'levels_bounded': 639.0, 'max': 71.0, 'max_executed': 71.0, 'max_bounded': 47.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{7: 17, 8: 18, 9: 19, 10: 20, 11: 21, 12: 22, 13: 23}

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 14 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 8 (114.29% solved)

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 13 was achieved successfully.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.130187s, Solving = 0.007777s, Total = 0.137964s, Memory = (RSS = 734.578125Mb, VMS = 724.910156Mb), Step range = [16-17]
2 : Statistics :: Grounding = 0.101763s, Solving = 0.006762s, Total = 0.108524s, Memory = (RSS = 734.578125Mb, VMS = 724.910156Mb), Step range = [18-18]
3 : Statistics :: Grounding = 0.101486s, Solving = 0.009709s, Total = 0.111195s, Memory = (RSS = 734.578125Mb, VMS = 724.910156Mb), Step range = [19-19]
4 : Statistics :: Grounding = 0.119558s, Solving = 0.010119s, Total = 0.129677s, Memory = (RSS = 734.578125Mb, VMS = 724.910156Mb), Step range = [20-20]
5 : Statistics :: Grounding = 0.119618s, Solving = 0.011758s, Total = 0.131376s, Memory = (RSS = 734.773438Mb, VMS = 724.910156Mb), Step range = [21-21]
6 : Statistics :: Grounding = 0.124518s, Solving = 0.012365s, Total = 0.136883s, Memory = (RSS = 734.773438Mb, VMS = 724.910156Mb), Step range = [22-22]
7 : Statistics :: Grounding = 0.131958s, Solving = 0.013572s, Total = 0.145530s, Memory = (RSS = 735.796875Mb, VMS = 725.937500Mb), Step range = [23-23]

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.901149s due to: External generator exit.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 5, 19: 6, 20: 7, 21: 7, 22: 7, 23: 8, 24: 8, 25: 9, 26: 9, 27: 10, 28: 11, 29: 11, 30: 12, 31: 12, 32: 12, 33: 13, 34: 14, 35: 14, 36: 14, 37: 14, 38: 15, 39: 16, 40: 16}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 16, 4: 17, 5: 18, 6: 19, 7: 22, 8: 24, 9: 26, 10: 27, 11: 29, 12: 32, 13: 33, 14: 37, 15: 38, 16: 40}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 5, 19: 6, 20: 7, 21: 7, 22: 7, 23: 8, 24: 8, 25: 9, 26: 9, 27: 10, 28: 11, 29: 11, 30: 12, 31: 12, 32: 12, 33: 13, 34: 14, 35: 14, 36: 14, 37: 14, 38: 15, 39: 16, 40: 16}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 16, 4: 17, 5: 18, 6: 19, 7: 22, 8: 24, 9: 26, 10: 27, 11: 29, 12: 32, 13: 33, 14: 37, 15: 38, 16: 40}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8, 19: 9, 20: 10, 21: 11, 22: 12, 23: 13}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18, 9: 19, 10: 20, 11: 21, 12: 22, 13: 23}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 13, Last requested goal index = 13, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.829087s, Solving = 0.072062s, Total = 0.901149s, Memory = (RSS = 735.796875Mb, VMS = 725.937500Mb), Step range = [16-23]), Calls = 7
Model :: Total atoms = 5939, Cost = (11, 0, -4), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 7 :: Actions = 11                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer)
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,puzzle_room_door)
        talos : actuate(manipulator_arm_2,store_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,puzzle_room_door_handle_outer)
        talos : release(manipulator_arm_2,store_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
        talos : configure(manipulator_arm_2,retracted)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 8:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 9:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
        talos : grasp(manipulator_arm_2,(block,5))
Step 10:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
        talos : configure(manipulator_arm_2,retracted)
Step 11:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 12:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 13:
    Current Sub-goals:
        [Index = 4] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 4] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 4] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 15:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,6))
Step 16:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
        talos : put(manipulator_arm_2,(block,5),(block,6))
Step 17:
    Current Sub-goals:
        [Index = 7] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 7] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 7] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 7] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
        talos : release(manipulator_arm_2,(block,5))
Step 18:
    Current Sub-goals:
        [Index = 8] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 8] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,4))
        talos : release(manipulator_arm_1,(block,3))
Step 19:
    Current Sub-goals:
        [Index = 9] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 9] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 9] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 9] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_arm_2,(block,4),(block,5))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 10] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 10] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 10] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,2))
        talos : release(manipulator_arm_2,(block,4))
Step 21:
    Current Sub-goals:
        [Index = 11] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 11] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 11] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 11] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,1))
        talos : put(manipulator_arm_1,(block,2),(block,3))
Step 22:
    Current Sub-goals:
        [Index = 12] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 12] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,2))
Step 23:
    Current Sub-goals:
        [Index = 13] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 13] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_arm_2,(block,1),(block,2))

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=16, total_plan_length=23, step_range=range(16, 24)

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 13, Total actions = 19, Produced sub-goal stages = 19
Level [2]: Length = 23, Total actions = 37, Produced sub-goal stages = 37
Level [1]: Length = 40, Total actions = 50, Produced sub-goal stages = 0

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 2 (par-ref), LE =   7, AC =  11, CF = 0.6, GT =   2.77s, ST =   0.28s, OT = 0.01s, TT =   3.06s, EF = (LE = 1.0, AC = 1.0), ED = (LE = 0.0, AC = 0.4), EB = (LE = 0.0, AC = 0.4)

[16-02-2022_21-58-52] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=6, plan_length=7, start_step=16, blend=Blend(left=0, right=0)

[16-02-2022_21-58-52] DEBUG :: core.Strategies >> Decided: number_small_problems=5, number_large_problems=1, small_group_size=1, large_group_size=2

[16-02-2022_21-58-52] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=17, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1), DivisionPoint(index=18, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1), DivisionPoint(index=19, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1), DivisionPoint(index=20, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1), DivisionPoint(index=21, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 6, Problem Range = [7-12], Size = 7, Sub-goal Stage Range = [17-23]
Division points [total=5] : [(Index = 17, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 18, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 19, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 20, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 21, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Monolevel problem 2 at level 2 solved.

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 7 at level 1:
Total Templated Partial Problems = 6, Problem Range = [7-12], Size = 7, Sub-goal Stage Range = [17-23]
Division points [total=5] : [(Index = 17, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 18, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 19, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 20, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 21, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [17-17]

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [17-17], problem number = 7, increment number = 7

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 17)
	('last_sgoals', 17)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x000002960D109A60>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [17-17] : Concurrency enabled : Minimum search length bound disabled with value 40

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 17
last_sgoals = 17
start_step = 40
is_initial = False
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 40

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[16-02-2022_21-58-52] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[16-02-2022_21-58-52] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 40 as problem start state.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 40})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 40})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,3))', 'S': 40})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 40})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 40})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 40})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 40})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 40})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 40})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'S': 40})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 40})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,3)', 'S': 40})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 40})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 40})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 40})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 40})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,1)', 'S': 40})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 40})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 40})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 40})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 40})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 40})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 40})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 40})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 40})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 40})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 40})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 40})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 40})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 40})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 40})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 40})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 40})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 40})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 40})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 40})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 40})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 40})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 40})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 40})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 40})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 40})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 40})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 40})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 40})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 40})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 40})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 40})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 40})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 40})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 40})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 40})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 40})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 40})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 40})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 40})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 40})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 40})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 40})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 40})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 40})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 40})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 40})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 40})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 40})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 40})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 40})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 40})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 40})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 40})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 40})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 40})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 40})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 40})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 40})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 40})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 40})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 40})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'S': 40})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 40})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 40})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 40})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 40})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 40})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 40})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 40})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 40})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'S': 40})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 40})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 40})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 40})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 40})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 40})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 40})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 40})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 40})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 40})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 40})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 40})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 40})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 40})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 40})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 40})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 40})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 40})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 40})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 40})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 40})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 40})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 40})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 40})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 40})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 40})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 40})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 40})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'S': 40})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 40})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 40})

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 40).
holds(1, complete_tower(red,puzzle_room_table), false, 40).
holds(1, configuration(manipulator_end_1), aligned_with((block,3)), 40).
holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 40).
holds(1, configuration(manipulator_limb_1), extended, 40).
holds(1, configuration(manipulator_limb_2), extended, 40).
holds(1, configuration(puzzle_room_door), open, 40).
holds(1, configuration(starting_room_door), closed, 40).
holds(1, configuration(store_room_door), open, 40).
holds(1, grasping(manipulator_arm_1), (block,3), 40).
holds(1, grasping(manipulator_arm_2), (block,5), 40).
holds(1, grasping(manipulator_end_1), (block,3), 40).
holds(1, grasping(manipulator_end_2), (block,5), 40).
holds(1, in((block,1)), (puzzle_room,1), 40).
holds(1, in((block,2)), (puzzle_room,1), 40).
holds(1, in((block,3)), (puzzle_room,1), 40).
holds(1, in((block,4)), (puzzle_room,1), 40).
holds(1, in((block,5)), (puzzle_room,1), 40).
holds(1, in((block,6)), (puzzle_room,1), 40).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 40).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 40).
holds(1, in(manipulator_end_1), (puzzle_room,1), 40).
holds(1, in(manipulator_end_2), (puzzle_room,1), 40).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 40).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 40).
holds(1, in(puzzle_room_table), (puzzle_room,1), 40).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 40).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 40).
holds(1, in(talos), (puzzle_room,1), 40).
holds(1, in_tower((block,1),(block,1)), true, 40).
holds(1, in_tower((block,1),(block,2)), false, 40).
holds(1, in_tower((block,1),(block,3)), true, 40).
holds(1, in_tower((block,1),(block,4)), false, 40).
holds(1, in_tower((block,1),(block,5)), false, 40).
holds(1, in_tower((block,1),(block,6)), false, 40).
holds(1, in_tower((block,2),(block,1)), false, 40).
holds(1, in_tower((block,2),(block,2)), true, 40).
holds(1, in_tower((block,2),(block,3)), false, 40).
holds(1, in_tower((block,2),(block,4)), true, 40).
holds(1, in_tower((block,2),(block,5)), false, 40).
holds(1, in_tower((block,2),(block,6)), false, 40).
holds(1, in_tower((block,3),(block,1)), false, 40).
holds(1, in_tower((block,3),(block,2)), false, 40).
holds(1, in_tower((block,3),(block,3)), false, 40).
holds(1, in_tower((block,3),(block,4)), false, 40).
holds(1, in_tower((block,3),(block,5)), false, 40).
holds(1, in_tower((block,3),(block,6)), false, 40).
holds(1, in_tower((block,4),(block,1)), false, 40).
holds(1, in_tower((block,4),(block,2)), false, 40).
holds(1, in_tower((block,4),(block,3)), false, 40).
holds(1, in_tower((block,4),(block,4)), false, 40).
holds(1, in_tower((block,4),(block,5)), false, 40).
holds(1, in_tower((block,4),(block,6)), false, 40).
holds(1, in_tower((block,5),(block,1)), false, 40).
holds(1, in_tower((block,5),(block,2)), false, 40).
holds(1, in_tower((block,5),(block,3)), false, 40).
holds(1, in_tower((block,5),(block,4)), false, 40).
holds(1, in_tower((block,5),(block,5)), false, 40).
holds(1, in_tower((block,5),(block,6)), false, 40).
holds(1, in_tower((block,6),(block,1)), false, 40).
holds(1, in_tower((block,6),(block,2)), false, 40).
holds(1, in_tower((block,6),(block,3)), false, 40).
holds(1, in_tower((block,6),(block,4)), false, 40).
holds(1, in_tower((block,6),(block,5)), true, 40).
holds(1, in_tower((block,6),(block,6)), true, 40).
holds(1, on((block,1)), puzzle_room_table_left, 40).
holds(1, on((block,2)), puzzle_room_table_right, 40).
holds(1, on((block,3)), (block,1), 40).
holds(1, on((block,4)), (block,2), 40).
holds(1, on((block,5)), (block,6), 40).
holds(1, on((block,6)), puzzle_room_table_right, 40).
holds(1, tower_base((block,1),puzzle_room_table), true, 40).
holds(1, tower_base((block,2),puzzle_room_table), true, 40).
holds(1, tower_base((block,3),puzzle_room_table), false, 40).
holds(1, tower_base((block,4),puzzle_room_table), false, 40).
holds(1, tower_base((block,5),puzzle_room_table), false, 40).
holds(1, tower_base((block,6),puzzle_room_table), true, 40).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 40).
holds(1, unordered_tower((block,2),puzzle_room_table), true, 40).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 40).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 40).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 40).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 40).
holds(2, complete_tower(blue,puzzle_room_table), false, 40).
holds(2, complete_tower(red,puzzle_room_table), false, 40).
holds(2, configuration(manipulator_arm_1), extended, 40).
holds(2, configuration(manipulator_arm_2), extended, 40).
holds(2, configuration(puzzle_room_door), open, 40).
holds(2, configuration(starting_room_door), closed, 40).
holds(2, configuration(store_room_door), open, 40).
holds(2, grasping(manipulator_arm_1), (block,3), 40).
holds(2, grasping(manipulator_arm_2), (block,5), 40).
holds(2, in((block,1)), puzzle_room, 40).
holds(2, in((block,2)), puzzle_room, 40).
holds(2, in((block,3)), puzzle_room, 40).
holds(2, in((block,4)), puzzle_room, 40).
holds(2, in((block,5)), puzzle_room, 40).
holds(2, in((block,6)), puzzle_room, 40).
holds(2, in(manipulator_arm_1), puzzle_room, 40).
holds(2, in(manipulator_arm_2), puzzle_room, 40).
holds(2, in(puzzle_room_table), puzzle_room, 40).
holds(2, in(talos), puzzle_room, 40).
holds(2, in_tower((block,1),(block,1)), true, 40).
holds(2, in_tower((block,1),(block,2)), false, 40).
holds(2, in_tower((block,1),(block,3)), true, 40).
holds(2, in_tower((block,1),(block,4)), false, 40).
holds(2, in_tower((block,1),(block,5)), false, 40).
holds(2, in_tower((block,1),(block,6)), false, 40).
holds(2, in_tower((block,2),(block,1)), false, 40).
holds(2, in_tower((block,2),(block,2)), true, 40).
holds(2, in_tower((block,2),(block,3)), false, 40).
holds(2, in_tower((block,2),(block,4)), true, 40).
holds(2, in_tower((block,2),(block,5)), false, 40).
holds(2, in_tower((block,2),(block,6)), false, 40).
holds(2, in_tower((block,3),(block,1)), false, 40).
holds(2, in_tower((block,3),(block,2)), false, 40).
holds(2, in_tower((block,3),(block,3)), false, 40).
holds(2, in_tower((block,3),(block,4)), false, 40).
holds(2, in_tower((block,3),(block,5)), false, 40).
holds(2, in_tower((block,3),(block,6)), false, 40).
holds(2, in_tower((block,4),(block,1)), false, 40).
holds(2, in_tower((block,4),(block,2)), false, 40).
holds(2, in_tower((block,4),(block,3)), false, 40).
holds(2, in_tower((block,4),(block,4)), false, 40).
holds(2, in_tower((block,4),(block,5)), false, 40).
holds(2, in_tower((block,4),(block,6)), false, 40).
holds(2, in_tower((block,5),(block,1)), false, 40).
holds(2, in_tower((block,5),(block,2)), false, 40).
holds(2, in_tower((block,5),(block,3)), false, 40).
holds(2, in_tower((block,5),(block,4)), false, 40).
holds(2, in_tower((block,5),(block,5)), false, 40).
holds(2, in_tower((block,5),(block,6)), false, 40).
holds(2, in_tower((block,6),(block,1)), false, 40).
holds(2, in_tower((block,6),(block,2)), false, 40).
holds(2, in_tower((block,6),(block,3)), false, 40).
holds(2, in_tower((block,6),(block,4)), false, 40).
holds(2, in_tower((block,6),(block,5)), true, 40).
holds(2, in_tower((block,6),(block,6)), true, 40).
holds(2, on((block,1)), puzzle_room_table, 40).
holds(2, on((block,2)), puzzle_room_table, 40).
holds(2, on((block,3)), (block,1), 40).
holds(2, on((block,4)), (block,2), 40).
holds(2, on((block,5)), (block,6), 40).
holds(2, on((block,6)), puzzle_room_table, 40).
holds(2, tower_base((block,1),puzzle_room_table), true, 40).
holds(2, tower_base((block,2),puzzle_room_table), true, 40).
holds(2, tower_base((block,3),puzzle_room_table), false, 40).
holds(2, tower_base((block,4),puzzle_room_table), false, 40).
holds(2, tower_base((block,5),puzzle_room_table), false, 40).
holds(2, tower_base((block,6),puzzle_room_table), true, 40).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 40).
holds(2, unordered_tower((block,2),puzzle_room_table), true, 40).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 40).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 40).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 40).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 40).

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 17})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 17})

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 2 rules into program part base:

sub_goal(2, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 17).
sub_goal(2, talos, release(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), nothing, 17).

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x0000029633510DC0>]
	incrementor = SolveIncrementor(step_start=40, step_increase=1, step_increase_initial=2, step_end_min=41, step_end_max=200, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 40), range_=None), IncPart(name='plan_module', args=('#inc', 40, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 40, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 40, 17, 17, 'sequential', 'true'), range_=None)]

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 809 rules

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004555199999913384s

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.029941s.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004911s with result Satisfiable.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000029634FADF90>

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 40)
	('last_sgoals', 17)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002960D109A60>)
	('first_sgoals', 17)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000029634FADF90>)

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(17, 41)', truth=True, inc_range=None)

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 40). %* None *%
#program plan_module(#inc, 40, true, false). %* None *%
#program optimisation_module(#inc, 40, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 40, 17, 17, sequential, true). %* None *%

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     39 : Current =     41
Incrementor step ends | Minimum  =     41 : Maximum =    200

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(41)]), ('state_module', [Number(40), Number(40)]), ('plan_module', [Number(40), Number(40), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(40), Number(40), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(40)]), ('action_preconditions', [Number(40)]), ('variable_relations', [Number(40)]), ('abstraction_mappings', [Number(40)]), ('conformance_module', [Number(40), Number(40), Number(17), Number(17), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(41), Number(40)]), ('plan_module', [Number(41), Number(40), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(41), Number(40), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(41)]), ('action_preconditions', [Number(41)]), ('variable_relations', [Number(41)]), ('abstraction_mappings', [Number(41)]), ('conformance_module', [Number(41), Number(40), Number(17), Number(17), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.248130s.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 40: original = External(symbol='current_last_sgoals(17, 41)', truth=True, inc_range=None), conversion = current_last_sgoals(17,41).

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 41: original = External(symbol='current_last_sgoals(17, 41)', truth=True, inc_range=None), conversion = current_last_sgoals(17,41).

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013666s with result Satisfiable.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.2617966000001388, Incremental time limit = None
Running cumulative time = 0.2617966000001388, Cumulative time limit = 1800
Used memory = (RSS = 735.398438Mb, VMS = 725.660156Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.248130s, Solving = 0.013666s, Total = 0.261797s, Memory = (RSS = 735.398438Mb, VMS = 725.660156Mb), Step range = [40-41]), Calls = 1
Final Model :: Total atoms = 4153, Cost = (2, 0, -1), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=39, end_step=41, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.2481304000000364, solving_time=0.013666200000102435, total_time=0.2617966000001388, memory=Memory(rss=735.3984375, vms=725.66015625), step_range=range(40, 42), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2481304000000364, solving_time=0.013666200000102435, total_time=0.2617966000001388, memory=Memory(rss=735.3984375, vms=725.66015625), step_range=range(40, 42), clingo_stats={'problem': {'lp': {'atoms': 12157.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15104.0, 'bodies_tr': 15104.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 258.0, 'count_bodies_tr': 258.0, 'sccs': 32.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 419.0, 'rules': 27058.0, 'rules_normal': 26512.0, 'rules_choice': 543.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 27058.0, 'rules_tr_normal': 26512.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 24186.0, 'eqs_atom': 7088.0, 'eqs_body': 2008.0, 'eqs_other': 15090.0}, 'lpStep': {'atoms': 5640.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12485.0, 'bodies_tr': 12485.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 258.0, 'count_bodies_tr': 258.0, 'sccs': 32.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 419.0, 'rules': 19631.0, 'rules_normal': 19085.0, 'rules_choice': 543.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 19631.0, 'rules_tr_normal': 19085.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 11130.0, 'eqs_atom': 2178.0, 'eqs_body': 483.0, 'eqs_other': 8469.0}, 'generator': {'vars': 1810.0, 'vars_eliminated': 0.0, 'vars_frozen': 1279.0, 'constraints': 21.0, 'constraints_binary': 930.0, 'constraints_ternary': 164.0, 'acyc_edges': 0.0, 'complexity': 1139.0}}, 'solving': {'solvers': {'choices': 146.0, 'conflicts': 4.0, 'conflicts_analyzed': 2.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 49.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 5.0, 'lemmas': 6.0, 'lits_learnt': 12.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 5.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 42.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 0.0, 'lemmas_other': 5.0, 'lits_conflict': 2.0, 'lits_loop': 0.0, 'lits_other': 10.0, 'jumps': {'jumps': 2.0, 'jumps_bounded': 2.0, 'levels': 4.0, 'levels_bounded': 2.0, 'max': 2.0, 'max_executed': 1.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [2.0, 0.0, -1.0], 'lower': [2.0, 0.0, -1.0], 'concurrency': 6.0, 'winner': 5.0, 'times': {'total': 0.26105499267578125, 'cpu': 0.265625, 'solve': 0.006999969482421875, 'unsat': 0.00299835205078125, 'sat': 0.0}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.30106353759765625, 'cpu': 0.3125, 'solve': 0.010000228881835938, 'unsat': 0.00299835205078125, 'sat': 0.00099945068359375}, 'models': {'enumerated': 3.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 146.0, 'conflicts': 4.0, 'conflicts_analyzed': 2.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 50.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 5.0, 'lemmas': 6.0, 'lits_learnt': 12.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 5.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 14.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 0.0, 'lemmas_other': 5.0, 'lits_conflict': 2.0, 'lits_loop': 0.0, 'lits_other': 10.0, 'jumps': {'jumps': 2.0, 'jumps_bounded': 2.0, 'levels': 4.0, 'levels_bounded': 2.0, 'max': 2.0, 'max_executed': 1.0, 'max_bounded': 1.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{17: 41}

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 18 achieved :: Progression >> total requested sgoals = 1, current total achieved sgoals = 2 (200.00% solved)

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 17 was achieved successfully.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.248130s, Solving = 0.013666s, Total = 0.261797s, Memory = (RSS = 735.398438Mb, VMS = 725.660156Mb), Step range = [40-41]

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.261797s due to: External generator exit.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 5, 19: 6, 20: 7, 21: 7, 22: 7, 23: 8, 24: 8, 25: 9, 26: 9, 27: 10, 28: 11, 29: 11, 30: 12, 31: 12, 32: 12, 33: 13, 34: 14, 35: 14, 36: 14, 37: 14, 38: 15, 39: 16, 40: 16}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 16, 4: 17, 5: 18, 6: 19, 7: 22, 8: 24, 9: 26, 10: 27, 11: 29, 12: 32, 13: 33, 14: 37, 15: 38, 16: 40}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8, 19: 9, 20: 10, 21: 11, 22: 12, 23: 13}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18, 9: 19, 10: 20, 11: 21, 12: 22, 13: 23}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 5, 19: 6, 20: 7, 21: 7, 22: 7, 23: 8, 24: 8, 25: 9, 26: 9, 27: 10, 28: 11, 29: 11, 30: 12, 31: 12, 32: 12, 33: 13, 34: 14, 35: 14, 36: 14, 37: 14, 38: 15, 39: 16, 40: 16, 41: 17}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 16, 4: 17, 5: 18, 6: 19, 7: 22, 8: 24, 9: 26, 10: 27, 11: 29, 12: 32, 13: 33, 14: 37, 15: 38, 16: 40, 17: 41}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8, 19: 9, 20: 10, 21: 11, 22: 12, 23: 13}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18, 9: 19, 10: 20, 11: 21, 12: 22, 13: 23}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 17, Last requested goal index = 17, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.248130s, Solving = 0.013666s, Total = 0.261797s, Memory = (RSS = 735.398438Mb, VMS = 725.660156Mb), Step range = [40-41]), Calls = 1
Model :: Total atoms = 4153, Cost = (2, 0, -1), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 2                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 4:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 10:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 11:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 12:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 16:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 18:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 19:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 20:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 21:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 22:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 23:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 24:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 25:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 26:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
        talos : grasp(manipulator_end_2,(block,5))
Step 27:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 28:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 29:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 30:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 31:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 32:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 33:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 34:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 35:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 36:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 37:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 38:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 39:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
        talos : configure(manipulator_limb_2,extended)
Step 40:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 41:
    Current Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 17] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 17] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
        talos : release(manipulator_end_2,(block,5))

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Monolevel problem 7 at level 1 solved.

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Online planning increment 7 finished.

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 2 : Total constraining sub-goal stages = 13 : Goals achieved = 13 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 7 : Total constraining sub-goal stages = 23 : Goals achieved = 17 : Goals unachieved = 6 : Complete = False

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 8 by method ground-first is [1-1].

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 8 at level 1:
Total Templated Partial Problems = 6, Problem Range = [7-12], Size = 7, Sub-goal Stage Range = [17-23]
Division points [total=5] : [(Index = 17, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 18, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 19, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 20, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 21, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [18-18]

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [18-18], problem number = 8, increment number = 8

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 18)
	('last_sgoals', 18)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x000002960D109A60>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [18-18] : Concurrency enabled : Minimum search length bound disabled with value 41

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 18
last_sgoals = 18
start_step = 41
is_initial = False
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 41

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[16-02-2022_21-58-52] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[16-02-2022_21-58-52] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 41 as problem start state.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 41})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 41})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,3))', 'S': 41})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 41})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 41})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 41})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 41})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 41})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 41})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'S': 41})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 41})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,3)', 'S': 41})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 41})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 41})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 41})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 41})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,1)', 'S': 41})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 41})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 41})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 41})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 41})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 41})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 41})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 41})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 41})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 41})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 41})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 41})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 41})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 41})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 41})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 41})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 41})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 41})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 41})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 41})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 41})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 41})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 41})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 41})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 41})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 41})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 41})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 41})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 41})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 41})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 41})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 41})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 41})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 41})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 41})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 41})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 41})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 41})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 41})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 41})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 41})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 41})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 41})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 41})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 41})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 41})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 41})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 41})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 41})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 41})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 41})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 41})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 41})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 41})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 41})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 41})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 41})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 41})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 41})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 41})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 41})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 41})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'S': 41})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 41})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 41})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 41})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 41})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 41})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 41})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 41})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 41})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'S': 41})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 41})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 41})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 41})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 41})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 41})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 41})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 41})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 41})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 41})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 41})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 41})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 41})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 41})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 41})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 41})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 41})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 41})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 41})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 41})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 41})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 41})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 41})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 41})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 41})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 41})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 41})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 41})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'S': 41})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 41})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 41})

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 41).
holds(1, complete_tower(red,puzzle_room_table), false, 41).
holds(1, configuration(manipulator_end_1), aligned_with((block,3)), 41).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 41).
holds(1, configuration(manipulator_limb_1), extended, 41).
holds(1, configuration(manipulator_limb_2), extended, 41).
holds(1, configuration(puzzle_room_door), open, 41).
holds(1, configuration(starting_room_door), closed, 41).
holds(1, configuration(store_room_door), open, 41).
holds(1, grasping(manipulator_arm_1), (block,3), 41).
holds(1, grasping(manipulator_arm_2), nothing, 41).
holds(1, grasping(manipulator_end_1), (block,3), 41).
holds(1, grasping(manipulator_end_2), nothing, 41).
holds(1, in((block,1)), (puzzle_room,1), 41).
holds(1, in((block,2)), (puzzle_room,1), 41).
holds(1, in((block,3)), (puzzle_room,1), 41).
holds(1, in((block,4)), (puzzle_room,1), 41).
holds(1, in((block,5)), (puzzle_room,1), 41).
holds(1, in((block,6)), (puzzle_room,1), 41).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 41).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 41).
holds(1, in(manipulator_end_1), (puzzle_room,1), 41).
holds(1, in(manipulator_end_2), (puzzle_room,1), 41).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 41).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 41).
holds(1, in(puzzle_room_table), (puzzle_room,1), 41).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 41).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 41).
holds(1, in(talos), (puzzle_room,1), 41).
holds(1, in_tower((block,1),(block,1)), true, 41).
holds(1, in_tower((block,1),(block,2)), false, 41).
holds(1, in_tower((block,1),(block,3)), false, 41).
holds(1, in_tower((block,1),(block,4)), false, 41).
holds(1, in_tower((block,1),(block,5)), false, 41).
holds(1, in_tower((block,1),(block,6)), false, 41).
holds(1, in_tower((block,2),(block,1)), false, 41).
holds(1, in_tower((block,2),(block,2)), true, 41).
holds(1, in_tower((block,2),(block,3)), false, 41).
holds(1, in_tower((block,2),(block,4)), true, 41).
holds(1, in_tower((block,2),(block,5)), false, 41).
holds(1, in_tower((block,2),(block,6)), false, 41).
holds(1, in_tower((block,3),(block,1)), false, 41).
holds(1, in_tower((block,3),(block,2)), false, 41).
holds(1, in_tower((block,3),(block,3)), true, 41).
holds(1, in_tower((block,3),(block,4)), false, 41).
holds(1, in_tower((block,3),(block,5)), false, 41).
holds(1, in_tower((block,3),(block,6)), false, 41).
holds(1, in_tower((block,4),(block,1)), false, 41).
holds(1, in_tower((block,4),(block,2)), false, 41).
holds(1, in_tower((block,4),(block,3)), false, 41).
holds(1, in_tower((block,4),(block,4)), false, 41).
holds(1, in_tower((block,4),(block,5)), false, 41).
holds(1, in_tower((block,4),(block,6)), false, 41).
holds(1, in_tower((block,5),(block,1)), false, 41).
holds(1, in_tower((block,5),(block,2)), false, 41).
holds(1, in_tower((block,5),(block,3)), false, 41).
holds(1, in_tower((block,5),(block,4)), false, 41).
holds(1, in_tower((block,5),(block,5)), false, 41).
holds(1, in_tower((block,5),(block,6)), false, 41).
holds(1, in_tower((block,6),(block,1)), false, 41).
holds(1, in_tower((block,6),(block,2)), false, 41).
holds(1, in_tower((block,6),(block,3)), false, 41).
holds(1, in_tower((block,6),(block,4)), false, 41).
holds(1, in_tower((block,6),(block,5)), true, 41).
holds(1, in_tower((block,6),(block,6)), true, 41).
holds(1, on((block,1)), puzzle_room_table_left, 41).
holds(1, on((block,2)), puzzle_room_table_right, 41).
holds(1, on((block,3)), puzzle_room_table_left, 41).
holds(1, on((block,4)), (block,2), 41).
holds(1, on((block,5)), (block,6), 41).
holds(1, on((block,6)), puzzle_room_table_right, 41).
holds(1, tower_base((block,1),puzzle_room_table), true, 41).
holds(1, tower_base((block,2),puzzle_room_table), true, 41).
holds(1, tower_base((block,3),puzzle_room_table), true, 41).
holds(1, tower_base((block,4),puzzle_room_table), false, 41).
holds(1, tower_base((block,5),puzzle_room_table), false, 41).
holds(1, tower_base((block,6),puzzle_room_table), true, 41).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 41).
holds(1, unordered_tower((block,2),puzzle_room_table), true, 41).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 41).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 41).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 41).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 41).
holds(2, complete_tower(blue,puzzle_room_table), false, 41).
holds(2, complete_tower(red,puzzle_room_table), false, 41).
holds(2, configuration(manipulator_arm_1), extended, 41).
holds(2, configuration(manipulator_arm_2), extended, 41).
holds(2, configuration(puzzle_room_door), open, 41).
holds(2, configuration(starting_room_door), closed, 41).
holds(2, configuration(store_room_door), open, 41).
holds(2, grasping(manipulator_arm_1), (block,3), 41).
holds(2, grasping(manipulator_arm_2), nothing, 41).
holds(2, in((block,1)), puzzle_room, 41).
holds(2, in((block,2)), puzzle_room, 41).
holds(2, in((block,3)), puzzle_room, 41).
holds(2, in((block,4)), puzzle_room, 41).
holds(2, in((block,5)), puzzle_room, 41).
holds(2, in((block,6)), puzzle_room, 41).
holds(2, in(manipulator_arm_1), puzzle_room, 41).
holds(2, in(manipulator_arm_2), puzzle_room, 41).
holds(2, in(puzzle_room_table), puzzle_room, 41).
holds(2, in(talos), puzzle_room, 41).
holds(2, in_tower((block,1),(block,1)), true, 41).
holds(2, in_tower((block,1),(block,2)), false, 41).
holds(2, in_tower((block,1),(block,3)), false, 41).
holds(2, in_tower((block,1),(block,4)), false, 41).
holds(2, in_tower((block,1),(block,5)), false, 41).
holds(2, in_tower((block,1),(block,6)), false, 41).
holds(2, in_tower((block,2),(block,1)), false, 41).
holds(2, in_tower((block,2),(block,2)), true, 41).
holds(2, in_tower((block,2),(block,3)), false, 41).
holds(2, in_tower((block,2),(block,4)), true, 41).
holds(2, in_tower((block,2),(block,5)), false, 41).
holds(2, in_tower((block,2),(block,6)), false, 41).
holds(2, in_tower((block,3),(block,1)), false, 41).
holds(2, in_tower((block,3),(block,2)), false, 41).
holds(2, in_tower((block,3),(block,3)), true, 41).
holds(2, in_tower((block,3),(block,4)), false, 41).
holds(2, in_tower((block,3),(block,5)), false, 41).
holds(2, in_tower((block,3),(block,6)), false, 41).
holds(2, in_tower((block,4),(block,1)), false, 41).
holds(2, in_tower((block,4),(block,2)), false, 41).
holds(2, in_tower((block,4),(block,3)), false, 41).
holds(2, in_tower((block,4),(block,4)), false, 41).
holds(2, in_tower((block,4),(block,5)), false, 41).
holds(2, in_tower((block,4),(block,6)), false, 41).
holds(2, in_tower((block,5),(block,1)), false, 41).
holds(2, in_tower((block,5),(block,2)), false, 41).
holds(2, in_tower((block,5),(block,3)), false, 41).
holds(2, in_tower((block,5),(block,4)), false, 41).
holds(2, in_tower((block,5),(block,5)), false, 41).
holds(2, in_tower((block,5),(block,6)), false, 41).
holds(2, in_tower((block,6),(block,1)), false, 41).
holds(2, in_tower((block,6),(block,2)), false, 41).
holds(2, in_tower((block,6),(block,3)), false, 41).
holds(2, in_tower((block,6),(block,4)), false, 41).
holds(2, in_tower((block,6),(block,5)), true, 41).
holds(2, in_tower((block,6),(block,6)), true, 41).
holds(2, on((block,1)), puzzle_room_table, 41).
holds(2, on((block,2)), puzzle_room_table, 41).
holds(2, on((block,3)), puzzle_room_table, 41).
holds(2, on((block,4)), (block,2), 41).
holds(2, on((block,5)), (block,6), 41).
holds(2, on((block,6)), puzzle_room_table, 41).
holds(2, tower_base((block,1),puzzle_room_table), true, 41).
holds(2, tower_base((block,2),puzzle_room_table), true, 41).
holds(2, tower_base((block,3),puzzle_room_table), true, 41).
holds(2, tower_base((block,4),puzzle_room_table), false, 41).
holds(2, tower_base((block,5),puzzle_room_table), false, 41).
holds(2, tower_base((block,6),puzzle_room_table), true, 41).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 41).
holds(2, unordered_tower((block,2),puzzle_room_table), true, 41).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 41).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 41).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 41).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 41).

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'I': 18})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 18})

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 2 rules into program part base:

sub_goal(2, talos, grasp(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), (block,4), 18).
sub_goal(2, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 18).

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x0000029633FFDA60>]
	incrementor = SolveIncrementor(step_start=41, step_increase=1, step_increase_initial=2, step_end_min=42, step_end_max=200, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 41), range_=None), IncPart(name='plan_module', args=('#inc', 41, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 41, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 41, 18, 18, 'sequential', 'true'), range_=None)]

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 809 rules

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0049607999999352614s

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.032958s.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005505s with result Satisfiable.

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x00000296348F8E00>

[16-02-2022_21-58-52] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 41)
	('last_sgoals', 18)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002960D109A60>)
	('first_sgoals', 18)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x00000296348F8E00>)

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(18, 42)', truth=True, inc_range=None)

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 41). %* None *%
#program plan_module(#inc, 41, true, false). %* None *%
#program optimisation_module(#inc, 41, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 41, 18, 18, sequential, true). %* None *%

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     40 : Current =     42
Incrementor step ends | Minimum  =     42 : Maximum =    200

[16-02-2022_21-58-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(42)]), ('state_module', [Number(41), Number(41)]), ('plan_module', [Number(41), Number(41), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(41), Number(41), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(41)]), ('action_preconditions', [Number(41)]), ('variable_relations', [Number(41)]), ('abstraction_mappings', [Number(41)]), ('conformance_module', [Number(41), Number(41), Number(18), Number(18), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(42), Number(41)]), ('plan_module', [Number(42), Number(41), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(42), Number(41), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('conformance_module', [Number(42), Number(41), Number(18), Number(18), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.244753s.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 41: original = External(symbol='current_last_sgoals(18, 42)', truth=True, inc_range=None), conversion = current_last_sgoals(18,42).

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 42: original = External(symbol='current_last_sgoals(18, 42)', truth=True, inc_range=None), conversion = current_last_sgoals(18,42).

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007287s with result Unsatisfiable.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.25204040000005534, Incremental time limit = None
Running cumulative time = 0.25204040000005534, Cumulative time limit = 1800
Used memory = (RSS = 735.398438Mb, VMS = 725.660156Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=40, end_step=42, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.24475300000005973, solving_time=0.007287399999995614, total_time=0.25204040000005534, memory=Memory(rss=735.3984375, vms=725.66015625), step_range=range(41, 43), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.24475300000005973, solving_time=0.007287399999995614, total_time=0.25204040000005534, memory=Memory(rss=735.3984375, vms=725.66015625), step_range=range(41, 43), clingo_stats={'problem': {'lp': {'atoms': 12168.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15849.0, 'bodies_tr': 15849.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 261.0, 'count_bodies_tr': 261.0, 'sccs': 44.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 550.0, 'rules': 27767.0, 'rules_normal': 27221.0, 'rules_choice': 543.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 27767.0, 'rules_tr_normal': 27221.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 21324.0, 'eqs_atom': 7014.0, 'eqs_body': 1910.0, 'eqs_other': 12400.0}, 'lpStep': {'atoms': 5651.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13230.0, 'bodies_tr': 13230.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 261.0, 'count_bodies_tr': 261.0, 'sccs': 44.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 550.0, 'rules': 20340.0, 'rules_normal': 19794.0, 'rules_choice': 543.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 20340.0, 'rules_tr_normal': 19794.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 8268.0, 'eqs_atom': 2104.0, 'eqs_body': 385.0, 'eqs_other': 5779.0}, 'generator': {'vars': 2624.0, 'vars_eliminated': 0.0, 'vars_frozen': 1583.0, 'constraints': 14.0, 'constraints_binary': 980.0, 'constraints_ternary': 188.0, 'acyc_edges': 0.0, 'complexity': 1196.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 35.0, 'guiding_paths': 5.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf, inf], 'lower': [0.0, 0.0, -1.0], 'concurrency': 6.0, 'winner': 5.0, 'times': {'total': 0.25205421447753906, 'cpu': 0.25, 'solve': 0.0010013580322265625, 'unsat': 0.0010013580322265625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.2960643768310547, 'cpu': 0.28125, 'solve': 0.0040035247802734375, 'unsat': 0.0010013580322265625, 'sat': 0.001003265380859375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 41.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     42 : Current =     43
Incrementor step ends | Minimum  =     42 : Maximum =    200

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(43)]), ('state_module', [Number(43), Number(41)]), ('plan_module', [Number(43), Number(41), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(43), Number(41), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(43)]), ('action_preconditions', [Number(43)]), ('variable_relations', [Number(43)]), ('abstraction_mappings', [Number(43)]), ('conformance_module', [Number(43), Number(41), Number(18), Number(18), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.130566s.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007388s with result Satisfiable.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.13795389999995677, Incremental time limit = None
Running cumulative time = 0.3899943000000121, Cumulative time limit = 1800
Used memory = (RSS = 735.398438Mb, VMS = 725.660156Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.375319s, Solving = 0.014675s, Total = 0.389994s, Memory = (RSS = 735.398438Mb, VMS = 725.660156Mb), Step range = [41-43]), Calls = 2
Final Model :: Total atoms = 4524, Cost = (3, 0, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=42, end_step=43, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.3753192000000354, solving_time=0.014675099999976737, total_time=0.3899943000000121, memory=Memory(rss=735.3984375, vms=725.66015625), step_range=range(41, 44), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.13056619999997565, solving_time=0.007387699999981123, total_time=0.13795389999995677, memory=Memory(rss=735.3984375, vms=725.66015625), step_range=range(43, 44), clingo_stats={'problem': {'lp': {'atoms': 13904.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25314.0, 'bodies_tr': 25314.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 462.0, 'count_bodies_tr': 462.0, 'sccs': 46.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 587.0, 'rules': 40138.0, 'rules_normal': 39394.0, 'rules_choice': 738.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 40138.0, 'rules_tr_normal': 39394.0, 'rules_tr_choice': 738.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 24978.0, 'eqs_atom': 7583.0, 'eqs_body': 2356.0, 'eqs_other': 15039.0}, 'lpStep': {'atoms': 1736.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 9465.0, 'bodies_tr': 9465.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 2.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 37.0, 'rules': 12371.0, 'rules_normal': 12173.0, 'rules_choice': 195.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 12371.0, 'rules_tr_normal': 12173.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3654.0, 'eqs_atom': 569.0, 'eqs_body': 446.0, 'eqs_other': 2639.0}, 'generator': {'vars': 2901.0, 'vars_eliminated': 0.0, 'vars_frozen': 1781.0, 'constraints': 49.0, 'constraints_binary': 1803.0, 'constraints_ternary': 368.0, 'acyc_edges': 0.0, 'complexity': 2248.0}}, 'solving': {'solvers': {'choices': 749.0, 'conflicts': 20.0, 'conflicts_analyzed': 13.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 59.0, 'models': 1.0, 'models_level': 49.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 12.0, 'distributed_sum_lbd': 14.0, 'integrated': 60.0, 'lemmas': 71.0, 'lits_learnt': 82.0, 'lemmas_binary': 11.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 59.0, 'integrated_jumps': 342.0, 'guiding_paths_lits': 60.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 12.0, 'lemmas_loop': 0.0, 'lemmas_other': 59.0, 'lits_conflict': 14.0, 'lits_loop': 0.0, 'lits_other': 68.0, 'jumps': {'jumps': 13.0, 'jumps_bounded': 12.0, 'levels': 316.0, 'levels_bounded': 111.0, 'max': 39.0, 'max_executed': 28.0, 'max_bounded': 11.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [3.0, 0.0, 0.0], 'lower': [3.0, 0.0, 0.0], 'concurrency': 6.0, 'winner': 1.0, 'times': {'total': 0.138031005859375, 'cpu': 0.140625, 'solve': 0.004001617431640625, 'unsat': 0.003002166748046875, 'sat': 0.00099945068359375}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.4340953826904297, 'cpu': 0.421875, 'solve': 0.008005142211914062, 'unsat': 0.0040035247802734375, 'sat': 0.002002716064453125}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 749.0, 'conflicts': 20.0, 'conflicts_analyzed': 13.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 59.0, 'models': 2.0, 'models_level': 50.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 12.0, 'distributed_sum_lbd': 14.0, 'integrated': 60.0, 'lemmas': 71.0, 'lits_learnt': 82.0, 'lemmas_binary': 11.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 59.0, 'integrated_jumps': 342.0, 'guiding_paths_lits': 101.0, 'guiding_paths': 18.0, 'splits': 0.0, 'lemmas_conflict': 12.0, 'lemmas_loop': 0.0, 'lemmas_other': 59.0, 'lits_conflict': 14.0, 'lits_loop': 0.0, 'lits_other': 68.0, 'jumps': {'jumps': 13.0, 'jumps_bounded': 12.0, 'levels': 316.0, 'levels_bounded': 111.0, 'max': 39.0, 'max_executed': 28.0, 'max_bounded': 11.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 43}

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 19 achieved :: Progression >> total requested sgoals = 1, current total achieved sgoals = 2 (200.00% solved)

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 18 was achieved successfully.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.244753s, Solving = 0.007287s, Total = 0.252040s, Memory = (RSS = 735.398438Mb, VMS = 725.660156Mb), Step range = [41-42]
2 : Statistics :: Grounding = 0.130566s, Solving = 0.007388s, Total = 0.137954s, Memory = (RSS = 735.398438Mb, VMS = 725.660156Mb), Step range = [43-43]

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.389994s due to: External generator exit.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 5, 19: 6, 20: 7, 21: 7, 22: 7, 23: 8, 24: 8, 25: 9, 26: 9, 27: 10, 28: 11, 29: 11, 30: 12, 31: 12, 32: 12, 33: 13, 34: 14, 35: 14, 36: 14, 37: 14, 38: 15, 39: 16, 40: 16, 41: 17}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 16, 4: 17, 5: 18, 6: 19, 7: 22, 8: 24, 9: 26, 10: 27, 11: 29, 12: 32, 13: 33, 14: 37, 15: 38, 16: 40, 17: 41}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8, 19: 9, 20: 10, 21: 11, 22: 12, 23: 13}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18, 9: 19, 10: 20, 11: 21, 12: 22, 13: 23}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 5, 19: 6, 20: 7, 21: 7, 22: 7, 23: 8, 24: 8, 25: 9, 26: 9, 27: 10, 28: 11, 29: 11, 30: 12, 31: 12, 32: 12, 33: 13, 34: 14, 35: 14, 36: 14, 37: 14, 38: 15, 39: 16, 40: 16, 41: 17, 42: 18, 43: 18}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 16, 4: 17, 5: 18, 6: 19, 7: 22, 8: 24, 9: 26, 10: 27, 11: 29, 12: 32, 13: 33, 14: 37, 15: 38, 16: 40, 17: 41, 18: 43}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8, 19: 9, 20: 10, 21: 11, 22: 12, 23: 13}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18, 9: 19, 10: 20, 11: 21, 12: 22, 13: 23}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 18, Last requested goal index = 18, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.375319s, Solving = 0.014675s, Total = 0.389994s, Memory = (RSS = 735.398438Mb, VMS = 725.660156Mb), Step range = [41-43]), Calls = 2
Model :: Total atoms = 4524, Cost = (3, 0, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 2 :: Actions = 3                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 4:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 10:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 11:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 12:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 16:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 18:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 19:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 20:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 21:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 22:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 23:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 24:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 25:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 26:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
        talos : grasp(manipulator_end_2,(block,5))
Step 27:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 28:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 29:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 30:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 31:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 32:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 33:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 34:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 35:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 36:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 37:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 38:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 39:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
        talos : configure(manipulator_limb_2,extended)
Step 40:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 41:
    Current Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 17] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 17] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
        talos : release(manipulator_end_2,(block,5))
Step 42:
    Current Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
        talos : release(manipulator_end_1,(block,3))
Step 43:
    Current Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Monolevel problem 8 at level 1 solved.

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Online planning increment 8 finished.

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 2 : Total constraining sub-goal stages = 13 : Goals achieved = 13 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 8 : Total constraining sub-goal stages = 23 : Goals achieved = 18 : Goals unachieved = 5 : Complete = False

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 9 by method ground-first is [1-1].

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 9 at level 1:
Total Templated Partial Problems = 6, Problem Range = [7-12], Size = 7, Sub-goal Stage Range = [17-23]
Division points [total=5] : [(Index = 17, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 18, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 19, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 20, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 21, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [19-19]

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [19-19], problem number = 9, increment number = 9

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 19)
	('last_sgoals', 19)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x000002960D109A60>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [19-19] : Concurrency enabled : Minimum search length bound disabled with value 43

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 19
last_sgoals = 19
start_step = 43
is_initial = False
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 43

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[16-02-2022_21-58-53] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[16-02-2022_21-58-53] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 43 as problem start state.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 43})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 43})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 43})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,4))', 'S': 43})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 43})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 43})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 43})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 43})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 43})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 43})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 43})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 43})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,4)', 'S': 43})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 43})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 43})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 43})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,1)', 'S': 43})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 43})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 43})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 43})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 43})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 43})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 43})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 43})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 43})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 43})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 43})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 43})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 43})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 43})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 43})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 43})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 43})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 43})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 43})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 43})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 43})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 43})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 43})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 43})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 43})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 43})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 43})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 43})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 43})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 43})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 43})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 43})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 43})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 43})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 43})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 43})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 43})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 43})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 43})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 43})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 43})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 43})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 43})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 43})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 43})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 43})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 43})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 43})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 43})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 43})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 43})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 43})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 43})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 43})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 43})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 43})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 43})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 43})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 43})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 43})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 43})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 43})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'S': 43})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 43})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 43})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 43})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 43})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 43})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 43})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 43})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 43})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 43})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 43})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 43})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 43})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 43})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 43})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 43})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 43})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 43})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 43})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 43})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 43})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 43})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 43})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'S': 43})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 43})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 43})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 43})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 43})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 43})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 43})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'S': 43})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 43})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 43})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 43})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 43})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 43})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 43})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'S': 43})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 43})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 43})

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 43).
holds(1, complete_tower(red,puzzle_room_table), false, 43).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 43).
holds(1, configuration(manipulator_end_2), aligned_with((block,4)), 43).
holds(1, configuration(manipulator_limb_1), extended, 43).
holds(1, configuration(manipulator_limb_2), extended, 43).
holds(1, configuration(puzzle_room_door), open, 43).
holds(1, configuration(starting_room_door), closed, 43).
holds(1, configuration(store_room_door), open, 43).
holds(1, grasping(manipulator_arm_1), nothing, 43).
holds(1, grasping(manipulator_arm_2), (block,4), 43).
holds(1, grasping(manipulator_end_1), nothing, 43).
holds(1, grasping(manipulator_end_2), (block,4), 43).
holds(1, in((block,1)), (puzzle_room,1), 43).
holds(1, in((block,2)), (puzzle_room,1), 43).
holds(1, in((block,3)), (puzzle_room,1), 43).
holds(1, in((block,4)), (puzzle_room,1), 43).
holds(1, in((block,5)), (puzzle_room,1), 43).
holds(1, in((block,6)), (puzzle_room,1), 43).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 43).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 43).
holds(1, in(manipulator_end_1), (puzzle_room,1), 43).
holds(1, in(manipulator_end_2), (puzzle_room,1), 43).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 43).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 43).
holds(1, in(puzzle_room_table), (puzzle_room,1), 43).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 43).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 43).
holds(1, in(talos), (puzzle_room,1), 43).
holds(1, in_tower((block,1),(block,1)), true, 43).
holds(1, in_tower((block,1),(block,2)), false, 43).
holds(1, in_tower((block,1),(block,3)), false, 43).
holds(1, in_tower((block,1),(block,4)), false, 43).
holds(1, in_tower((block,1),(block,5)), false, 43).
holds(1, in_tower((block,1),(block,6)), false, 43).
holds(1, in_tower((block,2),(block,1)), false, 43).
holds(1, in_tower((block,2),(block,2)), true, 43).
holds(1, in_tower((block,2),(block,3)), false, 43).
holds(1, in_tower((block,2),(block,4)), true, 43).
holds(1, in_tower((block,2),(block,5)), false, 43).
holds(1, in_tower((block,2),(block,6)), false, 43).
holds(1, in_tower((block,3),(block,1)), false, 43).
holds(1, in_tower((block,3),(block,2)), false, 43).
holds(1, in_tower((block,3),(block,3)), true, 43).
holds(1, in_tower((block,3),(block,4)), false, 43).
holds(1, in_tower((block,3),(block,5)), false, 43).
holds(1, in_tower((block,3),(block,6)), false, 43).
holds(1, in_tower((block,4),(block,1)), false, 43).
holds(1, in_tower((block,4),(block,2)), false, 43).
holds(1, in_tower((block,4),(block,3)), false, 43).
holds(1, in_tower((block,4),(block,4)), false, 43).
holds(1, in_tower((block,4),(block,5)), false, 43).
holds(1, in_tower((block,4),(block,6)), false, 43).
holds(1, in_tower((block,5),(block,1)), false, 43).
holds(1, in_tower((block,5),(block,2)), false, 43).
holds(1, in_tower((block,5),(block,3)), false, 43).
holds(1, in_tower((block,5),(block,4)), false, 43).
holds(1, in_tower((block,5),(block,5)), false, 43).
holds(1, in_tower((block,5),(block,6)), false, 43).
holds(1, in_tower((block,6),(block,1)), false, 43).
holds(1, in_tower((block,6),(block,2)), false, 43).
holds(1, in_tower((block,6),(block,3)), false, 43).
holds(1, in_tower((block,6),(block,4)), false, 43).
holds(1, in_tower((block,6),(block,5)), true, 43).
holds(1, in_tower((block,6),(block,6)), true, 43).
holds(1, on((block,1)), puzzle_room_table_left, 43).
holds(1, on((block,2)), puzzle_room_table_right, 43).
holds(1, on((block,3)), puzzle_room_table_left, 43).
holds(1, on((block,4)), (block,2), 43).
holds(1, on((block,5)), (block,6), 43).
holds(1, on((block,6)), puzzle_room_table_right, 43).
holds(1, tower_base((block,1),puzzle_room_table), true, 43).
holds(1, tower_base((block,2),puzzle_room_table), true, 43).
holds(1, tower_base((block,3),puzzle_room_table), true, 43).
holds(1, tower_base((block,4),puzzle_room_table), false, 43).
holds(1, tower_base((block,5),puzzle_room_table), false, 43).
holds(1, tower_base((block,6),puzzle_room_table), true, 43).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 43).
holds(1, unordered_tower((block,2),puzzle_room_table), true, 43).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 43).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 43).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 43).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 43).
holds(2, complete_tower(blue,puzzle_room_table), false, 43).
holds(2, complete_tower(red,puzzle_room_table), false, 43).
holds(2, configuration(manipulator_arm_1), extended, 43).
holds(2, configuration(manipulator_arm_2), extended, 43).
holds(2, configuration(puzzle_room_door), open, 43).
holds(2, configuration(starting_room_door), closed, 43).
holds(2, configuration(store_room_door), open, 43).
holds(2, grasping(manipulator_arm_1), nothing, 43).
holds(2, grasping(manipulator_arm_2), (block,4), 43).
holds(2, in((block,1)), puzzle_room, 43).
holds(2, in((block,2)), puzzle_room, 43).
holds(2, in((block,3)), puzzle_room, 43).
holds(2, in((block,4)), puzzle_room, 43).
holds(2, in((block,5)), puzzle_room, 43).
holds(2, in((block,6)), puzzle_room, 43).
holds(2, in(manipulator_arm_1), puzzle_room, 43).
holds(2, in(manipulator_arm_2), puzzle_room, 43).
holds(2, in(puzzle_room_table), puzzle_room, 43).
holds(2, in(talos), puzzle_room, 43).
holds(2, in_tower((block,1),(block,1)), true, 43).
holds(2, in_tower((block,1),(block,2)), false, 43).
holds(2, in_tower((block,1),(block,3)), false, 43).
holds(2, in_tower((block,1),(block,4)), false, 43).
holds(2, in_tower((block,1),(block,5)), false, 43).
holds(2, in_tower((block,1),(block,6)), false, 43).
holds(2, in_tower((block,2),(block,1)), false, 43).
holds(2, in_tower((block,2),(block,2)), true, 43).
holds(2, in_tower((block,2),(block,3)), false, 43).
holds(2, in_tower((block,2),(block,4)), true, 43).
holds(2, in_tower((block,2),(block,5)), false, 43).
holds(2, in_tower((block,2),(block,6)), false, 43).
holds(2, in_tower((block,3),(block,1)), false, 43).
holds(2, in_tower((block,3),(block,2)), false, 43).
holds(2, in_tower((block,3),(block,3)), true, 43).
holds(2, in_tower((block,3),(block,4)), false, 43).
holds(2, in_tower((block,3),(block,5)), false, 43).
holds(2, in_tower((block,3),(block,6)), false, 43).
holds(2, in_tower((block,4),(block,1)), false, 43).
holds(2, in_tower((block,4),(block,2)), false, 43).
holds(2, in_tower((block,4),(block,3)), false, 43).
holds(2, in_tower((block,4),(block,4)), false, 43).
holds(2, in_tower((block,4),(block,5)), false, 43).
holds(2, in_tower((block,4),(block,6)), false, 43).
holds(2, in_tower((block,5),(block,1)), false, 43).
holds(2, in_tower((block,5),(block,2)), false, 43).
holds(2, in_tower((block,5),(block,3)), false, 43).
holds(2, in_tower((block,5),(block,4)), false, 43).
holds(2, in_tower((block,5),(block,5)), false, 43).
holds(2, in_tower((block,5),(block,6)), false, 43).
holds(2, in_tower((block,6),(block,1)), false, 43).
holds(2, in_tower((block,6),(block,2)), false, 43).
holds(2, in_tower((block,6),(block,3)), false, 43).
holds(2, in_tower((block,6),(block,4)), false, 43).
holds(2, in_tower((block,6),(block,5)), true, 43).
holds(2, in_tower((block,6),(block,6)), true, 43).
holds(2, on((block,1)), puzzle_room_table, 43).
holds(2, on((block,2)), puzzle_room_table, 43).
holds(2, on((block,3)), puzzle_room_table, 43).
holds(2, on((block,4)), (block,2), 43).
holds(2, on((block,5)), (block,6), 43).
holds(2, on((block,6)), puzzle_room_table, 43).
holds(2, tower_base((block,1),puzzle_room_table), true, 43).
holds(2, tower_base((block,2),puzzle_room_table), true, 43).
holds(2, tower_base((block,3),puzzle_room_table), true, 43).
holds(2, tower_base((block,4),puzzle_room_table), false, 43).
holds(2, tower_base((block,5),puzzle_room_table), false, 43).
holds(2, tower_base((block,6),puzzle_room_table), true, 43).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 43).
holds(2, unordered_tower((block,2),puzzle_room_table), true, 43).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 43).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 43).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 43).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 43).

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 19})

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part base:

sub_goal(2, talos, put(manipulator_arm_2,(block,4),(block,5)), on((block,4)), (block,5), 19).

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x0000029633FFD3A0>]
	incrementor = SolveIncrementor(step_start=43, step_increase=1, step_increase_initial=2, step_end_min=44, step_end_max=200, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 43), range_=None), IncPart(name='plan_module', args=('#inc', 43, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 43, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 43, 19, 19, 'sequential', 'true'), range_=None)]

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 808 rules

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004572599999960403s

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.029574s.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005982s with result Satisfiable.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000029634FC04A0>

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 43)
	('last_sgoals', 19)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002960D109A60>)
	('first_sgoals', 19)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000029634FC04A0>)

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(19, 44)', truth=True, inc_range=None)

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 43). %* None *%
#program plan_module(#inc, 43, true, false). %* None *%
#program optimisation_module(#inc, 43, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 43, 19, 19, sequential, true). %* None *%

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     42 : Current =     44
Incrementor step ends | Minimum  =     44 : Maximum =    200

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(44)]), ('state_module', [Number(43), Number(43)]), ('plan_module', [Number(43), Number(43), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(43), Number(43), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(43)]), ('action_preconditions', [Number(43)]), ('variable_relations', [Number(43)]), ('abstraction_mappings', [Number(43)]), ('conformance_module', [Number(43), Number(43), Number(19), Number(19), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(44), Number(43)]), ('plan_module', [Number(44), Number(43), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(44), Number(43), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(44)]), ('action_preconditions', [Number(44)]), ('variable_relations', [Number(44)]), ('abstraction_mappings', [Number(44)]), ('conformance_module', [Number(44), Number(43), Number(19), Number(19), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.245454s.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 43: original = External(symbol='current_last_sgoals(19, 44)', truth=True, inc_range=None), conversion = current_last_sgoals(19,44).

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 44: original = External(symbol='current_last_sgoals(19, 44)', truth=True, inc_range=None), conversion = current_last_sgoals(19,44).

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011581s with result Satisfiable.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.2570349999999735, Incremental time limit = None
Running cumulative time = 0.2570349999999735, Cumulative time limit = 1800
Used memory = (RSS = 735.460938Mb, VMS = 725.660156Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.245454s, Solving = 0.011581s, Total = 0.257035s, Memory = (RSS = 735.460938Mb, VMS = 725.660156Mb), Step range = [43-44]), Calls = 1
Final Model :: Total atoms = 4150, Cost = (1, 0, -1), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=42, end_step=44, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.24545360000001892, solving_time=0.011581399999954556, total_time=0.2570349999999735, memory=Memory(rss=735.4609375, vms=725.66015625), step_range=range(43, 45), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.24545360000001892, solving_time=0.011581399999954556, total_time=0.2570349999999735, memory=Memory(rss=735.4609375, vms=725.66015625), step_range=range(43, 45), clingo_stats={'problem': {'lp': {'atoms': 12164.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15829.0, 'bodies_tr': 15829.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 261.0, 'count_bodies_tr': 261.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 550.0, 'rules': 27744.0, 'rules_normal': 27198.0, 'rules_choice': 543.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 27744.0, 'rules_tr_normal': 27198.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 24708.0, 'eqs_atom': 7021.0, 'eqs_body': 1913.0, 'eqs_other': 15774.0}, 'lpStep': {'atoms': 5648.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13210.0, 'bodies_tr': 13210.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 261.0, 'count_bodies_tr': 261.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 550.0, 'rules': 20318.0, 'rules_normal': 19772.0, 'rules_choice': 543.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 20318.0, 'rules_tr_normal': 19772.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 11652.0, 'eqs_atom': 2111.0, 'eqs_body': 388.0, 'eqs_other': 9153.0}, 'generator': {'vars': 2586.0, 'vars_eliminated': 0.0, 'vars_frozen': 1568.0, 'constraints': 15.0, 'constraints_binary': 1152.0, 'constraints_ternary': 205.0, 'acyc_edges': 0.0, 'complexity': 1386.0}}, 'solving': {'solvers': {'choices': 25.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 32.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 42.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [1.0, 0.0, -1.0], 'lower': [1.0, 0.0, -1.0], 'concurrency': 6.0, 'winner': 2.0, 'times': {'total': 0.2580547332763672, 'cpu': 0.234375, 'solve': 0.0039997100830078125, 'unsat': 0.0039997100830078125, 'sat': 0.0}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.2980632781982422, 'cpu': 0.28125, 'solve': 0.006000518798828125, 'unsat': 0.0039997100830078125, 'sat': 0.0}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 25.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 33.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{19: 44}

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 20 achieved :: Progression >> total requested sgoals = 1, current total achieved sgoals = 2 (200.00% solved)

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 19 was achieved successfully.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.245454s, Solving = 0.011581s, Total = 0.257035s, Memory = (RSS = 735.460938Mb, VMS = 725.660156Mb), Step range = [43-44]

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.257035s due to: External generator exit.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 5, 19: 6, 20: 7, 21: 7, 22: 7, 23: 8, 24: 8, 25: 9, 26: 9, 27: 10, 28: 11, 29: 11, 30: 12, 31: 12, 32: 12, 33: 13, 34: 14, 35: 14, 36: 14, 37: 14, 38: 15, 39: 16, 40: 16, 41: 17, 42: 18, 43: 18}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 16, 4: 17, 5: 18, 6: 19, 7: 22, 8: 24, 9: 26, 10: 27, 11: 29, 12: 32, 13: 33, 14: 37, 15: 38, 16: 40, 17: 41, 18: 43}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8, 19: 9, 20: 10, 21: 11, 22: 12, 23: 13}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18, 9: 19, 10: 20, 11: 21, 12: 22, 13: 23}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 5, 19: 6, 20: 7, 21: 7, 22: 7, 23: 8, 24: 8, 25: 9, 26: 9, 27: 10, 28: 11, 29: 11, 30: 12, 31: 12, 32: 12, 33: 13, 34: 14, 35: 14, 36: 14, 37: 14, 38: 15, 39: 16, 40: 16, 41: 17, 42: 18, 43: 18, 44: 19}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 16, 4: 17, 5: 18, 6: 19, 7: 22, 8: 24, 9: 26, 10: 27, 11: 29, 12: 32, 13: 33, 14: 37, 15: 38, 16: 40, 17: 41, 18: 43, 19: 44}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8, 19: 9, 20: 10, 21: 11, 22: 12, 23: 13}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18, 9: 19, 10: 20, 11: 21, 12: 22, 13: 23}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 19, Last requested goal index = 19, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.245454s, Solving = 0.011581s, Total = 0.257035s, Memory = (RSS = 735.460938Mb, VMS = 725.660156Mb), Step range = [43-44]), Calls = 1
Model :: Total atoms = 4150, Cost = (1, 0, -1), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 4:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 10:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 11:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 12:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 16:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 18:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 19:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 20:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 21:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 22:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 23:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 24:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 25:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 26:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
        talos : grasp(manipulator_end_2,(block,5))
Step 27:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 28:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 29:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 30:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 31:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 32:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 33:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 34:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 35:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 36:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 37:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 38:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 39:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
        talos : configure(manipulator_limb_2,extended)
Step 40:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 41:
    Current Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 17] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 17] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
        talos : release(manipulator_end_2,(block,5))
Step 42:
    Current Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
        talos : release(manipulator_end_1,(block,3))
Step 43:
    Current Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 44:
    Current Sub-goals:
        [Index = 19] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 19] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_end_2,(block,4),(block,5))

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Monolevel problem 9 at level 1 solved.

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Online planning increment 9 finished.

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 2 : Total constraining sub-goal stages = 13 : Goals achieved = 13 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 9 : Total constraining sub-goal stages = 23 : Goals achieved = 19 : Goals unachieved = 4 : Complete = False

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 10 by method ground-first is [1-1].

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 10 at level 1:
Total Templated Partial Problems = 6, Problem Range = [7-12], Size = 7, Sub-goal Stage Range = [17-23]
Division points [total=5] : [(Index = 17, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 18, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 19, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 20, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 21, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [20-20]

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [20-20], problem number = 10, increment number = 10

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 20)
	('last_sgoals', 20)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x000002960D109A60>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [20-20] : Concurrency enabled : Minimum search length bound disabled with value 44

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 20
last_sgoals = 20
start_step = 44
is_initial = False
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 44

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[16-02-2022_21-58-53] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[16-02-2022_21-58-53] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 44 as problem start state.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'S': 44})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 44})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,4))', 'S': 44})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 44})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 44})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 44})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 44})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 44})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 44})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 44})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 44})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,4)', 'S': 44})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 44})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 44})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 44})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,1)', 'S': 44})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 44})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 44})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 44})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 44})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 44})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 44})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 44})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 44})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 44})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 44})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 44})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 44})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 44})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 44})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 44})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 44})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'S': 44})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 44})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 44})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 44})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 44})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 44})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 44})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'S': 44})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 44})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 44})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 44})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 44})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 44})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 44})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 44})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 44})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 44})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 44})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 44})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 44})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 44})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 44})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 44})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 44})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 44})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 44})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 44})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 44})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 44})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'S': 44})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 44})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 44})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 44})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 44})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 44})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 44})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 44})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 44})

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), true, 44).
holds(1, complete_tower(red,puzzle_room_table), false, 44).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 44).
holds(1, configuration(manipulator_end_2), aligned_with((block,4)), 44).
holds(1, configuration(manipulator_limb_1), extended, 44).
holds(1, configuration(manipulator_limb_2), extended, 44).
holds(1, configuration(puzzle_room_door), open, 44).
holds(1, configuration(starting_room_door), closed, 44).
holds(1, configuration(store_room_door), open, 44).
holds(1, grasping(manipulator_arm_1), nothing, 44).
holds(1, grasping(manipulator_arm_2), (block,4), 44).
holds(1, grasping(manipulator_end_1), nothing, 44).
holds(1, grasping(manipulator_end_2), (block,4), 44).
holds(1, in((block,1)), (puzzle_room,1), 44).
holds(1, in((block,2)), (puzzle_room,1), 44).
holds(1, in((block,3)), (puzzle_room,1), 44).
holds(1, in((block,4)), (puzzle_room,1), 44).
holds(1, in((block,5)), (puzzle_room,1), 44).
holds(1, in((block,6)), (puzzle_room,1), 44).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 44).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 44).
holds(1, in(manipulator_end_1), (puzzle_room,1), 44).
holds(1, in(manipulator_end_2), (puzzle_room,1), 44).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 44).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 44).
holds(1, in(puzzle_room_table), (puzzle_room,1), 44).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 44).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 44).
holds(1, in(talos), (puzzle_room,1), 44).
holds(1, in_tower((block,1),(block,1)), true, 44).
holds(1, in_tower((block,1),(block,2)), false, 44).
holds(1, in_tower((block,1),(block,3)), false, 44).
holds(1, in_tower((block,1),(block,4)), false, 44).
holds(1, in_tower((block,1),(block,5)), false, 44).
holds(1, in_tower((block,1),(block,6)), false, 44).
holds(1, in_tower((block,2),(block,1)), false, 44).
holds(1, in_tower((block,2),(block,2)), true, 44).
holds(1, in_tower((block,2),(block,3)), false, 44).
holds(1, in_tower((block,2),(block,4)), false, 44).
holds(1, in_tower((block,2),(block,5)), false, 44).
holds(1, in_tower((block,2),(block,6)), false, 44).
holds(1, in_tower((block,3),(block,1)), false, 44).
holds(1, in_tower((block,3),(block,2)), false, 44).
holds(1, in_tower((block,3),(block,3)), true, 44).
holds(1, in_tower((block,3),(block,4)), false, 44).
holds(1, in_tower((block,3),(block,5)), false, 44).
holds(1, in_tower((block,3),(block,6)), false, 44).
holds(1, in_tower((block,4),(block,1)), false, 44).
holds(1, in_tower((block,4),(block,2)), false, 44).
holds(1, in_tower((block,4),(block,3)), false, 44).
holds(1, in_tower((block,4),(block,4)), false, 44).
holds(1, in_tower((block,4),(block,5)), false, 44).
holds(1, in_tower((block,4),(block,6)), false, 44).
holds(1, in_tower((block,5),(block,1)), false, 44).
holds(1, in_tower((block,5),(block,2)), false, 44).
holds(1, in_tower((block,5),(block,3)), false, 44).
holds(1, in_tower((block,5),(block,4)), false, 44).
holds(1, in_tower((block,5),(block,5)), false, 44).
holds(1, in_tower((block,5),(block,6)), false, 44).
holds(1, in_tower((block,6),(block,1)), false, 44).
holds(1, in_tower((block,6),(block,2)), false, 44).
holds(1, in_tower((block,6),(block,3)), false, 44).
holds(1, in_tower((block,6),(block,4)), true, 44).
holds(1, in_tower((block,6),(block,5)), true, 44).
holds(1, in_tower((block,6),(block,6)), true, 44).
holds(1, on((block,1)), puzzle_room_table_left, 44).
holds(1, on((block,2)), puzzle_room_table_right, 44).
holds(1, on((block,3)), puzzle_room_table_left, 44).
holds(1, on((block,4)), (block,5), 44).
holds(1, on((block,5)), (block,6), 44).
holds(1, on((block,6)), puzzle_room_table_right, 44).
holds(1, tower_base((block,1),puzzle_room_table), true, 44).
holds(1, tower_base((block,2),puzzle_room_table), true, 44).
holds(1, tower_base((block,3),puzzle_room_table), true, 44).
holds(1, tower_base((block,4),puzzle_room_table), false, 44).
holds(1, tower_base((block,5),puzzle_room_table), false, 44).
holds(1, tower_base((block,6),puzzle_room_table), true, 44).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 44).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 44).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 44).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 44).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 44).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 44).
holds(2, complete_tower(blue,puzzle_room_table), true, 44).
holds(2, complete_tower(red,puzzle_room_table), false, 44).
holds(2, configuration(manipulator_arm_1), extended, 44).
holds(2, configuration(manipulator_arm_2), extended, 44).
holds(2, configuration(puzzle_room_door), open, 44).
holds(2, configuration(starting_room_door), closed, 44).
holds(2, configuration(store_room_door), open, 44).
holds(2, grasping(manipulator_arm_1), nothing, 44).
holds(2, grasping(manipulator_arm_2), (block,4), 44).
holds(2, in((block,1)), puzzle_room, 44).
holds(2, in((block,2)), puzzle_room, 44).
holds(2, in((block,3)), puzzle_room, 44).
holds(2, in((block,4)), puzzle_room, 44).
holds(2, in((block,5)), puzzle_room, 44).
holds(2, in((block,6)), puzzle_room, 44).
holds(2, in(manipulator_arm_1), puzzle_room, 44).
holds(2, in(manipulator_arm_2), puzzle_room, 44).
holds(2, in(puzzle_room_table), puzzle_room, 44).
holds(2, in(talos), puzzle_room, 44).
holds(2, in_tower((block,1),(block,1)), true, 44).
holds(2, in_tower((block,1),(block,2)), false, 44).
holds(2, in_tower((block,1),(block,3)), false, 44).
holds(2, in_tower((block,1),(block,4)), false, 44).
holds(2, in_tower((block,1),(block,5)), false, 44).
holds(2, in_tower((block,1),(block,6)), false, 44).
holds(2, in_tower((block,2),(block,1)), false, 44).
holds(2, in_tower((block,2),(block,2)), true, 44).
holds(2, in_tower((block,2),(block,3)), false, 44).
holds(2, in_tower((block,2),(block,4)), false, 44).
holds(2, in_tower((block,2),(block,5)), false, 44).
holds(2, in_tower((block,2),(block,6)), false, 44).
holds(2, in_tower((block,3),(block,1)), false, 44).
holds(2, in_tower((block,3),(block,2)), false, 44).
holds(2, in_tower((block,3),(block,3)), true, 44).
holds(2, in_tower((block,3),(block,4)), false, 44).
holds(2, in_tower((block,3),(block,5)), false, 44).
holds(2, in_tower((block,3),(block,6)), false, 44).
holds(2, in_tower((block,4),(block,1)), false, 44).
holds(2, in_tower((block,4),(block,2)), false, 44).
holds(2, in_tower((block,4),(block,3)), false, 44).
holds(2, in_tower((block,4),(block,4)), false, 44).
holds(2, in_tower((block,4),(block,5)), false, 44).
holds(2, in_tower((block,4),(block,6)), false, 44).
holds(2, in_tower((block,5),(block,1)), false, 44).
holds(2, in_tower((block,5),(block,2)), false, 44).
holds(2, in_tower((block,5),(block,3)), false, 44).
holds(2, in_tower((block,5),(block,4)), false, 44).
holds(2, in_tower((block,5),(block,5)), false, 44).
holds(2, in_tower((block,5),(block,6)), false, 44).
holds(2, in_tower((block,6),(block,1)), false, 44).
holds(2, in_tower((block,6),(block,2)), false, 44).
holds(2, in_tower((block,6),(block,3)), false, 44).
holds(2, in_tower((block,6),(block,4)), true, 44).
holds(2, in_tower((block,6),(block,5)), true, 44).
holds(2, in_tower((block,6),(block,6)), true, 44).
holds(2, on((block,1)), puzzle_room_table, 44).
holds(2, on((block,2)), puzzle_room_table, 44).
holds(2, on((block,3)), puzzle_room_table, 44).
holds(2, on((block,4)), (block,5), 44).
holds(2, on((block,5)), (block,6), 44).
holds(2, on((block,6)), puzzle_room_table, 44).
holds(2, tower_base((block,1),puzzle_room_table), true, 44).
holds(2, tower_base((block,2),puzzle_room_table), true, 44).
holds(2, tower_base((block,3),puzzle_room_table), true, 44).
holds(2, tower_base((block,4),puzzle_room_table), false, 44).
holds(2, tower_base((block,5),puzzle_room_table), false, 44).
holds(2, tower_base((block,6),puzzle_room_table), true, 44).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 44).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 44).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 44).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 44).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 44).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 44).

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'I': 20})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 20})

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 2 rules into program part base:

sub_goal(2, talos, grasp(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), (block,2), 20).
sub_goal(2, talos, release(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), nothing, 20).

[16-02-2022_21-58-53] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x0000029633FFD8B0>]
	incrementor = SolveIncrementor(step_start=44, step_increase=1, step_increase_initial=2, step_end_min=45, step_end_max=200, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 44), range_=None), IncPart(name='plan_module', args=('#inc', 44, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 44, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 44, 20, 20, 'sequential', 'true'), range_=None)]

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 809 rules

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004781399999956193s

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[16-02-2022_21-58-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.029922s.

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005222s with result Satisfiable.

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x00000296350B03B0>

[16-02-2022_21-58-54] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 44)
	('last_sgoals', 20)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002960D109A60>)
	('first_sgoals', 20)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x00000296350B03B0>)

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(20, 45)', truth=True, inc_range=None)

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 44). %* None *%
#program plan_module(#inc, 44, true, false). %* None *%
#program optimisation_module(#inc, 44, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 44, 20, 20, sequential, true). %* None *%

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     43 : Current =     45
Incrementor step ends | Minimum  =     45 : Maximum =    200

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(45)]), ('state_module', [Number(44), Number(44)]), ('plan_module', [Number(44), Number(44), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(44), Number(44), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(44)]), ('action_preconditions', [Number(44)]), ('variable_relations', [Number(44)]), ('abstraction_mappings', [Number(44)]), ('conformance_module', [Number(44), Number(44), Number(20), Number(20), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(45), Number(44)]), ('plan_module', [Number(45), Number(44), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(45), Number(44), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(45)]), ('action_preconditions', [Number(45)]), ('variable_relations', [Number(45)]), ('abstraction_mappings', [Number(45)]), ('conformance_module', [Number(45), Number(44), Number(20), Number(20), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.245460s.

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 44: original = External(symbol='current_last_sgoals(20, 45)', truth=True, inc_range=None), conversion = current_last_sgoals(20,45).

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 45: original = External(symbol='current_last_sgoals(20, 45)', truth=True, inc_range=None), conversion = current_last_sgoals(20,45).

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007333s with result Unsatisfiable.

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.25279349999993883, Incremental time limit = None
Running cumulative time = 0.25279349999993883, Cumulative time limit = 1800
Used memory = (RSS = 735.523438Mb, VMS = 725.660156Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-54] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=43, end_step=45, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.24545999999998003, solving_time=0.0073334999999588035, total_time=0.25279349999993883, memory=Memory(rss=735.5234375, vms=725.66015625), step_range=range(44, 46), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.24545999999998003, solving_time=0.0073334999999588035, total_time=0.25279349999993883, memory=Memory(rss=735.5234375, vms=725.66015625), step_range=range(44, 46), clingo_stats={'problem': {'lp': {'atoms': 12167.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15824.0, 'bodies_tr': 15824.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 261.0, 'count_bodies_tr': 261.0, 'sccs': 40.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 540.0, 'rules': 27742.0, 'rules_normal': 27196.0, 'rules_choice': 543.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 27742.0, 'rules_tr_normal': 27196.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 21359.0, 'eqs_atom': 7036.0, 'eqs_body': 1927.0, 'eqs_other': 12396.0}, 'lpStep': {'atoms': 5650.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13205.0, 'bodies_tr': 13205.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 261.0, 'count_bodies_tr': 261.0, 'sccs': 40.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 540.0, 'rules': 20315.0, 'rules_normal': 19769.0, 'rules_choice': 543.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 20315.0, 'rules_tr_normal': 19769.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 8303.0, 'eqs_atom': 2126.0, 'eqs_body': 402.0, 'eqs_other': 5775.0}, 'generator': {'vars': 2548.0, 'vars_eliminated': 0.0, 'vars_frozen': 1544.0, 'constraints': 14.0, 'constraints_binary': 986.0, 'constraints_ternary': 199.0, 'acyc_edges': 0.0, 'complexity': 1213.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 42.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf, inf], 'lower': [0.0, 0.0, -1.0], 'concurrency': 6.0, 'winner': 5.0, 'times': {'total': 0.25205421447753906, 'cpu': 0.25, 'solve': 0.0, 'unsat': 0.0, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.2920646667480469, 'cpu': 0.296875, 'solve': 0.002002716064453125, 'unsat': 0.0, 'sat': 0.0}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     45 : Current =     46
Incrementor step ends | Minimum  =     45 : Maximum =    200

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(46)]), ('state_module', [Number(46), Number(44)]), ('plan_module', [Number(46), Number(44), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(46), Number(44), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(46)]), ('action_preconditions', [Number(46)]), ('variable_relations', [Number(46)]), ('abstraction_mappings', [Number(46)]), ('conformance_module', [Number(46), Number(44), Number(20), Number(20), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.130424s.

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007111s with result Satisfiable.

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.13753489999999147, Incremental time limit = None
Running cumulative time = 0.3903283999999303, Cumulative time limit = 1800
Used memory = (RSS = 735.523438Mb, VMS = 725.660156Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.375884s, Solving = 0.014444s, Total = 0.390328s, Memory = (RSS = 735.523438Mb, VMS = 725.660156Mb), Step range = [44-46]), Calls = 2
Final Model :: Total atoms = 4524, Cost = (3, 0, 0), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[16-02-2022_21-58-54] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=45, end_step=46, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.37588419999997313, solving_time=0.014444199999957164, total_time=0.3903283999999303, memory=Memory(rss=735.5234375, vms=725.66015625), step_range=range(44, 47), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1304241999999931, solving_time=0.00711069999999836, total_time=0.13753489999999147, memory=Memory(rss=735.5234375, vms=725.66015625), step_range=range(46, 47), clingo_stats={'problem': {'lp': {'atoms': 13905.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25316.0, 'bodies_tr': 25316.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 462.0, 'count_bodies_tr': 462.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 577.0, 'rules': 40140.0, 'rules_normal': 39396.0, 'rules_choice': 738.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 40140.0, 'rules_tr_normal': 39396.0, 'rules_tr_choice': 738.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 24544.0, 'eqs_atom': 7616.0, 'eqs_body': 2385.0, 'eqs_other': 14543.0}, 'lpStep': {'atoms': 1738.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 9492.0, 'bodies_tr': 9492.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 2.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 37.0, 'rules': 12398.0, 'rules_normal': 12200.0, 'rules_choice': 195.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 12398.0, 'rules_tr_normal': 12200.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3185.0, 'eqs_atom': 580.0, 'eqs_body': 458.0, 'eqs_other': 2147.0}, 'generator': {'vars': 2855.0, 'vars_eliminated': 0.0, 'vars_frozen': 1764.0, 'constraints': 49.0, 'constraints_binary': 1876.0, 'constraints_ternary': 397.0, 'acyc_edges': 0.0, 'complexity': 2350.0}}, 'solving': {'solvers': {'choices': 459.0, 'conflicts': 14.0, 'conflicts_analyzed': 11.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 23.0, 'models': 1.0, 'models_level': 69.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 11.0, 'distributed_sum_lbd': 13.0, 'integrated': 55.0, 'lemmas': 65.0, 'lits_learnt': 76.0, 'lemmas_binary': 11.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 51.0, 'integrated_jumps': 136.0, 'guiding_paths_lits': 60.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 11.0, 'lemmas_loop': 0.0, 'lemmas_other': 54.0, 'lits_conflict': 13.0, 'lits_loop': 0.0, 'lits_other': 63.0, 'jumps': {'jumps': 11.0, 'jumps_bounded': 10.0, 'levels': 249.0, 'levels_bounded': 98.0, 'max': 36.0, 'max_executed': 26.0, 'max_bounded': 11.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [3.0, 0.0, 0.0], 'lower': [3.0, 0.0, 0.0], 'concurrency': 6.0, 'winner': 2.0, 'times': {'total': 0.138031005859375, 'cpu': 0.140625, 'solve': 0.0050029754638671875, 'unsat': 0.004001617431640625, 'sat': 0.0010013580322265625}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.4300956726074219, 'cpu': 0.4375, 'solve': 0.0070056915283203125, 'unsat': 0.004001617431640625, 'sat': 0.0010013580322265625}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 459.0, 'conflicts': 14.0, 'conflicts_analyzed': 11.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 23.0, 'models': 2.0, 'models_level': 70.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 11.0, 'distributed_sum_lbd': 13.0, 'integrated': 55.0, 'lemmas': 65.0, 'lits_learnt': 76.0, 'lemmas_binary': 11.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 51.0, 'integrated_jumps': 136.0, 'guiding_paths_lits': 108.0, 'guiding_paths': 19.0, 'splits': 0.0, 'lemmas_conflict': 11.0, 'lemmas_loop': 0.0, 'lemmas_other': 54.0, 'lits_conflict': 13.0, 'lits_loop': 0.0, 'lits_other': 63.0, 'jumps': {'jumps': 11.0, 'jumps_bounded': 10.0, 'levels': 249.0, 'levels_bounded': 98.0, 'max': 36.0, 'max_executed': 26.0, 'max_bounded': 11.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-54] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{20: 46}

[16-02-2022_21-58-54] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 21 achieved :: Progression >> total requested sgoals = 1, current total achieved sgoals = 2 (200.00% solved)

[16-02-2022_21-58-54] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 20 was achieved successfully.

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.245460s, Solving = 0.007333s, Total = 0.252793s, Memory = (RSS = 735.523438Mb, VMS = 725.660156Mb), Step range = [44-45]
2 : Statistics :: Grounding = 0.130424s, Solving = 0.007111s, Total = 0.137535s, Memory = (RSS = 735.523438Mb, VMS = 725.660156Mb), Step range = [46-46]

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.390328s due to: External generator exit.

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[16-02-2022_21-58-54] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 5, 19: 6, 20: 7, 21: 7, 22: 7, 23: 8, 24: 8, 25: 9, 26: 9, 27: 10, 28: 11, 29: 11, 30: 12, 31: 12, 32: 12, 33: 13, 34: 14, 35: 14, 36: 14, 37: 14, 38: 15, 39: 16, 40: 16, 41: 17, 42: 18, 43: 18, 44: 19}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 16, 4: 17, 5: 18, 6: 19, 7: 22, 8: 24, 9: 26, 10: 27, 11: 29, 12: 32, 13: 33, 14: 37, 15: 38, 16: 40, 17: 41, 18: 43, 19: 44}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8, 19: 9, 20: 10, 21: 11, 22: 12, 23: 13}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18, 9: 19, 10: 20, 11: 21, 12: 22, 13: 23}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[16-02-2022_21-58-54] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 5, 19: 6, 20: 7, 21: 7, 22: 7, 23: 8, 24: 8, 25: 9, 26: 9, 27: 10, 28: 11, 29: 11, 30: 12, 31: 12, 32: 12, 33: 13, 34: 14, 35: 14, 36: 14, 37: 14, 38: 15, 39: 16, 40: 16, 41: 17, 42: 18, 43: 18, 44: 19, 45: 20, 46: 20}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 16, 4: 17, 5: 18, 6: 19, 7: 22, 8: 24, 9: 26, 10: 27, 11: 29, 12: 32, 13: 33, 14: 37, 15: 38, 16: 40, 17: 41, 18: 43, 19: 44, 20: 46}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8, 19: 9, 20: 10, 21: 11, 22: 12, 23: 13}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18, 9: 19, 10: 20, 11: 21, 12: 22, 13: 23}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[16-02-2022_21-58-54] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 20, Last requested goal index = 20, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[16-02-2022_21-58-54] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.375884s, Solving = 0.014444s, Total = 0.390328s, Memory = (RSS = 735.523438Mb, VMS = 725.660156Mb), Step range = [44-46]), Calls = 2
Model :: Total atoms = 4524, Cost = (3, 0, 0), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[16-02-2022_21-58-54] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 2 :: Actions = 3                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 4:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 10:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 11:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 12:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 16:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 18:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 19:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 20:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 21:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 22:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 23:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 24:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 25:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 26:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
        talos : grasp(manipulator_end_2,(block,5))
Step 27:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 28:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 29:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 30:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 31:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 32:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 33:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 34:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 35:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 36:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 37:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 38:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 39:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
        talos : configure(manipulator_limb_2,extended)
Step 40:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 41:
    Current Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 17] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 17] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
        talos : release(manipulator_end_2,(block,5))
Step 42:
    Current Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
        talos : release(manipulator_end_1,(block,3))
Step 43:
    Current Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 44:
    Current Sub-goals:
        [Index = 19] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 19] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_end_2,(block,4),(block,5))
Step 45:
    Current Sub-goals:
        [Index = 20] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 20] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 46:
    Current Sub-goals:
        [Index = 20] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 20] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 20] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 20] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
        talos : release(manipulator_end_2,(block,4))

[16-02-2022_21-58-54] DEBUG :: ASH Planner Main #1 >> Monolevel problem 10 at level 1 solved.

[16-02-2022_21-58-54] DEBUG :: ASH Planner Main #1 >> Online planning increment 10 finished.

[16-02-2022_21-58-54] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 2 : Total constraining sub-goal stages = 13 : Goals achieved = 13 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 10 : Total constraining sub-goal stages = 23 : Goals achieved = 20 : Goals unachieved = 3 : Complete = False

[16-02-2022_21-58-54] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[16-02-2022_21-58-54] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 11 by method ground-first is [1-1].

[16-02-2022_21-58-54] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 11 at level 1:
Total Templated Partial Problems = 6, Problem Range = [7-12], Size = 7, Sub-goal Stage Range = [17-23]
Division points [total=5] : [(Index = 17, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 18, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 19, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 20, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 21, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[16-02-2022_21-58-54] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [21-21]

[16-02-2022_21-58-54] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [21-21], problem number = 11, increment number = 11

[16-02-2022_21-58-54] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 21)
	('last_sgoals', 21)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x000002960D109A60>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[16-02-2022_21-58-54] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [21-21] : Concurrency enabled : Minimum search length bound disabled with value 46

[16-02-2022_21-58-54] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 21
last_sgoals = 21
start_step = 46
is_initial = False
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 46

[16-02-2022_21-58-54] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[16-02-2022_21-58-54] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[16-02-2022_21-58-54] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[16-02-2022_21-58-54] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[16-02-2022_21-58-54] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[16-02-2022_21-58-54] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 46 as problem start state.

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'S': 46})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,2))', 'S': 46})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 46})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 46})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 46})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 46})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 46})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 46})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'S': 46})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 46})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,2)', 'S': 46})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 46})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 46})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 46})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 46})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,1)', 'S': 46})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 46})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 46})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 46})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 46})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 46})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 46})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 46})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 46})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 46})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 46})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 46})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 46})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 46})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 46})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 46})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'S': 46})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 46})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 46})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 46})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 46})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 46})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 46})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'S': 46})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 46})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 46})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 46})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 46})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 46})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'S': 46})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 46})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 46})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 46})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 46})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 46})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 46})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 46})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 46})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 46})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 46})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 46})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 46})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 46})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 46})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'S': 46})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 46})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 46})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 46})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 46})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 46})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 46})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 46})

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), true, 46).
holds(1, complete_tower(red,puzzle_room_table), false, 46).
holds(1, configuration(manipulator_end_1), aligned_with((block,2)), 46).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 46).
holds(1, configuration(manipulator_limb_1), extended, 46).
holds(1, configuration(manipulator_limb_2), extended, 46).
holds(1, configuration(puzzle_room_door), open, 46).
holds(1, configuration(starting_room_door), closed, 46).
holds(1, configuration(store_room_door), open, 46).
holds(1, grasping(manipulator_arm_1), (block,2), 46).
holds(1, grasping(manipulator_arm_2), nothing, 46).
holds(1, grasping(manipulator_end_1), (block,2), 46).
holds(1, grasping(manipulator_end_2), nothing, 46).
holds(1, in((block,1)), (puzzle_room,1), 46).
holds(1, in((block,2)), (puzzle_room,1), 46).
holds(1, in((block,3)), (puzzle_room,1), 46).
holds(1, in((block,4)), (puzzle_room,1), 46).
holds(1, in((block,5)), (puzzle_room,1), 46).
holds(1, in((block,6)), (puzzle_room,1), 46).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 46).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 46).
holds(1, in(manipulator_end_1), (puzzle_room,1), 46).
holds(1, in(manipulator_end_2), (puzzle_room,1), 46).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 46).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 46).
holds(1, in(puzzle_room_table), (puzzle_room,1), 46).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 46).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 46).
holds(1, in(talos), (puzzle_room,1), 46).
holds(1, in_tower((block,1),(block,1)), true, 46).
holds(1, in_tower((block,1),(block,2)), false, 46).
holds(1, in_tower((block,1),(block,3)), false, 46).
holds(1, in_tower((block,1),(block,4)), false, 46).
holds(1, in_tower((block,1),(block,5)), false, 46).
holds(1, in_tower((block,1),(block,6)), false, 46).
holds(1, in_tower((block,2),(block,1)), false, 46).
holds(1, in_tower((block,2),(block,2)), true, 46).
holds(1, in_tower((block,2),(block,3)), false, 46).
holds(1, in_tower((block,2),(block,4)), false, 46).
holds(1, in_tower((block,2),(block,5)), false, 46).
holds(1, in_tower((block,2),(block,6)), false, 46).
holds(1, in_tower((block,3),(block,1)), false, 46).
holds(1, in_tower((block,3),(block,2)), false, 46).
holds(1, in_tower((block,3),(block,3)), true, 46).
holds(1, in_tower((block,3),(block,4)), false, 46).
holds(1, in_tower((block,3),(block,5)), false, 46).
holds(1, in_tower((block,3),(block,6)), false, 46).
holds(1, in_tower((block,4),(block,1)), false, 46).
holds(1, in_tower((block,4),(block,2)), false, 46).
holds(1, in_tower((block,4),(block,3)), false, 46).
holds(1, in_tower((block,4),(block,4)), false, 46).
holds(1, in_tower((block,4),(block,5)), false, 46).
holds(1, in_tower((block,4),(block,6)), false, 46).
holds(1, in_tower((block,5),(block,1)), false, 46).
holds(1, in_tower((block,5),(block,2)), false, 46).
holds(1, in_tower((block,5),(block,3)), false, 46).
holds(1, in_tower((block,5),(block,4)), false, 46).
holds(1, in_tower((block,5),(block,5)), false, 46).
holds(1, in_tower((block,5),(block,6)), false, 46).
holds(1, in_tower((block,6),(block,1)), false, 46).
holds(1, in_tower((block,6),(block,2)), false, 46).
holds(1, in_tower((block,6),(block,3)), false, 46).
holds(1, in_tower((block,6),(block,4)), true, 46).
holds(1, in_tower((block,6),(block,5)), true, 46).
holds(1, in_tower((block,6),(block,6)), true, 46).
holds(1, on((block,1)), puzzle_room_table_left, 46).
holds(1, on((block,2)), puzzle_room_table_right, 46).
holds(1, on((block,3)), puzzle_room_table_left, 46).
holds(1, on((block,4)), (block,5), 46).
holds(1, on((block,5)), (block,6), 46).
holds(1, on((block,6)), puzzle_room_table_right, 46).
holds(1, tower_base((block,1),puzzle_room_table), true, 46).
holds(1, tower_base((block,2),puzzle_room_table), true, 46).
holds(1, tower_base((block,3),puzzle_room_table), true, 46).
holds(1, tower_base((block,4),puzzle_room_table), false, 46).
holds(1, tower_base((block,5),puzzle_room_table), false, 46).
holds(1, tower_base((block,6),puzzle_room_table), true, 46).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 46).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 46).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 46).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 46).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 46).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 46).
holds(2, complete_tower(blue,puzzle_room_table), true, 46).
holds(2, complete_tower(red,puzzle_room_table), false, 46).
holds(2, configuration(manipulator_arm_1), extended, 46).
holds(2, configuration(manipulator_arm_2), extended, 46).
holds(2, configuration(puzzle_room_door), open, 46).
holds(2, configuration(starting_room_door), closed, 46).
holds(2, configuration(store_room_door), open, 46).
holds(2, grasping(manipulator_arm_1), (block,2), 46).
holds(2, grasping(manipulator_arm_2), nothing, 46).
holds(2, in((block,1)), puzzle_room, 46).
holds(2, in((block,2)), puzzle_room, 46).
holds(2, in((block,3)), puzzle_room, 46).
holds(2, in((block,4)), puzzle_room, 46).
holds(2, in((block,5)), puzzle_room, 46).
holds(2, in((block,6)), puzzle_room, 46).
holds(2, in(manipulator_arm_1), puzzle_room, 46).
holds(2, in(manipulator_arm_2), puzzle_room, 46).
holds(2, in(puzzle_room_table), puzzle_room, 46).
holds(2, in(talos), puzzle_room, 46).
holds(2, in_tower((block,1),(block,1)), true, 46).
holds(2, in_tower((block,1),(block,2)), false, 46).
holds(2, in_tower((block,1),(block,3)), false, 46).
holds(2, in_tower((block,1),(block,4)), false, 46).
holds(2, in_tower((block,1),(block,5)), false, 46).
holds(2, in_tower((block,1),(block,6)), false, 46).
holds(2, in_tower((block,2),(block,1)), false, 46).
holds(2, in_tower((block,2),(block,2)), true, 46).
holds(2, in_tower((block,2),(block,3)), false, 46).
holds(2, in_tower((block,2),(block,4)), false, 46).
holds(2, in_tower((block,2),(block,5)), false, 46).
holds(2, in_tower((block,2),(block,6)), false, 46).
holds(2, in_tower((block,3),(block,1)), false, 46).
holds(2, in_tower((block,3),(block,2)), false, 46).
holds(2, in_tower((block,3),(block,3)), true, 46).
holds(2, in_tower((block,3),(block,4)), false, 46).
holds(2, in_tower((block,3),(block,5)), false, 46).
holds(2, in_tower((block,3),(block,6)), false, 46).
holds(2, in_tower((block,4),(block,1)), false, 46).
holds(2, in_tower((block,4),(block,2)), false, 46).
holds(2, in_tower((block,4),(block,3)), false, 46).
holds(2, in_tower((block,4),(block,4)), false, 46).
holds(2, in_tower((block,4),(block,5)), false, 46).
holds(2, in_tower((block,4),(block,6)), false, 46).
holds(2, in_tower((block,5),(block,1)), false, 46).
holds(2, in_tower((block,5),(block,2)), false, 46).
holds(2, in_tower((block,5),(block,3)), false, 46).
holds(2, in_tower((block,5),(block,4)), false, 46).
holds(2, in_tower((block,5),(block,5)), false, 46).
holds(2, in_tower((block,5),(block,6)), false, 46).
holds(2, in_tower((block,6),(block,1)), false, 46).
holds(2, in_tower((block,6),(block,2)), false, 46).
holds(2, in_tower((block,6),(block,3)), false, 46).
holds(2, in_tower((block,6),(block,4)), true, 46).
holds(2, in_tower((block,6),(block,5)), true, 46).
holds(2, in_tower((block,6),(block,6)), true, 46).
holds(2, on((block,1)), puzzle_room_table, 46).
holds(2, on((block,2)), puzzle_room_table, 46).
holds(2, on((block,3)), puzzle_room_table, 46).
holds(2, on((block,4)), (block,5), 46).
holds(2, on((block,5)), (block,6), 46).
holds(2, on((block,6)), puzzle_room_table, 46).
holds(2, tower_base((block,1),puzzle_room_table), true, 46).
holds(2, tower_base((block,2),puzzle_room_table), true, 46).
holds(2, tower_base((block,3),puzzle_room_table), true, 46).
holds(2, tower_base((block,4),puzzle_room_table), false, 46).
holds(2, tower_base((block,5),puzzle_room_table), false, 46).
holds(2, tower_base((block,6),puzzle_room_table), true, 46).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 46).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 46).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 46).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 46).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 46).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 46).

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[16-02-2022_21-58-54] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,1))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'I': 21})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 21})

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 2 rules into program part base:

sub_goal(2, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 21).
sub_goal(2, talos, put(manipulator_arm_1,(block,2),(block,3)), on((block,2)), (block,3), 21).

[16-02-2022_21-58-54] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x0000029633FFD790>]
	incrementor = SolveIncrementor(step_start=46, step_increase=1, step_increase_initial=2, step_end_min=47, step_end_max=200, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 46), range_=None), IncPart(name='plan_module', args=('#inc', 46, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 46, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 46, 21, 21, 'sequential', 'true'), range_=None)]

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 809 rules

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004641300000002957s

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.030029s.

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005285s with result Satisfiable.

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000029634E82A90>

[16-02-2022_21-58-54] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 46)
	('last_sgoals', 21)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002960D109A60>)
	('first_sgoals', 21)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000029634E82A90>)

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(21, 47)', truth=True, inc_range=None)

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 46). %* None *%
#program plan_module(#inc, 46, true, false). %* None *%
#program optimisation_module(#inc, 46, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 46, 21, 21, sequential, true). %* None *%

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     45 : Current =     47
Incrementor step ends | Minimum  =     47 : Maximum =    200

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(47)]), ('state_module', [Number(46), Number(46)]), ('plan_module', [Number(46), Number(46), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(46), Number(46), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(46)]), ('action_preconditions', [Number(46)]), ('variable_relations', [Number(46)]), ('abstraction_mappings', [Number(46)]), ('conformance_module', [Number(46), Number(46), Number(21), Number(21), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(47), Number(46)]), ('plan_module', [Number(47), Number(46), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(47), Number(46), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(47)]), ('action_preconditions', [Number(47)]), ('variable_relations', [Number(47)]), ('abstraction_mappings', [Number(47)]), ('conformance_module', [Number(47), Number(46), Number(21), Number(21), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.249314s.

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 46: original = External(symbol='current_last_sgoals(21, 47)', truth=True, inc_range=None), conversion = current_last_sgoals(21,47).

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 47: original = External(symbol='current_last_sgoals(21, 47)', truth=True, inc_range=None), conversion = current_last_sgoals(21,47).

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008131s with result Unsatisfiable.

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.25744540000005145, Incremental time limit = None
Running cumulative time = 0.25744540000005145, Cumulative time limit = 1800
Used memory = (RSS = 735.523438Mb, VMS = 725.660156Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-54] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=45, end_step=47, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.24931400000002668, solving_time=0.008131400000024769, total_time=0.25744540000005145, memory=Memory(rss=735.5234375, vms=725.66015625), step_range=range(46, 48), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.24931400000002668, solving_time=0.008131400000024769, total_time=0.25744540000005145, memory=Memory(rss=735.5234375, vms=725.66015625), step_range=range(46, 48), clingo_stats={'problem': {'lp': {'atoms': 12167.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15842.0, 'bodies_tr': 15842.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 261.0, 'count_bodies_tr': 261.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 540.0, 'rules': 27759.0, 'rules_normal': 27213.0, 'rules_choice': 543.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 27759.0, 'rules_tr_normal': 27213.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 23028.0, 'eqs_atom': 7029.0, 'eqs_body': 1920.0, 'eqs_other': 14079.0}, 'lpStep': {'atoms': 5650.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13223.0, 'bodies_tr': 13223.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 261.0, 'count_bodies_tr': 261.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 540.0, 'rules': 20332.0, 'rules_normal': 19786.0, 'rules_choice': 543.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 20332.0, 'rules_tr_normal': 19786.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 9972.0, 'eqs_atom': 2119.0, 'eqs_body': 395.0, 'eqs_other': 7458.0}, 'generator': {'vars': 2585.0, 'vars_eliminated': 0.0, 'vars_frozen': 1555.0, 'constraints': 14.0, 'constraints_binary': 970.0, 'constraints_ternary': 196.0, 'acyc_edges': 0.0, 'complexity': 1194.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 42.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf, inf], 'lower': [0.0, 0.0, -1.0], 'concurrency': 6.0, 'winner': 5.0, 'times': {'total': 0.25705718994140625, 'cpu': 0.25, 'solve': 0.0010013580322265625, 'unsat': 0.0010013580322265625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.29706573486328125, 'cpu': 0.296875, 'solve': 0.004001617431640625, 'unsat': 0.0010013580322265625, 'sat': 0.00099945068359375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     47 : Current =     48
Incrementor step ends | Minimum  =     47 : Maximum =    200

[16-02-2022_21-58-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(48)]), ('state_module', [Number(48), Number(46)]), ('plan_module', [Number(48), Number(46), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(48), Number(46), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(48)]), ('action_preconditions', [Number(48)]), ('variable_relations', [Number(48)]), ('abstraction_mappings', [Number(48)]), ('conformance_module', [Number(48), Number(46), Number(21), Number(21), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.132347s.

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006962s with result Satisfiable.

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.13930900000002566, Incremental time limit = None
Running cumulative time = 0.3967544000000771, Cumulative time limit = 1800
Used memory = (RSS = 735.523438Mb, VMS = 725.660156Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.381661s, Solving = 0.015093s, Total = 0.396754s, Memory = (RSS = 735.523438Mb, VMS = 725.660156Mb), Step range = [46-48]), Calls = 2
Final Model :: Total atoms = 4524, Cost = (3, 0, -1), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=47, end_step=48, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.38166100000000824, solving_time=0.015093400000068868, total_time=0.3967544000000771, memory=Memory(rss=735.5234375, vms=725.66015625), step_range=range(46, 49), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.13234699999998156, solving_time=0.0069620000000441, total_time=0.13930900000002566, memory=Memory(rss=735.5234375, vms=725.66015625), step_range=range(48, 49), clingo_stats={'problem': {'lp': {'atoms': 13903.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25307.0, 'bodies_tr': 25307.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 462.0, 'count_bodies_tr': 462.0, 'sccs': 44.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 577.0, 'rules': 40130.0, 'rules_normal': 39386.0, 'rules_choice': 738.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 40130.0, 'rules_tr_normal': 39386.0, 'rules_tr_choice': 738.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 26162.0, 'eqs_atom': 7616.0, 'eqs_body': 2365.0, 'eqs_other': 16181.0}, 'lpStep': {'atoms': 1736.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 9465.0, 'bodies_tr': 9465.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 2.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 37.0, 'rules': 12371.0, 'rules_normal': 12173.0, 'rules_choice': 195.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 12371.0, 'rules_tr_normal': 12173.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3134.0, 'eqs_atom': 587.0, 'eqs_body': 445.0, 'eqs_other': 2102.0}, 'generator': {'vars': 2871.0, 'vars_eliminated': 0.0, 'vars_frozen': 1759.0, 'constraints': 49.0, 'constraints_binary': 1802.0, 'constraints_ternary': 379.0, 'acyc_edges': 0.0, 'complexity': 2258.0}}, 'solving': {'solvers': {'choices': 371.0, 'conflicts': 16.0, 'conflicts_analyzed': 13.0, 'restarts': 0.0, 'restarts_last': 6.0, 'extra': {'domain_choices': 17.0, 'models': 1.0, 'models_level': 60.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 13.0, 'distributed_sum_lbd': 19.0, 'integrated': 52.0, 'lemmas': 62.0, 'lits_learnt': 96.0, 'lemmas_binary': 4.0, 'lemmas_ternary': 9.0, 'cpu_time': 0.015625, 'integrated_imps': 38.0, 'integrated_jumps': 84.0, 'guiding_paths_lits': 60.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 13.0, 'lemmas_loop': 0.0, 'lemmas_other': 49.0, 'lits_conflict': 21.0, 'lits_loop': 0.0, 'lits_other': 75.0, 'jumps': {'jumps': 13.0, 'jumps_bounded': 10.0, 'levels': 242.0, 'levels_bounded': 98.0, 'max': 30.0, 'max_executed': 19.0, 'max_bounded': 11.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [3.0, 0.0, -1.0], 'lower': [3.0, 0.0, -1.0], 'concurrency': 6.0, 'winner': 0.0, 'times': {'total': 0.1400299072265625, 'cpu': 0.140625, 'solve': 0.0039997100830078125, 'unsat': 0.0030002593994140625, 'sat': 0.00099945068359375}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.43709564208984375, 'cpu': 0.4375, 'solve': 0.008001327514648438, 'unsat': 0.004001617431640625, 'sat': 0.0019989013671875}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 371.0, 'conflicts': 16.0, 'conflicts_analyzed': 13.0, 'restarts': 0.0, 'restarts_last': 6.0, 'extra': {'domain_choices': 17.0, 'models': 2.0, 'models_level': 61.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 13.0, 'distributed_sum_lbd': 19.0, 'integrated': 52.0, 'lemmas': 62.0, 'lits_learnt': 96.0, 'lemmas_binary': 4.0, 'lemmas_ternary': 9.0, 'cpu_time': 0.03125, 'integrated_imps': 38.0, 'integrated_jumps': 84.0, 'guiding_paths_lits': 108.0, 'guiding_paths': 19.0, 'splits': 0.0, 'lemmas_conflict': 13.0, 'lemmas_loop': 0.0, 'lemmas_other': 49.0, 'lits_conflict': 21.0, 'lits_loop': 0.0, 'lits_other': 75.0, 'jumps': {'jumps': 13.0, 'jumps_bounded': 10.0, 'levels': 242.0, 'levels_bounded': 98.0, 'max': 30.0, 'max_executed': 19.0, 'max_bounded': 11.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{21: 48}

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 22 achieved :: Progression >> total requested sgoals = 1, current total achieved sgoals = 2 (200.00% solved)

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 21 was achieved successfully.

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.249314s, Solving = 0.008131s, Total = 0.257445s, Memory = (RSS = 735.523438Mb, VMS = 725.660156Mb), Step range = [46-47]
2 : Statistics :: Grounding = 0.132347s, Solving = 0.006962s, Total = 0.139309s, Memory = (RSS = 735.523438Mb, VMS = 725.660156Mb), Step range = [48-48]

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.396754s due to: External generator exit.

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 5, 19: 6, 20: 7, 21: 7, 22: 7, 23: 8, 24: 8, 25: 9, 26: 9, 27: 10, 28: 11, 29: 11, 30: 12, 31: 12, 32: 12, 33: 13, 34: 14, 35: 14, 36: 14, 37: 14, 38: 15, 39: 16, 40: 16, 41: 17, 42: 18, 43: 18, 44: 19, 45: 20, 46: 20}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 16, 4: 17, 5: 18, 6: 19, 7: 22, 8: 24, 9: 26, 10: 27, 11: 29, 12: 32, 13: 33, 14: 37, 15: 38, 16: 40, 17: 41, 18: 43, 19: 44, 20: 46}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8, 19: 9, 20: 10, 21: 11, 22: 12, 23: 13}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18, 9: 19, 10: 20, 11: 21, 12: 22, 13: 23}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 5, 19: 6, 20: 7, 21: 7, 22: 7, 23: 8, 24: 8, 25: 9, 26: 9, 27: 10, 28: 11, 29: 11, 30: 12, 31: 12, 32: 12, 33: 13, 34: 14, 35: 14, 36: 14, 37: 14, 38: 15, 39: 16, 40: 16, 41: 17, 42: 18, 43: 18, 44: 19, 45: 20, 46: 20, 47: 21, 48: 21}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 16, 4: 17, 5: 18, 6: 19, 7: 22, 8: 24, 9: 26, 10: 27, 11: 29, 12: 32, 13: 33, 14: 37, 15: 38, 16: 40, 17: 41, 18: 43, 19: 44, 20: 46, 21: 48}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8, 19: 9, 20: 10, 21: 11, 22: 12, 23: 13}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18, 9: 19, 10: 20, 11: 21, 12: 22, 13: 23}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 21, Last requested goal index = 21, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.381661s, Solving = 0.015093s, Total = 0.396754s, Memory = (RSS = 735.523438Mb, VMS = 725.660156Mb), Step range = [46-48]), Calls = 2
Model :: Total atoms = 4524, Cost = (3, 0, -1), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 2 :: Actions = 3                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 4:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 10:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 11:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 12:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 16:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 18:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 19:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 20:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 21:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 22:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 23:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 24:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 25:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 26:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
        talos : grasp(manipulator_end_2,(block,5))
Step 27:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 28:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 29:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 30:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 31:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 32:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 33:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 34:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 35:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 36:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 37:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 38:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 39:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
        talos : configure(manipulator_limb_2,extended)
Step 40:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 41:
    Current Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 17] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 17] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
        talos : release(manipulator_end_2,(block,5))
Step 42:
    Current Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
        talos : release(manipulator_end_1,(block,3))
Step 43:
    Current Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 44:
    Current Sub-goals:
        [Index = 19] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 19] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_end_2,(block,4),(block,5))
Step 45:
    Current Sub-goals:
        [Index = 20] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 20] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 46:
    Current Sub-goals:
        [Index = 20] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 20] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 20] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 20] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
        talos : release(manipulator_end_2,(block,4))
Step 47:
    Current Sub-goals:
        [Index = 21] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 21] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,1)))
Step 48:
    Current Sub-goals:
        [Index = 21] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 21] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 21] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 21] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,1))
        talos : put(manipulator_end_1,(block,2),(block,3))

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Monolevel problem 11 at level 1 solved.

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Online planning increment 11 finished.

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 2 : Total constraining sub-goal stages = 13 : Goals achieved = 13 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 11 : Total constraining sub-goal stages = 23 : Goals achieved = 21 : Goals unachieved = 2 : Complete = False

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 12 by method ground-first is [1-1].

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 12 at level 1:
Total Templated Partial Problems = 6, Problem Range = [7-12], Size = 7, Sub-goal Stage Range = [17-23]
Division points [total=5] : [(Index = 17, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 18, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 19, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 20, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 21, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [22-23]

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [22-23], problem number = 12, increment number = 12

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 22)
	('last_sgoals', 23)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x000002960D109A60>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [22-23] : Concurrency enabled : Minimum search length bound disabled with value 49

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 22
last_sgoals = 23
start_step = 48
is_initial = False
is_final = True
complete_planning = False
sequential_yield = True
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 49

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[16-02-2022_21-58-55] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[16-02-2022_21-58-55] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 48 as problem start state.

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'S': 48})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,2))', 'S': 48})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,1))', 'S': 48})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 48})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 48})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 48})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 48})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 48})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'S': 48})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'S': 48})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,2)', 'S': 48})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 48})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 48})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 48})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 48})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 48})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'S': 48})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 48})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 48})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 48})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 48})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 48})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'S': 48})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 48})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 48})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 48})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 48})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 48})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'S': 48})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'S': 48})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 48})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 48})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 48})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 48})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 48})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 48})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 48})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 48})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 48})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 48})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 48})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 48})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 48})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 48})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'S': 48})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 48})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 48})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 48})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 48})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 48})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 48})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 48})

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), true, 48).
holds(1, complete_tower(red,puzzle_room_table), false, 48).
holds(1, configuration(manipulator_end_1), aligned_with((block,2)), 48).
holds(1, configuration(manipulator_end_2), aligned_with((block,1)), 48).
holds(1, configuration(manipulator_limb_1), extended, 48).
holds(1, configuration(manipulator_limb_2), extended, 48).
holds(1, configuration(puzzle_room_door), open, 48).
holds(1, configuration(starting_room_door), closed, 48).
holds(1, configuration(store_room_door), open, 48).
holds(1, grasping(manipulator_arm_1), (block,2), 48).
holds(1, grasping(manipulator_arm_2), (block,1), 48).
holds(1, grasping(manipulator_end_1), (block,2), 48).
holds(1, grasping(manipulator_end_2), (block,1), 48).
holds(1, in((block,1)), (puzzle_room,1), 48).
holds(1, in((block,2)), (puzzle_room,1), 48).
holds(1, in((block,3)), (puzzle_room,1), 48).
holds(1, in((block,4)), (puzzle_room,1), 48).
holds(1, in((block,5)), (puzzle_room,1), 48).
holds(1, in((block,6)), (puzzle_room,1), 48).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 48).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 48).
holds(1, in(manipulator_end_1), (puzzle_room,1), 48).
holds(1, in(manipulator_end_2), (puzzle_room,1), 48).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 48).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 48).
holds(1, in(puzzle_room_table), (puzzle_room,1), 48).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 48).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 48).
holds(1, in(talos), (puzzle_room,1), 48).
holds(1, in_tower((block,1),(block,1)), true, 48).
holds(1, in_tower((block,1),(block,2)), false, 48).
holds(1, in_tower((block,1),(block,3)), false, 48).
holds(1, in_tower((block,1),(block,4)), false, 48).
holds(1, in_tower((block,1),(block,5)), false, 48).
holds(1, in_tower((block,1),(block,6)), false, 48).
holds(1, in_tower((block,2),(block,1)), false, 48).
holds(1, in_tower((block,2),(block,2)), false, 48).
holds(1, in_tower((block,2),(block,3)), false, 48).
holds(1, in_tower((block,2),(block,4)), false, 48).
holds(1, in_tower((block,2),(block,5)), false, 48).
holds(1, in_tower((block,2),(block,6)), false, 48).
holds(1, in_tower((block,3),(block,1)), false, 48).
holds(1, in_tower((block,3),(block,2)), true, 48).
holds(1, in_tower((block,3),(block,3)), true, 48).
holds(1, in_tower((block,3),(block,4)), false, 48).
holds(1, in_tower((block,3),(block,5)), false, 48).
holds(1, in_tower((block,3),(block,6)), false, 48).
holds(1, in_tower((block,4),(block,1)), false, 48).
holds(1, in_tower((block,4),(block,2)), false, 48).
holds(1, in_tower((block,4),(block,3)), false, 48).
holds(1, in_tower((block,4),(block,4)), false, 48).
holds(1, in_tower((block,4),(block,5)), false, 48).
holds(1, in_tower((block,4),(block,6)), false, 48).
holds(1, in_tower((block,5),(block,1)), false, 48).
holds(1, in_tower((block,5),(block,2)), false, 48).
holds(1, in_tower((block,5),(block,3)), false, 48).
holds(1, in_tower((block,5),(block,4)), false, 48).
holds(1, in_tower((block,5),(block,5)), false, 48).
holds(1, in_tower((block,5),(block,6)), false, 48).
holds(1, in_tower((block,6),(block,1)), false, 48).
holds(1, in_tower((block,6),(block,2)), false, 48).
holds(1, in_tower((block,6),(block,3)), false, 48).
holds(1, in_tower((block,6),(block,4)), true, 48).
holds(1, in_tower((block,6),(block,5)), true, 48).
holds(1, in_tower((block,6),(block,6)), true, 48).
holds(1, on((block,1)), puzzle_room_table_left, 48).
holds(1, on((block,2)), (block,3), 48).
holds(1, on((block,3)), puzzle_room_table_left, 48).
holds(1, on((block,4)), (block,5), 48).
holds(1, on((block,5)), (block,6), 48).
holds(1, on((block,6)), puzzle_room_table_right, 48).
holds(1, tower_base((block,1),puzzle_room_table), true, 48).
holds(1, tower_base((block,2),puzzle_room_table), false, 48).
holds(1, tower_base((block,3),puzzle_room_table), true, 48).
holds(1, tower_base((block,4),puzzle_room_table), false, 48).
holds(1, tower_base((block,5),puzzle_room_table), false, 48).
holds(1, tower_base((block,6),puzzle_room_table), true, 48).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 48).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 48).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 48).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 48).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 48).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 48).
holds(2, complete_tower(blue,puzzle_room_table), true, 48).
holds(2, complete_tower(red,puzzle_room_table), false, 48).
holds(2, configuration(manipulator_arm_1), extended, 48).
holds(2, configuration(manipulator_arm_2), extended, 48).
holds(2, configuration(puzzle_room_door), open, 48).
holds(2, configuration(starting_room_door), closed, 48).
holds(2, configuration(store_room_door), open, 48).
holds(2, grasping(manipulator_arm_1), (block,2), 48).
holds(2, grasping(manipulator_arm_2), (block,1), 48).
holds(2, in((block,1)), puzzle_room, 48).
holds(2, in((block,2)), puzzle_room, 48).
holds(2, in((block,3)), puzzle_room, 48).
holds(2, in((block,4)), puzzle_room, 48).
holds(2, in((block,5)), puzzle_room, 48).
holds(2, in((block,6)), puzzle_room, 48).
holds(2, in(manipulator_arm_1), puzzle_room, 48).
holds(2, in(manipulator_arm_2), puzzle_room, 48).
holds(2, in(puzzle_room_table), puzzle_room, 48).
holds(2, in(talos), puzzle_room, 48).
holds(2, in_tower((block,1),(block,1)), true, 48).
holds(2, in_tower((block,1),(block,2)), false, 48).
holds(2, in_tower((block,1),(block,3)), false, 48).
holds(2, in_tower((block,1),(block,4)), false, 48).
holds(2, in_tower((block,1),(block,5)), false, 48).
holds(2, in_tower((block,1),(block,6)), false, 48).
holds(2, in_tower((block,2),(block,1)), false, 48).
holds(2, in_tower((block,2),(block,2)), false, 48).
holds(2, in_tower((block,2),(block,3)), false, 48).
holds(2, in_tower((block,2),(block,4)), false, 48).
holds(2, in_tower((block,2),(block,5)), false, 48).
holds(2, in_tower((block,2),(block,6)), false, 48).
holds(2, in_tower((block,3),(block,1)), false, 48).
holds(2, in_tower((block,3),(block,2)), true, 48).
holds(2, in_tower((block,3),(block,3)), true, 48).
holds(2, in_tower((block,3),(block,4)), false, 48).
holds(2, in_tower((block,3),(block,5)), false, 48).
holds(2, in_tower((block,3),(block,6)), false, 48).
holds(2, in_tower((block,4),(block,1)), false, 48).
holds(2, in_tower((block,4),(block,2)), false, 48).
holds(2, in_tower((block,4),(block,3)), false, 48).
holds(2, in_tower((block,4),(block,4)), false, 48).
holds(2, in_tower((block,4),(block,5)), false, 48).
holds(2, in_tower((block,4),(block,6)), false, 48).
holds(2, in_tower((block,5),(block,1)), false, 48).
holds(2, in_tower((block,5),(block,2)), false, 48).
holds(2, in_tower((block,5),(block,3)), false, 48).
holds(2, in_tower((block,5),(block,4)), false, 48).
holds(2, in_tower((block,5),(block,5)), false, 48).
holds(2, in_tower((block,5),(block,6)), false, 48).
holds(2, in_tower((block,6),(block,1)), false, 48).
holds(2, in_tower((block,6),(block,2)), false, 48).
holds(2, in_tower((block,6),(block,3)), false, 48).
holds(2, in_tower((block,6),(block,4)), true, 48).
holds(2, in_tower((block,6),(block,5)), true, 48).
holds(2, in_tower((block,6),(block,6)), true, 48).
holds(2, on((block,1)), puzzle_room_table, 48).
holds(2, on((block,2)), (block,3), 48).
holds(2, on((block,3)), puzzle_room_table, 48).
holds(2, on((block,4)), (block,5), 48).
holds(2, on((block,5)), (block,6), 48).
holds(2, on((block,6)), puzzle_room_table, 48).
holds(2, tower_base((block,1),puzzle_room_table), true, 48).
holds(2, tower_base((block,2),puzzle_room_table), false, 48).
holds(2, tower_base((block,3),puzzle_room_table), true, 48).
holds(2, tower_base((block,4),puzzle_room_table), false, 48).
holds(2, tower_base((block,5),puzzle_room_table), false, 48).
holds(2, tower_base((block,6),puzzle_room_table), true, 48).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 48).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 48).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 48).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 48).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 48).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 48).

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 22})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 23})

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 2 rules into program part base:

sub_goal(2, talos, release(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), nothing, 22).
sub_goal(2, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 23).

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x0000029633FFD280>]
	incrementor = SolveIncrementor(step_start=48, step_increase=1, step_increase_initial=2, step_end_min=50, step_end_max=200, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 48), range_=None), IncPart(name='plan_module', args=('#inc', 48, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 48, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 48, 22, 23, 'sequential', 'true'), range_=None)]

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 809 rules

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004628499999967062s

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.029551s.

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004920s with result Satisfiable.

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000029634F45F40>

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 48)
	('last_sgoals', 23)
	('finalise', True)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002960D109A60>)
	('first_sgoals', 22)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000029634F45F40>)

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(22, 49)', truth=True, inc_range=None)

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 48). %* None *%
#program plan_module(#inc, 48, true, false). %* None *%
#program optimisation_module(#inc, 48, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 48, 22, 23, sequential, true). %* None *%

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     47 : Current =     49
Incrementor step ends | Minimum  =     50 : Maximum =    200

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(49)]), ('state_module', [Number(48), Number(48)]), ('plan_module', [Number(48), Number(48), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(48), Number(48), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(48)]), ('action_preconditions', [Number(48)]), ('variable_relations', [Number(48)]), ('abstraction_mappings', [Number(48)]), ('conformance_module', [Number(48), Number(48), Number(22), Number(23), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(49), Number(48)]), ('plan_module', [Number(49), Number(48), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(49), Number(48), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(49)]), ('action_preconditions', [Number(49)]), ('variable_relations', [Number(49)]), ('abstraction_mappings', [Number(49)]), ('conformance_module', [Number(49), Number(48), Number(22), Number(23), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.249254s.

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 48: original = External(symbol='current_last_sgoals(22, 49)', truth=True, inc_range=None), conversion = current_last_sgoals(22,49).

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 49: original = External(symbol='current_last_sgoals(22, 49)', truth=True, inc_range=None), conversion = current_last_sgoals(22,49).

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013626s with result Satisfiable.

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.2628799000000299, Incremental time limit = None
Running cumulative time = 0.2628799000000299, Cumulative time limit = 1800
Used memory = (RSS = 735.523438Mb, VMS = 725.660156Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.249254s, Solving = 0.013626s, Total = 0.262880s, Memory = (RSS = 735.523438Mb, VMS = 725.660156Mb), Step range = [48-49]), Calls = 1
Final Model :: Total atoms = 4151, Cost = (1, 0, 0), Optimality proven = False, Number = 2, Thread ID = 5, Model type = ModelType.StableModel

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=47, end_step=49, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.2492535000000089, solving_time=0.013626400000021022, total_time=0.2628799000000299, memory=Memory(rss=735.5234375, vms=725.66015625), step_range=range(48, 50), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2492535000000089, solving_time=0.013626400000021022, total_time=0.2628799000000299, memory=Memory(rss=735.5234375, vms=725.66015625), step_range=range(48, 50), clingo_stats={'problem': {'lp': {'atoms': 12181.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 15168.0, 'bodies_tr': 15168.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 259.0, 'count_bodies_tr': 259.0, 'sccs': 32.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 425.0, 'rules': 27127.0, 'rules_normal': 26581.0, 'rules_choice': 543.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 27127.0, 'rules_tr_normal': 26581.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 24268.0, 'eqs_atom': 7116.0, 'eqs_body': 2012.0, 'eqs_other': 15140.0}, 'lpStep': {'atoms': 5664.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12549.0, 'bodies_tr': 12549.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 259.0, 'count_bodies_tr': 259.0, 'sccs': 32.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 425.0, 'rules': 19700.0, 'rules_normal': 19154.0, 'rules_choice': 543.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 19700.0, 'rules_tr_normal': 19154.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 11212.0, 'eqs_atom': 2206.0, 'eqs_body': 487.0, 'eqs_other': 8519.0}, 'generator': {'vars': 1804.0, 'vars_eliminated': 0.0, 'vars_frozen': 1285.0, 'constraints': 21.0, 'constraints_binary': 933.0, 'constraints_ternary': 176.0, 'acyc_edges': 0.0, 'complexity': 1154.0}}, 'solving': {'solvers': {'choices': 134.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 51.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 54.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [1.0, 0.0, 0.0], 'lower': [1.0, 0.0, 0.0], 'concurrency': 6.0, 'winner': 5.0, 'times': {'total': 0.26305580139160156, 'cpu': 0.25, 'solve': 0.008001327514648438, 'unsat': 0.0030002593994140625, 'sat': 0.00099945068359375}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.30306434631347656, 'cpu': 0.28125, 'solve': 0.0110015869140625, 'unsat': 0.0030002593994140625, 'sat': 0.00099945068359375}, 'models': {'enumerated': 3.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 134.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 52.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 60.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{22: 49}

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 23 achieved :: Progression >> total requested sgoals = 2, current total achieved sgoals = 2 (100.00% solved)

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(23, 49)', truth=True, inc_range=None)

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 23, step = 49]:
sub_goal(2, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 23)

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='seq_achieve_fgoals(49)', truth=True, inc_range=IncRange(start=None, end=None, step=1))

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Enforcing achievement of final-goal:
final_goal(1, complete_tower(blue,puzzle_room_table), false, false)
final_goal(1, complete_tower(blue,puzzle_room_table), true, true)
final_goal(1, complete_tower(red,puzzle_room_table), false, false)
final_goal(1, complete_tower(red,puzzle_room_table), true, true)
final_goal(1, in_tower((block,1),(block,1)), false, true)
final_goal(1, in_tower((block,1),(block,1)), true, false)
final_goal(1, in_tower((block,1),(block,2)), false, true)
final_goal(1, in_tower((block,1),(block,2)), true, false)
final_goal(1, in_tower((block,1),(block,3)), false, true)
final_goal(1, in_tower((block,1),(block,3)), true, false)
final_goal(1, in_tower((block,1),(block,4)), false, true)
final_goal(1, in_tower((block,1),(block,4)), true, false)
final_goal(1, in_tower((block,1),(block,5)), false, true)
final_goal(1, in_tower((block,1),(block,5)), true, false)
final_goal(1, in_tower((block,1),(block,6)), false, true)
final_goal(1, in_tower((block,1),(block,6)), true, false)
final_goal(1, in_tower((block,2),(block,1)), false, true)
final_goal(1, in_tower((block,2),(block,1)), true, false)
final_goal(1, in_tower((block,2),(block,2)), false, true)
final_goal(1, in_tower((block,2),(block,2)), true, false)
final_goal(1, in_tower((block,2),(block,3)), false, true)
final_goal(1, in_tower((block,2),(block,3)), true, false)
final_goal(1, in_tower((block,2),(block,4)), false, true)
final_goal(1, in_tower((block,2),(block,4)), true, false)
final_goal(1, in_tower((block,2),(block,5)), false, true)
final_goal(1, in_tower((block,2),(block,5)), true, false)
final_goal(1, in_tower((block,2),(block,6)), false, true)
final_goal(1, in_tower((block,2),(block,6)), true, false)
final_goal(1, in_tower((block,3),(block,1)), false, false)
final_goal(1, in_tower((block,3),(block,1)), true, true)
final_goal(1, in_tower((block,3),(block,2)), false, false)
final_goal(1, in_tower((block,3),(block,2)), true, true)
final_goal(1, in_tower((block,3),(block,3)), false, false)
final_goal(1, in_tower((block,3),(block,3)), true, true)
final_goal(1, in_tower((block,3),(block,4)), false, true)
final_goal(1, in_tower((block,3),(block,4)), true, false)
final_goal(1, in_tower((block,3),(block,5)), false, true)
final_goal(1, in_tower((block,3),(block,5)), true, false)
final_goal(1, in_tower((block,3),(block,6)), false, true)
final_goal(1, in_tower((block,3),(block,6)), true, false)
final_goal(1, in_tower((block,4),(block,1)), false, true)
final_goal(1, in_tower((block,4),(block,1)), true, false)
final_goal(1, in_tower((block,4),(block,2)), false, true)
final_goal(1, in_tower((block,4),(block,2)), true, false)
final_goal(1, in_tower((block,4),(block,3)), false, true)
final_goal(1, in_tower((block,4),(block,3)), true, false)
final_goal(1, in_tower((block,4),(block,4)), false, true)
final_goal(1, in_tower((block,4),(block,4)), true, false)
final_goal(1, in_tower((block,4),(block,5)), false, true)
final_goal(1, in_tower((block,4),(block,5)), true, false)
final_goal(1, in_tower((block,4),(block,6)), false, true)
final_goal(1, in_tower((block,4),(block,6)), true, false)
final_goal(1, in_tower((block,5),(block,1)), false, true)
final_goal(1, in_tower((block,5),(block,1)), true, false)
final_goal(1, in_tower((block,5),(block,2)), false, true)
final_goal(1, in_tower((block,5),(block,2)), true, false)
final_goal(1, in_tower((block,5),(block,3)), false, true)
final_goal(1, in_tower((block,5),(block,3)), true, false)
final_goal(1, in_tower((block,5),(block,4)), false, true)
final_goal(1, in_tower((block,5),(block,4)), true, false)
final_goal(1, in_tower((block,5),(block,5)), false, true)
final_goal(1, in_tower((block,5),(block,5)), true, false)
final_goal(1, in_tower((block,5),(block,6)), false, true)
final_goal(1, in_tower((block,5),(block,6)), true, false)
final_goal(1, in_tower((block,6),(block,1)), false, true)
final_goal(1, in_tower((block,6),(block,1)), true, false)
final_goal(1, in_tower((block,6),(block,2)), false, true)
final_goal(1, in_tower((block,6),(block,2)), true, false)
final_goal(1, in_tower((block,6),(block,3)), false, true)
final_goal(1, in_tower((block,6),(block,3)), true, false)
final_goal(1, in_tower((block,6),(block,4)), false, false)
final_goal(1, in_tower((block,6),(block,4)), true, true)
final_goal(1, in_tower((block,6),(block,5)), false, false)
final_goal(1, in_tower((block,6),(block,5)), true, true)
final_goal(1, in_tower((block,6),(block,6)), false, false)
final_goal(1, in_tower((block,6),(block,6)), true, true)
final_goal(1, on((block,1)), (block,2), true)
final_goal(1, on((block,1)), (block,3), false)
final_goal(1, on((block,1)), (block,4), false)
final_goal(1, on((block,1)), (block,5), false)
final_goal(1, on((block,1)), (block,6), false)
final_goal(1, on((block,1)), nothing, false)
final_goal(1, on((block,1)), puzzle_room_table_left, false)
final_goal(1, on((block,1)), puzzle_room_table_right, false)
final_goal(1, on((block,2)), (block,1), false)
final_goal(1, on((block,2)), (block,3), true)
final_goal(1, on((block,2)), (block,4), false)
final_goal(1, on((block,2)), (block,5), false)
final_goal(1, on((block,2)), (block,6), false)
final_goal(1, on((block,2)), nothing, false)
final_goal(1, on((block,2)), puzzle_room_table_left, false)
final_goal(1, on((block,2)), puzzle_room_table_right, false)
final_goal(1, on((block,3)), (block,1), false)
final_goal(1, on((block,3)), (block,2), false)
final_goal(1, on((block,3)), (block,4), false)
final_goal(1, on((block,3)), (block,5), false)
final_goal(1, on((block,3)), (block,6), false)
final_goal(1, on((block,3)), nothing, false)
final_goal(1, on((block,3)), puzzle_room_table_left, true)
final_goal(1, on((block,3)), puzzle_room_table_right, false)
final_goal(1, on((block,4)), (block,1), false)
final_goal(1, on((block,4)), (block,2), false)
final_goal(1, on((block,4)), (block,3), false)
final_goal(1, on((block,4)), (block,5), true)
final_goal(1, on((block,4)), (block,6), false)
final_goal(1, on((block,4)), nothing, false)
final_goal(1, on((block,4)), puzzle_room_table_left, false)
final_goal(1, on((block,4)), puzzle_room_table_right, false)
final_goal(1, on((block,5)), (block,1), false)
final_goal(1, on((block,5)), (block,2), false)
final_goal(1, on((block,5)), (block,3), false)
final_goal(1, on((block,5)), (block,4), false)
final_goal(1, on((block,5)), (block,6), true)
final_goal(1, on((block,5)), nothing, false)
final_goal(1, on((block,5)), puzzle_room_table_left, false)
final_goal(1, on((block,5)), puzzle_room_table_right, false)
final_goal(1, on((block,6)), (block,1), false)
final_goal(1, on((block,6)), (block,2), false)
final_goal(1, on((block,6)), (block,3), false)
final_goal(1, on((block,6)), (block,4), false)
final_goal(1, on((block,6)), (block,5), false)
final_goal(1, on((block,6)), nothing, false)
final_goal(1, on((block,6)), puzzle_room_table_left, false)
final_goal(1, on((block,6)), puzzle_room_table_right, true)
final_goal(1, tower_base((block,1),puzzle_room_table), false, true)
final_goal(1, tower_base((block,1),puzzle_room_table), true, false)
final_goal(1, tower_base((block,2),puzzle_room_table), false, true)
final_goal(1, tower_base((block,2),puzzle_room_table), true, false)
final_goal(1, tower_base((block,3),puzzle_room_table), false, false)
final_goal(1, tower_base((block,3),puzzle_room_table), true, true)
final_goal(1, tower_base((block,4),puzzle_room_table), false, true)
final_goal(1, tower_base((block,4),puzzle_room_table), true, false)
final_goal(1, tower_base((block,5),puzzle_room_table), false, true)
final_goal(1, tower_base((block,5),puzzle_room_table), true, false)
final_goal(1, tower_base((block,6),puzzle_room_table), false, false)
final_goal(1, tower_base((block,6),puzzle_room_table), true, true)
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false)

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     49 : Current =     50
Incrementor step ends | Minimum  =     50 : Maximum =    200

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(50)]), ('state_module', [Number(50), Number(48)]), ('plan_module', [Number(50), Number(48), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(50), Number(48), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(50)]), ('action_preconditions', [Number(50)]), ('variable_relations', [Number(50)]), ('abstraction_mappings', [Number(50)]), ('conformance_module', [Number(50), Number(48), Number(22), Number(23), Function('sequential', [], True), Function('true', [], True)])]

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.133545s.

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 50: original = External(symbol='current_last_sgoals(23, 49)', truth=True, inc_range=None), conversion = current_last_sgoals(23,49).

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 50: original = External(symbol='seq_achieve_fgoals(49)', truth=True, inc_range=IncRange(start=None, end=None, step=1)), conversion = seq_achieve_fgoals(49).

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007803s with result Satisfiable.

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1413478000000623, Incremental time limit = None
Running cumulative time = 0.4042277000000922, Cumulative time limit = 1800
Used memory = (RSS = 735.523438Mb, VMS = 725.660156Mb), Total system virtual memory = 16324.0078125Mb

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.382799s, Solving = 0.021429s, Total = 0.404228s, Memory = (RSS = 735.523438Mb, VMS = 725.660156Mb), Step range = [48-50]), Calls = 2
Final Model :: Total atoms = 4813, Cost = (2, 0, -1), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=49, end_step=50, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.38279880000004596, solving_time=0.02142890000004627, total_time=0.4042277000000922, memory=Memory(rss=735.5234375, vms=725.66015625), step_range=range(48, 51), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.13354530000003706, solving_time=0.007802500000025248, total_time=0.1413478000000623, memory=Memory(rss=735.5234375, vms=725.66015625), step_range=range(50, 51), clingo_stats={'problem': {'lp': {'atoms': 13922.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24673.0, 'bodies_tr': 24673.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 460.0, 'count_bodies_tr': 460.0, 'sccs': 38.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 485.0, 'rules': 39527.0, 'rules_normal': 38783.0, 'rules_choice': 738.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 39527.0, 'rules_tr_normal': 38783.0, 'rules_tr_choice': 738.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 27416.0, 'eqs_atom': 7638.0, 'eqs_body': 2347.0, 'eqs_other': 17431.0}, 'lpStep': {'atoms': 1741.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 9505.0, 'bodies_tr': 9505.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 6.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 60.0, 'rules': 12400.0, 'rules_normal': 12202.0, 'rules_choice': 195.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 12400.0, 'rules_tr_normal': 12202.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3148.0, 'eqs_atom': 522.0, 'eqs_body': 335.0, 'eqs_other': 2291.0}, 'generator': {'vars': 2215.0, 'vars_eliminated': 0.0, 'vars_frozen': 1579.0, 'constraints': 67.0, 'constraints_binary': 2025.0, 'constraints_ternary': 448.0, 'acyc_edges': 0.0, 'complexity': 2576.0}}, 'solving': {'solvers': {'choices': 456.0, 'conflicts': 10.0, 'conflicts_analyzed': 9.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 50.0, 'models': 1.0, 'models_level': 61.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 9.0, 'distributed_sum_lbd': 9.0, 'integrated': 45.0, 'lemmas': 54.0, 'lits_learnt': 54.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 45.0, 'integrated_jumps': 79.0, 'guiding_paths_lits': 78.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 9.0, 'lemmas_loop': 0.0, 'lemmas_other': 45.0, 'lits_conflict': 9.0, 'lits_loop': 0.0, 'lits_other': 45.0, 'jumps': {'jumps': 9.0, 'jumps_bounded': 9.0, 'levels': 277.0, 'levels_bounded': 121.0, 'max': 36.0, 'max_executed': 22.0, 'max_bounded': 14.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [2.0, 0.0, -1.0], 'lower': [2.0, 0.0, -1.0], 'concurrency': 6.0, 'winner': 1.0, 'times': {'total': 0.1420307159423828, 'cpu': 0.140625, 'solve': 0.0039997100830078125, 'unsat': 0.0039997100830078125, 'sat': 0.0}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.4450950622558594, 'cpu': 0.421875, 'solve': 0.015001296997070312, 'unsat': 0.006999969482421875, 'sat': 0.00099945068359375}, 'models': {'enumerated': 4.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 590.0, 'conflicts': 10.0, 'conflicts_analyzed': 9.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 50.0, 'models': 4.0, 'models_level': 113.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 9.0, 'distributed_sum_lbd': 9.0, 'integrated': 45.0, 'lemmas': 54.0, 'lits_learnt': 54.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 45.0, 'integrated_jumps': 79.0, 'guiding_paths_lits': 138.0, 'guiding_paths': 18.0, 'splits': 0.0, 'lemmas_conflict': 9.0, 'lemmas_loop': 0.0, 'lemmas_other': 45.0, 'lits_conflict': 9.0, 'lits_loop': 0.0, 'lits_other': 45.0, 'jumps': {'jumps': 9.0, 'jumps_bounded': 9.0, 'levels': 277.0, 'levels_bounded': 121.0, 'max': 36.0, 'max_executed': 22.0, 'max_bounded': 14.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{22: 49, 23: 50}

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 24 achieved :: Progression >> total requested sgoals = 2, current total achieved sgoals = 3 (150.00% solved)

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 23 was achieved successfully.

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.249254s, Solving = 0.013626s, Total = 0.262880s, Memory = (RSS = 735.523438Mb, VMS = 725.660156Mb), Step range = [48-49]
2 : Statistics :: Grounding = 0.133545s, Solving = 0.007803s, Total = 0.141348s, Memory = (RSS = 735.523438Mb, VMS = 725.660156Mb), Step range = [50-50]

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.404228s due to: External generator exit.

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[16-02-2022_21-58-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 5, 19: 6, 20: 7, 21: 7, 22: 7, 23: 8, 24: 8, 25: 9, 26: 9, 27: 10, 28: 11, 29: 11, 30: 12, 31: 12, 32: 12, 33: 13, 34: 14, 35: 14, 36: 14, 37: 14, 38: 15, 39: 16, 40: 16, 41: 17, 42: 18, 43: 18, 44: 19, 45: 20, 46: 20, 47: 21, 48: 21}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 16, 4: 17, 5: 18, 6: 19, 7: 22, 8: 24, 9: 26, 10: 27, 11: 29, 12: 32, 13: 33, 14: 37, 15: 38, 16: 40, 17: 41, 18: 43, 19: 44, 20: 46, 21: 48}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8, 19: 9, 20: 10, 21: 11, 22: 12, 23: 13}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18, 9: 19, 10: 20, 11: 21, 12: 22, 13: 23}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 4, 18: 5, 19: 6, 20: 7, 21: 7, 22: 7, 23: 8, 24: 8, 25: 9, 26: 9, 27: 10, 28: 11, 29: 11, 30: 12, 31: 12, 32: 12, 33: 13, 34: 14, 35: 14, 36: 14, 37: 14, 38: 15, 39: 16, 40: 16, 41: 17, 42: 18, 43: 18, 44: 19, 45: 20, 46: 20, 47: 21, 48: 21, 49: 22, 50: 23}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 16, 4: 17, 5: 18, 6: 19, 7: 22, 8: 24, 9: 26, 10: 27, 11: 29, 12: 32, 13: 33, 14: 37, 15: 38, 16: 40, 17: 41, 18: 43, 19: 44, 20: 46, 21: 48, 22: 49, 23: 50}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8, 19: 9, 20: 10, 21: 11, 22: 12, 23: 13}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18, 9: 19, 10: 20, 11: 21, 12: 22, 13: 23}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 23, Last requested goal index = 23, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.382799s, Solving = 0.021429s, Total = 0.404228s, Memory = (RSS = 735.523438Mb, VMS = 725.660156Mb), Step range = [48-50]), Calls = 2
Model :: Total atoms = 4813, Cost = (2, 0, -1), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 2 :: Actions = 2                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 4:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 10:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 11:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 12:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 16:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 18:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 19:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 20:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 21:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 22:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 23:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 24:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 25:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 26:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
        talos : grasp(manipulator_end_2,(block,5))
Step 27:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 28:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 29:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 30:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 31:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 32:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 33:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 34:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 35:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 36:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 37:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 38:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 39:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
        talos : configure(manipulator_limb_2,extended)
Step 40:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 41:
    Current Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 17] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 17] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
        talos : release(manipulator_end_2,(block,5))
Step 42:
    Current Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
        talos : release(manipulator_end_1,(block,3))
Step 43:
    Current Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 44:
    Current Sub-goals:
        [Index = 19] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 19] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_end_2,(block,4),(block,5))
Step 45:
    Current Sub-goals:
        [Index = 20] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 20] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 46:
    Current Sub-goals:
        [Index = 20] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 20] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 20] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 20] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
        talos : release(manipulator_end_2,(block,4))
Step 47:
    Current Sub-goals:
        [Index = 21] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 21] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,1)))
Step 48:
    Current Sub-goals:
        [Index = 21] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 21] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 21] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 21] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,1))
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 49:
    Current Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,2))
Step 50:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_end_2,(block,1),(block,2))

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Monolevel problem 12 at level 1 solved.

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Online planning increment 12 finished.

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=50, step_range=range(0, 51)

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 13, Total actions = 19, Produced sub-goal stages = 19
Level [2]: Length = 23, Total actions = 37, Produced sub-goal stages = 37
Level [1]: Length = 50, Total actions = 64, Produced sub-goal stages = 0

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=23, step_range=range(0, 24)

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 13, Total actions = 19, Produced sub-goal stages = 19
Level [2]: Length = 23, Total actions = 37, Produced sub-goal stages = 37
Level [1]: Length = 50, Total actions = 64, Produced sub-goal stages = 0

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=13, step_range=range(0, 14)

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 13, Total actions = 19, Produced sub-goal stages = 19
Level [2]: Length = 23, Total actions = 37, Produced sub-goal stages = 37
Level [1]: Length = 50, Total actions = 64, Produced sub-goal stages = 0

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Hierarchical plan generated successfully :: Ground Plan Quality >> Length = 50, Actions = 64

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Hierarchical planning summary: (Execution latency = 4.542838899999879, Average ground wait time = 1.3017596666668017, Absolution time = 15.202439000000936)

     ========================================================================================================================================================================================================     
     |        Lvl = 3 (classic), LE =  13, AC =  19, CF = 0.7, GT =   1.09s, ST =   0.12s, OT = 0.00s, TT =   1.21s, EF = (LE = 1.0, AC = 1.0), ED = (LE = 0.0, AC = 0.0), EB = (LE = 0.0, AC = 0.0)        |     
     |        Lvl = 2 (com-ref), LE =  23, AC =  37, CF = 0.6, GT =   2.77s, ST =   0.28s, OT = 0.01s, TT =   3.06s, EF = (LE = 1.8, AC = 1.9), ED = (LE = 1.7, AC = 3.1), EB = (LE = 1.0, AC = 1.3)        |     
     |        Lvl = 1 (com-ref), LE =  50, AC =  64, CF = 0.8, GT =   9.77s, ST =   1.15s, OT = 0.01s, TT =  10.93s, EF = (LE = 2.2, AC = 1.7), ED = (LE = 2.5, AC = 1.5), EB = (LE = 1.1, AC = 0.8)        |     
     ========================================================================================================================================================================================================     

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=50, step_range=range(0, 51)

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 13, Total actions = 19, Produced sub-goal stages = 19
Level [2]: Length = 23, Total actions = 37, Produced sub-goal stages = 37
Level [1]: Length = 50, Total actions = 64, Produced sub-goal stages = 0

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=23, step_range=range(0, 24)

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 13, Total actions = 19, Produced sub-goal stages = 19
Level [2]: Length = 23, Total actions = 37, Produced sub-goal stages = 37
Level [1]: Length = 50, Total actions = 64, Produced sub-goal stages = 0

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=13, step_range=range(0, 14)

[16-02-2022_21-58-55] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 13, Total actions = 19, Produced sub-goal stages = 19
Level [2]: Length = 23, Total actions = 37, Produced sub-goal stages = 37
Level [1]: Length = 50, Total actions = 64, Produced sub-goal stages = 0

[16-02-2022_21-58-55] DEBUG :: Experiment >> 

      ================================================      
           Experimental run 50 : Time 19.434254s            
      ================================================      

[16-02-2022_21-58-55] INFO :: Experiment >> 

  ################################################################################################  
         Completed 50 experimental runs : Real time 943.881502s, Proccess time 981.484375s          
  ################################################################################################  

[16-02-2022_21-58-55] DEBUG :: Experiment >> Refinement spread at run=0, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-55] DEBUG :: Experiment >> Refinement spread at run=0, level=1:
Root Mean Squared Errors: rmse_mchild=5.276118754494747, rmse_div_indices=2.195809918135264, rmse_div_steps=8.529235795067645
Mean Absolute Errors: mae_mchild=4.654064272211722, mae_div_indices=1.5897435897435899, mae_div_steps=7.025641025641024

[16-02-2022_21-58-55] DEBUG :: Experiment >> Refinement spread at run=1, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-55] DEBUG :: Experiment >> Refinement spread at run=1, level=1:
Root Mean Squared Errors: rmse_mchild=5.237100454643074, rmse_div_indices=2.195809918135264, rmse_div_steps=8.397445684081202
Mean Absolute Errors: mae_mchild=4.610586011342157, mae_div_indices=1.5897435897435899, mae_div_steps=6.948717948717947

[16-02-2022_21-58-55] DEBUG :: Experiment >> Refinement spread at run=2, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-55] DEBUG :: Experiment >> Refinement spread at run=2, level=1:
Root Mean Squared Errors: rmse_mchild=5.2608695652173925, rmse_div_indices=2.195809918135264, rmse_div_steps=8.514191270546661
Mean Absolute Errors: mae_mchild=4.610586011342157, mae_div_indices=1.5897435897435899, mae_div_steps=6.948717948717947

[16-02-2022_21-58-55] DEBUG :: Experiment >> Refinement spread at run=3, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-55] DEBUG :: Experiment >> Refinement spread at run=3, level=1:
Root Mean Squared Errors: rmse_mchild=5.309334790425653, rmse_div_indices=2.195809918135264, rmse_div_steps=8.514191270546661
Mean Absolute Errors: mae_mchild=4.654064272211722, mae_div_indices=1.5897435897435899, mae_div_steps=6.948717948717947

[16-02-2022_21-58-56] DEBUG :: Experiment >> Refinement spread at run=4, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-56] DEBUG :: Experiment >> Refinement spread at run=4, level=1:
Root Mean Squared Errors: rmse_mchild=4.914582290757537, rmse_div_indices=2.195809918135264, rmse_div_steps=7.854445091303885
Mean Absolute Errors: mae_mchild=4.240075614366731, mae_div_indices=1.5897435897435899, mae_div_steps=6.461538461538462

[16-02-2022_21-58-56] DEBUG :: Experiment >> Refinement spread at run=5, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-56] DEBUG :: Experiment >> Refinement spread at run=5, level=1:
Root Mean Squared Errors: rmse_mchild=5.276118754494747, rmse_div_indices=2.195809918135264, rmse_div_steps=8.529235795067645
Mean Absolute Errors: mae_mchild=4.654064272211722, mae_div_indices=1.5897435897435899, mae_div_steps=7.025641025641024

[16-02-2022_21-58-56] DEBUG :: Experiment >> Refinement spread at run=6, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-56] DEBUG :: Experiment >> Refinement spread at run=6, level=1:
Root Mean Squared Errors: rmse_mchild=4.868400481823344, rmse_div_indices=2.195809918135264, rmse_div_steps=7.854445091303885
Mean Absolute Errors: mae_mchild=4.1965973534971655, mae_div_indices=1.5897435897435899, mae_div_steps=6.461538461538462

[16-02-2022_21-58-56] DEBUG :: Experiment >> Refinement spread at run=7, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-56] DEBUG :: Experiment >> Refinement spread at run=7, level=1:
Root Mean Squared Errors: rmse_mchild=5.2608695652173925, rmse_div_indices=2.195809918135264, rmse_div_steps=8.514191270546661
Mean Absolute Errors: mae_mchild=4.610586011342157, mae_div_indices=1.5897435897435899, mae_div_steps=6.948717948717947

[16-02-2022_21-58-56] DEBUG :: Experiment >> Refinement spread at run=8, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-56] DEBUG :: Experiment >> Refinement spread at run=8, level=1:
Root Mean Squared Errors: rmse_mchild=4.8534282312055606, rmse_div_indices=2.195809918135264, rmse_div_steps=7.839740969033254
Mean Absolute Errors: mae_mchild=4.1531190926276, mae_div_indices=1.5897435897435899, mae_div_steps=6.384615384615385

[16-02-2022_21-58-56] DEBUG :: Experiment >> Refinement spread at run=9, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-56] DEBUG :: Experiment >> Refinement spread at run=9, level=1:
Root Mean Squared Errors: rmse_mchild=5.3818289805421555, rmse_div_indices=2.195809918135264, rmse_div_steps=8.529235795067645
Mean Absolute Errors: mae_mchild=4.741020793950852, mae_div_indices=1.5897435897435899, mae_div_steps=7.025641025641024

[16-02-2022_21-58-56] DEBUG :: Experiment >> Refinement spread at run=10, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-56] DEBUG :: Experiment >> Refinement spread at run=10, level=1:
Root Mean Squared Errors: rmse_mchild=5.237100454643074, rmse_div_indices=2.195809918135264, rmse_div_steps=8.397445684081202
Mean Absolute Errors: mae_mchild=4.610586011342157, mae_div_indices=1.5897435897435899, mae_div_steps=6.948717948717947

[16-02-2022_21-58-56] DEBUG :: Experiment >> Refinement spread at run=11, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-56] DEBUG :: Experiment >> Refinement spread at run=11, level=1:
Root Mean Squared Errors: rmse_mchild=5.276118754494747, rmse_div_indices=2.195809918135264, rmse_div_steps=8.529235795067645
Mean Absolute Errors: mae_mchild=4.654064272211722, mae_div_indices=1.5897435897435899, mae_div_steps=7.025641025641024

[16-02-2022_21-58-56] DEBUG :: Experiment >> Refinement spread at run=12, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-56] DEBUG :: Experiment >> Refinement spread at run=12, level=1:
Root Mean Squared Errors: rmse_mchild=4.868400481823344, rmse_div_indices=2.195809918135264, rmse_div_steps=7.854445091303885
Mean Absolute Errors: mae_mchild=4.1965973534971655, mae_div_indices=1.5897435897435899, mae_div_steps=6.461538461538462

[16-02-2022_21-58-56] DEBUG :: Experiment >> Refinement spread at run=13, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-56] DEBUG :: Experiment >> Refinement spread at run=13, level=1:
Root Mean Squared Errors: rmse_mchild=5.276118754494747, rmse_div_indices=2.195809918135264, rmse_div_steps=8.529235795067645
Mean Absolute Errors: mae_mchild=4.654064272211722, mae_div_indices=1.5897435897435899, mae_div_steps=7.025641025641024

[16-02-2022_21-58-56] DEBUG :: Experiment >> Refinement spread at run=14, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-56] DEBUG :: Experiment >> Refinement spread at run=14, level=1:
Root Mean Squared Errors: rmse_mchild=5.309334790425653, rmse_div_indices=2.195809918135264, rmse_div_steps=8.514191270546661
Mean Absolute Errors: mae_mchild=4.654064272211722, mae_div_indices=1.5897435897435899, mae_div_steps=6.948717948717947

[16-02-2022_21-58-56] DEBUG :: Experiment >> Refinement spread at run=15, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-56] DEBUG :: Experiment >> Refinement spread at run=15, level=1:
Root Mean Squared Errors: rmse_mchild=5.3818289805421555, rmse_div_indices=2.195809918135264, rmse_div_steps=8.529235795067645
Mean Absolute Errors: mae_mchild=4.741020793950852, mae_div_indices=1.5897435897435899, mae_div_steps=7.025641025641024

[16-02-2022_21-58-56] DEBUG :: Experiment >> Refinement spread at run=16, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-56] DEBUG :: Experiment >> Refinement spread at run=16, level=1:
Root Mean Squared Errors: rmse_mchild=4.899751160688976, rmse_div_indices=2.195809918135264, rmse_div_steps=7.839740969033254
Mean Absolute Errors: mae_mchild=4.1965973534971655, mae_div_indices=1.5897435897435899, mae_div_steps=6.384615384615385

[16-02-2022_21-58-56] DEBUG :: Experiment >> Refinement spread at run=17, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-56] DEBUG :: Experiment >> Refinement spread at run=17, level=1:
Root Mean Squared Errors: rmse_mchild=4.831567589159862, rmse_div_indices=2.195809918135264, rmse_div_steps=7.721099961494128
Mean Absolute Errors: mae_mchild=4.1531190926276, mae_div_indices=1.5897435897435899, mae_div_steps=6.384615384615385

[16-02-2022_21-58-56] DEBUG :: Experiment >> Refinement spread at run=18, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-56] DEBUG :: Experiment >> Refinement spread at run=18, level=1:
Root Mean Squared Errors: rmse_mchild=5.324445177304841, rmse_div_indices=2.195809918135264, rmse_div_steps=8.529235795067645
Mean Absolute Errors: mae_mchild=4.697542533081287, mae_div_indices=1.5897435897435899, mae_div_steps=7.025641025641024

[16-02-2022_21-58-56] DEBUG :: Experiment >> Refinement spread at run=19, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-56] DEBUG :: Experiment >> Refinement spread at run=19, level=1:
Root Mean Squared Errors: rmse_mchild=4.899751160688976, rmse_div_indices=2.195809918135264, rmse_div_steps=7.839740969033254
Mean Absolute Errors: mae_mchild=4.1965973534971655, mae_div_indices=1.5897435897435899, mae_div_steps=6.384615384615385

[16-02-2022_21-58-56] DEBUG :: Experiment >> Refinement spread at run=20, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-56] DEBUG :: Experiment >> Refinement spread at run=20, level=1:
Root Mean Squared Errors: rmse_mchild=4.899751160688976, rmse_div_indices=2.195809918135264, rmse_div_steps=7.839740969033254
Mean Absolute Errors: mae_mchild=4.1965973534971655, mae_div_indices=1.5897435897435899, mae_div_steps=6.384615384615385

[16-02-2022_21-58-57] DEBUG :: Experiment >> Refinement spread at run=21, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-57] DEBUG :: Experiment >> Refinement spread at run=21, level=1:
Root Mean Squared Errors: rmse_mchild=4.8534282312055606, rmse_div_indices=2.195809918135264, rmse_div_steps=7.839740969033254
Mean Absolute Errors: mae_mchild=4.1531190926276, mae_div_indices=1.5897435897435899, mae_div_steps=6.384615384615385

[16-02-2022_21-58-57] DEBUG :: Experiment >> Refinement spread at run=22, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-57] DEBUG :: Experiment >> Refinement spread at run=22, level=1:
Root Mean Squared Errors: rmse_mchild=4.899751160688976, rmse_div_indices=2.195809918135264, rmse_div_steps=7.839740969033254
Mean Absolute Errors: mae_mchild=4.1965973534971655, mae_div_indices=1.5897435897435899, mae_div_steps=6.384615384615385

[16-02-2022_21-58-57] DEBUG :: Experiment >> Refinement spread at run=23, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-57] DEBUG :: Experiment >> Refinement spread at run=23, level=1:
Root Mean Squared Errors: rmse_mchild=4.914582290757537, rmse_div_indices=2.195809918135264, rmse_div_steps=7.854445091303885
Mean Absolute Errors: mae_mchild=4.240075614366731, mae_div_indices=1.5897435897435899, mae_div_steps=6.461538461538462

[16-02-2022_21-58-57] DEBUG :: Experiment >> Refinement spread at run=24, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-57] DEBUG :: Experiment >> Refinement spread at run=24, level=1:
Root Mean Squared Errors: rmse_mchild=4.8534282312055606, rmse_div_indices=2.195809918135264, rmse_div_steps=7.839740969033254
Mean Absolute Errors: mae_mchild=4.1531190926276, mae_div_indices=1.5897435897435899, mae_div_steps=6.384615384615385

[16-02-2022_21-58-57] DEBUG :: Experiment >> Refinement spread at run=25, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-57] DEBUG :: Experiment >> Refinement spread at run=25, level=1:
Root Mean Squared Errors: rmse_mchild=4.899751160688976, rmse_div_indices=2.195809918135264, rmse_div_steps=7.839740969033254
Mean Absolute Errors: mae_mchild=4.1965973534971655, mae_div_indices=1.5897435897435899, mae_div_steps=6.384615384615385

[16-02-2022_21-58-57] DEBUG :: Experiment >> Refinement spread at run=26, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-57] DEBUG :: Experiment >> Refinement spread at run=26, level=1:
Root Mean Squared Errors: rmse_mchild=5.276118754494747, rmse_div_indices=2.195809918135264, rmse_div_steps=8.529235795067645
Mean Absolute Errors: mae_mchild=4.654064272211722, mae_div_indices=1.5897435897435899, mae_div_steps=7.025641025641024

[16-02-2022_21-58-57] DEBUG :: Experiment >> Refinement spread at run=27, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-57] DEBUG :: Experiment >> Refinement spread at run=27, level=1:
Root Mean Squared Errors: rmse_mchild=5.2608695652173925, rmse_div_indices=2.195809918135264, rmse_div_steps=8.514191270546661
Mean Absolute Errors: mae_mchild=4.610586011342157, mae_div_indices=1.5897435897435899, mae_div_steps=6.948717948717947

[16-02-2022_21-58-57] DEBUG :: Experiment >> Refinement spread at run=28, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-57] DEBUG :: Experiment >> Refinement spread at run=28, level=1:
Root Mean Squared Errors: rmse_mchild=5.2608695652173925, rmse_div_indices=2.195809918135264, rmse_div_steps=8.514191270546661
Mean Absolute Errors: mae_mchild=4.610586011342157, mae_div_indices=1.5897435897435899, mae_div_steps=6.948717948717947

[16-02-2022_21-58-57] DEBUG :: Experiment >> Refinement spread at run=29, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-57] DEBUG :: Experiment >> Refinement spread at run=29, level=1:
Root Mean Squared Errors: rmse_mchild=5.276118754494747, rmse_div_indices=2.195809918135264, rmse_div_steps=8.529235795067645
Mean Absolute Errors: mae_mchild=4.654064272211722, mae_div_indices=1.5897435897435899, mae_div_steps=7.025641025641024

[16-02-2022_21-58-57] DEBUG :: Experiment >> Refinement spread at run=30, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-57] DEBUG :: Experiment >> Refinement spread at run=30, level=1:
Root Mean Squared Errors: rmse_mchild=4.868400481823344, rmse_div_indices=2.195809918135264, rmse_div_steps=7.854445091303885
Mean Absolute Errors: mae_mchild=4.1965973534971655, mae_div_indices=1.5897435897435899, mae_div_steps=6.461538461538462

[16-02-2022_21-58-57] DEBUG :: Experiment >> Refinement spread at run=31, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-57] DEBUG :: Experiment >> Refinement spread at run=31, level=1:
Root Mean Squared Errors: rmse_mchild=5.221737320348672, rmse_div_indices=2.195809918135264, rmse_div_steps=8.382164622618893
Mean Absolute Errors: mae_mchild=4.567107750472592, mae_div_indices=1.5897435897435899, mae_div_steps=6.8717948717948705

[16-02-2022_21-58-57] DEBUG :: Experiment >> Refinement spread at run=32, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-57] DEBUG :: Experiment >> Refinement spread at run=32, level=1:
Root Mean Squared Errors: rmse_mchild=4.868400481823344, rmse_div_indices=2.195809918135264, rmse_div_steps=7.854445091303885
Mean Absolute Errors: mae_mchild=4.1965973534971655, mae_div_indices=1.5897435897435899, mae_div_steps=6.461538461538462

[16-02-2022_21-58-57] DEBUG :: Experiment >> Refinement spread at run=33, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-57] DEBUG :: Experiment >> Refinement spread at run=33, level=1:
Root Mean Squared Errors: rmse_mchild=4.81648084317434, rmse_div_indices=2.195809918135264, rmse_div_steps=7.706141406995812
Mean Absolute Errors: mae_mchild=4.1096408317580355, mae_div_indices=1.5897435897435899, mae_div_steps=6.3076923076923075

[16-02-2022_21-58-57] DEBUG :: Experiment >> Refinement spread at run=34, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-57] DEBUG :: Experiment >> Refinement spread at run=34, level=1:
Root Mean Squared Errors: rmse_mchild=5.276118754494747, rmse_div_indices=2.195809918135264, rmse_div_steps=8.529235795067645
Mean Absolute Errors: mae_mchild=4.654064272211722, mae_div_indices=1.5897435897435899, mae_div_steps=7.025641025641024

[16-02-2022_21-58-57] DEBUG :: Experiment >> Refinement spread at run=35, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-57] DEBUG :: Experiment >> Refinement spread at run=35, level=1:
Root Mean Squared Errors: rmse_mchild=4.868400481823344, rmse_div_indices=2.195809918135264, rmse_div_steps=7.854445091303885
Mean Absolute Errors: mae_mchild=4.1965973534971655, mae_div_indices=1.5897435897435899, mae_div_steps=6.461538461538462

[16-02-2022_21-58-57] DEBUG :: Experiment >> Refinement spread at run=36, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-57] DEBUG :: Experiment >> Refinement spread at run=36, level=1:
Root Mean Squared Errors: rmse_mchild=5.221737320348672, rmse_div_indices=2.195809918135264, rmse_div_steps=8.382164622618893
Mean Absolute Errors: mae_mchild=4.567107750472592, mae_div_indices=1.5897435897435899, mae_div_steps=6.8717948717948705

[16-02-2022_21-58-57] DEBUG :: Experiment >> Refinement spread at run=37, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-57] DEBUG :: Experiment >> Refinement spread at run=37, level=1:
Root Mean Squared Errors: rmse_mchild=5.2608695652173925, rmse_div_indices=2.195809918135264, rmse_div_steps=8.514191270546661
Mean Absolute Errors: mae_mchild=4.610586011342157, mae_div_indices=1.5897435897435899, mae_div_steps=6.948717948717947

[16-02-2022_21-58-58] DEBUG :: Experiment >> Refinement spread at run=38, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-58] DEBUG :: Experiment >> Refinement spread at run=38, level=1:
Root Mean Squared Errors: rmse_mchild=4.8534282312055606, rmse_div_indices=2.195809918135264, rmse_div_steps=7.839740969033254
Mean Absolute Errors: mae_mchild=4.1531190926276, mae_div_indices=1.5897435897435899, mae_div_steps=6.384615384615385

[16-02-2022_21-58-58] DEBUG :: Experiment >> Refinement spread at run=39, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-58] DEBUG :: Experiment >> Refinement spread at run=39, level=1:
Root Mean Squared Errors: rmse_mchild=5.366880159506345, rmse_div_indices=2.195809918135264, rmse_div_steps=8.514191270546661
Mean Absolute Errors: mae_mchild=4.697542533081287, mae_div_indices=1.5897435897435899, mae_div_steps=6.948717948717947

[16-02-2022_21-58-58] DEBUG :: Experiment >> Refinement spread at run=40, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-58] DEBUG :: Experiment >> Refinement spread at run=40, level=1:
Root Mean Squared Errors: rmse_mchild=5.366880159506345, rmse_div_indices=2.195809918135264, rmse_div_steps=8.514191270546661
Mean Absolute Errors: mae_mchild=4.697542533081287, mae_div_indices=1.5897435897435899, mae_div_steps=6.948717948717947

[16-02-2022_21-58-58] DEBUG :: Experiment >> Refinement spread at run=41, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-58] DEBUG :: Experiment >> Refinement spread at run=41, level=1:
Root Mean Squared Errors: rmse_mchild=5.2608695652173925, rmse_div_indices=2.195809918135264, rmse_div_steps=8.514191270546661
Mean Absolute Errors: mae_mchild=4.610586011342157, mae_div_indices=1.5897435897435899, mae_div_steps=6.948717948717947

[16-02-2022_21-58-58] DEBUG :: Experiment >> Refinement spread at run=42, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-58] DEBUG :: Experiment >> Refinement spread at run=42, level=1:
Root Mean Squared Errors: rmse_mchild=5.276118754494747, rmse_div_indices=2.195809918135264, rmse_div_steps=8.529235795067645
Mean Absolute Errors: mae_mchild=4.654064272211722, mae_div_indices=1.5897435897435899, mae_div_steps=7.025641025641024

[16-02-2022_21-58-58] DEBUG :: Experiment >> Refinement spread at run=43, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-58] DEBUG :: Experiment >> Refinement spread at run=43, level=1:
Root Mean Squared Errors: rmse_mchild=5.276118754494747, rmse_div_indices=2.195809918135264, rmse_div_steps=8.529235795067645
Mean Absolute Errors: mae_mchild=4.654064272211722, mae_div_indices=1.5897435897435899, mae_div_steps=7.025641025641024

[16-02-2022_21-58-58] DEBUG :: Experiment >> Refinement spread at run=44, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-58] DEBUG :: Experiment >> Refinement spread at run=44, level=1:
Root Mean Squared Errors: rmse_mchild=5.221737320348672, rmse_div_indices=2.195809918135264, rmse_div_steps=8.382164622618893
Mean Absolute Errors: mae_mchild=4.567107750472592, mae_div_indices=1.5897435897435899, mae_div_steps=6.8717948717948705

[16-02-2022_21-58-58] DEBUG :: Experiment >> Refinement spread at run=45, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-58] DEBUG :: Experiment >> Refinement spread at run=45, level=1:
Root Mean Squared Errors: rmse_mchild=4.868400481823344, rmse_div_indices=2.195809918135264, rmse_div_steps=7.854445091303885
Mean Absolute Errors: mae_mchild=4.1965973534971655, mae_div_indices=1.5897435897435899, mae_div_steps=6.461538461538462

[16-02-2022_21-58-58] DEBUG :: Experiment >> Refinement spread at run=46, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-58] DEBUG :: Experiment >> Refinement spread at run=46, level=1:
Root Mean Squared Errors: rmse_mchild=4.8534282312055606, rmse_div_indices=2.195809918135264, rmse_div_steps=7.839740969033254
Mean Absolute Errors: mae_mchild=4.1531190926276, mae_div_indices=1.5897435897435899, mae_div_steps=6.384615384615385

[16-02-2022_21-58-58] DEBUG :: Experiment >> Refinement spread at run=47, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-58] DEBUG :: Experiment >> Refinement spread at run=47, level=1:
Root Mean Squared Errors: rmse_mchild=4.8534282312055606, rmse_div_indices=2.195809918135264, rmse_div_steps=7.839740969033254
Mean Absolute Errors: mae_mchild=4.1531190926276, mae_div_indices=1.5897435897435899, mae_div_steps=6.384615384615385

[16-02-2022_21-58-58] DEBUG :: Experiment >> Refinement spread at run=48, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-58] DEBUG :: Experiment >> Refinement spread at run=48, level=1:
Root Mean Squared Errors: rmse_mchild=4.914582290757537, rmse_div_indices=2.195809918135264, rmse_div_steps=7.854445091303885
Mean Absolute Errors: mae_mchild=4.240075614366731, mae_div_indices=1.5897435897435899, mae_div_steps=6.461538461538462

[16-02-2022_21-58-58] DEBUG :: Experiment >> Refinement spread at run=49, level=2:
Root Mean Squared Errors: rmse_mchild=4.5625177311805905, rmse_div_indices=0.28867513459481287, rmse_div_steps=2.598076211353316
Mean Absolute Errors: mae_mchild=4.0, mae_div_indices=0.16666666666666666, mae_div_steps=1.5

[16-02-2022_21-58-58] DEBUG :: Experiment >> Refinement spread at run=49, level=1:
Root Mean Squared Errors: rmse_mchild=5.276118754494747, rmse_div_indices=2.195809918135264, rmse_div_steps=8.529235795067645
Mean Absolute Errors: mae_mchild=4.654064272211722, mae_div_indices=1.5897435897435899, mae_div_steps=7.025641025641024

[16-02-2022_21-58-58] INFO :: Experiment >> 

          ========================================          
                    Experimental Results                    
          ========================================          

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
                     Concatenated Plans                     

 RU  AL  LE  AC       CF       GT       ST       OT        TT       LT        CT       WT        RSS        VMS  QL_SCORE  LT_SCORE  CT_SCORE  AW_SCORE  AME_SCORE  LT_GRADE  CT_GRADE  AW_GRADE  AME_GRADE    GRADE
  0   3  13  19 0.684211 1.094306 0.155581 0.000000  1.249886 1.249886  1.249886 1.249886 199.703125 188.058594  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
  0   2  23  37 0.621622 2.742416 0.388028 0.009691  3.140135 3.455627  4.390021 2.209589 220.867188 210.730469  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
  0   1  50  62 0.806452 9.570094 0.669458 0.010130 10.249682 4.063868 14.639703 1.254193 227.308594 216.351562  0.854839       1.0  0.684533       1.0        1.0  0.854839  0.585166  0.854839   0.854839 0.854839
  1   3  13  19 0.684211 1.093685 0.162977 0.000000  1.256662 1.256662  1.256662 1.256662 207.753906 197.156250  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
  1   2  23  37 0.621622 2.748445 0.332639 0.010385  3.091469 3.466897  4.348131 2.188640 223.031250 212.445312  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
  1   1  50  62 0.806452 9.488058 0.681243 0.010267 10.179568 4.071478 14.527699 1.244421 231.132812 219.699219  0.854839       1.0  0.685945       1.0        1.0  0.854839  0.586373  0.854839   0.854839 0.854839
  2   3  13  19 0.684211 1.093850 0.164310 0.000000  1.258160 1.258160  1.258160 1.258160 218.035156 206.562500  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
  2   2  23  37 0.621622 2.733091 0.352542 0.010504  3.096137 3.472160  4.354297 2.191336 235.074219 224.597656  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
  2   1  50  62 0.806452 9.615993 0.763546 0.010485 10.390024 4.079365 14.744321 1.262404 239.265625 227.863281  0.854839       1.0  0.683228       1.0        1.0  0.854839  0.584050  0.854839   0.854839 0.854839
  3   3  13  19 0.684211 1.095270 0.173171 0.000000  1.268441 1.268441  1.268441 1.268441 232.937500 220.968750  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
  3   2  23  37 0.621622 2.752748 0.451939 0.010236  3.214923 3.521724  4.483364 2.255974 248.921875 238.207031  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
  3   1  50  62 0.806452 9.580038 0.717122 0.010985 10.308145 4.125311 14.791509 1.266448 249.507812 237.886719  0.854839       1.0  0.682643       1.0        1.0  0.854839  0.583550  0.854839   0.854839 0.854839
  4   3  13  19 0.684211 1.092308 0.195417 0.000000  1.287725 1.287725  1.287725 1.287725 246.015625 233.746094  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
  4   2  23  37 0.621622 2.751512 0.381894 0.009962  3.143368 3.549321  4.431093 2.229678 260.398438 249.351562  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
  4   1  48  60 0.800000 9.207554 0.666826 0.010557  9.884937 4.152110 14.316030 1.226905 261.226562 249.488281  0.883333       1.0  0.688655       1.0        1.0  0.883333  0.608312  0.883333   0.883333 0.883333
  5   3  13  19 0.684211 1.093647 0.202208 0.000000  1.295855 1.295855  1.295855 1.295855 253.718750 241.289062  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
  5   2  23  37 0.621622 2.750494 0.386930 0.010378  3.147803 3.557944  4.443658 2.235989 269.050781 258.148438  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
  5   1  50  62 0.806452 9.596583 0.781592 0.010552 10.388727 4.164476 14.832386 1.269929 271.214844 259.171875  0.854839       1.0  0.682139       1.0        1.0  0.854839  0.583119  0.854839   0.854839 0.854839
  6   3  13  19 0.684211 1.094111 0.122287 0.000000  1.216398 1.216398  1.216398 1.216398 267.359375 254.968750  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
  6   2  23  37 0.621622 2.744190 0.597221 0.009579  3.350990 3.584658  4.567389 2.298215 282.417969 272.160156  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
  6   1  48  60 0.800000 9.226248 0.777120 0.011029 10.014396 4.189375 14.581784 1.248976 282.503906 270.976562  0.883333       1.0  0.685262       1.0        1.0  0.883333  0.605315  0.883333   0.883333 0.883333
  7   3  13  19 0.684211 1.094094 0.110327 0.000000  1.204422 1.204422  1.204422 1.204422 277.906250 265.652344  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
  7   2  23  37 0.621622 2.744452 0.523797 0.010411  3.278659 3.483674  4.483081 2.255700 293.652344 283.062500  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
  7   1  50  62 0.806452 9.579758 0.716812 0.010714 10.307285 4.090103 14.790366 1.266452 296.675781 285.199219  0.854839       1.0  0.682658       1.0        1.0  0.854839  0.583562  0.854839   0.854839 0.854839
  8   3  13  19 0.684211 1.096931 0.111746 0.000000  1.208677 1.208677  1.208677 1.208677 287.753906 275.871094  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
  8   2  23  37 0.621622 2.748269 0.445801 0.010461  3.204530 3.532242  4.413207 2.220747 308.441406 298.039062  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
  8   1  48  60 0.800000 9.227981 0.703060 0.010551  9.941591 4.139828 14.354798 1.230302 305.695312 294.265625  0.883333       1.0  0.688155       1.0        1.0  0.883333  0.607870  0.883333   0.883333 0.883333
  9   3  13  19 0.684211 1.095010 0.246966 0.000000  1.341976 1.341976  1.341976 1.341976 300.089844 287.992188  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
  9   2  23  37 0.621622 2.743694 0.441021 0.010332  3.195047 3.657067  4.537024 2.282905 319.582031 308.988281  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
  9   1  50  62 0.806452 9.568766 0.890071 0.010870 10.469706 4.258633 15.006730 1.284544 316.964844 305.925781  0.854839       1.0  0.680009       1.0        1.0  0.854839  0.581298  0.854839   0.854839 0.854839
 10   3  13  19 0.684211 1.093962 0.253010 0.000000  1.346972 1.346972  1.346972 1.346972 312.589844 300.492188  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 10   2  23  37 0.621622 2.747992 0.280862 0.009972  3.038825 3.505396  4.385797 2.207310 328.757812 318.187500  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 10   1  50  62 0.806452 9.499632 0.726297 0.010667 10.236596 4.109254 14.622393 1.252529 328.007812 317.097656  0.854839       1.0  0.684751       1.0        1.0  0.854839  0.585351  0.854839   0.854839 0.854839
 11   3  13  19 0.684211 1.098254 0.135125 0.000000  1.233378 1.233378  1.233378 1.233378 323.402344 312.097656  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 11   2  23  37 0.621622 2.751026 0.622994 0.010207  3.384227 3.575181  4.617606 2.322912 339.320312 328.523438  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 11   1  50  64 0.781250 9.596585 0.762366 0.010244 10.369195 4.183614 14.986801 1.282877 339.683594 328.367188  0.828125       1.0  0.680251       1.0        1.0  0.828125  0.563333  0.828125   0.828125 0.828125
 12   3  13  19 0.684211 1.093992 0.114441 0.000000  1.208434 1.208434  1.208434 1.208434 332.433594 320.617188  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 12   2  23  37 0.621622 2.756482 0.437905 0.010028  3.204415 3.356796  4.412848 2.220572 346.683594 336.675781  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 12   1  48  60 0.800000 9.220451 0.744168 0.011080  9.975699 3.964235 14.388548 1.233000 348.992188 337.730469  0.883333       1.0  0.687721       1.0        1.0  0.883333  0.607486  0.883333   0.883333 0.883333
 13   3  13  19 0.684211 1.097977 0.124956 0.000000  1.222933 1.222933  1.222933 1.222933 346.195312 334.355469  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 13   2  23  37 0.621622 2.756844 0.294537 0.010490  3.061871 3.399745  4.284804 2.156776 363.699219 353.367188  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 13   1  50  62 0.806452 9.575477 0.952786 0.010320 10.538583 4.001901 14.823387 1.269163 360.476562 349.332031  0.854839       1.0  0.682250       1.0        1.0  0.854839  0.583214  0.854839   0.854839 0.854839
 14   3  13  19 0.684211 1.097411 0.302946 0.000000  1.400357 1.400357  1.400357 1.400357 354.160156 342.164062  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 14   2  23  37 0.621622 2.725624 0.300125 0.010209  3.035958 3.551775  4.436315 2.232254 373.789062 363.636719  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 14   1  50  62 0.806452 9.580237 0.981605 0.010399 10.572241 4.158413 15.008556 1.284405 371.187500 359.578125  0.854839       1.0  0.679987       1.0        1.0  0.854839  0.581279  0.854839   0.854839 0.854839
 15   3  13  19 0.684211 1.094054 0.116814 0.000000  1.210868 1.210868  1.210868 1.210868 362.937500 351.226562  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 15   2  23  37 0.621622 2.743934 0.463791 0.010293  3.218018 3.550229  4.428886 2.228570 378.699219 368.570312  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 15   1  50  62 0.806452 9.574291 0.770451 0.010901 10.355642 4.155752 14.784528 1.265961 379.550781 368.359375  0.854839       1.0  0.682730       1.0        1.0  0.854839  0.583624  0.854839   0.854839 0.854839
 16   3  13  19 0.684211 1.093095 0.322677 0.000000  1.415772 1.415772  1.415772 1.415772 375.781250 364.105469  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 16   2  23  37 0.621622 2.737667 0.287762 0.009895  3.035325 3.567412  4.451097 2.239736 394.992188 384.761719  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 16   1  48  60 0.800000 9.200605 0.992531 0.010660 10.203796 4.173607 14.654893 1.255181 394.320312 383.296875  0.883333       1.0  0.684343       1.0        1.0  0.883333  0.604503  0.883333   0.883333 0.883333
 17   3  13  19 0.684211 1.093901 0.116972 0.000000  1.210873 1.210873  1.210873 1.210873 387.421875 375.648438  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 17   2  23  37 0.621622 2.735757 0.498452 0.010125  3.244334 3.346180  4.455207 2.242061 402.960938 392.960938  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 17   1  48  60 0.800000 9.116770 0.762811 0.010195  9.889775 4.171909 14.344982 1.229391 403.230469 391.996094  0.883333       1.0  0.688281       1.0        1.0  0.883333  0.607982  0.883333   0.883333 0.883333
 18   3  13  19 0.684211 1.094392 0.109814 0.000000  1.204206 1.204206  1.204206 1.204206 398.113281 386.269531  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 18   2  23  37 0.621622 2.758768 0.555372 0.010233  3.324373 3.639725  4.528579 2.278488 417.707031 407.207031  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 18   1  50  62 0.806452 9.586243 0.832614 0.010897 10.429754 4.245399 14.958333 1.299794 414.628906 403.257812  0.854839       1.0  0.680597       1.0        1.0  0.854839  0.581800  0.854839   0.854839 0.854839
 19   3  13  19 0.684211 1.091346 0.115119 0.000000  1.206465 1.206465  1.206465 1.206465 404.761719 393.375000  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 19   2  23  37 0.621622 2.740696 0.538957 0.010019  3.289673 3.361416  4.496138 2.262268 426.312500 416.718750  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 19   1  48  60 0.800000 9.204105 0.851812 0.010502 10.066419 3.963523 14.562557 1.247735 429.359375 418.101562  0.883333       1.0  0.685504       1.0        1.0  0.883333  0.605529  0.883333   0.883333 0.883333
 20   3  13  19 0.684211 1.093433 0.122159 0.000000  1.215592 1.215592  1.215592 1.215592 421.855469 410.097656  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 20   2  23  37 0.621622 2.741632 0.557990 0.010004  3.309627 3.648396  4.525219 2.276957 438.644531 428.679688  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 20   1  48  60 0.800000 9.214340 0.817822 0.011028 10.043190 4.252650 14.568408 1.247803 437.558594 426.132812  0.883333       1.0  0.685430       1.0        1.0  0.883333  0.605464  0.883333   0.883333 0.883333
 21   3  13  19 0.684211 1.092852 0.114120 0.000000  1.206973 1.206973  1.206973 1.206973 431.511719 419.898438  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 21   2  23  37 0.621622 2.738614 0.255791 0.009631  3.004036 3.332359  4.211008 2.119605 444.699219 434.484375  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 21   1  48  60 0.800000 9.201336 0.543060 0.009679  9.754075 3.935874 13.965083 1.219986 448.078125 436.921875  0.883333       1.0  0.693273       1.0        1.0  0.883333  0.612391  0.883333   0.883333 0.883333
 22   3  13  19 0.684211 1.092521 0.384384 0.000000  1.476906 1.476906  1.476906 1.476906 443.722656 432.179688  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 22   2  23  37 0.621622 2.744769 0.296122 0.010372  3.051263 3.647098  4.528169 2.278216 459.753906 450.015625  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 22   1  48  60 0.800000 9.207032 0.853332 0.010481 10.070845 4.252968 14.599013 1.250563 459.699219 448.726562  0.883333       1.0  0.685045       1.0        1.0  0.883333  0.605123  0.883333   0.883333 0.883333
 23   3  13  19 0.684211 1.092229 0.413901 0.000000  1.506130 1.506130  1.506130 1.506130 453.191406 441.527344  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 23   2  23  37 0.621622 2.734790 0.266320 0.009929  3.011039 3.636307  4.517170 2.272905 466.167969 455.968750  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 23   1  48  60 0.800000 9.215016 0.861482 0.011275 10.087773 4.242422 14.604942 1.251072 470.195312 459.113281  0.883333       1.0  0.684970       1.0        1.0  0.883333  0.605057  0.883333   0.883333 0.883333
 24   3  13  19 0.684211 1.093319 0.111200 0.000000  1.204519 1.204519  1.204519 1.204519 463.160156 451.648438  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 24   2  23  37 0.621622 2.724303 0.883592 0.010368  3.618262 3.637684  4.822782 2.425475 478.949219 469.312500  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 24   1  48  60 0.800000 9.202856 0.549237 0.010822  9.762915 4.240190 14.585697 1.249543 480.617188 469.449219  0.883333       1.0  0.685212       1.0        1.0  0.883333  0.605271  0.883333   0.883333 0.883333
 25   3  13  19 0.684211 1.106436 0.117406 0.000000  1.223842 1.223842  1.223842 1.223842 474.625000 463.167969  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 25   2  23  37 0.621622 2.736295 0.609928 0.010561  3.356784 3.699207  4.580627 2.304605 489.722656 480.109375  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 25   1  48  60 0.800000 9.233738 0.876357 0.010406 10.120501 4.300221 14.701128 1.258682 488.757812 477.957031  0.883333       1.0  0.683765       1.0        1.0  0.883333  0.603993  0.883333   0.883333 0.883333
 26   3  13  19 0.684211 1.096100 0.125356 0.000000  1.221457 1.221457  1.221457 1.221457 484.500000 473.515625  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 26   2  23  37 0.621622 2.738335 0.268762 0.010643  3.017740 3.358817  4.239197 2.133777 497.105469 487.414062  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 26   1  50  62 0.806452 9.572863 0.886129 0.010728 10.469720 3.961129 14.708917 1.259749 498.863281 487.722656  0.854839       1.0  0.683668       1.0        1.0  0.854839  0.584426  0.854839   0.854839 0.854839
 27   3  13  19 0.684211 1.095001 0.114931 0.000000  1.209932 1.209932  1.209932 1.209932 496.453125 484.996094  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 27   2  23  37 0.621622 2.741316 0.615430 0.010258  3.367005 3.693171  4.576936 2.303058 508.757812 499.121094  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 27   1  50  62 0.806452 9.560822 0.578963 0.011057 10.150842 4.299057 14.727779 1.261272 511.824219 500.917969  0.854839       1.0  0.683434       1.0        1.0  0.854839  0.584226  0.854839   0.854839 0.854839
 28   3  13  19 0.684211 1.096333 0.140168 0.000000  1.236501 1.236501  1.236501 1.236501 507.808594 496.261719  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 28   2  23  37 0.621622 2.738246 0.261583 0.010035  3.009864 3.368067  4.246365 2.137651 519.101562 509.289062  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 28   1  50  62 0.806452 9.565960 0.900114 0.010646 10.476721 3.969814 14.723086 1.261137 520.726562 509.726562  0.854839       1.0  0.683492       1.0        1.0  0.854839  0.584275  0.854839   0.854839 0.854839
 29   3  13  19 0.684211 1.093929 0.109785 0.000000  1.203715 1.203715  1.203715 1.203715 515.160156 503.710938  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 29   2  23  37 0.621622 2.756516 1.055994 0.010173  3.822683 3.762482  5.026398 2.527608 534.390625 524.449219  0.918919       1.0  0.996524       1.0        1.0  0.918919  0.915725  0.918919   0.918919 0.918919
 29   1  50  62 0.806452 9.554015 0.568482 0.010529 10.133026 4.363281 15.159424 1.297235 530.550781 519.355469  0.854839       1.0  0.678171       1.0        1.0  0.854839  0.579727  0.854839   0.854839 0.854839
 30   3  13  19 0.684211 1.097725 0.111460 0.000000  1.209185 1.209185  1.209185 1.209185 525.875000 514.406250  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 30   2  23  37 0.621622 2.752482 0.277799 0.010006  3.040288 3.364418  4.249473 2.139459 541.011719 531.238281  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 30   1  48  60 0.800000 9.219960 0.950055 0.010569 10.180584 3.965362 14.430057 1.236665 542.628906 531.855469  0.883333       1.0  0.687188       1.0        1.0  0.883333  0.607017  0.883333   0.883333 0.883333
 31   3  13  19 0.684211 1.096989 0.138228 0.000000  1.235217 1.235217  1.235217 1.235217 537.328125 526.085938  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 31   2  23  37 0.621622 2.745822 0.698780 0.010701  3.455303 3.807095  4.690520 2.359550 558.566406 549.035156  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 31   1  50  62 0.806452 9.497120 0.985204 0.010675 10.492999 4.415033 15.183519 1.299463 555.269531 544.613281  0.854839       1.0  0.677883       1.0        1.0  0.854839  0.579481  0.854839   0.854839 0.854839
 32   3  13  19 0.684211 1.096820 0.119396 0.000000  1.216216 1.216216  1.216216 1.216216 546.562500 535.425781  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 32   2  23  37 0.621622 2.740796 0.285508 0.010096  3.036400 3.371729  4.252616 2.140784 563.300781 553.812500  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 32   1  48  62 0.774194 9.214262 0.967700 0.010140 10.192102 3.974412 14.444718 1.237697 562.386719 551.738281  0.854839       1.0  0.687001       1.0        1.0  0.854839  0.587275  0.854839   0.854839 0.854839
 33   3  13  19 0.684211 1.095188 0.123579 0.000000  1.218767 1.218767  1.218767 1.218767 557.292969 546.160156  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 33   2  23  37 0.621622 2.752096 0.715023 0.010258  3.477377 3.815947  4.696144 2.362710 576.574219 566.714844  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 33   1  48  62 0.774194 9.146594 0.952168 0.010395 10.109157 4.419321 14.805301 1.267659 572.515625 561.539062  0.854839       1.0  0.682473       1.0        1.0  0.854839  0.583404  0.854839   0.854839 0.854839
 34   3  13  19 0.684211 1.096650 0.110838 0.000000  1.207489 1.207489  1.207489 1.207489 566.523438 555.218750  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 34   2  23  37 0.621622 2.749775 0.293502 0.009843  3.053119 3.372495  4.260608 2.144490 583.367188 573.703125  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 34   1  50  62 0.806452 9.570212 0.600386 0.010977 10.181575 3.975875 14.442183 1.237424 584.968750 575.035156  0.854839       1.0  0.687033       1.0        1.0  0.854839  0.587303  0.854839   0.854839 0.854839
 35   3  13  19 0.684211 1.097497 0.116583 0.000000  1.214080 1.214080  1.214080 1.214080 577.238281 566.867188  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 35   2  23  37 0.621622 2.750600 0.268781 0.009985  3.029366 3.358210  4.243446 2.135973 591.484375 582.707031  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 35   1  48  60 0.800000 9.225893 1.003640 0.010993 10.240526 3.963775 14.483973 1.240795 594.082031 584.304688  0.883333       1.0  0.686501       1.0        1.0  0.883333  0.606409  0.883333   0.883333 0.883333
 36   3  13  19 0.684211 1.097006 0.117891 0.000000  1.214897 1.214897  1.214897 1.214897 584.242188 575.292969  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 36   2  23  37 0.621622 2.750483 0.726041 0.010009  3.486533 3.818919  4.701430 2.364954 604.550781 596.457031  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 36   1  50  64 0.781250 9.495476 0.575117 0.010621 10.081214 4.422696 14.782644 1.265745 606.031250 596.296875  0.828125       1.0  0.682753       1.0        1.0  0.828125  0.565405  0.828125   0.828125 0.828125
 37   3  13  19 0.684211 1.099760 0.116320 0.000000  1.216080 1.216080  1.216080 1.216080 598.292969 587.984375  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 37   2  23  37 0.621622 2.747441 0.285093 0.010335  3.042869 3.375074  4.258950 2.143691 614.597656 605.710938  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 37   1  50  62 0.806452 9.605454 1.052941 0.010604 10.668999 3.978841 14.927948 1.277657 614.753906 604.902344  0.854839       1.0  0.680967       1.0        1.0  0.854839  0.582117  0.854839   0.854839 0.854839
 38   3  13  19 0.684211 1.096345 0.124130 0.000000  1.220475 1.220475  1.220475 1.220475 611.187500 601.074219  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 38   2  23  37 0.621622 2.752098 0.294805 0.010424  3.057326 3.394011  4.277801 2.153182 626.468750 617.832031  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 38   1  48  60 0.800000 9.233060 1.019770 0.010625 10.263455 3.998340 14.541257 1.245598 627.675781 617.902344  0.883333       1.0  0.685774       1.0        1.0  0.883333  0.605767  0.883333   0.883333 0.883333
 39   3  13  19 0.684211 1.096050 0.123535 0.000000  1.219586 1.219586  1.219586 1.219586 620.707031 610.542969  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 39   2  23  37 0.621622 2.737036 0.767443 0.009777  3.514256 3.852736  4.733842 2.381155 635.656250 627.281250  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 39   1  50  62 0.806452 9.586921 0.565186 0.010661 10.162768 4.458245 14.896610 1.275532 636.519531 626.800781  0.854839       1.0  0.681350       1.0        1.0  0.854839  0.582445  0.854839   0.854839 0.854839
 40   3  13  19 0.684211 1.097298 0.122638 0.000000  1.219936 1.219936  1.219936 1.219936 633.222656 623.070312  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 40   2  23  37 0.621622 2.749328 0.777173 0.009934  3.536435 3.878593  4.756371 2.392751 648.230469 639.738281  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 40   1  50  62 0.806452 9.587158 0.572860 0.010566 10.170584 4.479660 14.926955 1.278092 647.707031 637.808594  0.854839       1.0  0.680979       1.0        1.0  0.854839  0.582128  0.854839   0.854839 0.854839
 41   3  13  19 0.684211 1.095343 0.604865 0.000000  1.700208 1.700208  1.700208 1.700208 643.492188 633.570312  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 41   2  23  37 0.621622 2.758283 0.265878 0.009953  3.034114 3.848239  4.734322 2.381394 656.238281 647.675781  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 41   1  50  62 0.806452 9.595232 1.094755 0.010235 10.700221 4.451720 15.434543 1.319946 659.402344 649.531250  0.854839       1.0  0.674922       1.0        1.0  0.854839  0.576949  0.854839   0.854839 0.854839
 42   3  13  19 0.684211 1.095932 0.110033 0.000000  1.205966 1.205966  1.205966 1.205966 651.781250 641.789062  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 42   2  23  37 0.621622 2.738488 0.779562 0.010367  3.528417 3.339233  4.734383 2.381334 665.789062 657.421875  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 42   1  50  64 0.781250 9.569070 0.599957 0.011014 10.180041 3.941895 14.914423 1.276712 669.601562 660.031250  0.828125       1.0  0.681132       1.0        1.0  0.828125  0.564063  0.828125   0.828125 0.828125
 43   3  13  19 0.684211 1.097111 0.112247 0.000000  1.209358 1.209358  1.209358 1.209358 662.312500 652.296875  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 43   2  23  37 0.621622 2.744572 0.317582 0.010373  3.072527 3.396658  4.281885 2.155120 684.128906 675.781250  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 43   1  50  62 0.806452 9.564157 1.084481 0.010871 10.659509 4.004501 14.941394 1.279200 679.527344 669.875000  0.854839       1.0  0.680803       1.0        1.0  0.854839  0.581977  0.854839   0.854839 0.854839
 44   3  13  19 0.684211 1.096315 0.118745 0.000000  1.215060 1.215060  1.215060 1.215060 673.332031 663.292969  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 44   2  23  37 0.621622 2.757173 0.305650 0.010796  3.073619 3.406439  4.288679 2.158494 693.152344 684.464844  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 44   1  50  62 0.806452 9.507285 0.568029 0.011187 10.086501 4.009383 14.375179 1.275828 689.781250 680.332031  0.854839       1.0  0.687892       1.0        1.0  0.854839  0.588037  0.854839   0.854839 0.854839
 45   3  13  19 0.684211 1.100108 0.113993 0.000000  1.214102 1.214102  1.214102 1.214102 682.191406 672.234375  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 45   2  23  37 0.621622 2.751567 0.292806 0.011431  3.055804 3.377555  4.269906 2.150045 699.785156 691.433594  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 45   1  48  62 0.774194 9.200261 1.086098 0.011197 10.297555 3.987103 14.567461 1.248428 698.738281 689.089844  0.854839       1.0  0.685442       1.0        1.0  0.854839  0.585943  0.854839   0.854839 0.854839
 46   3  13  19 0.684211 1.094191 0.120387 0.000000  1.214578 1.214578  1.214578 1.214578 694.855469 684.828125  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 46   2  23  37 0.621622 2.744022 0.274105 0.010535  3.028662 3.361003  4.243240 2.135827 709.117188 700.929688  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 46   1  48  62 0.774194 9.163804 0.581408 0.010936  9.756149 3.962633 13.999389 1.200412 711.160156 701.632812  0.854839       1.0  0.692814       1.0        1.0  0.854839  0.592244  0.854839   0.854839 0.854839
 47   3  13  19 0.684211 1.092618 0.108670 0.000000  1.201289 1.201289  1.201289 1.201289 704.660156 694.582031  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 47   2  23  37 0.621622 2.731625 0.281355 0.011311  3.024291 3.345181  4.225580 2.127077 720.542969 712.316406  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 47   1  48  60 0.800000 9.183122 1.117899 0.010691 10.311712 3.946155 14.537291 1.245112 721.511719 712.109375  0.883333       1.0  0.685824       1.0        1.0  0.883333  0.605811  0.883333   0.883333 0.883333
 48   3  13  19 0.684211 1.092321 0.119503 0.000000  1.211824 1.211824  1.211824 1.211824 716.949219 707.050781  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 48   2  23  37 0.621622 2.740369 0.289565 0.010564  3.040498 3.375608  4.252322 2.140533 733.667969 725.335938  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 48   1  48  60 0.800000 9.179689 1.147634 0.011029 10.338353 3.977823 14.590674 1.249698 733.222656 723.902344  0.883333       1.0  0.685150       1.0        1.0  0.883333  0.605216  0.883333   0.883333 0.883333
 49   3  13  19 0.684211 1.091335 0.118028 0.000000  1.209363 1.209363  1.209363 1.209363 726.339844 716.566406  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
 49   2  23  37 0.621622 2.768122 0.282405 0.010942  3.061468 3.363329  4.270831 2.149875 742.511719 734.023438  0.918919       1.0  1.000000       1.0        1.0  0.918919  0.918919  0.918919   0.918919 0.918919
 49   1  50  64 0.781250 9.774619 1.145566 0.011423 10.931608 4.542839 15.202439 1.301760 740.492188 730.886719  0.828125       1.0  0.677658       1.0        1.0  0.828125  0.561185  0.828125   0.828125 0.828125

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
                      Level-wise Means                      

 AL    LE    AC       CF       GT       ST       OT        TT       LT        CT       WT        RSS        VMS  QL_SCORE  LT_SCORE  CT_SCORE  AW_SCORE  AME_SCORE  LT_GRADE  CT_GRADE  AW_GRADE  AME_GRADE    GRADE
  3 13.00 19.00 0.684211 1.095327 0.159227 0.000000  1.254554 1.254554  1.254554 1.254554 465.908906 454.759219  0.947368       1.0  1.000000       1.0        1.0  0.947368  0.947368  0.947368   0.947368 0.947368
  2 23.00 37.00 0.621622 2.745422 0.442659 0.010260  3.198341 3.522825  4.452895 2.240760 482.407891 472.775937  0.918919       1.0  0.999930       1.0        1.0  0.918919  0.918855  0.918919   0.918919 0.918919
  1 49.12 61.44 0.799532 9.409256 0.817002 0.010681 10.236940 4.143107 14.689835 1.259821 482.915625 472.203125  0.862960       1.0  0.683953       1.0        1.0  0.862960  0.590257  0.862960   0.862960 0.862960

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
               Level-wise Standard Deviation                

 AL       LE       AC      CF       GT       ST       OT       TT       LT       CT       WT        RSS        VMS  QL_SCORE  LT_SCORE  CT_SCORE  AW_SCORE  AME_SCORE  LT_GRADE  CT_GRADE  AW_GRADE  AME_GRADE    GRADE
  3 0.000000 0.000000 0.00000 0.002622 0.095333 0.000000 0.094860 0.094860 0.094860 0.094860 156.295436 157.002199  0.000000       0.0  0.000000       0.0        0.0  0.000000  0.000000  0.000000   0.000000 0.000000
  2 0.000000 0.000000 0.00000 0.008724 0.196761 0.000373 0.196408 0.165290 0.190286 0.095130 156.107794 156.901407  0.000000       0.0  0.000492       0.0        0.0  0.000000  0.000452  0.000000   0.000000 0.000000
  1 1.002853 1.214874 0.01016 0.190590 0.182412 0.000342 0.248203 0.171779 0.284870 0.023126 155.424607 156.116884  0.017007       0.0  0.003560       0.0        0.0  0.017007  0.013584  0.017007   0.017007 0.017007

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
                       Partial Plans                        

 RU  AL  IT  PN       GT       ST       OT       TT        YT       WT       ET        RSS        VMS  LE  AC       CF  PSG  START_S  END_S  SIZE  SGLITS_T  FIRST_I  LAST_I  PP_EF_L  PP_EF_A  SP_ED_L  SP_ED_A  SP_EB_L  SP_EB_A  SP_EBS_L  SP_EBS_A  TOT_CHOICES  PRE_CHOICES
  0   3   1   1 1.094306 0.155581 0.000000 1.249886  1.249886 1.249886 0.000000 199.703125 188.058594  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   2   1   1 1.942147 0.259404 0.004190 2.205740  3.455627 3.455627 0.963551 220.867188 210.730469  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.119061 0.844097 1.074538  0.342021  0.088621            0            2
  0   2   2   2 0.825249 0.132801 0.005501 0.963551  4.419178 0.963551 0.000000 214.121094 202.113281   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
  0   1   1   1 0.576484 0.030733 0.001024 0.608241  4.063868 4.063868 4.048157 193.343750 181.058594   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  0   1   2   2 2.818558 0.265196 0.000852 3.084606  8.112025 4.048157 0.938239 227.308594 216.351562  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
  0   1   3   3 0.892369 0.044147 0.001723 0.938239  9.050263 0.938239 1.015543 197.187500 185.566406   5   5 1.000000    0       18     22     3         5        5       7 1.666667 1.000000 1.154701 1.443376 0.692820 1.082532  0.301253  0.186810            0            0
  0   1   4   4 0.963177 0.050628 0.001738 1.015543 10.065807 1.015543 1.219553 202.746094 191.343750   5   9 0.555556    0       23     27     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
  0   1   5   5 1.157712 0.060082 0.001759 1.219553 11.285360 1.219553 1.486380 205.960938 194.066406   6   6 1.000000    0       28     33     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
  0   1   6   6 1.331678 0.153073 0.001630 1.486380 12.771740 1.486380 0.288379 216.542969 205.597656   7   9 0.777778    0       34     40     3         5       14      16 2.333333 1.800000 1.527525 1.607275 0.654654 0.741819  0.155989  0.127713            0            2
  0   1   7   7 0.269729 0.018650 0.000000 0.288379 13.060119 0.288379 0.422115 213.363281 201.589844   1   2 0.500000    0       41     41     1         2       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  0   1   8   8 0.401717 0.020398 0.000000 0.422115 13.482233 0.422115 0.288512 195.222656 183.406250   2   3 0.666667    0       42     43     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   1   9   9 0.271051 0.017461 0.000000 0.288512 13.770746 0.288512 0.425524 195.894531 184.152344   1   1 1.000000    0       44     44     1         1       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  0   1  10  10 0.405679 0.019844 0.000000 0.425524 14.196269 0.425524 0.422568 196.164062 184.324219   2   3 0.666667    0       45     46     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   1  11  11 0.402175 0.020393 0.000000 0.422568 14.618837 0.422568 0.431483 196.457031 184.621094   2   3 0.666667    0       47     48     1         2       21      21 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  0   1  12  12 0.404229 0.025849 0.001405 0.431483 15.050321 0.431483 0.000000 197.363281 185.449219   2   2 1.000000    0       49     50     2         2       22      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  1   3   1   1 1.093685 0.162977 0.000000 1.256662  1.256662 1.256662 0.000000 207.753906 197.156250  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   2   1   1 1.943696 0.261284 0.005255 2.210235  3.466897 3.466897 0.910384 223.031250 212.445312  16  25 0.640000   25        1     16     6         7        1       6 2.666667 3.571429 2.250926 4.119061 0.844097 1.074538  0.342021  0.088621            0            2
  1   2   2   2 0.829880 0.075374 0.005130 0.910384  4.377281 0.910384 0.000000 216.746094 206.375000   7  12 0.583333   12       17     23     7        12        7      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
  1   1   1   1 0.574697 0.029042 0.000842 0.604581  4.071478 4.071478 4.027235 214.777344 202.667969   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  1   1   2   2 2.838776 0.277019 0.001055 3.116850  8.098712 4.027235 0.937618 231.132812 219.699219  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
  1   1   3   3 0.889933 0.045919 0.001766 0.937618  9.036330 0.937618 1.018525 200.785156 189.910156   5   5 1.000000    0       18     22     3         5        5       7 1.666667 1.000000 1.154701 1.443376 0.692820 1.082532  0.301253  0.186810            0            0
  1   1   4   4 0.961762 0.054985 0.001778 1.018525 10.054855 1.018525 1.211811 205.519531 195.808594   5   9 0.555556    0       23     27     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
  1   1   5   5 1.152121 0.057945 0.001746 1.211811 11.266666 1.211811 1.261796 207.601562 197.625000   6   6 1.000000    0       28     33     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
  1   1   6   6 1.120379 0.139778 0.001639 1.261796 12.528463 1.261796 0.417429 215.523438 205.835938   6   7 0.857143    0       34     39     3         4       14      16 2.000000 1.750000 1.732051 2.466441 0.866025 1.138358  0.085162 -0.131544            0            2
  1   1   7   7 0.396304 0.021125 0.000000 0.417429 12.945891 0.417429 0.423310 215.660156 205.289062   2   3 0.666667    0       40     41     1         2       17      17 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   1   8   8 0.399549 0.023761 0.000000 0.423310 13.369201 0.423310 0.288252 215.660156 205.289062   2   3 0.666667    0       42     43     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  1   1   9   9 0.270203 0.018049 0.000000 0.288252 13.657454 0.288252 0.419051 215.816406 205.300781   1   2 0.500000    0       44     44     1         2       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  1   1  10  10 0.399489 0.019562 0.000000 0.419051 14.076505 0.419051 0.426565 215.824219 205.300781   2   3 0.666667    0       45     46     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   1  11  11 0.402519 0.024046 0.000000 0.426565 14.503070 0.426565 0.429983 215.867188 205.300781   2   3 0.666667    0       47     48     1         2       21      21 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  1   1  12  12 0.402645 0.025897 0.001441 0.429983 14.933053 0.429983 0.000000 216.097656 205.550781   2   2 1.000000    0       49     50     2         2       22      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  2   3   1   1 1.093850 0.164310 0.000000 1.258160  1.258160 1.258160 0.000000 218.035156 206.562500  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  2   2   1   1 1.930769 0.278522 0.004709 2.214000  3.472160 3.472160 0.910512 235.074219 224.597656  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.119061 0.844097 1.074538  0.342021  0.088621            0            2
  2   2   2   2 0.826684 0.078034 0.005795 0.910512  4.382672 0.910512 0.000000 230.324219 218.730469   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
  2   1   1   1 0.576407 0.029945 0.000853 0.607205  4.079365 4.079365 4.038304 225.324219 213.171875   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  2   1   2   2 2.826739 0.300107 0.000946 3.127791  8.117669 4.038304 0.950909 239.265625 227.863281  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
  2   1   3   3 0.907161 0.042062 0.001687 0.950909  9.068578 0.950909 1.026831 229.144531 216.929688   5   5 1.000000    0       18     22     3         5        5       7 1.666667 1.000000 1.154701 1.443376 0.692820 1.082532  0.301253  0.186810            0            0
  2   1   4   4 0.974642 0.050388 0.001801 1.026831 10.095408 1.026831 1.212660 229.195312 216.945312   5   9 0.555556    0       23     27     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
  2   1   5   5 1.151443 0.059428 0.001789 1.212660 11.308068 1.212660 1.485560 214.132812 202.285156   6   6 1.000000    0       28     33     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
  2   1   6   6 1.334902 0.148755 0.001903 1.485560 12.793628 1.485560 0.351468 226.773438 215.082031   7   9 0.777778    0       34     40     3         5       14      16 2.333333 1.800000 1.527525 1.607275 0.654654 0.741819  0.155989  0.127713            0            2
  2   1   7   7 0.273527 0.077941 0.000000 0.351468 13.145096 0.351468 0.425662 229.925781 218.671875   1   1 1.000000    0       41     41     1         1       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  2   1   8   8 0.402232 0.023430 0.000000 0.425662 13.570759 0.425662 0.291439 229.953125 218.671875   2   3 0.666667    0       42     43     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  2   1   9   9 0.273422 0.018018 0.000000 0.291439 13.862198 0.291439 0.422270 229.953125 218.671875   1   2 0.500000    0       44     44     1         2       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  2   1  10  10 0.402501 0.019769 0.000000 0.422270 14.284468 0.422270 0.290314 230.246094 219.050781   2   3 0.666667    0       45     46     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  2   1  11  11 0.274397 0.015916 0.000000 0.290314 14.574782 0.290314 0.574072 230.417969 219.105469   1   1 1.000000    0       47     47     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  2   1  12  12 0.539513 0.033053 0.001506 0.574072 15.148853 0.574072 0.000000 230.742188 219.113281   3   4 0.750000    0       48     50     2         3       22      23 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
  3   3   1   1 1.095270 0.173171 0.000000 1.268441  1.268441 1.268441 0.000000 232.937500 220.968750  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   2   1   1 1.950823 0.297834 0.004625 2.253282  3.521724 3.521724 0.990225 248.921875 238.207031  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.119061 0.844097 1.074538  0.342021  0.088621            0            2
  3   2   2   2 0.826534 0.158080 0.005611 0.990225  4.511949 0.990225 0.000000 245.328125 233.003906   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
  3   1   1   1 0.572164 0.030507 0.000917 0.603587  4.125311 4.125311 4.106763 237.519531 225.402344   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  3   1   2   2 2.823734 0.291557 0.001247 3.116538  8.232074 4.106763 0.938201 249.507812 237.886719  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
  3   1   3   3 0.892667 0.043797 0.001738 0.938201  9.170275 0.938201 1.014154 240.992188 228.722656   5   5 1.000000    0       18     22     3         5        5       7 1.666667 1.000000 1.154701 1.443376 0.692820 1.082532  0.301253  0.186810            0            0
  3   1   4   4 0.961421 0.050754 0.001979 1.014154 10.184429 1.014154 1.214501 241.011719 228.722656   5   9 0.555556    0       23     27     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
  3   1   5   5 1.154837 0.057772 0.001892 1.214501 11.398930 1.214501 1.511358 241.066406 228.722656   6   6 1.000000    0       28     33     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
  3   1   6   6 1.334015 0.175533 0.001809 1.511358 12.910288 1.511358 0.289411 245.781250 233.628906   7   9 0.777778    0       34     40     3         5       14      16 2.333333 1.800000 1.527525 1.607275 0.654654 0.741819  0.155989  0.127713            0            2
  3   1   7   7 0.270220 0.019191 0.000000 0.289411 13.199699 0.289411 0.425428 244.992188 232.730469   1   1 1.000000    0       41     41     1         1       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   1   8   8 0.404814 0.020615 0.000000 0.425428 13.625127 0.425428 0.288279 244.996094 232.730469   2   3 0.666667    0       42     43     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  3   1   9   9 0.270521 0.017759 0.000000 0.288279 13.913406 0.288279 0.420079 245.058594 232.730469   1   2 0.500000    0       44     44     1         2       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  3   1  10  10 0.400174 0.019905 0.000000 0.420079 14.333485 0.420079 0.286865 245.058594 232.730469   2   3 0.666667    0       45     46     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   1  11  11 0.271202 0.015663 0.000000 0.286865 14.620350 0.286865 0.577022 245.058594 232.730469   1   1 1.000000    0       47     47     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  3   1  12  12 0.546215 0.029404 0.001403 0.577022 15.197372 0.577022 0.000000 245.058594 232.730469   3   4 0.750000    0       48     50     2         3       22      23 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
  4   3   1   1 1.092308 0.195417 0.000000 1.287725  1.287725 1.287725 0.000000 246.015625 233.746094  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   2   1   1 1.950591 0.306575 0.004431 2.261596  3.549321 3.549321 0.910034 260.398438 249.351562  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.119061 0.844097 1.074538  0.342021  0.088621            0            2
  4   2   2   2 0.825374 0.079130 0.005531 0.910034  4.459356 0.910034 0.000000 253.074219 240.867188   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
  4   1   1   1 0.572159 0.029860 0.000769 0.602788  4.152110 4.152110 3.982684 250.718750 238.265625   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  4   1   2   2 2.830928 0.240874 0.000848 3.072650  8.134794 3.982684 0.562986 261.226562 249.488281  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
  4   1   3   3 0.531957 0.029261 0.001768 0.562986  8.697780 0.562986 1.013066 249.050781 236.683594   3   3 1.000000    0       18     20     3         5        5       7 1.000000 0.600000 0.000000 0.288675 0.000000 0.433013  1.000000  0.769150            0            0
  4   1   4   4 0.961143 0.050066 0.001858 1.013066  9.710845 1.013066 1.223729 249.089844 236.683594   5   9 0.555556    0       21     25     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
  4   1   5   5 1.157540 0.064299 0.001890 1.223729 10.934575 1.223729 1.521705 249.117188 236.683594   6   6 1.000000    0       26     31     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
  4   1   6   6 1.337899 0.181992 0.001814 1.521705 12.456280 1.521705 0.284937 255.769531 243.492188   7   9 0.777778    0       32     38     3         5       14      16 2.333333 1.800000 1.527525 1.607275 0.654654 0.741819  0.155989  0.127713            0            2
  4   1   7   7 0.266689 0.018248 0.000000 0.284937 12.741217 0.284937 0.414077 252.472656 240.093750   1   1 1.000000    0       39     39     1         1       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   1   8   8 0.393771 0.020306 0.000000 0.414077 13.155294 0.414077 0.288695 252.535156 240.093750   2   3 0.666667    0       40     41     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  4   1   9   9 0.270530 0.018164 0.000000 0.288695 13.443989 0.288695 0.423899 252.535156 240.093750   1   2 0.500000    0       42     42     1         2       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  4   1  10  10 0.403910 0.019989 0.000000 0.423899 13.867887 0.423899 0.425218 252.535156 240.093750   2   3 0.666667    0       43     44     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   1  11  11 0.401365 0.023852 0.000000 0.425218 14.293105 0.425218 0.429751 252.531250 240.093750   2   3 0.666667    0       45     46     1         2       21      21 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  4   1  12  12 0.402656 0.025484 0.001611 0.429751 14.722856 0.429751 0.000000 252.531250 240.093750   2   2 1.000000    0       47     48     2         2       22      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  5   3   1   1 1.093647 0.202208 0.000000 1.295855  1.295855 1.295855 0.000000 253.718750 241.289062  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  5   2   1   1 1.948463 0.308735 0.004890 2.262088  3.557944 3.557944 0.914034 269.050781 258.148438  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.119061 0.844097 1.074538  0.342021  0.088621            0            2
  5   2   2   2 0.826451 0.082095 0.005488 0.914034  4.471978 0.914034 0.000000 265.957031 253.742188   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
  5   1   1   1 0.576041 0.029674 0.000817 0.606532  4.164476 4.164476 3.984487 259.843750 247.398438   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  5   1   2   2 2.842202 0.227390 0.000860 3.070453  8.148963 3.984487 0.935154 271.214844 259.171875  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
  5   1   3   3 0.889877 0.043401 0.001877 0.935154  9.084117 0.935154 1.014895 261.761719 249.410156   5   5 1.000000    0       18     22     3         5        5       7 1.666667 1.000000 1.154701 1.443376 0.692820 1.082532  0.301253  0.186810            0            0
  5   1   4   4 0.962576 0.050491 0.001828 1.014895 10.099012 1.014895 1.218763 261.777344 249.410156   5   9 0.555556    0       23     27     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
  5   1   5   5 1.156130 0.060777 0.001856 1.218763 11.317775 1.218763 1.540815 261.796875 249.410156   6   6 1.000000    0       28     33     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
  5   1   6   6 1.332371 0.206576 0.001868 1.540815 12.858590 1.540815 0.290816 269.757812 257.480469   7   9 0.777778    0       34     40     3         5       14      16 2.333333 1.800000 1.527525 1.607275 0.654654 0.741819  0.155989  0.127713            0            2
  5   1   7   7 0.272398 0.018418 0.000000 0.290816 13.149406 0.290816 0.421716 265.406250 252.964844   1   1 1.000000    0       41     41     1         1       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  5   1   8   8 0.401715 0.020002 0.000000 0.421716 13.571123 0.421716 0.384870 265.406250 252.964844   2   3 0.666667    0       42     43     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  5   1   9   9 0.273295 0.111575 0.000000 0.384870 13.955993 0.384870 0.421793 265.406250 252.964844   1   2 0.500000    0       44     44     1         2       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  5   1  10  10 0.402019 0.019775 0.000000 0.421793 14.377786 0.421793 0.431370 265.406250 252.964844   2   3 0.666667    0       45     46     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  5   1  11  11 0.407437 0.023932 0.000000 0.431370 14.809156 0.431370 0.429994 265.406250 252.964844   2   3 0.666667    0       47     48     1         2       21      21 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  5   1  12  12 0.402415 0.026132 0.001446 0.429994 15.239149 0.429994 0.000000 265.410156 252.964844   2   2 1.000000    0       49     50     2         2       22      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  6   3   1   1 1.094111 0.122287 0.000000 1.216398  1.216398 1.216398 0.000000 267.359375 254.968750  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  6   2   1   1 1.943224 0.420825 0.004212 2.368260  3.584658 3.584658 1.011772 282.417969 272.160156  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.119061 0.844097 1.074538  0.342021  0.088621            0            2
  6   2   2   2 0.825730 0.180674 0.005368 1.011772  4.596430 1.011772 0.000000 277.468750 265.175781   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
  6   1   1   1 0.572925 0.030853 0.000939 0.604717  4.189375 4.189375 4.074188 269.832031 257.390625   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  6   1   2   2 2.839065 0.222350 0.001002 3.062417  8.263564 4.074188 0.565585 282.503906 270.976562  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
  6   1   3   3 0.535115 0.028839 0.001631 0.565585  8.829148 0.565585 1.014750 271.894531 259.808594   3   3 1.000000    0       18     20     3         5        5       7 1.000000 0.600000 0.000000 0.288675 0.000000 0.433013  1.000000  0.769150            0            0
  6   1   4   4 0.962236 0.050552 0.001962 1.014750  9.843898 1.014750 1.319233 272.117188 259.808594   5   9 0.555556    0       21     25     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
  6   1   5   5 1.156256 0.160608 0.002369 1.319233 11.163131 1.319233 1.443171 272.136719 259.808594   6   6 1.000000    0       26     31     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
  6   1   6   6 1.333307 0.108156 0.001708 1.443171 12.606302 1.443171 0.286138 279.972656 267.875000   7   9 0.777778    0       32     38     3         5       14      16 2.333333 1.800000 1.527525 2.362908 0.654654 1.012675  0.155989 -0.103944            0            2
  6   1   7   7 0.267802 0.018336 0.000000 0.286138 12.892441 0.286138 0.418020 275.546875 263.316406   1   2 0.500000    0       39     39     1         2       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  6   1   8   8 0.398860 0.019159 0.000000 0.418020 13.310460 0.418020 0.292401 275.546875 263.316406   2   3 0.666667    0       40     41     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  6   1   9   9 0.275410 0.016990 0.000000 0.292401 13.602861 0.292401 0.426113 275.546875 263.316406   1   1 1.000000    0       42     42     1         1       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  6   1  10  10 0.403331 0.022782 0.000000 0.426113 14.028974 0.426113 0.531142 275.671875 263.316406   2   3 0.666667    0       43     44     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  6   1  11  11 0.402574 0.128568 0.000000 0.531142 14.560116 0.531142 0.427596 275.671875 263.316406   2   3 0.666667    0       45     46     1         2       21      21 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  6   1  12  12 0.400650 0.025528 0.001418 0.427596 14.987712 0.427596 0.000000 275.671875 263.316406   2   2 1.000000    0       47     48     2         2       22      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  7   3   1   1 1.094094 0.110327 0.000000 1.204422  1.204422 1.204422 0.000000 277.906250 265.652344  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   2   1   1 1.943653 0.331123 0.004476 2.279252  3.483674 3.483674 1.027727 293.652344 283.062500  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.119061 0.844097 1.074538  0.342021  0.088621            0            2
  7   2   2   2 0.825272 0.196520 0.005935 1.027727  4.511401 1.027727 0.000000 287.066406 274.804688   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.626783 0.000000 0.548435  1.000000  0.749935            0            4
  7   1   1   1 0.574345 0.031265 0.000818 0.606429  4.090103 4.090103 4.210263 280.507812 268.265625   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  7   1   2   2 2.818484 0.363079 0.000973 3.182536  8.300366 4.210263 0.936440 296.675781 285.199219  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
  7   1   3   3 0.890796 0.043793 0.001851 0.936440  9.236806 0.936440 1.015116 283.429688 271.171875   5   5 1.000000    0       18     22     3         5        5       7 1.666667 1.000000 1.154701 1.443376 0.692820 1.082532  0.301253  0.186810            0            0
  7   1   4   4 0.962728 0.050379 0.002008 1.015116 10.251922 1.015116 1.220293 283.433594 271.171875   5   9 0.555556    0       23     27     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
  7   1   5   5 1.158082 0.060431 0.001780 1.220293 11.472214 1.220293 1.436962 283.433594 271.171875   6   6 1.000000    0       28     33     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
  7   1   6   6 1.334058 0.101050 0.001854 1.436962 12.909176 1.436962 0.291794 290.152344 277.988281   7   9 0.777778    0       34     40     3         5       14      16 2.333333 1.800000 1.527525 2.362908 0.654654 1.012675  0.155989 -0.103944            0            2
  7   1   7   7 0.272517 0.019277 0.000000 0.291794 13.200971 0.291794 0.425769 286.671875 274.531250   1   2 0.500000    0       41     41     1         2       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  7   1   8   8 0.402657 0.023112 0.000000 0.425769 13.626739 0.425769 0.287904 286.671875 274.531250   2   3 0.666667    0       42     43     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   1   9   9 0.271409 0.016495 0.000000 0.287904 13.914643 0.287904 0.420284 286.671875 274.531250   1   1 1.000000    0       44     44     1         1       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  7   1  10  10 0.401510 0.018775 0.000000 0.420284 14.334927 0.420284 0.289548 286.671875 274.531250   2   3 0.666667    0       45     46     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   1  11  11 0.273022 0.016526 0.000000 0.289548 14.624475 0.289548 0.572952 286.671875 274.531250   1   1 1.000000    0       47     47     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  7   1  12  12 0.542370 0.029152 0.001430 0.572952 15.197427 0.572952 0.000000 286.796875 274.531250   3   4 0.750000    0       48     50     2         3       22      23 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
  8   3   1   1 1.096931 0.111746 0.000000 1.208677  1.208677 1.208677 0.000000 287.753906 275.871094  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   2   1   1 1.949470 0.369429 0.004666 2.323565  3.532242 3.532242 0.909252 308.441406 298.039062  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.119061 0.844097 1.074538  0.342021  0.088621            0            2
  8   2   2   2 0.823216 0.080242 0.005795 0.909252  4.441494 0.909252 0.000000 298.632812 286.425781   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
  8   1   1   1 0.576061 0.030730 0.000795 0.607586  4.139828 4.139828 3.984303 292.609375 280.593750   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  8   1   2   2 2.841538 0.232570 0.000944 3.075051  8.124131 3.984303 0.566545 305.695312 294.265625  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
  8   1   3   3 0.535660 0.029105 0.001781 0.566545  8.690676 0.566545 1.139397 294.054688 281.871094   3   3 1.000000    0       18     20     3         5        5       7 1.000000 0.600000 0.000000 0.288675 0.000000 0.433013  1.000000  0.769150            0            0
  8   1   4   4 0.963206 0.174274 0.001917 1.139397  9.830074 1.139397 1.215979 294.066406 281.871094   5   9 0.555556    0       21     25     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
  8   1   5   5 1.156301 0.057704 0.001973 1.215979 11.046052 1.215979 1.437524 294.570312 282.363281   6   6 1.000000    0       26     31     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
  8   1   6   6 1.330736 0.105043 0.001745 1.437524 12.483576 1.437524 0.286120 302.847656 290.687500   7   9 0.777778    0       32     38     3         5       14      16 2.333333 1.800000 1.527525 1.607275 0.654654 0.741819  0.155989  0.127713            0            2
  8   1   7   7 0.266456 0.019664 0.000000 0.286120 12.769695 0.286120 0.417042 298.324219 286.152344   1   1 1.000000    0       39     39     1         1       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   1   8   8 0.396641 0.020402 0.000000 0.417042 13.186737 0.417042 0.289582 298.359375 286.152344   2   3 0.666667    0       40     41     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  8   1   9   9 0.272081 0.017501 0.000000 0.289582 13.476320 0.289582 0.423222 298.359375 286.152344   1   2 0.500000    0       42     42     1         2       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  8   1  10  10 0.399336 0.023885 0.000000 0.423222 13.899542 0.423222 0.290328 298.359375 286.152344   2   3 0.666667    0       43     44     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   1  11  11 0.274468 0.015860 0.000000 0.290328 14.189869 0.290328 0.573751 298.359375 286.152344   1   1 1.000000    0       45     45     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  8   1  12  12 0.540035 0.032319 0.001397 0.573751 14.763620 0.573751 0.000000 298.363281 286.152344   3   4 0.750000    0       46     48     2         3       22      23 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
  9   3   1   1 1.095010 0.246966 0.000000 1.341976  1.341976 1.341976 0.000000 300.089844 287.992188  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  9   2   1   1 1.942578 0.367994 0.004520 2.315091  3.657067 3.657067 0.908743 319.582031 308.988281  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.167333 0.844097 1.087130  0.342021  0.083383            0            2
  9   2   2   2 0.826059 0.076871 0.005813 0.908743  4.565810 0.908743 0.000000 309.570312 297.421875   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
  9   1   1   1 0.571159 0.029614 0.000793 0.601566  4.258633 4.258633 3.986729 303.332031 291.125000   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  9   1   2   2 2.838624 0.238346 0.001017 3.077987  8.245362 3.986729 0.934712 316.964844 305.925781  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
  9   1   3   3 0.888745 0.044061 0.001906 0.934712  9.180074 0.934712 1.146903 304.015625 291.855469   5   5 1.000000    0       18     22     3         5        5       7 1.666667 1.000000 1.154701 1.443376 0.692820 1.082532  0.301253  0.186810            0            0
  9   1   4   4 0.959403 0.185643 0.001857 1.146903 10.326977 1.146903 1.210549 304.437500 292.277344   5   9 0.555556    0       23     27     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
  9   1   5   5 1.151533 0.057065 0.001951 1.210549 11.537527 1.210549 1.600657 304.515625 293.023438   6   6 1.000000    0       28     33     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
  9   1   6   6 1.337628 0.261269 0.001761 1.600657 13.138184 1.600657 0.286710 315.476562 303.601562   7   9 0.777778    0       34     40     3         5       14      16 2.333333 1.800000 2.309401 1.154701 0.989743 0.692820 -0.089344  0.301253            0            2
  9   1   7   7 0.268073 0.018638 0.000000 0.286710 13.424894 0.286710 0.419638 307.656250 295.628906   1   1 1.000000    0       41     41     1         1       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  9   1   8   8 0.398360 0.021278 0.000000 0.419638 13.844532 0.419638 0.287098 307.656250 295.628906   2   3 0.666667    0       42     43     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  9   1   9   9 0.269561 0.017537 0.000000 0.287098 14.131630 0.287098 0.427955 307.656250 295.628906   1   2 0.500000    0       44     44     1         2       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  9   1  10  10 0.404492 0.023463 0.000000 0.427955 14.559585 0.427955 0.426744 307.781250 295.628906   2   3 0.666667    0       45     46     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  9   1  11  11 0.402912 0.023832 0.000000 0.426744 14.986329 0.426744 0.428194 307.781250 295.628906   2   3 0.666667    0       47     48     1         2       21      21 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  9   1  12  12 0.401031 0.025578 0.001585 0.428194 15.414523 0.428194 0.000000 307.781250 295.628906   2   2 1.000000    0       49     50     2         2       22      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 10   3   1   1 1.093962 0.253010 0.000000 1.346972  1.346972 1.346972 0.000000 312.589844 300.492188  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 10   2   1   1 1.944041 0.209952 0.004430 2.158424  3.505396 3.505396 0.909224 328.757812 318.187500  16  25 0.640000   25        1     16     6         7        1       6 2.666667 3.571429 2.250926 4.119061 0.844097 1.074538  0.342021  0.088621            0            2
 10   2   2   2 0.828906 0.074777 0.005541 0.909224  4.414621 0.909224 0.000000 319.308594 308.300781   7  12 0.583333   12       17     23     7        12        7      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
 10   1   1   1 0.573523 0.029578 0.000757 0.603858  4.109254 4.109254 3.977403 313.433594 301.492188   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 10   1   2   2 2.836570 0.230655 0.000954 3.068179  8.086658 3.977403 0.938465 328.007812 317.097656  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 10   1   3   3 0.892034 0.044706 0.001725 0.938465  9.025123 0.938465 1.015578 303.054688 291.839844   5   5 1.000000    0       18     22     3         5        5       7 1.666667 1.000000 1.154701 1.443376 0.692820 1.082532  0.301253  0.186810            0            0
 10   1   4   4 0.962865 0.050605 0.002108 1.015578 10.040701 1.015578 1.221634 307.539062 296.925781   5   9 0.555556    0       23     27     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 10   1   5   5 1.155171 0.064691 0.001772 1.221634 11.262335 1.221634 1.208211 311.078125 299.839844   6   6 1.000000    0       28     33     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 10   1   6   6 1.120539 0.085785 0.001886 1.208211 12.470546 1.208211 0.422878 319.816406 309.371094   6   7 0.857143    0       34     39     3         4       14      16 2.000000 1.750000 1.732051 1.732051 0.866025 0.866025  0.085162  0.085162            0            2
 10   1   7   7 0.398686 0.024192 0.000000 0.422878 12.893424 0.422878 0.420891 316.210938 304.804688   2   3 0.666667    0       40     41     1         2       17      17 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 10   1   8   8 0.400829 0.020061 0.000000 0.420891 13.314315 0.420891 0.292053 316.210938 304.804688   2   3 0.666667    0       42     43     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 10   1   9   9 0.273791 0.018262 0.000000 0.292053 13.606368 0.292053 0.570787 316.214844 304.804688   1   2 0.500000    0       44     44     1         2       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 10   1  10  10 0.402300 0.168487 0.000000 0.570787 14.177155 0.570787 0.423719 316.238281 304.804688   2   3 0.666667    0       45     46     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 10   1  11  11 0.403792 0.019928 0.000000 0.423719 14.600874 0.423719 0.429468 316.246094 304.808594   2   3 0.666667    0       47     48     1         2       21      21 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 10   1  12  12 0.402177 0.025828 0.001464 0.429468 15.030342 0.429468 0.000000 316.378906 304.945312   2   2 1.000000    0       49     50     2         2       22      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 11   3   1   1 1.098254 0.135125 0.000000 1.233378  1.233378 1.233378 0.000000 323.402344 312.097656  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   2   1   1 1.952877 0.384575 0.004351 2.341803  3.575181 3.575181 1.070643 339.320312 328.523438  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.167333 0.844097 1.087130  0.342021  0.083383            0            2
 11   2   2   2 0.822582 0.242204 0.005856 1.070643  4.645824 1.070643 0.000000 332.328125 321.121094   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.449868 0.000000 0.419877  1.000000  0.809101            0            4
 11   1   1   1 0.575845 0.031802 0.000786 0.608433  4.183614 4.183614 4.317976 326.890625 315.105469   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 11   1   2   2 2.839720 0.406730 0.000884 3.247333  8.501590 4.317976 0.936458 339.683594 328.367188  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 11   1   3   3 0.891426 0.043341 0.001691 0.936458  9.438048 0.936458 1.014286 326.621094 314.562500   5   5 1.000000    0       18     22     3         5        5       7 1.666667 1.000000 1.154701 1.443376 0.692820 1.082532  0.301253  0.186810            0            0
 11   1   4   4 0.963314 0.049194 0.001778 1.014286 10.452335 1.014286 1.216962 326.628906 314.562500   5   9 0.555556    0       23     27     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 11   1   5   5 1.157796 0.057292 0.001874 1.216962 11.669297 1.216962 1.437278 326.648438 314.562500   6   7 0.857143    0       28     33     3         4       11      13 2.000000 1.750000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 11   1   6   6 1.331759 0.103700 0.001819 1.437278 13.106576 1.437278 0.289733 334.921875 323.679688   7  10 0.700000    0       34     40     3         4       14      16 2.333333 2.500000 1.527525 2.081666 0.654654 0.780625  0.155989 -0.024447            0            2
 11   1   7   7 0.270756 0.018977 0.000000 0.289733 13.396308 0.289733 0.425703 330.531250 318.781250   1   2 0.500000    0       41     41     1         2       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 11   1   8   8 0.402697 0.023006 0.000000 0.425703 13.822011 0.425703 0.290135 330.531250 318.781250   2   3 0.666667    0       42     43     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   1   9   9 0.273912 0.016222 0.000000 0.290135 14.112146 0.290135 0.424826 330.656250 318.781250   1   1 1.000000    0       44     44     1         1       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 11   1  10  10 0.405906 0.018920 0.000000 0.424826 14.536972 0.424826 0.428024 330.656250 318.781250   2   3 0.666667    0       45     46     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   1  11  11 0.404557 0.023467 0.000000 0.428024 14.964996 0.428024 0.429526 330.656250 318.781250   2   3 0.666667    0       47     48     1         2       21      21 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 11   1  12  12 0.402274 0.025840 0.001412 0.429526 15.394522 0.429526 0.000000 330.656250 318.781250   2   2 1.000000    0       49     50     2         2       22      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 12   3   1   1 1.093992 0.114441 0.000000 1.208434  1.208434 1.208434 0.000000 332.433594 320.617188  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 12   2   1   1 1.951481 0.192266 0.004616 2.148363  3.356796 3.356796 1.084348 346.683594 336.675781  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.119061 0.844097 1.074538  0.342021  0.088621            0            2
 12   2   2   2 0.829377 0.249560 0.005412 1.084348  4.441145 1.084348 0.000000 342.375000 330.535156   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
 12   1   1   1 0.577220 0.029365 0.000854 0.607439  3.964235 3.964235 4.320992 335.414062 323.328125   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 12   1   2   2 2.829639 0.406128 0.000877 3.236644  8.285227 4.320992 0.566515 348.992188 337.730469  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 12   1   3   3 0.535358 0.029491 0.001666 0.566515  8.851743 0.566515 1.015015 338.500000 326.585938   3   3 1.000000    0       18     20     3         5        5       7 1.000000 0.600000 0.000000 0.288675 0.000000 0.433013  1.000000  0.769150            0            0
 12   1   4   4 0.962447 0.050781 0.001787 1.015015  9.866757 1.015015 1.213383 337.566406 325.500000   5   9 0.555556    0       21     25     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 12   1   5   5 1.152170 0.059316 0.001897 1.213383 11.080140 1.213383 1.435750 337.640625 325.753906   6   6 1.000000    0       26     31     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 12   1   6   6 1.333351 0.100539 0.001860 1.435750 12.515891 1.435750 0.287473 346.136719 334.324219   7   9 0.777778    0       32     38     3         5       14      16 2.333333 1.800000 1.527525 2.362908 0.654654 1.012675  0.155989 -0.103944            0            2
 12   1   7   7 0.268840 0.018633 0.000000 0.287473 12.803363 0.287473 0.419962 341.972656 330.011719   1   2 0.500000    0       39     39     1         2       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 12   1   8   8 0.400149 0.019812 0.000000 0.419962 13.223325 0.419962 0.292729 341.972656 330.011719   2   3 0.666667    0       40     41     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 12   1   9   9 0.275845 0.016885 0.000000 0.292729 13.516054 0.292729 0.421461 342.097656 330.011719   1   1 1.000000    0       42     42     1         1       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 12   1  10  10 0.401906 0.019554 0.000000 0.421461 13.937515 0.421461 0.426287 342.097656 330.011719   2   3 0.666667    0       43     44     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 12   1  11  11 0.402980 0.023307 0.000000 0.426287 14.363802 0.426287 0.432194 342.097656 330.011719   2   3 0.666667    0       45     46     1         2       21      21 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 12   1  12  12 0.403733 0.026322 0.002139 0.432194 14.795996 0.432194 0.000000 342.097656 330.011719   2   2 1.000000    0       47     48     2         2       22      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 13   3   1   1 1.097977 0.124956 0.000000 1.222933  1.222933 1.222933 0.000000 346.195312 334.355469  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 13   2   1   1 1.950878 0.221221 0.004713 2.176812  3.399745 3.399745 0.913806 363.699219 353.367188  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.119061 0.844097 1.074538  0.342021  0.088621            0            2
 13   2   2   2 0.830568 0.077462 0.005777 0.913806  4.313551 0.913806 0.000000 353.230469 341.664062   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.449868 0.000000 0.419877  1.000000  0.809101            0            4
 13   1   1   1 0.571912 0.029452 0.000791 0.602156  4.001901 4.001901 4.152447 348.390625 336.351562   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 13   1   2   2 2.828117 0.409638 0.000886 3.238641  8.154348 4.152447 0.937221 360.476562 349.332031  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 13   1   3   3 0.891675 0.043734 0.001813 0.937221  9.091569 0.937221 1.013755 349.101562 337.281250   5   5 1.000000    0       18     22     3         5        5       7 1.666667 1.000000 1.154701 1.443376 0.692820 1.082532  0.301253  0.186810            0            0
 13   1   4   4 0.961960 0.049960 0.001835 1.013755 10.105325 1.013755 1.214177 349.105469 337.281250   5   9 0.555556    0       23     27     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 13   1   5   5 1.151432 0.060952 0.001793 1.214177 11.319502 1.214177 1.626614 349.332031 337.281250   6   6 1.000000    0       28     33     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 13   1   6   6 1.333793 0.291063 0.001757 1.626614 12.946116 1.626614 0.290412 356.636719 344.843750   7   9 0.777778    0       34     40     3         5       14      16 2.333333 1.800000 1.527525 2.362908 0.654654 1.012675  0.155989 -0.103944            0            2
 13   1   7   7 0.271811 0.018601 0.000000 0.290412 13.236527 0.290412 0.422516 351.933594 340.078125   1   2 0.500000    0       41     41     1         2       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 13   1   8   8 0.402682 0.019834 0.000000 0.422516 13.659044 0.422516 0.289077 351.933594 340.078125   2   3 0.666667    0       42     43     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 13   1   9   9 0.272516 0.016561 0.000000 0.289077 13.948121 0.289077 0.420130 351.933594 340.078125   1   1 1.000000    0       44     44     1         1       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 13   1  10  10 0.400816 0.019314 0.000000 0.420130 14.368251 0.420130 0.427138 351.933594 340.078125   2   3 0.666667    0       45     46     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 13   1  11  11 0.403579 0.023559 0.000000 0.427138 14.795389 0.427138 0.434573 351.933594 340.078125   2   3 0.666667    0       47     48     1         2       21      21 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 13   1  12  12 0.407181 0.025947 0.001445 0.434573 15.229962 0.434573 0.000000 352.136719 340.078125   2   2 1.000000    0       49     50     2         2       22      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 14   3   1   1 1.097411 0.302946 0.000000 1.400357  1.400357 1.400357 0.000000 354.160156 342.164062  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   2   1   1 1.926357 0.220547 0.004513 2.151417  3.551775 3.551775 0.912732 373.789062 363.636719  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.119061 0.844097 1.074538  0.342021  0.088621            0            2
 14   2   2   2 0.823665 0.083372 0.005696 0.912732  4.464507 0.912732 0.000000 361.886719 350.179688   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.626783 0.000000 0.548435  1.000000  0.749935            0            4
 14   1   1   1 0.575808 0.030025 0.000805 0.606638  4.158413 4.158413 4.168886 357.195312 345.351562   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 14   1   2   2 2.833592 0.421702 0.000860 3.256154  8.327298 4.168886 0.933658 371.187500 359.578125  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 14   1   3   3 0.889168 0.042723 0.001766 0.933658  9.260956 0.933658 1.013178 359.515625 347.792969   5   5 1.000000    0       18     22     3         5        5       7 1.666667 1.000000 1.154701 1.443376 0.692820 1.082532  0.301253  0.186810            0            0
 14   1   4   4 0.960701 0.050642 0.001835 1.013178 10.274134 1.013178 1.215076 359.546875 347.792969   5   9 0.555556    0       23     27     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 14   1   5   5 1.151958 0.061249 0.001869 1.215076 11.489210 1.215076 1.638105 352.578125 341.656250   6   6 1.000000    0       28     33     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 14   1   6   6 1.329107 0.307139 0.001858 1.638105 13.127315 1.638105 0.289690 364.562500 353.507812   7   9 0.777778    0       34     40     3         5       14      16 2.333333 1.800000 1.527525 1.607275 0.654654 0.741819  0.155989  0.127713            0            2
 14   1   7   7 0.271065 0.018625 0.000000 0.289690 13.417005 0.289690 0.420623 360.261719 348.601562   1   2 0.500000    0       41     41     1         2       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 14   1   8   8 0.401224 0.019398 0.000000 0.420623 13.837628 0.420623 0.288647 360.277344 348.601562   2   3 0.666667    0       42     43     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   1   9   9 0.272294 0.016353 0.000000 0.288647 14.126274 0.288647 0.421450 360.339844 348.601562   1   1 1.000000    0       44     44     1         1       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 14   1  10  10 0.402544 0.018906 0.000000 0.421450 14.547724 0.421450 0.290166 360.347656 348.601562   2   3 0.666667    0       45     46     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   1  11  11 0.273936 0.016230 0.000000 0.290166 14.837890 0.290166 0.574973 360.347656 348.601562   1   1 1.000000    0       47     47     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 14   1  12  12 0.539605 0.033964 0.001404 0.574973 15.412863 0.574973 0.000000 360.425781 348.601562   3   4 0.750000    0       48     50     2         3       22      23 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 15   3   1   1 1.094054 0.116814 0.000000 1.210868  1.210868 1.210868 0.000000 362.937500 351.226562  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   2   1   1 1.945398 0.389458 0.004505 2.339361  3.550229 3.550229 0.906911 378.699219 368.570312  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.167333 0.844097 1.087130  0.342021  0.083383            0            2
 15   2   2   2 0.822966 0.078157 0.005788 0.906911  4.457140 0.906911 0.000000 374.468750 362.757812   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
 15   1   1   1 0.575056 0.029532 0.000935 0.605523  4.155752 4.155752 3.965506 366.585938 354.675781   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 15   1   2   2 2.835452 0.222269 0.000873 3.058595  8.121258 3.965506 0.942023 379.550781 368.359375  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 15   1   3   3 0.895899 0.044223 0.001900 0.942023  9.063280 0.942023 1.011179 368.675781 356.933594   5   5 1.000000    0       18     22     3         5        5       7 1.666667 1.000000 1.154701 1.443376 0.692820 1.082532  0.301253  0.186810            0            0
 15   1   4   4 0.959671 0.049498 0.002010 1.011179 10.074459 1.011179 1.416685 368.898438 356.933594   5   9 0.555556    0       23     27     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 15   1   5   5 1.153560 0.261424 0.001701 1.416685 11.491144 1.416685 1.425863 368.902344 356.933594   6   6 1.000000    0       28     33     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 15   1   6   6 1.331521 0.092498 0.001844 1.425863 12.917007 1.425863 0.287497 375.722656 364.000000   7   9 0.777778    0       34     40     3         5       14      16 2.333333 1.800000 2.309401 1.258306 0.989743 0.686349 -0.089344  0.258506            0            2
 15   1   7   7 0.268933 0.018564 0.000000 0.287497 13.204504 0.287497 0.422743 372.894531 361.035156   1   2 0.500000    0       41     41     1         2       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 15   1   8   8 0.399542 0.023202 0.000000 0.422743 13.627247 0.422743 0.284742 372.894531 361.035156   2   3 0.666667    0       42     43     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   1   9   9 0.268658 0.016084 0.000000 0.284742 13.911989 0.284742 0.422049 372.894531 361.035156   1   1 1.000000    0       44     44     1         1       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 15   1  10  10 0.402584 0.019465 0.000000 0.422049 14.334038 0.422049 0.427152 372.894531 361.035156   2   3 0.666667    0       45     46     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   1  11  11 0.402914 0.024237 0.000000 0.427152 14.761190 0.427152 0.430347 373.019531 361.035156   2   3 0.666667    0       47     48     1         2       21      21 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 15   1  12  12 0.403150 0.025559 0.001637 0.430347 15.191536 0.430347 0.000000 373.019531 361.035156   2   2 1.000000    0       49     50     2         2       22      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 16   3   1   1 1.093095 0.322677 0.000000 1.415772  1.415772 1.415772 0.000000 375.781250 364.105469  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   2   1   1 1.936573 0.210672 0.004394 2.151640  3.567412 3.567412 0.912061 394.992188 384.761719  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.119061 0.844097 1.074538  0.342021  0.088621            0            2
 16   2   2   2 0.825463 0.081098 0.005500 0.912061  4.479472 0.912061 0.000000 386.398438 374.656250   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.449868 0.000000 0.419877  1.000000  0.809101            0            4
 16   1   1   1 0.575360 0.030001 0.000835 0.606196  4.173607 4.173607 4.179139 380.804688 369.054688   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 16   1   2   2 2.817434 0.448686 0.000957 3.267078  8.352746 4.179139 0.566121 394.320312 383.296875  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 16   1   3   3 0.534783 0.029477 0.001860 0.566121  8.918867 0.566121 1.011450 382.781250 370.953125   3   3 1.000000    0       18     20     3         5        5       7 1.000000 0.600000 0.000000 0.288675 0.000000 0.433013  1.000000  0.769150            0            0
 16   1   4   4 0.959899 0.049618 0.001934 1.011450  9.930318 1.011450 1.213216 382.792969 370.953125   5   9 0.555556    0       21     25     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 16   1   5   5 1.153634 0.057705 0.001877 1.213216 11.143533 1.213216 1.425607 382.871094 370.953125   6   6 1.000000    0       26     31     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 16   1   6   6 1.332311 0.091543 0.001753 1.425607 12.569140 1.425607 0.503044 387.562500 375.871094   7   9 0.777778    0       32     38     3         5       14      16 2.333333 1.800000 1.527525 1.607275 0.654654 0.741819  0.155989  0.127713            0            2
 16   1   7   7 0.269437 0.233607 0.000000 0.503044 13.072184 0.503044 0.417087 385.574219 373.636719   1   2 0.500000    0       39     39     1         2       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 16   1   8   8 0.397254 0.019833 0.000000 0.417087 13.489271 0.417087 0.286051 385.574219 373.636719   2   3 0.666667    0       40     41     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   1   9   9 0.269796 0.016254 0.000000 0.286051 13.775321 0.286051 0.422617 385.574219 373.636719   1   1 1.000000    0       42     42     1         1       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 16   1  10  10 0.399777 0.022841 0.000000 0.422617 14.197939 0.422617 0.288448 385.574219 373.636719   2   2 1.000000    0       43     44     1         1       20      20 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   1  11  11 0.272967 0.015481 0.000000 0.288448 14.486386 0.288448 0.575782 385.574219 373.636719   1   2 0.500000    0       45     45     1         2       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 16   1  12  12 0.540750 0.033588 0.001444 0.575782 15.062169 0.575782 0.000000 385.578125 373.640625   3   4 0.750000    0       46     48     2         3       22      23 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 17   3   1   1 1.093901 0.116972 0.000000 1.210873  1.210873 1.210873 0.000000 387.421875 375.648438  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   2   1   1 1.932827 0.197938 0.004542 2.135307  3.346180 3.346180 1.137941 402.960938 392.960938  16  25 0.640000   25        1     16     6         7        1       6 2.666667 3.571429 2.250926 4.119061 0.844097 1.074538  0.342021  0.088621            0            2
 17   2   2   2 0.827820 0.304539 0.005583 1.137941  4.484121 1.137941 0.000000 397.890625 386.187500   7  12 0.583333   12       17     23     7        12        7      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
 17   1   1   1 0.572329 0.252538 0.000863 0.825729  4.171909 4.171909 4.168238 390.160156 378.429688   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 17   1   2   2 2.829619 0.199722 0.000956 3.030297  8.340147 4.168238 0.563864 403.230469 391.996094  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 17   1   3   3 0.532245 0.030034 0.001586 0.563864  8.904011 0.563864 1.015202 394.292969 382.757812   3   3 1.000000    0       18     20     3         5        5       7 1.000000 0.600000 0.000000 0.288675 0.000000 0.433013  1.000000  0.769150            0            0
 17   1   4   4 0.963601 0.049824 0.001777 1.015202  9.919213 1.015202 1.219527 394.296875 382.757812   5   9 0.555556    0       21     25     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 17   1   5   5 1.156739 0.061088 0.001700 1.219527 11.138740 1.219527 1.203889 394.605469 383.257812   6   6 1.000000    0       26     31     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 17   1   6   6 1.113130 0.089060 0.001699 1.203889 12.342629 1.203889 0.419904 398.664062 388.023438   6   7 0.857143    0       32     37     3         4       14      16 2.000000 1.750000 1.732051 1.732051 0.866025 0.866025  0.085162  0.085162            0            2
 17   1   7   7 0.395225 0.024680 0.000000 0.419904 12.762533 0.419904 0.421203 396.992188 385.347656   2   3 0.666667    0       38     39     1         2       17      17 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   1   8   8 0.397033 0.024170 0.000000 0.421203 13.183736 0.421203 0.292372 397.054688 385.347656   2   3 0.666667    0       40     41     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 17   1   9   9 0.273332 0.019040 0.000000 0.292372 13.476108 0.292372 0.421534 397.054688 385.347656   1   2 0.500000    0       42     42     1         2       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 17   1  10  10 0.400959 0.020574 0.000000 0.421534 13.897642 0.421534 0.423706 397.054688 385.347656   2   3 0.666667    0       43     44     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   1  11  11 0.400331 0.023376 0.000000 0.423706 14.321348 0.423706 0.431349 397.054688 385.347656   2   3 0.666667    0       45     46     1         2       21      21 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 17   1  12  12 0.402948 0.026786 0.001614 0.431349 14.752697 0.431349 0.000000 395.835938 384.011719   2   2 1.000000    0       47     48     2         2       22      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 18   3   1   1 1.094392 0.109814 0.000000 1.204206  1.204206 1.204206 0.000000 398.113281 386.269531  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 18   2   1   1 1.958303 0.472616 0.004600 2.435519  3.639725 3.639725 0.917252 417.707031 407.207031  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.119061 0.844097 1.074538  0.342021  0.088621            0            2
 18   2   2   2 0.824767 0.086852 0.005633 0.917252  4.556976 0.917252 0.000000 401.402344 391.062500   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
 18   1   1   1 0.574723 0.030030 0.000922 0.605675  4.245399 4.245399 3.982756 402.867188 391.027344   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 18   1   2   2 2.831973 0.232647 0.000884 3.065505  8.228156 3.982756 0.936528 414.628906 403.257812  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 18   1   3   3 0.891839 0.042775 0.001915 0.936528  9.164684 0.936528 1.013210 404.757812 393.179688   5   5 1.000000    0       18     22     3         5        5       7 1.666667 1.000000 1.154701 1.443376 0.692820 1.082532  0.301253  0.186810            0            0
 18   1   4   4 0.959998 0.051317 0.001895 1.013210 10.177894 1.013210 1.449092 404.769531 393.179688   5   9 0.555556    0       23     27     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 18   1   5   5 1.153819 0.293478 0.001795 1.449092 11.626987 1.449092 1.434908 404.519531 392.929688   6   6 1.000000    0       28     33     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 18   1   6   6 1.336338 0.096674 0.001896 1.434908 13.061894 1.434908 0.290410 410.566406 398.851562   7   9 0.777778    0       34     40     3         5       14      16 2.333333 1.800000 1.527525 1.607275 0.654654 0.741819  0.155989  0.127713            0            2
 18   1   7   7 0.271849 0.018561 0.000000 0.290410 13.352305 0.290410 0.424357 400.816406 390.625000   1   1 1.000000    0       41     41     1         1       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 18   1   8   8 0.399687 0.024669 0.000000 0.424357 13.776661 0.424357 0.290287 401.371094 391.160156   2   3 0.666667    0       42     43     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 18   1   9   9 0.272453 0.017834 0.000000 0.290287 14.066948 0.290287 0.429108 401.578125 391.160156   1   2 0.500000    0       44     44     1         2       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 18   1  10  10 0.404829 0.024279 0.000000 0.429108 14.496056 0.429108 0.427906 401.937500 391.257812   2   3 0.666667    0       45     46     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 18   1  11  11 0.403655 0.024251 0.000000 0.427906 14.923962 0.427906 0.673566 402.128906 391.429688   2   3 0.666667    0       47     48     1         2       21      21 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 18   1  12  12 0.405769 0.266208 0.001589 0.673566 15.597529 0.673566 0.000000 402.382812 391.714844   2   2 1.000000    0       49     50     2         2       22      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 19   3   1   1 1.091346 0.115119 0.000000 1.206465  1.206465 1.206465 0.000000 404.761719 393.375000  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   2   1   1 1.941499 0.209086 0.004367 2.154951  3.361416 3.361416 1.163120 426.312500 416.718750  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.119061 0.844097 1.074538  0.342021  0.088621            0            2
 19   2   2   2 0.823660 0.333806 0.005653 1.163120  4.524536 1.163120 0.000000 421.437500 409.621094   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
 19   1   1   1 0.571458 0.029838 0.000810 0.602107  3.963523 3.963523 4.490401 414.214844 402.648438   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 19   1   2   2 2.822856 0.503483 0.000941 3.327281  8.453923 4.490401 0.566439 429.359375 418.101562  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 19   1   3   3 0.534722 0.029836 0.001880 0.566439  9.020363 0.566439 1.015329 416.242188 404.425781   3   3 1.000000    0       18     20     3         5        5       7 1.000000 0.600000 0.000000 0.288675 0.000000 0.433013  1.000000  0.769150            0            0
 19   1   4   4 0.963201 0.050264 0.001865 1.015329 10.035692 1.015329 1.214039 416.246094 404.425781   5   9 0.555556    0       21     25     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 19   1   5   5 1.153862 0.058437 0.001740 1.214039 11.249731 1.214039 1.436766 416.257812 404.425781   6   6 1.000000    0       26     31     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 19   1   6   6 1.327457 0.107517 0.001792 1.436766 12.686497 1.436766 0.286202 423.804688 412.253906   7   9 0.777778    0       32     38     3         5       14      16 2.333333 1.800000 1.527525 1.607275 0.654654 0.741819  0.155989  0.127713            0            2
 19   1   7   7 0.267972 0.018230 0.000000 0.286202 12.972699 0.286202 0.423090 420.449219 408.847656   1   1 1.000000    0       39     39     1         1       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   1   8   8 0.399778 0.023312 0.000000 0.423090 13.395789 0.423090 0.294658 420.449219 408.847656   2   3 0.666667    0       40     41     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 19   1   9   9 0.276089 0.018569 0.000000 0.294658 13.690447 0.294658 0.424322 420.449219 408.847656   1   2 0.500000    0       42     42     1         2       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 19   1  10  10 0.401069 0.023253 0.000000 0.424322 14.114769 0.424322 0.288865 420.449219 408.847656   2   3 0.666667    0       43     44     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   1  11  11 0.272907 0.015958 0.000000 0.288865 14.403634 0.288865 0.569186 420.449219 408.847656   1   1 1.000000    0       45     45     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 19   1  12  12 0.538000 0.029713 0.001473 0.569186 14.972819 0.569186 0.000000 420.539062 408.847656   3   4 0.750000    0       46     48     2         3       22      23 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 20   3   1   1 1.093433 0.122159 0.000000 1.215592  1.215592 1.215592 0.000000 421.855469 410.097656  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   2   1   1 1.943249 0.485316 0.004239 2.432804  3.648396 3.648396 0.905517 438.644531 428.679688  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.119061 0.844097 1.074538  0.342021  0.088621            0            2
 20   2   2   2 0.823204 0.076548 0.005765 0.905517  4.553914 0.905517 0.000000 431.257812 419.671875   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
 20   1   1   1 0.574207 0.029129 0.000918 0.604254  4.252650 4.252650 3.957592 426.703125 415.050781   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 20   1   2   2 2.832465 0.218627 0.000983 3.052075  8.210243 3.957592 0.569007 437.558594 426.132812  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 20   1   3   3 0.537667 0.029620 0.001719 0.569007  8.779250 0.569007 1.014533 427.382812 415.769531   3   3 1.000000    0       18     20     3         5        5       7 1.000000 0.600000 0.000000 0.288675 0.000000 0.433013  1.000000  0.769150            0            0
 20   1   4   4 0.962603 0.049916 0.002014 1.014533  9.793783 1.014533 1.212173 427.382812 415.769531   5   9 0.555556    0       21     25     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 20   1   5   5 1.151911 0.058337 0.001925 1.212173 11.005956 1.212173 1.425706 427.773438 416.269531   6   6 1.000000    0       26     31     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 20   1   6   6 1.327660 0.096195 0.001851 1.425706 12.431662 1.425706 0.286657 433.429688 421.937500   7   9 0.777778    0       32     38     3         5       14      16 2.333333 1.800000 1.527525 1.607275 0.654654 0.741819  0.155989  0.127713            0            2
 20   1   7   7 0.267499 0.019157 0.000000 0.286657 12.718318 0.286657 0.680625 430.636719 418.898438   1   1 1.000000    0       39     39     1         1       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   1   8   8 0.395550 0.285076 0.000000 0.680625 13.398944 0.680625 0.289988 430.699219 418.898438   2   3 0.666667    0       40     41     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 20   1   9   9 0.271975 0.018013 0.000000 0.289988 13.688932 0.289988 0.420899 430.449219 418.648438   1   2 0.500000    0       42     42     1         2       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 20   1  10  10 0.401311 0.019588 0.000000 0.420899 14.109831 0.420899 0.292979 430.449219 418.648438   2   3 0.666667    0       43     44     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   1  11  11 0.276864 0.016114 0.000000 0.292979 14.402810 0.292979 0.570827 430.449219 418.648438   1   1 1.000000    0       45     45     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 20   1  12  12 0.535616 0.033593 0.001618 0.570827 14.973636 0.570827 0.000000 430.449219 418.648438   3   4 0.750000    0       46     48     2         3       22      23 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 21   3   1   1 1.092852 0.114120 0.000000 1.206973  1.206973 1.206973 0.000000 431.511719 419.898438  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 21   2   1   1 1.937542 0.183469 0.004376 2.125386  3.332359 3.332359 0.906851 444.699219 434.484375  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.119061 0.844097 1.074538  0.342021  0.088621            0            2
 21   2   2   2 0.825514 0.076083 0.005255 0.906851  4.239210 0.906851 0.000000 443.371094 431.703125   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
 21   1   1   1 0.572144 0.030616 0.000756 0.603515  3.935874 3.935874 3.953322 435.937500 424.242188   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 21   1   2   2 2.831739 0.213855 0.000877 3.046471  7.889196 3.953322 0.834007 448.078125 436.921875  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 21   1   3   3 0.534900 0.297624 0.001483 0.834007  8.723203 0.834007 1.007737 439.320312 427.671875   3   3 1.000000    0       18     20     3         5        5       7 1.000000 0.600000 0.000000 0.288675 0.000000 0.433013  1.000000  0.769150            0            0
 21   1   4   4 0.955292 0.050678 0.001766 1.007737  9.730940 1.007737 1.217007 439.328125 427.671875   5   9 0.555556    0       21     25     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 21   1   5   5 1.155752 0.059464 0.001790 1.217007 10.947947 1.217007 1.418781 439.335938 427.671875   6   6 1.000000    0       26     31     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 21   1   6   6 1.324645 0.092500 0.001636 1.418781 12.366728 1.418781 0.284301 442.859375 431.324219   7   9 0.777778    0       32     38     3         5       14      16 2.333333 1.800000 1.527525 2.362908 0.654654 1.012675  0.155989 -0.103944            0            2
 21   1   7   7 0.265328 0.018973 0.000000 0.284301 12.651029 0.284301 0.415549 442.972656 431.425781   1   1 1.000000    0       39     39     1         1       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 21   1   8   8 0.395475 0.020074 0.000000 0.415549 13.066577 0.415549 0.293595 442.972656 431.425781   2   3 0.666667    0       40     41     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 21   1   9   9 0.275725 0.017870 0.000000 0.293595 13.360172 0.293595 0.420430 443.035156 431.425781   1   2 0.500000    0       42     42     1         2       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 21   1  10  10 0.400182 0.020248 0.000000 0.420430 13.780602 0.420430 0.289946 443.097656 431.425781   2   3 0.666667    0       43     44     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 21   1  11  11 0.273088 0.016858 0.000000 0.289946 14.070548 0.289946 0.569285 443.097656 431.425781   1   1 1.000000    0       45     45     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 21   1  12  12 0.538572 0.029342 0.001371 0.569285 14.639834 0.569285 0.000000 443.097656 431.425781   3   4 0.750000    0       46     48     2         3       22      23 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 22   3   1   1 1.092521 0.384384 0.000000 1.476906  1.476906 1.476906 0.000000 443.722656 432.179688  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   2   1   1 1.944253 0.221446 0.004494 2.170192  3.647098 3.647098 0.909334 459.753906 450.015625  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.119061 0.844097 1.074538  0.342021  0.088621            0            2
 22   2   2   2 0.824812 0.078644 0.005878 0.909334  4.556432 0.909334 0.000000 452.300781 440.796875   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.449868 0.000000 0.419877  1.000000  0.809101            0            4
 22   1   1   1 0.575105 0.029879 0.000885 0.605870  4.252968 4.252968 3.978918 447.042969 435.324219   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 22   1   2   2 2.827040 0.241598 0.000947 3.069584  8.231886 3.978918 0.842349 459.699219 448.726562  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 22   1   3   3 0.532818 0.307842 0.001690 0.842349  9.074235 0.842349 1.012964 448.898438 437.476562   3   3 1.000000    0       18     20     3         5        5       7 1.000000 0.600000 0.000000 0.288675 0.000000 0.433013  1.000000  0.769150            0            0
 22   1   4   4 0.960458 0.050596 0.001909 1.012964 10.087199 1.012964 1.212994 449.027344 437.476562   5   9 0.555556    0       21     25     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 22   1   5   5 1.153826 0.057417 0.001751 1.212994 11.300193 1.212994 1.432606 449.031250 437.476562   6   6 1.000000    0       26     31     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 22   1   6   6 1.333218 0.097524 0.001864 1.432606 12.732800 1.432606 0.284926 453.199219 442.027344   7   9 0.777778    0       32     38     3         5       14      16 2.333333 1.800000 1.527525 1.607275 0.654654 0.741819  0.155989  0.127713            0            2
 22   1   7   7 0.265850 0.019076 0.000000 0.284926 13.017725 0.284926 0.415168 451.753906 440.027344   1   2 0.500000    0       39     39     1         2       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 22   1   8   8 0.395302 0.019866 0.000000 0.415168 13.432893 0.415168 0.288922 451.753906 440.027344   2   3 0.666667    0       40     41     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   1   9   9 0.271932 0.016990 0.000000 0.288922 13.721815 0.288922 0.422010 451.753906 440.027344   1   1 1.000000    0       42     42     1         1       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 22   1  10  10 0.402206 0.019804 0.000000 0.422010 14.143825 0.422010 0.289629 451.753906 440.027344   2   3 0.666667    0       43     44     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   1  11  11 0.273306 0.016323 0.000000 0.289629 14.433454 0.289629 0.573296 451.753906 440.027344   1   1 1.000000    0       45     45     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 22   1  12  12 0.539180 0.032682 0.001434 0.573296 15.006750 0.573296 0.000000 451.753906 440.027344   3   4 0.750000    0       46     48     2         3       22      23 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 23   3   1   1 1.092229 0.413901 0.000000 1.506130  1.506130 1.506130 0.000000 453.191406 441.527344  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   2   1   1 1.936734 0.189102 0.004341 2.130177  3.636307 3.636307 0.909503 466.167969 455.968750  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.119061 0.844097 1.074538  0.342021  0.088621            0            2
 23   2   2   2 0.822396 0.081519 0.005588 0.909503  4.545810 0.909503 0.000000 463.621094 452.175781   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.449868 0.000000 0.419877  1.000000  0.809101            0            4
 23   1   1   1 0.575317 0.029350 0.001448 0.606115  4.242422 4.242422 3.977501 456.191406 444.468750   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 23   1   2   2 2.839331 0.227642 0.001024 3.067998  8.219923 3.977501 0.562567 470.195312 459.113281  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 23   1   3   3 0.531657 0.029217 0.001693 0.562567  8.782490 0.562567 1.018178 460.609375 449.125000   3   3 1.000000    0       18     20     3         5        5       7 1.000000 0.600000 0.000000 0.288675 0.000000 0.433013  1.000000  0.769150            0            0
 23   1   4   4 0.964986 0.051356 0.001837 1.018178  9.800669 1.018178 1.509493 460.613281 449.125000   5   9 0.555556    0       21     25     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 23   1   5   5 1.156538 0.351011 0.001945 1.509493 11.310162 1.509493 1.434307 460.613281 449.125000   6   6 1.000000    0       26     31     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 23   1   6   6 1.330730 0.101789 0.001788 1.434307 12.744469 1.434307 0.286414 464.605469 453.531250   7   9 0.777778    0       32     38     3         5       14      16 2.333333 1.800000 1.527525 1.607275 0.654654 0.741819  0.155989  0.127713            0            2
 23   1   7   7 0.267647 0.018766 0.000000 0.286414 13.030882 0.286414 0.420633 462.988281 451.648438   1   2 0.500000    0       39     39     1         2       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 23   1   8   8 0.396388 0.024245 0.000000 0.420633 13.451515 0.420633 0.286604 462.988281 451.648438   2   3 0.666667    0       40     41     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   1   9   9 0.270275 0.016328 0.000000 0.286604 13.738119 0.286604 0.419850 462.988281 451.648438   1   1 1.000000    0       42     42     1         1       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 23   1  10  10 0.400705 0.019146 0.000000 0.419850 14.157969 0.419850 0.425721 462.988281 451.648438   2   3 0.666667    0       43     44     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   1  11  11 0.401819 0.023901 0.000000 0.425721 14.583690 0.425721 0.429173 462.988281 451.648438   2   3 0.666667    0       45     46     1         2       21      21 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 23   1  12  12 0.401566 0.026067 0.001540 0.429173 15.012863 0.429173 0.000000 462.988281 451.648438   2   2 1.000000    0       47     48     2         2       22      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 24   3   1   1 1.093319 0.111200 0.000000 1.204519  1.204519 1.204519 0.000000 463.160156 451.648438  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   2   1   1 1.927786 0.500528 0.004851 2.433165  3.637684 3.637684 1.213266 478.949219 469.312500  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.167333 0.844097 1.087130  0.342021  0.083383            0            2
 24   2   2   2 0.820815 0.386934 0.005517 1.213266  4.850950 1.213266 0.000000 473.460938 461.933594   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
 24   1   1   1 0.572135 0.029591 0.000780 0.602506  4.240190 4.240190 4.272085 468.722656 457.035156   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 24   1   2   2 2.837286 0.220651 0.000881 3.058819  8.512275 4.272085 0.565680 480.617188 469.449219  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 24   1   3   3 0.533822 0.029975 0.001883 0.565680  9.077955 0.565680 1.011675 470.277344 458.875000   3   3 1.000000    0       18     20     3         5        5       7 1.000000 0.600000 0.000000 0.288675 0.000000 0.433013  1.000000  0.769150            0            0
 24   1   4   4 0.958950 0.050529 0.002197 1.011675 10.089630 1.011675 1.211388 470.292969 458.875000   5   9 0.555556    0       21     25     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 24   1   5   5 1.152658 0.057019 0.001711 1.211388 11.301018 1.211388 1.419945 470.531250 458.875000   6   6 1.000000    0       26     31     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 24   1   6   6 1.326033 0.092166 0.001746 1.419945 12.720963 1.419945 0.286385 473.753906 462.781250   7   9 0.777778    0       32     38     3         5       14      16 2.333333 1.800000 1.527525 0.763763 0.654654 0.458258  0.155989  0.483485            0            2
 24   1   7   7 0.267316 0.019069 0.000000 0.286385 13.007348 0.286385 0.419215 472.812500 461.160156   1   1 1.000000    0       39     39     1         1       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   1   8   8 0.395062 0.024152 0.000000 0.419215 13.426563 0.419215 0.290564 472.812500 461.160156   2   3 0.666667    0       40     41     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 24   1   9   9 0.272491 0.018073 0.000000 0.290564 13.717127 0.290564 0.419943 472.812500 461.160156   1   2 0.500000    0       42     42     1         2       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 24   1  10  10 0.399825 0.020118 0.000000 0.419943 14.137069 0.419943 0.288408 472.812500 461.160156   2   3 0.666667    0       43     44     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   1  11  11 0.272419 0.015988 0.000000 0.288408 14.425477 0.288408 0.569038 472.812500 461.160156   1   1 1.000000    0       45     45     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 24   1  12  12 0.538138 0.029275 0.001625 0.569038 14.994515 0.569038 0.000000 472.816406 461.164062   3   4 0.750000    0       46     48     2         3       22      23 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 25   3   1   1 1.106436 0.117406 0.000000 1.223842  1.223842 1.223842 0.000000 474.625000 463.167969  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 25   2   1   1 1.934861 0.535860 0.004644 2.475365  3.699207 3.699207 0.910002 489.722656 480.109375  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.119061 0.844097 1.074538  0.342021  0.088621            0            2
 25   2   2   2 0.826159 0.077926 0.005918 0.910002  4.609209 0.910002 0.000000 483.128906 471.531250   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.449868 0.000000 0.419877  1.000000  0.809101            0            4
 25   1   1   1 0.570322 0.029895 0.000796 0.601014  4.300221 4.300221 3.966520 477.097656 465.707031   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 25   1   2   2 2.838082 0.217442 0.000993 3.056517  8.266740 3.966520 0.566419 488.757812 477.957031  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 25   1   3   3 0.534722 0.030077 0.001620 0.566419  8.833160 0.566419 1.015207 479.312500 467.968750   3   3 1.000000    0       18     20     3         5        5       7 1.000000 0.600000 0.000000 0.288675 0.000000 0.433013  1.000000  0.769150            0            0
 25   1   4   4 0.961493 0.051683 0.002030 1.015207  9.848366 1.015207 1.219135 479.375000 467.968750   5   9 0.555556    0       21     25     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 25   1   5   5 1.158661 0.058667 0.001807 1.219135 11.067502 1.219135 1.436608 479.839844 468.468750   6   6 1.000000    0       26     31     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 25   1   6   6 1.334735 0.100142 0.001731 1.436608 12.504110 1.436608 0.287629 485.449219 474.628906   7   9 0.777778    0       32     38     3         5       14      16 2.333333 1.800000 1.527525 1.607275 0.654654 0.741819  0.155989  0.127713            0            2
 25   1   7   7 0.269438 0.018192 0.000000 0.287629 12.791739 0.287629 0.423214 482.734375 471.257812   1   2 0.500000    0       39     39     1         2       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 25   1   8   8 0.399951 0.023263 0.000000 0.423214 13.214953 0.423214 0.290349 482.734375 471.257812   2   3 0.666667    0       40     41     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 25   1   9   9 0.273454 0.016894 0.000000 0.290349 13.505302 0.290349 0.420675 482.734375 471.257812   1   1 1.000000    0       42     42     1         1       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 25   1  10  10 0.400589 0.020086 0.000000 0.420675 13.925977 0.420675 0.287307 482.734375 471.257812   2   3 0.666667    0       43     44     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 25   1  11  11 0.271152 0.016154 0.000000 0.287307 14.213283 0.287307 0.890898 482.734375 471.257812   1   1 1.000000    0       45     45     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 25   1  12  12 0.540307 0.349162 0.001429 0.890898 15.104181 0.890898 0.000000 482.859375 471.257812   3   4 0.750000    0       46     48     2         3       22      23 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 26   3   1   1 1.096100 0.125356 0.000000 1.221457  1.221457 1.221457 0.000000 484.500000 473.515625  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   2   1   1 1.936858 0.195811 0.004691 2.137360  3.358817 3.358817 0.908737 497.105469 487.414062  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.167333 0.844097 1.087130  0.342021  0.083383            0            2
 26   2   2   2 0.825980 0.076804 0.005953 0.908737  4.267554 0.908737 0.000000 494.847656 483.261719   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
 26   1   1   1 0.572000 0.029488 0.000824 0.602312  3.961129 3.961129 3.950346 487.082031 475.679688   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 26   1   2   2 2.839013 0.201648 0.000947 3.041609  7.911475 3.950346 0.935536 498.863281 487.722656  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 26   1   3   3 0.890385 0.043141 0.002011 0.935536  8.847011 0.935536 1.012582 489.488281 477.984375   5   5 1.000000    0       18     22     3         5        5       7 1.666667 1.000000 1.154701 1.443376 0.692820 1.082532  0.301253  0.186810            0            0
 26   1   4   4 0.960700 0.050037 0.001845 1.012582  9.859593 1.012582 1.212994 489.925781 478.484375   5   9 0.555556    0       23     27     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 26   1   5   5 1.150668 0.060475 0.001850 1.212994 11.072587 1.212994 1.758239 490.675781 479.234375   6   6 1.000000    0       28     33     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 26   1   6   6 1.327622 0.428780 0.001837 1.758239 12.830826 1.758239 0.290759 494.886719 483.386719   7   9 0.777778    0       34     40     3         5       14      16 2.333333 1.800000 1.527525 0.763763 0.654654 0.458258  0.155989  0.483485            0            2
 26   1   7   7 0.270983 0.019776 0.000000 0.290759 13.121585 0.290759 0.425575 494.511719 482.988281   1   1 1.000000    0       41     41     1         1       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   1   8   8 0.402006 0.023570 0.000000 0.425575 13.547160 0.425575 0.289951 494.574219 482.988281   2   3 0.666667    0       42     43     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 26   1   9   9 0.272144 0.017808 0.000000 0.289951 13.837111 0.289951 0.424197 494.578125 482.992188   1   2 0.500000    0       44     44     1         2       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 26   1  10  10 0.404342 0.019855 0.000000 0.424197 14.261308 0.424197 0.425283 494.578125 482.992188   2   3 0.666667    0       45     46     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   1  11  11 0.402017 0.023266 0.000000 0.425283 14.686591 0.425283 0.430391 494.578125 482.992188   2   3 0.666667    0       47     48     1         2       21      21 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 26   1  12  12 0.403560 0.025418 0.001413 0.430391 15.116982 0.430391 0.000000 494.578125 482.992188   2   2 1.000000    0       49     50     2         2       22      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 27   3   1   1 1.095001 0.114931 0.000000 1.209932  1.209932 1.209932 0.000000 496.453125 484.996094  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   2   1   1 1.940758 0.537766 0.004715 2.483239  3.693171 3.693171 0.912944 508.757812 499.121094  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.119061 0.844097 1.074538  0.342021  0.088621            0            2
 27   2   2   2 0.825611 0.081790 0.005543 0.912944  4.606115 0.912944 0.000000 506.769531 495.285156   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
 27   1   1   1 0.575466 0.029618 0.000803 0.605886  4.299057 4.299057 3.946714 499.699219 488.175781   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 27   1   2   2 2.805839 0.226977 0.000953 3.033770  8.245771 3.946714 0.937413 511.824219 500.917969  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 27   1   3   3 0.892470 0.043087 0.001857 0.937413  9.183184 0.937413 1.013217 502.800781 491.257812   5   5 1.000000    0       18     22     3         5        5       7 1.666667 1.000000 1.154701 1.443376 0.692820 1.082532  0.301253  0.186810            0            0
 27   1   4   4 0.960463 0.050771 0.001983 1.013217 10.196401 1.013217 1.219291 502.808594 491.257812   5   9 0.555556    0       23     27     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 27   1   5   5 1.156457 0.060814 0.002021 1.219291 11.415693 1.219291 1.427130 502.808594 491.257812   6   6 1.000000    0       28     33     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 27   1   6   6 1.332415 0.092865 0.001850 1.427130 12.842823 1.427130 0.288883 505.968750 494.656250   7   9 0.777778    0       34     40     3         5       14      16 2.333333 1.800000 1.527525 1.607275 0.654654 0.741819  0.155989  0.127713            0            2
 27   1   7   7 0.270238 0.018645 0.000000 0.288883 13.131706 0.288883 0.424157 506.433594 495.011719   1   1 1.000000    0       41     41     1         1       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   1   8   8 0.400495 0.023662 0.000000 0.424157 13.555863 0.424157 0.288670 506.433594 495.011719   2   3 0.666667    0       42     43     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 27   1   9   9 0.270369 0.018302 0.000000 0.288670 13.844533 0.288670 0.426253 506.496094 495.011719   1   2 0.500000    0       44     44     1         2       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 27   1  10  10 0.402421 0.023832 0.000000 0.426253 14.270785 0.426253 0.292615 506.558594 495.011719   2   3 0.666667    0       45     46     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   1  11  11 0.275887 0.016729 0.000000 0.292615 14.563401 0.292615 0.571860 506.558594 495.011719   1   1 1.000000    0       47     47     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 27   1  12  12 0.540361 0.029909 0.001590 0.571860 15.135261 0.571860 0.000000 506.558594 495.011719   3   4 0.750000    0       48     50     2         3       22      23 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 28   3   1   1 1.096333 0.140168 0.000000 1.236501  1.236501 1.236501 0.000000 507.808594 496.261719  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   2   1   1 1.938289 0.188867 0.004409 2.131566  3.368067 3.368067 0.907235 519.101562 509.289062  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.119061 0.844097 1.074538  0.342021  0.088621            0            2
 28   2   2   2 0.824989 0.076619 0.005626 0.907235  4.275302 0.907235 0.000000 515.242188 503.734375   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.449868 0.000000 0.419877  1.000000  0.809101            0            4
 28   1   1   1 0.571766 0.029193 0.000788 0.601747  3.969814 3.969814 3.933772 510.429688 499.042969   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 28   1   2   2 2.818798 0.206883 0.000856 3.026537  7.903586 3.933772 0.939053 520.726562 509.726562  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 28   1   3   3 0.894033 0.043232 0.001787 0.939053  8.842638 0.939053 1.360350 510.968750 499.453125   5   5 1.000000    0       18     22     3         5        5       7 1.666667 1.000000 1.154701 1.443376 0.692820 1.082532  0.301253  0.186810            0            0
 28   1   4   4 0.958719 0.399665 0.001966 1.360350 10.202989 1.360350 1.217825 510.972656 499.453125   5   9 0.555556    0       23     27     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 28   1   5   5 1.155875 0.060095 0.001855 1.217825 11.420813 1.217825 1.426470 510.984375 499.703125   6   6 1.000000    0       28     33     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 28   1   6   6 1.333488 0.091107 0.001876 1.426470 12.847284 1.426470 0.288866 514.648438 503.359375   7   9 0.777778    0       34     40     3         5       14      16 2.333333 1.800000 1.527525 1.607275 0.654654 0.741819  0.155989  0.127713            0            2
 28   1   7   7 0.270501 0.018365 0.000000 0.288866 13.136150 0.288866 0.423964 514.847656 503.460938   1   2 0.500000    0       41     41     1         2       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 28   1   8   8 0.400332 0.023632 0.000000 0.423964 13.560114 0.423964 0.288331 514.972656 503.460938   2   3 0.666667    0       42     43     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   1   9   9 0.271237 0.017094 0.000000 0.288331 13.848444 0.288331 0.420666 514.972656 503.460938   1   1 1.000000    0       44     44     1         1       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 28   1  10  10 0.401495 0.019171 0.000000 0.420666 14.269110 0.420666 0.291249 514.972656 503.460938   2   3 0.666667    0       45     46     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   1  11  11 0.275347 0.015902 0.000000 0.291249 14.560359 0.291249 0.573291 514.972656 503.460938   1   1 1.000000    0       47     47     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 28   1  12  12 0.539265 0.032507 0.001518 0.573291 15.133650 0.573291 0.000000 514.972656 503.460938   3   4 0.750000    0       48     50     2         3       22      23 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 29   3   1   1 1.093929 0.109785 0.000000 1.203715  1.203715 1.203715 0.000000 515.160156 503.710938  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   2   1   1 1.957951 0.596225 0.004591 2.558767  3.762482 3.762482 1.292734 534.390625 524.449219  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.119061 0.844097 1.074538  0.342021  0.088621            0            2
 29   2   2   2 0.823292 0.463860 0.005583 1.292734  5.055216 1.292734 0.000000 528.027344 516.683594   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
 29   1   1   1 0.570196 0.029739 0.000864 0.600799  4.363281 4.363281 4.343607 519.503906 508.101562   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 29   1   2   2 2.831562 0.218449 0.000862 3.050873  8.706888 4.343607 0.928169 530.550781 519.355469  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 29   1   3   3 0.885460 0.040936 0.001773 0.928169  9.635057 0.928169 1.012614 520.835938 509.351562   5   5 1.000000    0       18     22     3         5        5       7 1.666667 1.000000 1.154701 1.443376 0.692820 1.082532  0.301253  0.186810            0            0
 29   1   4   4 0.960079 0.050563 0.001972 1.012614 10.647670 1.012614 1.213401 520.835938 509.351562   5   9 0.555556    0       23     27     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 29   1   5   5 1.152453 0.059109 0.001838 1.213401 11.861071 1.213401 1.431473 520.835938 509.351562   6   6 1.000000    0       28     33     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 29   1   6   6 1.326451 0.103232 0.001790 1.431473 13.292545 1.431473 0.290785 527.839844 516.531250   7   9 0.777778    0       34     40     3         5       14      16 2.333333 1.800000 1.527525 1.607275 0.654654 0.741819  0.155989  0.127713            0            2
 29   1   7   7 0.271047 0.019738 0.000000 0.290785 13.583330 0.290785 0.419343 525.875000 514.406250   1   1 1.000000    0       41     41     1         1       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   1   8   8 0.399723 0.019619 0.000000 0.419343 14.002672 0.419343 0.287157 525.875000 514.406250   2   3 0.666667    0       42     43     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 29   1   9   9 0.269732 0.017425 0.000000 0.287157 14.289829 0.287157 0.425217 525.875000 514.406250   1   2 0.500000    0       44     44     1         2       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 29   1  10  10 0.405380 0.019837 0.000000 0.425217 14.715047 0.425217 0.422048 525.875000 514.406250   2   3 0.666667    0       45     46     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   1  11  11 0.402022 0.020026 0.000000 0.422048 15.137094 0.422048 0.429729 525.875000 514.406250   2   3 0.666667    0       47     48     1         2       21      21 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 29   1  12  12 0.402374 0.025926 0.001429 0.429729 15.566823 0.429729 0.000000 525.875000 514.406250   2   2 1.000000    0       49     50     2         2       22      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 30   3   1   1 1.097725 0.111460 0.000000 1.209185  1.209185 1.209185 0.000000 525.875000 514.406250  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   2   1   1 1.950346 0.200465 0.004422 2.155233  3.364418 3.364418 0.914501 541.011719 531.238281  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.119061 0.844097 1.074538  0.342021  0.088621            0            2
 30   2   2   2 0.826982 0.081934 0.005584 0.914501  4.278919 0.914501 0.000000 535.589844 524.351562   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
 30   1   1   1 0.570425 0.029662 0.000857 0.600944  3.965362 3.965362 3.987366 530.640625 519.218750   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 30   1   2   2 2.837936 0.233901 0.001028 3.072865  7.952728 3.987366 0.564571 542.628906 531.855469  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 30   1   3   3 0.533486 0.029466 0.001619 0.564571  8.517299 0.564571 1.387242 533.664062 522.363281   3   3 1.000000    0       18     20     3         5        5       7 1.000000 0.600000 0.000000 0.288675 0.000000 0.433013  1.000000  0.769150            0            0
 30   1   4   4 0.963907 0.421551 0.001784 1.387242  9.904541 1.387242 1.221833 533.722656 522.363281   5   9 0.555556    0       21     25     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 30   1   5   5 1.161514 0.058340 0.001978 1.221833 11.126374 1.221833 1.447928 533.722656 522.363281   6   6 1.000000    0       26     31     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 30   1   6   6 1.334027 0.112052 0.001849 1.447928 12.574302 1.447928 0.287103 540.660156 530.296875   7   9 0.777778    0       32     38     3         5       14      16 2.333333 1.800000 1.527525 1.607275 0.654654 0.741819  0.155989  0.127713            0            2
 30   1   7   7 0.268727 0.018376 0.000000 0.287103 12.861405 0.287103 0.416313 535.015625 523.574219   1   1 1.000000    0       39     39     1         1       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   1   8   8 0.395934 0.020379 0.000000 0.416313 13.277717 0.416313 0.289862 535.015625 523.574219   2   3 0.666667    0       40     41     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 30   1   9   9 0.271962 0.017900 0.000000 0.289862 13.567579 0.289862 0.420397 535.015625 523.574219   1   2 0.500000    0       42     42     1         2       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 30   1  10  10 0.399879 0.020518 0.000000 0.420397 13.987976 0.420397 0.422325 535.015625 523.574219   2   3 0.666667    0       43     44     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   1  11  11 0.402447 0.019878 0.000000 0.422325 14.410301 0.422325 0.429685 535.015625 523.574219   2   3 0.666667    0       45     46     1         2       21      21 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 30   1  12  12 0.402886 0.025345 0.001453 0.429685 14.839985 0.429685 0.000000 535.015625 523.574219   2   2 1.000000    0       47     48     2         2       22      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 31   3   1   1 1.096989 0.138228 0.000000 1.235217  1.235217 1.235217 0.000000 537.328125 526.085938  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 31   2   1   1 1.942286 0.625092 0.004501 2.571879  3.807095 3.807095 0.912004 558.566406 549.035156  16  25 0.640000   25        1     16     6         7        1       6 2.666667 3.571429 2.250926 4.119061 0.844097 1.074538  0.342021  0.088621            0            2
 31   2   2   2 0.827919 0.077885 0.006200 0.912004  4.719099 0.912004 0.000000 544.007812 533.761719   7  12 0.583333   12       17     23     7        12        7      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
 31   1   1   1 0.577655 0.029473 0.000810 0.607938  4.415033 4.415033 4.000453 542.675781 531.550781   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 31   1   2   2 2.832335 0.255157 0.000956 3.088449  8.415486 4.000453 0.936749 555.269531 544.613281  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 31   1   3   3 0.890312 0.044409 0.002028 0.936749  9.352234 0.936749 1.013155 531.507812 522.617188   5   5 1.000000    0       18     22     3         5        5       7 1.666667 1.000000 1.154701 1.443376 0.692820 1.082532  0.301253  0.186810            0            0
 31   1   4   4 0.959428 0.051995 0.001732 1.013155 10.365390 1.013155 1.219754 535.046875 526.003906   5   9 0.555556    0       23     27     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 31   1   5   5 1.156439 0.061329 0.001986 1.219754 11.585143 1.219754 1.589978 537.984375 527.960938   6   6 1.000000    0       28     33     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 31   1   6   6 1.117358 0.470942 0.001678 1.589978 13.175121 1.589978 0.417425 541.328125 531.554688   6   7 0.857143    0       34     39     3         4       14      16 2.000000 1.750000 1.732051 1.732051 0.866025 0.866025  0.085162  0.085162            0            2
 31   1   7   7 0.396699 0.020726 0.000000 0.417425 13.592546 0.417425 0.421991 543.613281 533.175781   2   3 0.666667    0       40     41     1         2       17      17 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 31   1   8   8 0.401356 0.020634 0.000000 0.421991 14.014537 0.421991 0.288991 543.675781 533.175781   2   3 0.666667    0       42     43     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 31   1   9   9 0.270519 0.018472 0.000000 0.288991 14.303528 0.288991 0.425056 543.675781 533.175781   1   2 0.500000    0       44     44     1         2       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 31   1  10  10 0.400905 0.024151 0.000000 0.425056 14.728584 0.425056 0.288441 543.683594 533.175781   2   3 0.666667    0       45     46     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 31   1  11  11 0.271114 0.017328 0.000000 0.288441 15.017026 0.288441 0.576525 543.707031 533.175781   1   1 1.000000    0       47     47     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 31   1  12  12 0.545417 0.029622 0.001485 0.576525 15.593550 0.576525 0.000000 543.707031 533.175781   3   4 0.750000    0       48     50     2         3       22      23 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 32   3   1   1 1.096820 0.119396 0.000000 1.216216  1.216216 1.216216 0.000000 546.562500 535.425781  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 32   2   1   1 1.935892 0.215030 0.004591 2.155513  3.371729 3.371729 0.909839 563.300781 553.812500  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.167333 0.844097 1.087130  0.342021  0.083383            0            2
 32   2   2   2 0.829720 0.074613 0.005505 0.909839  4.281568 0.909839 0.000000 556.554688 545.421875   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.449868 0.000000 0.419877  1.000000  0.809101            0            4
 32   1   1   1 0.572719 0.029141 0.000822 0.602682  3.974412 3.974412 4.375036 551.195312 539.972656   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 32   1   2   2 2.836366 0.627983 0.000848 3.465197  8.349448 4.375036 0.563648 562.386719 551.738281  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 32   1   3   3 0.532197 0.029664 0.001787 0.563648  8.913096 0.563648 1.016538 552.500000 541.140625   3   3 1.000000    0       18     20     3         5        5       7 1.000000 0.600000 0.000000 0.288675 0.000000 0.433013  1.000000  0.769150            0            0
 32   1   4   4 0.964960 0.049829 0.001749 1.016538  9.929634 1.016538 1.217773 552.500000 541.140625   5   9 0.555556    0       21     25     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 32   1   5   5 1.156870 0.059189 0.001714 1.217773 11.147407 1.217773 1.439394 552.507812 541.140625   6   7 0.857143    0       26     31     3         4       11      13 2.000000 1.750000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 32   1   6   6 1.331892 0.105695 0.001807 1.439394 12.586801 1.439394 0.285880 558.562500 547.578125   7  10 0.700000    0       32     38     3         4       14      16 2.333333 2.500000 1.527525 2.081666 0.654654 0.780625  0.155989 -0.024447            0            2
 32   1   7   7 0.267455 0.018426 0.000000 0.285880 12.872681 0.285880 0.419662 555.968750 544.898438   1   2 0.500000    0       39     39     1         2       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 32   1   8   8 0.396871 0.022790 0.000000 0.419662 13.292343 0.419662 0.290220 556.031250 544.898438   2   3 0.666667    0       40     41     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 32   1   9   9 0.273708 0.016511 0.000000 0.290220 13.582563 0.290220 0.419013 556.031250 544.898438   1   1 1.000000    0       42     42     1         1       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 32   1  10  10 0.400056 0.018957 0.000000 0.419013 14.001576 0.419013 0.421708 556.031250 544.898438   2   3 0.666667    0       43     44     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 32   1  11  11 0.402249 0.019459 0.000000 0.421708 14.423284 0.421708 0.429076 556.031250 544.898438   2   3 0.666667    0       45     46     1         2       21      21 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 32   1  12  12 0.402023 0.025640 0.001413 0.429076 14.852360 0.429076 0.000000 556.042969 544.910156   2   2 1.000000    0       47     48     2         2       22      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 33   3   1   1 1.095188 0.123579 0.000000 1.218767  1.218767 1.218767 0.000000 557.292969 546.160156  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   2   1   1 1.948955 0.643761 0.004464 2.597181  3.815947 3.815947 0.909473 576.574219 566.714844  16  25 0.640000   25        1     16     6         7        1       6 2.666667 3.571429 2.250926 4.167333 0.844097 1.087130  0.342021  0.083383            0            2
 33   2   2   2 0.828229 0.075450 0.005794 0.909473  4.725420 0.909473 0.000000 564.910156 553.550781   7  12 0.583333   12       17     23     7        12        7      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
 33   1   1   1 0.573218 0.029372 0.000785 0.603374  4.419321 4.419321 3.973075 561.300781 549.941406   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 33   1   2   2 2.843768 0.218892 0.000943 3.063603  8.392396 3.973075 0.564978 572.515625 561.539062  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 33   1   3   3 0.534140 0.029059 0.001779 0.564978  8.957375 0.564978 1.016583 562.023438 550.664062   3   3 1.000000    0       18     20     3         5        5       7 1.000000 0.600000 0.000000 0.288675 0.000000 0.433013  1.000000  0.769150            0            0
 33   1   4   4 0.964396 0.050256 0.001931 1.016583  9.973958 1.016583 1.217455 562.027344 550.664062   5   9 0.555556    0       21     25     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 33   1   5   5 1.155505 0.060119 0.001831 1.217455 11.191412 1.217455 1.203129 560.808594 549.445312   6   7 0.857143    0       26     31     3         4       11      13 2.000000 1.750000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 33   1   6   6 1.117408 0.084018 0.001702 1.203129 12.394541 1.203129 0.414978 565.519531 554.714844   6   8 0.750000    0       32     37     3         3       14      16 2.000000 2.666667 1.732051 2.081666 0.866025 0.780625  0.085162 -0.024447            0            2
 33   1   7   7 0.394578 0.020399 0.000000 0.414978 12.809519 0.414978 0.422325 564.449219 553.214844   2   3 0.666667    0       38     39     1         2       17      17 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   1   8   8 0.398376 0.023949 0.000000 0.422325 13.231844 0.422325 0.288935 564.449219 553.214844   2   3 0.666667    0       40     41     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 33   1   9   9 0.271711 0.017225 0.000000 0.288935 13.520779 0.288935 0.829651 564.574219 553.214844   1   2 0.500000    0       42     42     1         2       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 33   1  10  10 0.400575 0.429076 0.000000 0.829651 14.350430 0.829651 0.290082 564.574219 553.214844   2   3 0.666667    0       43     44     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   1  11  11 0.273650 0.016432 0.000000 0.290082 14.640513 0.290082 0.571400 564.574219 553.214844   1   1 1.000000    0       45     45     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 33   1  12  12 0.540877 0.029098 0.001425 0.571400 15.211913 0.571400 0.000000 564.574219 553.214844   3   4 0.750000    0       46     48     2         3       22      23 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 34   3   1   1 1.096650 0.110838 0.000000 1.207489  1.207489 1.207489 0.000000 566.523438 555.218750  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   2   1   1 1.947368 0.213290 0.004348 2.165006  3.372495 3.372495 0.916485 583.367188 573.703125  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.119061 0.844097 1.074538  0.342021  0.088621            0            2
 34   2   2   2 0.826887 0.084103 0.005495 0.916485  4.288979 0.916485 0.000000 577.507812 567.148438   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
 34   1   1   1 0.572808 0.029724 0.000848 0.603380  3.975875 3.975875 3.989538 571.445312 561.246094   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 34   1   2   2 2.823111 0.248878 0.001063 3.073053  7.965412 3.989538 0.933779 584.968750 575.035156  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 34   1   3   3 0.887965 0.043909 0.001905 0.933779  8.899191 0.933779 1.011352 574.699219 564.289062   5   5 1.000000    0       18     22     3         5        5       7 1.666667 1.000000 1.154701 1.443376 0.692820 1.082532  0.301253  0.186810            0            0
 34   1   4   4 0.959344 0.049981 0.002027 1.011352  9.910543 1.011352 1.213889 573.531250 563.113281   5   9 0.555556    0       23     27     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 34   1   5   5 1.152791 0.059279 0.001819 1.213889 11.124433 1.213889 1.432315 573.531250 563.113281   6   6 1.000000    0       28     33     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 34   1   6   6 1.332013 0.098495 0.001807 1.432315 12.556748 1.432315 0.291979 576.742188 566.515625   7   9 0.777778    0       34     40     3         5       14      16 2.333333 1.800000 1.527525 1.607275 0.654654 0.741819  0.155989  0.127713            0            2
 34   1   7   7 0.273864 0.018115 0.000000 0.291979 12.848726 0.291979 0.425050 576.671875 566.367188   1   1 1.000000    0       41     41     1         1       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   1   8   8 0.404600 0.020450 0.000000 0.425050 13.273776 0.425050 0.289986 576.671875 566.367188   2   3 0.666667    0       42     43     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 34   1   9   9 0.271874 0.018112 0.000000 0.289986 13.563762 0.289986 0.422986 576.671875 566.367188   1   2 0.500000    0       44     44     1         2       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 34   1  10  10 0.402695 0.020291 0.000000 0.422986 13.986748 0.422986 0.432236 576.734375 566.367188   2   3 0.666667    0       45     46     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   1  11  11 0.408006 0.024230 0.000000 0.432236 14.418984 0.432236 0.430106 576.800781 566.367188   2   3 0.666667    0       47     48     1         2       21      21 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 34   1  12  12 0.403273 0.025326 0.001507 0.430106 14.849090 0.430106 0.000000 576.800781 566.367188   2   2 1.000000    0       49     50     2         2       22      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 35   3   1   1 1.097497 0.116583 0.000000 1.214080  1.214080 1.214080 0.000000 577.238281 566.867188  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   2   1   1 1.946927 0.192792 0.004411 2.144129  3.358210 3.358210 0.913737 591.484375 582.707031  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.119061 0.844097 1.074538  0.342021  0.088621            0            2
 35   2   2   2 0.828328 0.079835 0.005574 0.913737  4.271947 0.913737 0.000000 578.816406 569.660156   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
 35   1   1   1 0.575361 0.029348 0.000857 0.605565  3.963775 3.963775 4.410217 581.937500 571.679688   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 35   1   2   2 2.837425 0.657866 0.001189 3.496480  8.373992 4.410217 0.566410 594.082031 584.304688  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 35   1   3   3 0.534976 0.029768 0.001666 0.566410  8.940402 0.566410 1.019101 584.878906 574.812500   3   3 1.000000    0       18     20     3         5        5       7 1.000000 0.600000 0.000000 0.288675 0.000000 0.433013  1.000000  0.769150            0            0
 35   1   4   4 0.964667 0.052431 0.002003 1.019101  9.959503 1.019101 1.217267 584.988281 574.812500   5   9 0.555556    0       21     25     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 35   1   5   5 1.154830 0.060562 0.001875 1.217267 11.176770 1.217267 1.439967 584.046875 573.714844   6   6 1.000000    0       26     31     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 35   1   6   6 1.333389 0.104808 0.001770 1.439967 12.616737 1.439967 0.286312 590.570312 580.390625   7   9 0.777778    0       32     38     3         5       14      16 2.333333 1.800000 1.527525 2.362908 0.654654 1.012675  0.155989 -0.103944            0            2
 35   1   7   7 0.268122 0.018190 0.000000 0.286312 12.903049 0.286312 0.417947 578.453125 569.476562   1   1 1.000000    0       39     39     1         1       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   1   8   8 0.397763 0.020184 0.000000 0.417947 13.320997 0.417947 0.291525 578.968750 570.046875   2   3 0.666667    0       40     41     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 35   1   9   9 0.272790 0.018735 0.000000 0.291525 13.612521 0.291525 0.419725 579.226562 570.164062   1   2 0.500000    0       42     42     1         2       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 35   1  10  10 0.400005 0.019719 0.000000 0.419725 14.032246 0.419725 0.424880 579.832031 570.734375   2   3 0.666667    0       43     44     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   1  11  11 0.404699 0.020181 0.000000 0.424880 14.457126 0.424880 0.432417 579.832031 570.734375   2   3 0.666667    0       45     46     1         2       21      21 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 35   1  12  12 0.404205 0.026578 0.001634 0.432417 14.889543 0.432417 0.000000 580.128906 571.035156   2   2 1.000000    0       47     48     2         2       22      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 36   3   1   1 1.097006 0.117891 0.000000 1.214897  1.214897 1.214897 0.000000 584.242188 575.292969  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 36   2   1   1 1.945011 0.654332 0.004679 2.604022  3.818919 3.818919 0.910990 604.550781 596.457031  16  25 0.640000   25        1     16     6         7        1       6 2.666667 3.571429 2.250926 4.167333 0.844097 1.087130  0.342021  0.083383            0            2
 36   2   2   2 0.830172 0.075488 0.005330 0.910990  4.729909 0.910990 0.000000 597.429688 587.070312   7  12 0.583333   12       17     23     7        12        7      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
 36   1   1   1 0.571894 0.031073 0.000811 0.603777  4.422696 4.422696 3.975396 593.250000 583.511719   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 36   1   2   2 2.820876 0.242475 0.001056 3.064406  8.398092 3.975396 0.939239 606.031250 596.296875  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 36   1   3   3 0.894419 0.042893 0.001928 0.939239  9.337332 0.939239 1.011082 595.878906 585.808594   5   5 1.000000    0       18     22     3         5        5       7 1.666667 1.000000 1.154701 1.443376 0.692820 1.082532  0.301253  0.186810            0            0
 36   1   4   4 0.959704 0.049547 0.001831 1.011082 10.348414 1.011082 1.215067 596.140625 585.808594   5   9 0.555556    0       23     27     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 36   1   5   5 1.156035 0.057245 0.001787 1.215067 11.563480 1.215067 1.205441 596.144531 585.808594   6   7 0.857143    0       28     33     3         4       11      13 2.000000 1.750000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 36   1   6   6 1.119839 0.083875 0.001727 1.205441 12.768921 1.205441 0.420543 597.214844 587.320312   6   8 0.750000    0       34     39     3         3       14      16 2.000000 2.666667 1.732051 2.886751 0.866025 1.082532  0.085162 -0.235717            0            2
 36   1   7   7 0.400606 0.019936 0.000000 0.420543 13.189464 0.420543 0.424370 596.718750 586.480469   2   3 0.666667    0       40     41     1         2       17      17 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 36   1   8   8 0.404709 0.019661 0.000000 0.424370 13.613834 0.424370 0.289882 596.718750 586.480469   2   3 0.666667    0       42     43     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 36   1   9   9 0.272178 0.017704 0.000000 0.289882 13.903716 0.289882 0.424208 596.718750 586.480469   1   2 0.500000    0       44     44     1         2       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 36   1  10  10 0.403701 0.020506 0.000000 0.424208 14.327924 0.424208 0.288392 596.843750 586.480469   2   3 0.666667    0       45     46     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 36   1  11  11 0.272452 0.015940 0.000000 0.288392 14.616316 0.288392 0.572619 596.843750 586.480469   1   1 1.000000    0       47     47     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 36   1  12  12 0.541101 0.030036 0.001482 0.572619 15.188935 0.572619 0.000000 596.843750 586.480469   3   4 0.750000    0       48     50     2         3       22      23 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 37   3   1   1 1.099760 0.116320 0.000000 1.216080  1.216080 1.216080 0.000000 598.292969 587.984375  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   2   1   1 1.946016 0.208385 0.004593 2.158993  3.375074 3.375074 0.912308 614.597656 605.710938  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.119061 0.844097 1.074538  0.342021  0.088621            0            2
 37   2   2   2 0.825730 0.080836 0.005743 0.912308  4.287382 0.912308 0.000000 610.445312 600.089844   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
 37   1   1   1 0.573680 0.029230 0.000857 0.603767  3.978841 3.978841 3.975917 604.378906 594.359375   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 37   1   2   2 2.834310 0.228303 0.000996 3.063609  7.954758 3.975917 0.938584 614.753906 604.902344  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 37   1   3   3 0.893922 0.042836 0.001826 0.938584  8.893341 0.938584 1.013953 605.058594 594.792969   5   5 1.000000    0       18     22     3         5        5       7 1.666667 1.000000 1.154701 1.443376 0.692820 1.082532  0.301253  0.186810            0            0
 37   1   4   4 0.961607 0.050581 0.001766 1.013953  9.907295 1.013953 1.217590 605.058594 594.792969   5   9 0.555556    0       23     27     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 37   1   5   5 1.156184 0.059449 0.001957 1.217590 11.124884 1.217590 1.910135 605.058594 594.792969   6   6 1.000000    0       28     33     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 37   1   6   6 1.334341 0.574002 0.001792 1.910135 13.035019 1.910135 0.294816 612.449219 602.210938   7   9 0.777778    0       34     40     3         5       14      16 2.333333 1.800000 1.527525 2.362908 0.654654 1.012675  0.155989 -0.103944            0            2
 37   1   7   7 0.276681 0.018135 0.000000 0.294816 13.329835 0.294816 0.423578 609.609375 599.316406   1   1 1.000000    0       41     41     1         1       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   1   8   8 0.403370 0.020208 0.000000 0.423578 13.753413 0.423578 0.291081 609.671875 599.316406   2   3 0.666667    0       42     43     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 37   1   9   9 0.272929 0.018152 0.000000 0.291081 14.044494 0.291081 0.423241 609.671875 599.316406   1   2 0.500000    0       44     44     1         2       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 37   1  10  10 0.403048 0.020193 0.000000 0.423241 14.467734 0.423241 0.291481 609.671875 599.316406   2   3 0.666667    0       45     46     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   1  11  11 0.274005 0.017476 0.000000 0.291481 14.759215 0.291481 0.572675 609.671875 599.316406   1   1 1.000000    0       47     47     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 37   1  12  12 0.541754 0.029509 0.001411 0.572675 15.331889 0.572675 0.000000 609.671875 599.316406   3   4 0.750000    0       48     50     2         3       22      23 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 38   3   1   1 1.096345 0.124130 0.000000 1.220475  1.220475 1.220475 0.000000 611.187500 601.074219  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 38   2   1   1 1.947886 0.220979 0.004670 2.173536  3.394011 3.394011 0.912354 626.468750 617.832031  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.119061 0.844097 1.074538  0.342021  0.088621            0            2
 38   2   2   2 0.828770 0.077831 0.005753 0.912354  4.306365 0.912354 0.000000 619.160156 609.062500   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
 38   1   1   1 0.573358 0.030079 0.000893 0.604329  3.998340 3.998340 3.970258 614.714844 604.597656   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 38   1   2   2 2.840564 0.216407 0.000934 3.057904  7.968598 3.970258 1.025725 627.675781 617.902344  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 38   1   3   3 0.533401 0.490531 0.001792 1.025725  8.994323 1.025725 1.014498 617.976562 608.007812   3   3 1.000000    0       18     20     3         5        5       7 1.000000 0.600000 0.000000 0.288675 0.000000 0.433013  1.000000  0.769150            0            0
 38   1   4   4 0.962307 0.050399 0.001792 1.014498 10.008821 1.014498 1.217243 616.871094 606.621094   5   9 0.555556    0       21     25     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 38   1   5   5 1.155782 0.059690 0.001771 1.217243 11.226063 1.217243 1.437840 616.875000 606.621094   6   6 1.000000    0       26     31     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 38   1   6   6 1.335265 0.100591 0.001983 1.437840 12.663903 1.437840 0.286840 620.558594 610.769531   7   9 0.777778    0       32     38     3         5       14      16 2.333333 1.800000 1.527525 1.607275 0.654654 0.741819  0.155989  0.127713            0            2
 38   1   7   7 0.268485 0.018355 0.000000 0.286840 12.950743 0.286840 0.420204 618.757812 608.539062   1   1 1.000000    0       39     39     1         1       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 38   1   8   8 0.399677 0.020527 0.000000 0.420204 13.370947 0.420204 0.292092 618.757812 608.539062   2   3 0.666667    0       40     41     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 38   1   9   9 0.273873 0.018219 0.000000 0.292092 13.663039 0.292092 0.425895 618.882812 608.539062   1   2 0.500000    0       42     42     1         2       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 38   1  10  10 0.401499 0.024396 0.000000 0.425895 14.088935 0.425895 0.289476 618.882812 608.539062   2   3 0.666667    0       43     44     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 38   1  11  11 0.273032 0.016444 0.000000 0.289476 14.378411 0.289476 0.568767 618.882812 608.539062   1   1 1.000000    0       45     45     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 38   1  12  12 0.537781 0.029525 0.001461 0.568767 14.947177 0.568767 0.000000 618.882812 608.539062   3   4 0.750000    0       46     48     2         3       22      23 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 39   3   1   1 1.096050 0.123535 0.000000 1.219586  1.219586 1.219586 0.000000 620.707031 610.542969  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 39   2   1   1 1.934135 0.694702 0.004312 2.633150  3.852736 3.852736 0.909574 635.656250 627.281250  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.167333 0.844097 1.087130  0.342021  0.083383            0            2
 39   2   2   2 0.827216 0.076893 0.005465 0.909574  4.762309 0.909574 0.000000 631.519531 621.589844   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
 39   1   1   1 0.575064 0.029660 0.000786 0.605509  4.458245 4.458245 3.979934 624.625000 614.386719   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 39   1   2   2 2.839348 0.229934 0.001078 3.070360  8.438179 3.979934 0.932764 636.519531 626.800781  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 39   1   3   3 0.886983 0.043926 0.001855 0.932764  9.370943 0.932764 1.015612 627.679688 617.562500   5   5 1.000000    0       18     22     3         5        5       7 1.666667 1.000000 1.154701 1.443376 0.692820 1.082532  0.301253  0.186810            0            0
 39   1   4   4 0.963760 0.049928 0.001923 1.015612 10.386555 1.015612 1.215742 627.691406 617.562500   5   9 0.555556    0       23     27     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 39   1   5   5 1.154442 0.059490 0.001810 1.215742 11.602296 1.215742 1.417859 627.691406 617.562500   6   6 1.000000    0       28     33     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 39   1   6   6 1.329135 0.086955 0.001769 1.417859 13.020155 1.417859 0.287912 630.593750 620.460938   7   9 0.777778    0       34     40     3         5       14      16 2.333333 1.800000 2.309401 1.154701 0.989743 0.692820 -0.089344  0.301253            0            2
 39   1   7   7 0.269726 0.018186 0.000000 0.287912 13.308067 0.287912 0.420236 630.949219 620.816406   1   1 1.000000    0       41     41     1         1       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 39   1   8   8 0.400026 0.020210 0.000000 0.420236 13.728303 0.420236 0.289185 630.949219 620.816406   2   3 0.666667    0       42     43     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 39   1   9   9 0.271160 0.018026 0.000000 0.289185 14.017488 0.289185 0.424578 630.949219 620.816406   1   2 0.500000    0       44     44     1         2       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 39   1  10  10 0.404267 0.020311 0.000000 0.424578 14.442067 0.424578 0.290418 630.949219 620.816406   2   3 0.666667    0       45     46     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 39   1  11  11 0.274404 0.016013 0.000000 0.290418 14.732484 0.290418 0.573901 630.949219 620.816406   1   1 1.000000    0       47     47     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 39   1  12  12 0.543161 0.029301 0.001440 0.573901 15.306385 0.573901 0.000000 630.949219 620.816406   3   4 0.750000    0       48     50     2         3       22      23 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 40   3   1   1 1.097298 0.122638 0.000000 1.219936  1.219936 1.219936 0.000000 633.222656 623.070312  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   2   1   1 1.950259 0.703992 0.004407 2.658657  3.878593 3.878593 0.906909 648.230469 639.738281  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.167333 0.844097 1.087130  0.342021  0.083383            0            2
 40   2   2   2 0.824274 0.077108 0.005527 0.906909  4.785503 0.906909 0.000000 642.515625 632.593750   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
 40   1   1   1 0.571061 0.029215 0.000791 0.601067  4.479660 4.479660 3.968269 636.886719 626.718750   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 40   1   2   2 2.835455 0.225022 0.000883 3.061359  8.447929 3.968269 0.940482 647.707031 637.808594  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 40   1   3   3 0.894112 0.044601 0.001769 0.940482  9.388410 0.940482 1.017286 639.011719 629.062500   5   5 1.000000    0       18     22     3         5        5       7 1.666667 1.000000 1.154701 1.443376 0.692820 1.082532  0.301253  0.186810            0            0
 40   1   4   4 0.965022 0.050216 0.002048 1.017286 10.405697 1.017286 1.217942 639.218750 629.062500   5   9 0.555556    0       23     27     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 40   1   5   5 1.156146 0.060043 0.001753 1.217942 11.623639 1.217942 1.429155 639.218750 629.062500   6   6 1.000000    0       28     33     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 40   1   6   6 1.328805 0.098492 0.001858 1.429155 13.052793 1.429155 0.286796 643.621094 633.472656   7   9 0.777778    0       34     40     3         5       14      16 2.333333 1.800000 2.309401 1.154701 0.989743 0.692820 -0.089344  0.301253            0            2
 40   1   7   7 0.268710 0.018085 0.000000 0.286796 13.339589 0.286796 0.420724 641.968750 631.816406   1   1 1.000000    0       41     41     1         1       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   1   8   8 0.400385 0.020339 0.000000 0.420724 13.760313 0.420724 0.290526 641.968750 631.816406   2   3 0.666667    0       42     43     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 40   1   9   9 0.272626 0.017899 0.000000 0.290526 14.050839 0.290526 0.422506 641.968750 631.816406   1   2 0.500000    0       44     44     1         2       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 40   1  10  10 0.402652 0.019854 0.000000 0.422506 14.473345 0.422506 0.289248 641.968750 631.816406   2   3 0.666667    0       45     46     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   1  11  11 0.272936 0.016312 0.000000 0.289248 14.762593 0.289248 0.574512 641.968750 631.816406   1   1 1.000000    0       47     47     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 40   1  12  12 0.543056 0.029993 0.001464 0.574512 15.337105 0.574512 0.000000 641.968750 631.816406   3   4 0.750000    0       48     50     2         3       22      23 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 41   3   1   1 1.095343 0.604865 0.000000 1.700208  1.700208 1.700208 0.000000 643.492188 633.570312  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 41   2   1   1 1.954245 0.189354 0.004432 2.148031  3.848239 3.848239 0.914549 656.238281 647.675781  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.167333 0.844097 1.087130  0.342021  0.083383            0            2
 41   2   2   2 0.828563 0.080466 0.005520 0.914549  4.762788 0.914549 0.000000 652.402344 642.316406   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
 41   1   1   1 0.572632 0.030030 0.000819 0.603481  4.451720 4.451720 4.004190 647.363281 637.156250   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 41   1   2   2 2.846382 0.242333 0.000926 3.089641  8.455910 4.004190 0.933617 659.402344 649.531250  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 41   1   3   3 0.888591 0.043330 0.001696 0.933617  9.389527 0.933617 1.011342 648.476562 638.289062   5   5 1.000000    0       18     22     3         5        5       7 1.666667 1.000000 1.154701 1.443376 0.692820 1.082532  0.301253  0.186810            0            0
 41   1   4   4 0.958866 0.050690 0.001786 1.011342 10.400869 1.011342 1.219507 648.480469 638.289062   5   9 0.555556    0       23     27     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 41   1   5   5 1.157654 0.060129 0.001724 1.219507 11.620377 1.219507 1.430377 648.484375 638.289062   6   6 1.000000    0       28     33     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 41   1   6   6 1.331345 0.097324 0.001708 1.430377 13.050753 1.430377 0.288650 653.085938 642.945312   7   9 0.777778    0       34     40     3         5       14      16 2.333333 1.800000 1.527525 0.763763 0.654654 0.458258  0.155989  0.483485            0            2
 41   1   7   7 0.270483 0.018167 0.000000 0.288650 13.339403 0.288650 0.420313 651.753906 641.539062   1   1 1.000000    0       41     41     1         1       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 41   1   8   8 0.400266 0.020047 0.000000 0.420313 13.759716 0.420313 0.291255 651.753906 641.539062   2   3 0.666667    0       42     43     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 41   1   9   9 0.272859 0.018397 0.000000 0.291255 14.050972 0.291255 0.422658 651.753906 641.539062   1   2 0.500000    0       44     44     1         2       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 41   1  10  10 0.401959 0.020699 0.000000 0.422658 14.473630 0.422658 0.289167 651.753906 641.539062   2   3 0.666667    0       45     46     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 41   1  11  11 0.273006 0.016161 0.000000 0.289167 14.762797 0.289167 1.076550 651.753906 641.539062   1   1 1.000000    0       47     47     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 41   1  12  12 0.541511 0.533462 0.001577 1.076550 15.839347 1.076550 0.000000 651.753906 641.539062   3   4 0.750000    0       48     50     2         3       22      23 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 42   3   1   1 1.095932 0.110033 0.000000 1.205966  1.205966 1.205966 0.000000 651.781250 641.789062  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 42   2   1   1 1.936239 0.192278 0.004749 2.133267  3.339233 3.339233 1.423435 665.789062 657.421875  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.167333 0.844097 1.087130  0.342021  0.083383            0            2
 42   2   2   2 0.826705 0.591113 0.005617 1.423435  4.762668 1.423435 0.000000 662.078125 652.070312   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.449868 0.000000 0.419877  1.000000  0.809101            0            4
 42   1   1   1 0.572230 0.029502 0.000931 0.602662  3.941895 3.941895 4.491015 655.167969 644.984375   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 42   1   2   2 2.828122 0.238563 0.000895 3.067580  8.432910 4.491015 0.935308 669.601562 660.031250  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 42   1   3   3 0.891397 0.042078 0.001833 0.935308  9.368218 0.935308 1.014861 658.546875 648.363281   5   5 1.000000    0       18     22     3         5        5       7 1.666667 1.000000 1.154701 1.443376 0.692820 1.082532  0.301253  0.186810            0            0
 42   1   4   4 0.963180 0.049747 0.001934 1.014861 10.383079 1.014861 1.219362 658.554688 648.363281   5   9 0.555556    0       23     27     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 42   1   5   5 1.156796 0.060716 0.001850 1.219362 11.602441 1.219362 1.442238 658.558594 648.363281   6   7 0.857143    0       28     33     3         4       11      13 2.000000 1.750000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 42   1   6   6 1.331312 0.108894 0.002032 1.442238 13.044679 1.442238 0.291827 664.980469 655.304688   7  10 0.700000    0       34     40     3         4       14      16 2.333333 2.500000 1.527525 1.892969 0.654654 0.668107  0.155989  0.033068            0            2
 42   1   7   7 0.270752 0.021075 0.000000 0.291827 13.336506 0.291827 0.422078 661.546875 651.546875   1   2 0.500000    0       41     41     1         2       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 42   1   8   8 0.402382 0.019696 0.000000 0.422078 13.758584 0.422078 0.286073 661.546875 651.546875   2   3 0.666667    0       42     43     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 42   1   9   9 0.269343 0.016731 0.000000 0.286073 14.044657 0.286073 0.420411 661.550781 651.546875   1   1 1.000000    0       44     44     1         1       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 42   1  10  10 0.400492 0.019920 0.000000 0.420411 14.465069 0.420411 0.425672 661.550781 651.546875   2   3 0.666667    0       45     46     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 42   1  11  11 0.402526 0.023146 0.000000 0.425672 14.890741 0.425672 0.429805 661.550781 651.546875   2   3 0.666667    0       47     48     1         2       21      21 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 42   1  12  12 0.402747 0.025518 0.001541 0.429805 15.320546 0.429805 0.000000 661.753906 651.546875   2   2 1.000000    0       49     50     2         2       22      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 43   3   1   1 1.097111 0.112247 0.000000 1.209358  1.209358 1.209358 0.000000 662.312500 652.296875  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 43   2   1   1 1.944347 0.238348 0.004606 2.187300  3.396658 3.396658 0.913582 684.128906 675.781250  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.167333 0.844097 1.087130  0.342021  0.083383            0            2
 43   2   2   2 0.824687 0.083128 0.005767 0.913582  4.310241 0.913582 0.000000 672.980469 662.816406   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
 43   1   1   1 0.577252 0.029765 0.000826 0.607843  4.004501 4.004501 3.948954 668.460938 658.335938   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 43   1   2   2 2.824173 0.210316 0.000883 3.035371  7.953455 3.948954 0.936966 679.527344 669.875000  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 43   1   3   3 0.891933 0.043209 0.001824 0.936966  8.890421 0.936966 1.013064 670.117188 659.988281   5   5 1.000000    0       18     22     3         5        5       7 1.666667 1.000000 1.154701 1.443376 0.692820 1.082532  0.301253  0.186810            0            0
 43   1   4   4 0.960438 0.050642 0.001984 1.013064  9.903485 1.013064 1.219767 670.117188 659.988281   5   9 0.555556    0       23     27     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 43   1   5   5 1.157519 0.060259 0.001990 1.219767 11.123252 1.219767 1.958532 670.121094 659.988281   6   6 1.000000    0       28     33     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 43   1   6   6 1.331142 0.625629 0.001761 1.958532 13.081784 1.958532 0.288417 674.742188 665.156250   7   9 0.777778    0       34     40     3         5       14      16 2.333333 1.800000 1.527525 0.763763 0.654654 0.458258  0.155989  0.483485            0            2
 43   1   7   7 0.270482 0.017935 0.000000 0.288417 13.370201 0.288417 0.421716 672.644531 662.542969   1   1 1.000000    0       41     41     1         1       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 43   1   8   8 0.402195 0.019521 0.000000 0.421716 13.791916 0.421716 0.286335 672.707031 662.542969   2   3 0.666667    0       42     43     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 43   1   9   9 0.268630 0.017705 0.000000 0.286335 14.078251 0.286335 0.420491 672.707031 662.542969   1   2 0.500000    0       44     44     1         2       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 43   1  10  10 0.400143 0.020348 0.000000 0.420491 14.498742 0.420491 0.422305 672.707031 662.542969   2   3 0.666667    0       45     46     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 43   1  11  11 0.402604 0.019701 0.000000 0.422305 14.921047 0.422305 0.429353 672.707031 662.542969   2   3 0.666667    0       47     48     1         2       21      21 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 43   1  12  12 0.402368 0.025381 0.001604 0.429353 15.350400 0.429353 0.000000 672.707031 662.542969   2   2 1.000000    0       49     50     2         2       22      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 44   3   1   1 1.096315 0.118745 0.000000 1.215060  1.215060 1.215060 0.000000 673.332031 663.292969  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   2   1   1 1.952773 0.233748 0.004858 2.191379  3.406439 3.406439 0.910550 693.152344 684.464844  16  25 0.640000   25        1     16     6         7        1       6 2.666667 3.571429 2.250926 4.167333 0.844097 1.087130  0.342021  0.083383            0            2
 44   2   2   2 0.828852 0.075761 0.005937 0.910550  4.316988 0.910550 0.000000 681.468750 671.320312   7  12 0.583333   12       17     23     7        12        7      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
 44   1   1   1 0.572765 0.029227 0.000952 0.602944  4.009383 4.009383 3.975233 678.558594 668.480469   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 44   1   2   2 2.832248 0.231484 0.000952 3.064684  7.984616 3.975233 1.462662 689.781250 680.332031  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 44   1   3   3 0.890082 0.570789 0.001791 1.462662  9.447278 1.462662 1.016100 679.121094 668.976562   5   5 1.000000    0       18     22     3         5        5       7 1.666667 1.000000 1.154701 1.443376 0.692820 1.082532  0.301253  0.186810            0            0
 44   1   4   4 0.963807 0.050183 0.002110 1.016100 10.463378 1.016100 1.214730 679.121094 668.976562   5   9 0.555556    0       23     27     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 44   1   5   5 1.154044 0.058858 0.001827 1.214730 11.678108 1.214730 1.200801 679.121094 668.976562   6   6 1.000000    0       28     33     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 44   1   6   6 1.119126 0.079727 0.001949 1.200801 12.878909 1.200801 0.423940 681.835938 671.996094   6   7 0.857143    0       34     39     3         4       14      16 2.000000 1.750000 1.732051 0.866025 0.866025 0.577350  0.085162  0.432183            0            2
 44   1   7   7 0.399313 0.024627 0.000000 0.423940 13.302848 0.423940 0.429286 681.007812 670.984375   2   3 0.666667    0       40     41     1         2       17      17 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   1   8   8 0.402966 0.026321 0.000000 0.429286 13.732135 0.429286 0.289542 681.132812 670.984375   2   3 0.666667    0       42     43     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 44   1   9   9 0.273178 0.016364 0.000000 0.289542 14.021677 0.289542 0.422197 681.132812 670.984375   1   2 0.500000    0       44     44     1         2       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 44   1  10  10 0.403187 0.019010 0.000000 0.422197 14.443874 0.422197 0.291182 681.132812 670.984375   2   3 0.666667    0       45     46     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   1  11  11 0.275518 0.015663 0.000000 0.291182 14.735056 0.291182 0.574879 681.132812 670.984375   1   1 1.000000    0       47     47     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 44   1  12  12 0.543419 0.029854 0.001607 0.574879 15.309935 0.574879 0.000000 681.132812 670.984375   3   4 0.750000    0       48     50     2         3       22      23 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 45   3   1   1 1.100108 0.113993 0.000000 1.214102  1.214102 1.214102 0.000000 682.191406 672.234375  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   2   1   1 1.949396 0.209264 0.004793 2.163453  3.377555 3.377555 0.922534 699.785156 691.433594  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.167333 0.844097 1.087130  0.342021  0.083383            0            2
 45   2   2   2 0.827596 0.088301 0.006637 0.922534  4.300089 0.922534 0.000000 694.445312 684.605469   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
 45   1   1   1 0.578322 0.030385 0.000842 0.609548  3.987103 3.987103 3.947569 687.527344 677.515625   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 45   1   2   2 2.820005 0.203954 0.001075 3.025035  7.934672 3.947569 0.565036 698.738281 689.089844  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 45   1   3   3 0.533728 0.029588 0.001720 0.565036  8.499708 0.565036 1.552255 690.253906 680.171875   3   3 1.000000    0       18     20     3         5        5       7 1.000000 0.600000 0.000000 0.288675 0.000000 0.433013  1.000000  0.769150            0            0
 45   1   4   4 0.961455 0.588867 0.001933 1.552255 10.051964 1.552255 1.213271 690.253906 680.171875   5   9 0.555556    0       21     25     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 45   1   5   5 1.154493 0.056638 0.002140 1.213271 11.265235 1.213271 1.442411 690.441406 680.421875   6   7 0.857143    0       26     31     3         4       11      13 2.000000 1.750000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 45   1   6   6 1.333538 0.106996 0.001877 1.442411 12.707646 1.442411 0.286779 696.558594 686.605469   7  10 0.700000    0       32     38     3         4       14      16 2.333333 2.500000 1.527525 1.892969 0.654654 0.668107  0.155989  0.033068            0            2
 45   1   7   7 0.267004 0.019775 0.000000 0.286779 12.994425 0.286779 0.418039 694.167969 684.078125   1   1 1.000000    0       39     39     1         1       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   1   8   8 0.397483 0.020556 0.000000 0.418039 13.412464 0.418039 0.290623 694.167969 684.078125   2   3 0.666667    0       40     41     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 45   1   9   9 0.271279 0.019344 0.000000 0.290623 13.703087 0.290623 0.424367 694.167969 684.078125   1   2 0.500000    0       42     42     1         2       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 45   1  10  10 0.404076 0.020291 0.000000 0.424367 14.127454 0.424367 0.424407 694.167969 684.078125   2   3 0.666667    0       43     44     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   1  11  11 0.402961 0.021446 0.000000 0.424407 14.551862 0.424407 0.429269 694.167969 684.078125   2   3 0.666667    0       45     46     1         2       21      21 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 45   1  12  12 0.401502 0.026158 0.001609 0.429269 14.981131 0.429269 0.000000 694.167969 684.078125   2   2 1.000000    0       47     48     2         2       22      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 46   3   1   1 1.094191 0.120387 0.000000 1.214578  1.214578 1.214578 0.000000 694.855469 684.828125  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   2   1   1 1.943964 0.197847 0.004614 2.146425  3.361003 3.361003 0.910651 709.117188 700.929688  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.167333 0.844097 1.087130  0.342021  0.083383            0            2
 46   2   2   2 0.824632 0.080098 0.005921 0.910651  4.271655 0.910651 0.000000 704.460938 694.605469   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
 46   1   1   1 0.570719 0.030053 0.000857 0.601629  3.962633 3.962633 3.946570 700.109375 690.218750   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 46   1   2   2 2.810727 0.224292 0.000900 3.035919  7.909203 3.946570 0.561688 711.160156 701.632812  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 46   1   3   3 0.530867 0.029061 0.001759 0.561688  8.470891 0.561688 1.015473 702.042969 691.984375   3   3 1.000000    0       18     20     3         5        5       7 1.000000 0.600000 0.000000 0.288675 0.000000 0.433013  1.000000  0.769150            0            0
 46   1   4   4 0.959418 0.054058 0.001997 1.015473  9.486364 1.015473 1.211808 702.042969 691.984375   5   9 0.555556    0       21     25     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 46   1   5   5 1.150024 0.059793 0.001991 1.211808 10.698172 1.211808 1.445315 702.042969 691.984375   6   7 0.857143    0       26     31     3         4       11      13 2.000000 1.750000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 46   1   6   6 1.325026 0.118316 0.001973 1.445315 12.143487 1.445315 0.284702 708.777344 699.175781   7  10 0.700000    0       32     38     3         4       14      16 2.333333 2.500000 1.527525 1.892969 0.654654 0.668107  0.155989  0.033068            0            2
 46   1   7   7 0.266073 0.018629 0.000000 0.284702 12.428189 0.284702 0.416236 703.906250 693.832031   1   1 1.000000    0       39     39     1         1       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   1   8   8 0.396548 0.019689 0.000000 0.416236 12.844425 0.416236 0.287907 703.910156 693.832031   2   3 0.666667    0       40     41     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 46   1   9   9 0.270177 0.017730 0.000000 0.287907 13.132332 0.287907 0.417227 703.910156 693.832031   1   2 0.500000    0       42     42     1         2       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 46   1  10  10 0.397475 0.019752 0.000000 0.417227 13.549560 0.417227 0.287336 703.910156 693.832031   2   3 0.666667    0       43     44     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   1  11  11 0.271367 0.015969 0.000000 0.287336 13.836896 0.287336 0.568043 703.910156 693.832031   1   1 1.000000    0       45     45     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 46   1  12  12 0.537740 0.028845 0.001459 0.568043 14.404939 0.568043 0.000000 703.910156 693.832031   3   4 0.750000    0       46     48     2         3       22      23 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 47   3   1   1 1.092618 0.108670 0.000000 1.201289  1.201289 1.201289 0.000000 704.660156 694.582031  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   2   1   1 1.933874 0.204921 0.005098 2.143893  3.345181 3.345181 0.908972 720.542969 712.316406  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.119061 0.844097 1.074538  0.342021  0.088621            0            2
 47   2   2   2 0.822420 0.080339 0.006213 0.908972  4.254153 0.908972 0.000000 715.718750 705.824219   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
 47   1   1   1 0.571291 0.028745 0.000938 0.600974  3.946155 3.946155 4.513981 709.269531 699.539062   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 47   1   2   2 2.820736 0.783277 0.000995 3.605009  8.460136 4.513981 0.563836 721.511719 712.109375  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 47   1   3   3 0.532715 0.029449 0.001672 0.563836  9.023972 0.563836 1.013445 711.781250 701.871094   3   3 1.000000    0       18     20     3         5        5       7 1.000000 0.600000 0.000000 0.288675 0.000000 0.433013  1.000000  0.769150            0            0
 47   1   4   4 0.961542 0.049979 0.001924 1.013445 10.037417 1.013445 1.208841 711.781250 701.871094   5   9 0.555556    0       21     25     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 47   1   5   5 1.150141 0.056908 0.001793 1.208841 11.246259 1.208841 1.430546 711.785156 701.871094   6   6 1.000000    0       26     31     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 47   1   6   6 1.326656 0.102052 0.001837 1.430546 12.676805 1.430546 0.284403 716.878906 707.281250   7   9 0.777778    0       32     38     3         5       14      16 2.333333 1.800000 1.527525 1.607275 0.654654 0.741819  0.155989  0.127713            0            2
 47   1   7   7 0.266242 0.018161 0.000000 0.284403 12.961207 0.284403 0.418079 715.070312 705.050781   1   1 1.000000    0       39     39     1         1       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   1   8   8 0.397414 0.020664 0.000000 0.418079 13.379286 0.418079 0.287765 715.070312 705.050781   2   3 0.666667    0       40     41     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 47   1   9   9 0.269672 0.018093 0.000000 0.287765 13.667051 0.287765 0.419299 715.070312 705.050781   1   2 0.500000    0       42     42     1         2       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 47   1  10  10 0.399420 0.019879 0.000000 0.419299 14.086350 0.419299 0.286945 715.074219 705.050781   2   3 0.666667    0       43     44     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   1  11  11 0.270960 0.015985 0.000000 0.286945 14.373295 0.286945 0.568054 715.074219 705.050781   1   1 1.000000    0       45     45     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 47   1  12  12 0.537099 0.029424 0.001531 0.568054 14.941348 0.568054 0.000000 715.074219 705.050781   3   4 0.750000    0       46     48     2         3       22      23 1.500000 1.333333 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            1
 48   3   1   1 1.092321 0.119503 0.000000 1.211824  1.211824 1.211824 0.000000 716.949219 707.050781  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 48   2   1   1 1.942723 0.216278 0.004782 2.163783  3.375608 3.375608 0.905458 733.667969 725.335938  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.119061 0.844097 1.074538  0.342021  0.088621            0            2
 48   2   2   2 0.822570 0.077107 0.005782 0.905458  4.281066 0.905458 0.000000 725.492188 715.589844   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.449868 0.000000 0.419877  1.000000  0.809101            0            4
 48   1   1   1 0.571238 0.030147 0.000832 0.602216  3.977823 3.977823 4.535664 722.339844 712.468750   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 48   1   2   2 2.824170 0.805001 0.001035 3.630206  8.513487 4.535664 0.567248 733.222656 723.902344  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 48   1   3   3 0.535565 0.029878 0.001806 0.567248  9.080736 0.567248 1.014055 722.230469 712.328125   3   3 1.000000    0       18     20     3         5        5       7 1.000000 0.600000 0.000000 0.288675 0.000000 0.433013  1.000000  0.769150            0            0
 48   1   4   4 0.962529 0.049543 0.001983 1.014055 10.094791 1.014055 1.211660 722.230469 712.328125   5   9 0.555556    0       21     25     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 48   1   5   5 1.150526 0.059282 0.001852 1.211660 11.306451 1.211660 1.437195 722.230469 712.328125   6   6 1.000000    0       26     31     3         3       11      13 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 48   1   6   6 1.324426 0.110854 0.001916 1.437195 12.743647 1.437195 0.285628 729.593750 719.761719   7   9 0.777778    0       32     38     3         5       14      16 2.333333 1.800000 1.527525 1.607275 0.654654 0.741819  0.155989  0.127713            0            2
 48   1   7   7 0.267482 0.018146 0.000000 0.285628 13.029274 0.285628 0.415189 724.968750 715.066406   1   2 0.500000    0       39     39     1         2       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 48   1   8   8 0.395789 0.019400 0.000000 0.415189 13.444463 0.415189 0.284897 724.968750 715.066406   2   3 0.666667    0       40     41     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 48   1   9   9 0.268829 0.016068 0.000000 0.284897 13.729360 0.284897 0.418921 724.968750 715.066406   1   1 1.000000    0       42     42     1         1       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 48   1  10  10 0.400120 0.018801 0.000000 0.418921 14.148281 0.418921 0.418989 724.968750 715.066406   2   3 0.666667    0       43     44     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 48   1  11  11 0.399099 0.019891 0.000000 0.418989 14.567271 0.418989 0.429107 724.968750 715.066406   2   3 0.666667    0       45     46     1         2       21      21 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 48   1  12  12 0.401748 0.025753 0.001606 0.429107 14.996378 0.429107 0.000000 724.972656 715.066406   2   2 1.000000    0       47     48     2         2       22      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 49   3   1   1 1.091335 0.118028 0.000000 1.209363  1.209363 1.209363 0.000000 726.339844 716.566406  13  19 0.684211   19        1     13     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   2   1   1 1.939035 0.210342 0.004589 2.153966  3.363329 3.363329 0.936421 742.511719 734.023438  16  26 0.615385   26        1     16     6         8        1       6 2.666667 3.250000 2.250926 4.167333 0.844097 1.087130  0.342021  0.083383            0            2
 49   2   2   2 0.854103 0.075966 0.006352 0.936421  4.299750 0.936421 0.000000 735.796875 725.937500   7  11 0.636364   11       17     23     7        11        7      13 1.000000 1.000000 0.000000 0.449868 0.000000 0.419877  1.000000  0.809101            0            4
 49   1   1   1 0.571179 0.607499 0.000832 1.179510  4.542839 4.542839 3.985263 728.523438 718.718750   3   4 0.750000    0        1      3     2         3        1       2 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 49   1   2   2 2.829245 0.218521 0.001075 3.048842  8.528102 3.985263 0.965638 740.492188 730.886719  14  15 0.933333    0        4     17     2         4        3       4 7.000000 3.750000 8.485281 4.596194 1.212183 1.225652 -2.245691 -1.484446            0            0
 49   1   3   3 0.918594 0.045028 0.002016 0.965638  9.493740 0.965638 1.074929 732.011719 722.144531   5   5 1.000000    0       18     22     3         5        5       7 1.666667 1.000000 1.154701 1.443376 0.692820 1.082532  0.301253  0.186810            0            0
 49   1   4   4 1.020842 0.052118 0.001969 1.074929 10.568669 1.074929 1.270239 732.011719 722.144531   5   9 0.555556    0       23     27     3         6        8      10 1.666667 1.500000 0.577350 0.500000 0.346410 0.333333  0.585162  0.630930            0            0
 49   1   5   5 1.207371 0.060743 0.002126 1.270239 11.838908 1.270239 1.466656 732.011719 722.144531   6   7 0.857143    0       28     33     3         4       11      13 2.000000 1.750000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 49   1   6   6 1.368445 0.096423 0.001788 1.466656 13.305564 1.466656 0.296649 737.062500 727.328125   7  10 0.700000    0       34     40     3         4       14      16 2.333333 2.500000 1.527525 2.081666 0.654654 0.780625  0.155989 -0.024447            0            2
 49   1   7   7 0.278072 0.018577 0.000000 0.296649 13.602214 0.296649 0.428457 735.398438 725.660156   1   2 0.500000    0       41     41     1         2       17      17 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 49   1   8   8 0.408277 0.020180 0.000000 0.428457 14.030671 0.428457 0.292591 735.398438 725.660156   2   3 0.666667    0       42     43     1         2       18      18 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   1   9   9 0.275028 0.017563 0.000000 0.292591 14.323261 0.292591 0.425472 735.460938 725.660156   1   1 1.000000    0       44     44     1         1       19      19 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 49   1  10  10 0.405806 0.019666 0.000000 0.425472 14.748734 0.425472 0.432068 735.523438 725.660156   2   3 0.666667    0       45     46     1         2       20      20 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   1  11  11 0.411690 0.020378 0.000000 0.432068 15.180802 0.432068 0.440314 735.523438 725.660156   2   3 0.666667    0       47     48     1         2       21      21 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 49   1  12  12 0.412349 0.026349 0.001616 0.440314 15.621116 0.440314 0.000000 735.523438 725.660156   2   2 1.000000    0       49     50     2         2       22      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1

[16-02-2022_21-58-58] INFO :: __main__ >> Saving results to excel file: ./experiments/results/ASH_Excel_2022-02-16_21-42-33_PS2_hcr_online_2_6_yield_conc_preach_opt.xlsx

[16-02-2022_21-59-02] INFO :: __main__ >> Saving results to data file: ./experiments/results/ASH_Data_2022-02-16_21-42-33_PS2_hcr_online_2_6_yield_conc_preach_opt.dat

[16-02-2022_21-59-02] INFO :: __main__ >> Saving results to figure file: ./experiments/results/ASH_Figure_2022-02-16_21-42-33_PS2_hcr_online_2_6_yield_conc_preach_opt.png

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=5.789999999999999.

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[16-02-2022_21-59-03] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=5.789999999999999 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[16-02-2022_21-59-05] INFO :: __main__ >> Overall time: Real = 992.3084537, Process = 1030.046875

[16-02-2022_21-59-05] INFO :: __main__ >> Exiting with code 0

