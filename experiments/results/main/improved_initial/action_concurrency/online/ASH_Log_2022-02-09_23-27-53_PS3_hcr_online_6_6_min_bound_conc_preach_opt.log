[09-02-2022_23-55-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[09-02-2022_23-55-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_23-55-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 284 rules into program part ash_goal_state:

final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).

[09-02-2022_23-55-35] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=33']

[09-02-2022_23-55-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,1))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'I': 9})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 9})
SubGoal({'L': 3, 'R': 'talos', 'A': 'lift(manipulator_arm_2,(block,1))', 'F': 'on((block,1))', 'V': 'nothing', 'I': 10})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 10})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 11})

[09-02-2022_23-55-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_23-55-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 5 rules into program part base:

sub_goal(3, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 9).
sub_goal(3, talos, put(manipulator_arm_1,(block,2),(block,3)), on((block,2)), (block,3), 9).
sub_goal(3, talos, lift(manipulator_arm_2,(block,1)), on((block,1)), nothing, 10).
sub_goal(3, talos, release(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), nothing, 10).
sub_goal(3, talos, move(store_room), in(talos), store_room, 11).

[09-02-2022_23-55-35] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_23-55-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[09-02-2022_23-55-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=33']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001DBED6AB4C0>]
	incrementor = SolveIncrementor(step_start=31, step_increase=1, step_increase_initial=3, step_end_min=34, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 31), range_=None), IncPart(name='plan_module', args=('#inc', 31, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 31, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 31, 9, 11, 'sequential', 'false'), range_=None)]

[09-02-2022_23-55-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_23-55-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_23-55-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_23-55-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 792 rules

[09-02-2022_23-55-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004631600000038816s

[09-02-2022_23-55-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[09-02-2022_23-55-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[09-02-2022_23-55-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.024674s.

[09-02-2022_23-55-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.003959s with result Satisfiable.

[09-02-2022_23-55-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[09-02-2022_23-55-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DBED687180>

[09-02-2022_23-55-35] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 2)
	('start_step', 31)
	('last_sgoals', 11)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001DBAB24FA60>)
	('first_sgoals', 9)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001DBED687180>)

[09-02-2022_23-55-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 31). %* None *%
#program plan_module(#inc, 31, true, false). %* None *%
#program optimisation_module(#inc, 31, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 31, 9, 11, sequential, false). %* None *%

[09-02-2022_23-55-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     30 : Current =     33
Incrementor step ends | Minimum  =     34 : Maximum =    200

[09-02-2022_23-55-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(33)]), ('state_module', [Number(31), Number(31)]), ('plan_module', [Number(31), Number(31), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(31), Number(31), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('conformance_module', [Number(31), Number(31), Number(9), Number(11), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(32), Number(31)]), ('plan_module', [Number(32), Number(31), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(32), Number(31), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(32)]), ('action_preconditions', [Number(32)]), ('variable_relations', [Number(32)]), ('abstraction_mappings', [Number(32)]), ('conformance_module', [Number(32), Number(31), Number(9), Number(11), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(33), Number(31)]), ('plan_module', [Number(33), Number(31), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(33), Number(31), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('conformance_module', [Number(33), Number(31), Number(9), Number(11), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.206390s.

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.024690s with result Satisfiable.

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2310805000001892, Incremental time limit = None
Running cumulative time = 0.2310805000001892, Cumulative time limit = 1800
Used memory = (RSS = 1156.660156Mb, VMS = 1147.824219Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.206390s, Solving = 0.024690s, Total = 0.231081s, Memory = (RSS = 1156.660156Mb, VMS = 1147.824219Mb), Step range = [31-33]), Calls = 1
Final Model :: Total atoms = 3950, Cost = (2, 0, -2), Optimality proven = False, Number = 4, Thread ID = 2, Model type = ModelType.StableModel

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     33 : Current =     34
Incrementor step ends | Minimum  =     34 : Maximum =    200

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(34)]), ('state_module', [Number(34), Number(31)]), ('plan_module', [Number(34), Number(31), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(34), Number(31), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(34)]), ('action_preconditions', [Number(34)]), ('variable_relations', [Number(34)]), ('abstraction_mappings', [Number(34)]), ('conformance_module', [Number(34), Number(31), Number(9), Number(11), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.098764s.

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004996s with result Unsatisfiable.

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.10375950000002376, Incremental time limit = None
Running cumulative time = 0.33484000000021297, Cumulative time limit = 1800
Used memory = (RSS = 1156.660156Mb, VMS = 1147.824219Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     34 : Current =     35
Incrementor step ends | Minimum  =     34 : Maximum =    200

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(35)]), ('state_module', [Number(35), Number(31)]), ('plan_module', [Number(35), Number(31), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(35), Number(31), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(35)]), ('action_preconditions', [Number(35)]), ('variable_relations', [Number(35)]), ('abstraction_mappings', [Number(35)]), ('conformance_module', [Number(35), Number(31), Number(9), Number(11), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.112752s.

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006448s with result Unsatisfiable.

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11919960000000174, Incremental time limit = None
Running cumulative time = 0.4540396000002147, Cumulative time limit = 1800
Used memory = (RSS = 1156.675781Mb, VMS = 1148.074219Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     35 : Current =     36
Incrementor step ends | Minimum  =     34 : Maximum =    200

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(36)]), ('state_module', [Number(36), Number(31)]), ('plan_module', [Number(36), Number(31), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(36), Number(31), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(36)]), ('action_preconditions', [Number(36)]), ('variable_relations', [Number(36)]), ('abstraction_mappings', [Number(36)]), ('conformance_module', [Number(36), Number(31), Number(9), Number(11), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.118390s.

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012408s with result Satisfiable.

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1307977999999821, Incremental time limit = None
Running cumulative time = 0.5848374000001968, Cumulative time limit = 1800
Used memory = (RSS = 1157.101562Mb, VMS = 1148.324219Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 6
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.536296s, Solving = 0.048542s, Total = 0.584837s, Memory = (RSS = 1157.101562Mb, VMS = 1148.324219Mb), Step range = [31-36]), Calls = 4
Final Model :: Total atoms = 4960, Cost = (8, 0, -1), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.206390s, Solving = 0.024690s, Total = 0.231081s, Memory = (RSS = 1156.660156Mb, VMS = 1147.824219Mb), Step range = [31-33]
2 : Statistics :: Grounding = 0.098764s, Solving = 0.004996s, Total = 0.103760s, Memory = (RSS = 1156.660156Mb, VMS = 1147.824219Mb), Step range = [34-34]
3 : Statistics :: Grounding = 0.112752s, Solving = 0.006448s, Total = 0.119200s, Memory = (RSS = 1156.675781Mb, VMS = 1148.074219Mb), Step range = [35-35]
4 : Statistics :: Grounding = 0.118390s, Solving = 0.012408s, Total = 0.130798s, Memory = (RSS = 1157.101562Mb, VMS = 1148.324219Mb), Step range = [36-36]

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.584837s due to: Stop condition reached.

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[09-02-2022_23-55-36] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 4, 10: 5, 11: 6, 12: 7, 13: 8, 14: 8, 15: 9, 16: 9, 17: 10, 18: 11, 19: 11, 20: 12, 21: 13, 22: 13, 23: 13, 24: 13, 25: 13, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 19, 33: 19, 34: 20, 35: 21, 36: 22, 37: 23, 38: 23, 39: 24, 40: 25, 41: 25, 42: 26, 43: 27, 44: 28, 45: 28, 46: 28, 47: 29, 48: 30, 49: 31, 50: 31}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 14, 9: 16, 10: 17, 11: 19, 12: 20, 13: 25, 14: 27, 15: 28, 16: 29, 17: 30, 18: 31, 19: 33, 20: 34, 21: 35, 22: 36, 23: 38, 24: 39, 25: 41, 26: 42, 27: 43, 28: 46, 29: 47, 30: 48, 31: 50}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_23-55-36] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 4, 10: 5, 11: 6, 12: 7, 13: 8, 14: 8, 15: 9, 16: 9, 17: 10, 18: 11, 19: 11, 20: 12, 21: 13, 22: 13, 23: 13, 24: 13, 25: 13, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 19, 33: 19, 34: 20, 35: 21, 36: 22, 37: 23, 38: 23, 39: 24, 40: 25, 41: 25, 42: 26, 43: 27, 44: 28, 45: 28, 46: 28, 47: 29, 48: 30, 49: 31, 50: 31}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 14, 9: 16, 10: 17, 11: 19, 12: 20, 13: 25, 14: 27, 15: 28, 16: 29, 17: 30, 18: 31, 19: 33, 20: 34, 21: 35, 22: 36, 23: 38, 24: 39, 25: 41, 26: 42, 27: 43, 28: 46, 29: 47, 30: 48, 31: 50}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 36}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_23-55-36] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 11, Last requested goal index = 11, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[09-02-2022_23-55-36] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.536296s, Solving = 0.048542s, Total = 0.584837s, Memory = (RSS = 1157.101562Mb, VMS = 1148.324219Mb), Step range = [31-36]), Calls = 4
Model :: Total atoms = 4960, Cost = (8, 0, -1), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[09-02-2022_23-55-36] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                  Steps = 5 :: Actions = 8                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_2,store_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,store_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 8:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 9:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,5))
        talos : grasp(manipulator_arm_2,(block,6))
Step 10:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
        talos : configure(manipulator_arm_2,retracted)
Step 11:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 12:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,(block,5))
Step 14:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,puzzle_room_door)
Step 16:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 19:
    Current Sub-goals:
        [Index = 4] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 20:
    Current Sub-goals:
        [Index = 4] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 4] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_2,(block,6),puzzle_room_table)
Step 21:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,6))
Step 22:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 6] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 23:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 6] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 24:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 6] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 25:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 6] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,5))
Step 26:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 6] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 27:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 6] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : move(puzzle_room)
Step 28:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 6] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 29:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 6] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 6] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,3))
        talos : put(manipulator_arm_1,(block,5),(block,6))
Step 30:
    Current Sub-goals:
        [Index = 7] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 7] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 7] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 7] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_arm_2,(block,3),puzzle_room_table)
        talos : release(manipulator_arm_1,(block,5))
Step 31:
    Current Sub-goals:
        [Index = 8] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 8] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 8] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,2))
        talos : release(manipulator_arm_2,(block,3))
Step 32:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 9] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 9] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,1))
        talos : put(manipulator_arm_1,(block,2),(block,3))
Step 33:
    Current Sub-goals:
        [Index = 10] talos : lift(manipulator_arm_2,(block,1)) -> on((block,1)) = nothing
        [Index = 10] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 10] talos : lift(manipulator_arm_2,(block,1)) -> on((block,1)) = nothing
        [Index = 10] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
        talos : lift(manipulator_arm_2,(block,1))
        talos : release(manipulator_arm_1,(block,2))
Step 34:
    Current Sub-goals:
        [Index = 11] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 35:
    Current Sub-goals:
        [Index = 11] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 36:
    Current Sub-goals:
        [Index = 11] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 11] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)

[09-02-2022_23-55-36] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=31, total_plan_length=36, step_range=range(31, 37)

[09-02-2022_23-55-36] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 14, Total actions = 21, Produced sub-goal stages = 21
Level [2]: Length = 36, Total actions = 46, Produced sub-goal stages = 46
Level [1]: Length = 50, Total actions = 58, Produced sub-goal stages = 0

[09-02-2022_23-55-36] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 2 (par-ref), LE =   5, AC =   8, CF = 0.6, GT =   4.09s, ST =   1.35s, OT = 0.00s, TT =   5.45s, EF = (LE = 1.7, AC = 1.6), ED = (LE = 1.2, AC = 1.0), EB = (LE = 0.7, AC = 0.6)

[09-02-2022_23-55-36] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=5, plan_length=5, start_step=31, blend=Blend(left=0, right=0)

[09-02-2022_23-55-36] DEBUG :: core.Strategies >> Decided: number_small_problems=5, number_large_problems=0, small_group_size=1, large_group_size=2

[09-02-2022_23-55-36] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=32, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1), DivisionPoint(index=33, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1), DivisionPoint(index=34, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1), DivisionPoint(index=35, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[09-02-2022_23-55-36] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 5, Problem Range = [21-25], Size = 5, Sub-goal Stage Range = [32-36]
Division points [total=4] : [(Index = 32, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 33, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 34, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 35, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[09-02-2022_23-55-36] DEBUG :: ASH Planner Main #1 >> Monolevel problem 5 at level 2 solved.

[09-02-2022_23-55-36] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 21 at level 1:
Total Templated Partial Problems = 5, Problem Range = [21-25], Size = 5, Sub-goal Stage Range = [32-36]
Division points [total=4] : [(Index = 32, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 33, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 34, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 35, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[09-02-2022_23-55-36] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [32-32]

[09-02-2022_23-55-36] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [32-32], problem number = 21, increment number = 21

[09-02-2022_23-55-36] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 32)
	('last_sgoals', 32)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001DBAB24FA60>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[09-02-2022_23-55-36] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [32-32] : Concurrency enabled : Minimum search length bound disabled with value 50

[09-02-2022_23-55-36] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 32
last_sgoals = 32
start_step = 50
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 50

[09-02-2022_23-55-36] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[09-02-2022_23-55-36] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[09-02-2022_23-55-36] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[09-02-2022_23-55-36] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[09-02-2022_23-55-36] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_23-55-36] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 50 as problem start state.

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,2))', 'S': 50})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 50})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 50})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 50})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 50})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 50})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 50})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'S': 50})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 50})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,2)', 'S': 50})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 50})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 50})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 50})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 50})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 50})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 50})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 50})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 50})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 50})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 50})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 50})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 50})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 50})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 50})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 50})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 50})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 50})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 50})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 50})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 50})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 50})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 50})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 50})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 50})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 50})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 50})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 50})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 50})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 50})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 50})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 50})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 50})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'S': 50})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 50})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 50})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 50})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 50})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 50})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 50})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 50})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 50})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 50})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 50})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 50})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 50})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 50})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 50})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 50})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 50})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 50})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 50})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 50})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 50})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 50})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 50})

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 50).
holds(1, complete_tower(red,puzzle_room_table), false, 50).
holds(1, configuration(manipulator_end_1), aligned_with((block,2)), 50).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 50).
holds(1, configuration(manipulator_limb_1), extended, 50).
holds(1, configuration(manipulator_limb_2), extended, 50).
holds(1, configuration(puzzle_room_door), open, 50).
holds(1, configuration(starting_room_door), closed, 50).
holds(1, configuration(store_room_door), open, 50).
holds(1, grasping(manipulator_arm_1), (block,2), 50).
holds(1, grasping(manipulator_arm_2), nothing, 50).
holds(1, grasping(manipulator_end_1), (block,2), 50).
holds(1, grasping(manipulator_end_2), nothing, 50).
holds(1, in((block,1)), (puzzle_room,1), 50).
holds(1, in((block,2)), (puzzle_room,1), 50).
holds(1, in((block,3)), (puzzle_room,1), 50).
holds(1, in((block,4)), (store_room,0), 50).
holds(1, in((block,5)), (puzzle_room,1), 50).
holds(1, in((block,6)), (puzzle_room,1), 50).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 50).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 50).
holds(1, in(manipulator_end_1), (puzzle_room,1), 50).
holds(1, in(manipulator_end_2), (puzzle_room,1), 50).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 50).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 50).
holds(1, in(puzzle_room_table), (puzzle_room,1), 50).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 50).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 50).
holds(1, in(talos), (puzzle_room,1), 50).
holds(1, in_tower((block,1),(block,1)), true, 50).
holds(1, in_tower((block,1),(block,2)), false, 50).
holds(1, in_tower((block,1),(block,3)), false, 50).
holds(1, in_tower((block,1),(block,4)), false, 50).
holds(1, in_tower((block,1),(block,5)), false, 50).
holds(1, in_tower((block,1),(block,6)), false, 50).
holds(1, in_tower((block,2),(block,1)), false, 50).
holds(1, in_tower((block,2),(block,2)), true, 50).
holds(1, in_tower((block,2),(block,3)), false, 50).
holds(1, in_tower((block,2),(block,4)), false, 50).
holds(1, in_tower((block,2),(block,5)), false, 50).
holds(1, in_tower((block,2),(block,6)), false, 50).
holds(1, in_tower((block,3),(block,1)), false, 50).
holds(1, in_tower((block,3),(block,2)), false, 50).
holds(1, in_tower((block,3),(block,3)), true, 50).
holds(1, in_tower((block,3),(block,4)), false, 50).
holds(1, in_tower((block,3),(block,5)), false, 50).
holds(1, in_tower((block,3),(block,6)), false, 50).
holds(1, in_tower((block,4),(block,1)), false, 50).
holds(1, in_tower((block,4),(block,2)), false, 50).
holds(1, in_tower((block,4),(block,3)), false, 50).
holds(1, in_tower((block,4),(block,4)), false, 50).
holds(1, in_tower((block,4),(block,5)), false, 50).
holds(1, in_tower((block,4),(block,6)), false, 50).
holds(1, in_tower((block,5),(block,1)), false, 50).
holds(1, in_tower((block,5),(block,2)), false, 50).
holds(1, in_tower((block,5),(block,3)), false, 50).
holds(1, in_tower((block,5),(block,4)), false, 50).
holds(1, in_tower((block,5),(block,5)), false, 50).
holds(1, in_tower((block,5),(block,6)), false, 50).
holds(1, in_tower((block,6),(block,1)), false, 50).
holds(1, in_tower((block,6),(block,2)), false, 50).
holds(1, in_tower((block,6),(block,3)), false, 50).
holds(1, in_tower((block,6),(block,4)), false, 50).
holds(1, in_tower((block,6),(block,5)), true, 50).
holds(1, in_tower((block,6),(block,6)), true, 50).
holds(1, on((block,1)), puzzle_room_table_left, 50).
holds(1, on((block,2)), puzzle_room_table_right, 50).
holds(1, on((block,3)), puzzle_room_table_left, 50).
holds(1, on((block,4)), nothing, 50).
holds(1, on((block,5)), (block,6), 50).
holds(1, on((block,6)), puzzle_room_table_right, 50).
holds(1, tower_base((block,1),puzzle_room_table), true, 50).
holds(1, tower_base((block,2),puzzle_room_table), true, 50).
holds(1, tower_base((block,3),puzzle_room_table), true, 50).
holds(1, tower_base((block,4),puzzle_room_table), false, 50).
holds(1, tower_base((block,5),puzzle_room_table), false, 50).
holds(1, tower_base((block,6),puzzle_room_table), true, 50).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 50).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 50).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 50).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 50).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 50).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 50).
holds(2, complete_tower(blue,puzzle_room_table), false, 50).
holds(2, complete_tower(red,puzzle_room_table), false, 50).
holds(2, configuration(manipulator_arm_1), extended, 50).
holds(2, configuration(manipulator_arm_2), extended, 50).
holds(2, configuration(puzzle_room_door), open, 50).
holds(2, configuration(starting_room_door), closed, 50).
holds(2, configuration(store_room_door), open, 50).
holds(2, grasping(manipulator_arm_1), (block,2), 50).
holds(2, grasping(manipulator_arm_2), nothing, 50).
holds(2, in((block,1)), puzzle_room, 50).
holds(2, in((block,2)), puzzle_room, 50).
holds(2, in((block,3)), puzzle_room, 50).
holds(2, in((block,4)), store_room, 50).
holds(2, in((block,5)), puzzle_room, 50).
holds(2, in((block,6)), puzzle_room, 50).
holds(2, in(manipulator_arm_1), puzzle_room, 50).
holds(2, in(manipulator_arm_2), puzzle_room, 50).
holds(2, in(puzzle_room_table), puzzle_room, 50).
holds(2, in(talos), puzzle_room, 50).
holds(2, in_tower((block,1),(block,1)), true, 50).
holds(2, in_tower((block,1),(block,2)), false, 50).
holds(2, in_tower((block,1),(block,3)), false, 50).
holds(2, in_tower((block,1),(block,4)), false, 50).
holds(2, in_tower((block,1),(block,5)), false, 50).
holds(2, in_tower((block,1),(block,6)), false, 50).
holds(2, in_tower((block,2),(block,1)), false, 50).
holds(2, in_tower((block,2),(block,2)), true, 50).
holds(2, in_tower((block,2),(block,3)), false, 50).
holds(2, in_tower((block,2),(block,4)), false, 50).
holds(2, in_tower((block,2),(block,5)), false, 50).
holds(2, in_tower((block,2),(block,6)), false, 50).
holds(2, in_tower((block,3),(block,1)), false, 50).
holds(2, in_tower((block,3),(block,2)), false, 50).
holds(2, in_tower((block,3),(block,3)), true, 50).
holds(2, in_tower((block,3),(block,4)), false, 50).
holds(2, in_tower((block,3),(block,5)), false, 50).
holds(2, in_tower((block,3),(block,6)), false, 50).
holds(2, in_tower((block,4),(block,1)), false, 50).
holds(2, in_tower((block,4),(block,2)), false, 50).
holds(2, in_tower((block,4),(block,3)), false, 50).
holds(2, in_tower((block,4),(block,4)), false, 50).
holds(2, in_tower((block,4),(block,5)), false, 50).
holds(2, in_tower((block,4),(block,6)), false, 50).
holds(2, in_tower((block,5),(block,1)), false, 50).
holds(2, in_tower((block,5),(block,2)), false, 50).
holds(2, in_tower((block,5),(block,3)), false, 50).
holds(2, in_tower((block,5),(block,4)), false, 50).
holds(2, in_tower((block,5),(block,5)), false, 50).
holds(2, in_tower((block,5),(block,6)), false, 50).
holds(2, in_tower((block,6),(block,1)), false, 50).
holds(2, in_tower((block,6),(block,2)), false, 50).
holds(2, in_tower((block,6),(block,3)), false, 50).
holds(2, in_tower((block,6),(block,4)), false, 50).
holds(2, in_tower((block,6),(block,5)), true, 50).
holds(2, in_tower((block,6),(block,6)), true, 50).
holds(2, on((block,1)), puzzle_room_table, 50).
holds(2, on((block,2)), puzzle_room_table, 50).
holds(2, on((block,3)), puzzle_room_table, 50).
holds(2, on((block,4)), nothing, 50).
holds(2, on((block,5)), (block,6), 50).
holds(2, on((block,6)), puzzle_room_table, 50).
holds(2, tower_base((block,1),puzzle_room_table), true, 50).
holds(2, tower_base((block,2),puzzle_room_table), true, 50).
holds(2, tower_base((block,3),puzzle_room_table), true, 50).
holds(2, tower_base((block,4),puzzle_room_table), false, 50).
holds(2, tower_base((block,5),puzzle_room_table), false, 50).
holds(2, tower_base((block,6),puzzle_room_table), true, 50).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 50).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 50).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 50).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 50).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 50).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 50).

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[09-02-2022_23-55-36] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,1))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'I': 32})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 32})

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 2 rules into program part base:

sub_goal(2, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 32).
sub_goal(2, talos, put(manipulator_arm_1,(block,2),(block,3)), on((block,2)), (block,3), 32).

[09-02-2022_23-55-36] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001DBED6AB8B0>]
	incrementor = SolveIncrementor(step_start=50, step_increase=1, step_increase_initial=2, step_end_min=51, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 50), range_=None), IncPart(name='plan_module', args=('#inc', 50, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 50, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 50, 32, 32, 'sequential', 'false'), range_=None)]

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 810 rules

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004769199999827833s

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.029233s.

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005163s with result Satisfiable.

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DBEDBE0CC0>

[09-02-2022_23-55-36] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 50)
	('last_sgoals', 32)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001DBAB24FA60>)
	('first_sgoals', 32)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001DBEDBE0CC0>)

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 50). %* None *%
#program plan_module(#inc, 50, true, false). %* None *%
#program optimisation_module(#inc, 50, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 50, 32, 32, sequential, false). %* None *%

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     49 : Current =     51
Incrementor step ends | Minimum  =     51 : Maximum =    200

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(51)]), ('state_module', [Number(50), Number(50)]), ('plan_module', [Number(50), Number(50), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(50), Number(50), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(50)]), ('action_preconditions', [Number(50)]), ('variable_relations', [Number(50)]), ('abstraction_mappings', [Number(50)]), ('conformance_module', [Number(50), Number(50), Number(32), Number(32), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(51), Number(50)]), ('plan_module', [Number(51), Number(50), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(51), Number(50), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(51)]), ('action_preconditions', [Number(51)]), ('variable_relations', [Number(51)]), ('abstraction_mappings', [Number(51)]), ('conformance_module', [Number(51), Number(50), Number(32), Number(32), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.241776s.

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009524s with result Unsatisfiable.

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.251300099999753, Incremental time limit = None
Running cumulative time = 0.251300099999753, Cumulative time limit = 1800
Used memory = (RSS = 1157.601562Mb, VMS = 1148.824219Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     51 : Current =     52
Incrementor step ends | Minimum  =     51 : Maximum =    200

[09-02-2022_23-55-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(52)]), ('state_module', [Number(52), Number(50)]), ('plan_module', [Number(52), Number(50), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(52), Number(50), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(52)]), ('action_preconditions', [Number(52)]), ('variable_relations', [Number(52)]), ('abstraction_mappings', [Number(52)]), ('conformance_module', [Number(52), Number(50), Number(32), Number(32), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.129601s.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006947s with result Satisfiable.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.13654799999994793, Incremental time limit = None
Running cumulative time = 0.38784809999970093, Cumulative time limit = 1800
Used memory = (RSS = 1157.601562Mb, VMS = 1148.824219Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.371376s, Solving = 0.016472s, Total = 0.387848s, Memory = (RSS = 1157.601562Mb, VMS = 1148.824219Mb), Step range = [50-52]), Calls = 2
Final Model :: Total atoms = 4524, Cost = (3, 0, -1), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.241776s, Solving = 0.009524s, Total = 0.251300s, Memory = (RSS = 1157.601562Mb, VMS = 1148.824219Mb), Step range = [50-51]
2 : Statistics :: Grounding = 0.129601s, Solving = 0.006947s, Total = 0.136548s, Memory = (RSS = 1157.601562Mb, VMS = 1148.824219Mb), Step range = [52-52]

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.387848s due to: Stop condition reached.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 4, 10: 5, 11: 6, 12: 7, 13: 8, 14: 8, 15: 9, 16: 9, 17: 10, 18: 11, 19: 11, 20: 12, 21: 13, 22: 13, 23: 13, 24: 13, 25: 13, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 19, 33: 19, 34: 20, 35: 21, 36: 22, 37: 23, 38: 23, 39: 24, 40: 25, 41: 25, 42: 26, 43: 27, 44: 28, 45: 28, 46: 28, 47: 29, 48: 30, 49: 31, 50: 31}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 14, 9: 16, 10: 17, 11: 19, 12: 20, 13: 25, 14: 27, 15: 28, 16: 29, 17: 30, 18: 31, 19: 33, 20: 34, 21: 35, 22: 36, 23: 38, 24: 39, 25: 41, 26: 42, 27: 43, 28: 46, 29: 47, 30: 48, 31: 50}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 36}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 4, 10: 5, 11: 6, 12: 7, 13: 8, 14: 8, 15: 9, 16: 9, 17: 10, 18: 11, 19: 11, 20: 12, 21: 13, 22: 13, 23: 13, 24: 13, 25: 13, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 19, 33: 19, 34: 20, 35: 21, 36: 22, 37: 23, 38: 23, 39: 24, 40: 25, 41: 25, 42: 26, 43: 27, 44: 28, 45: 28, 46: 28, 47: 29, 48: 30, 49: 31, 50: 31, 51: 32, 52: 32}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 14, 9: 16, 10: 17, 11: 19, 12: 20, 13: 25, 14: 27, 15: 28, 16: 29, 17: 30, 18: 31, 19: 33, 20: 34, 21: 35, 22: 36, 23: 38, 24: 39, 25: 41, 26: 42, 27: 43, 28: 46, 29: 47, 30: 48, 31: 50, 32: 52}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 36}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 32, Last requested goal index = 32, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.371376s, Solving = 0.016472s, Total = 0.387848s, Memory = (RSS = 1157.601562Mb, VMS = 1148.824219Mb), Step range = [50-52]), Calls = 2
Model :: Total atoms = 4524, Cost = (3, 0, -1), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 2 :: Actions = 3                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 4:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 10:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 11:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 12:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 13:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 14:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 15:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 16:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
        talos : grasp(manipulator_end_2,(block,6))
Step 17:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 21:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 22:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 23:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 24:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 25:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,5))
Step 26:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 27:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 28:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 29:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 31:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 32:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 33:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 34:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,6),puzzle_room_table_right)
Step 35:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,6))
Step 36:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 37:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 38:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 39:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 40:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 41:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 42:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 43:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 44:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 45:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 46:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,3)))
        talos : configure(manipulator_limb_1,extended)
Step 47:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 29] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 29] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,3))
        talos : put(manipulator_end_1,(block,5),(block,6))
Step 48:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 30] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_end_2,(block,3),puzzle_room_table_left)
        talos : release(manipulator_end_1,(block,5))
Step 49:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 50:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
        talos : release(manipulator_end_2,(block,3))
Step 51:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,1)))
Step 52:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,1))
        talos : put(manipulator_end_1,(block,2),(block,3))

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Monolevel problem 21 at level 1 solved.

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Online planning increment 21 finished.

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 5 : Total constraining sub-goal stages = 14 : Goals achieved = 11 : Goals unachieved = 3 : Complete = False
Level = 1 : Solved problems = 21 : Total constraining sub-goal stages = 36 : Goals achieved = 32 : Goals unachieved = 4 : Complete = False

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 2.

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 22 by method ground-first is [1-1].

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 22 at level 1:
Total Templated Partial Problems = 5, Problem Range = [21-25], Size = 5, Sub-goal Stage Range = [32-36]
Division points [total=4] : [(Index = 32, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 33, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 34, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 35, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [33-33]

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [33-33], problem number = 22, increment number = 22

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 33)
	('last_sgoals', 33)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001DBAB24FA60>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [33-33] : Concurrency enabled : Minimum search length bound disabled with value 52

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 33
last_sgoals = 33
start_step = 52
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 52

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[09-02-2022_23-55-37] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[09-02-2022_23-55-37] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 52 as problem start state.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,2))', 'S': 52})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,1))', 'S': 52})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 52})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 52})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 52})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 52})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 52})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'S': 52})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'S': 52})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,2)', 'S': 52})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,1)', 'S': 52})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 52})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 52})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 52})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 52})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 52})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 52})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 52})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 52})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 52})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 52})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 52})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 52})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 52})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 52})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 52})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 52})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 52})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 52})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 52})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 52})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 52})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 52})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 52})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 52})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 52})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 52})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 52})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 52})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 52})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 52})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 52})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 52})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 52})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 52})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 52})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'S': 52})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'S': 52})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 52})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 52})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 52})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 52})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 52})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 52})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 52})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 52})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 52})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 52})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 52})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 52})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 52})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 52})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 52})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 52})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 52})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 52})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 52})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 52})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 52})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 52})

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 52).
holds(1, complete_tower(red,puzzle_room_table), false, 52).
holds(1, configuration(manipulator_end_1), aligned_with((block,2)), 52).
holds(1, configuration(manipulator_end_2), aligned_with((block,1)), 52).
holds(1, configuration(manipulator_limb_1), extended, 52).
holds(1, configuration(manipulator_limb_2), extended, 52).
holds(1, configuration(puzzle_room_door), open, 52).
holds(1, configuration(starting_room_door), closed, 52).
holds(1, configuration(store_room_door), open, 52).
holds(1, grasping(manipulator_arm_1), (block,2), 52).
holds(1, grasping(manipulator_arm_2), (block,1), 52).
holds(1, grasping(manipulator_end_1), (block,2), 52).
holds(1, grasping(manipulator_end_2), (block,1), 52).
holds(1, in((block,1)), (puzzle_room,1), 52).
holds(1, in((block,2)), (puzzle_room,1), 52).
holds(1, in((block,3)), (puzzle_room,1), 52).
holds(1, in((block,4)), (store_room,0), 52).
holds(1, in((block,5)), (puzzle_room,1), 52).
holds(1, in((block,6)), (puzzle_room,1), 52).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 52).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 52).
holds(1, in(manipulator_end_1), (puzzle_room,1), 52).
holds(1, in(manipulator_end_2), (puzzle_room,1), 52).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 52).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 52).
holds(1, in(puzzle_room_table), (puzzle_room,1), 52).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 52).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 52).
holds(1, in(talos), (puzzle_room,1), 52).
holds(1, in_tower((block,1),(block,1)), true, 52).
holds(1, in_tower((block,1),(block,2)), false, 52).
holds(1, in_tower((block,1),(block,3)), false, 52).
holds(1, in_tower((block,1),(block,4)), false, 52).
holds(1, in_tower((block,1),(block,5)), false, 52).
holds(1, in_tower((block,1),(block,6)), false, 52).
holds(1, in_tower((block,2),(block,1)), false, 52).
holds(1, in_tower((block,2),(block,2)), false, 52).
holds(1, in_tower((block,2),(block,3)), false, 52).
holds(1, in_tower((block,2),(block,4)), false, 52).
holds(1, in_tower((block,2),(block,5)), false, 52).
holds(1, in_tower((block,2),(block,6)), false, 52).
holds(1, in_tower((block,3),(block,1)), false, 52).
holds(1, in_tower((block,3),(block,2)), true, 52).
holds(1, in_tower((block,3),(block,3)), true, 52).
holds(1, in_tower((block,3),(block,4)), false, 52).
holds(1, in_tower((block,3),(block,5)), false, 52).
holds(1, in_tower((block,3),(block,6)), false, 52).
holds(1, in_tower((block,4),(block,1)), false, 52).
holds(1, in_tower((block,4),(block,2)), false, 52).
holds(1, in_tower((block,4),(block,3)), false, 52).
holds(1, in_tower((block,4),(block,4)), false, 52).
holds(1, in_tower((block,4),(block,5)), false, 52).
holds(1, in_tower((block,4),(block,6)), false, 52).
holds(1, in_tower((block,5),(block,1)), false, 52).
holds(1, in_tower((block,5),(block,2)), false, 52).
holds(1, in_tower((block,5),(block,3)), false, 52).
holds(1, in_tower((block,5),(block,4)), false, 52).
holds(1, in_tower((block,5),(block,5)), false, 52).
holds(1, in_tower((block,5),(block,6)), false, 52).
holds(1, in_tower((block,6),(block,1)), false, 52).
holds(1, in_tower((block,6),(block,2)), false, 52).
holds(1, in_tower((block,6),(block,3)), false, 52).
holds(1, in_tower((block,6),(block,4)), false, 52).
holds(1, in_tower((block,6),(block,5)), true, 52).
holds(1, in_tower((block,6),(block,6)), true, 52).
holds(1, on((block,1)), puzzle_room_table_left, 52).
holds(1, on((block,2)), (block,3), 52).
holds(1, on((block,3)), puzzle_room_table_left, 52).
holds(1, on((block,4)), nothing, 52).
holds(1, on((block,5)), (block,6), 52).
holds(1, on((block,6)), puzzle_room_table_right, 52).
holds(1, tower_base((block,1),puzzle_room_table), true, 52).
holds(1, tower_base((block,2),puzzle_room_table), false, 52).
holds(1, tower_base((block,3),puzzle_room_table), true, 52).
holds(1, tower_base((block,4),puzzle_room_table), false, 52).
holds(1, tower_base((block,5),puzzle_room_table), false, 52).
holds(1, tower_base((block,6),puzzle_room_table), true, 52).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 52).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 52).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 52).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 52).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 52).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 52).
holds(2, complete_tower(blue,puzzle_room_table), false, 52).
holds(2, complete_tower(red,puzzle_room_table), false, 52).
holds(2, configuration(manipulator_arm_1), extended, 52).
holds(2, configuration(manipulator_arm_2), extended, 52).
holds(2, configuration(puzzle_room_door), open, 52).
holds(2, configuration(starting_room_door), closed, 52).
holds(2, configuration(store_room_door), open, 52).
holds(2, grasping(manipulator_arm_1), (block,2), 52).
holds(2, grasping(manipulator_arm_2), (block,1), 52).
holds(2, in((block,1)), puzzle_room, 52).
holds(2, in((block,2)), puzzle_room, 52).
holds(2, in((block,3)), puzzle_room, 52).
holds(2, in((block,4)), store_room, 52).
holds(2, in((block,5)), puzzle_room, 52).
holds(2, in((block,6)), puzzle_room, 52).
holds(2, in(manipulator_arm_1), puzzle_room, 52).
holds(2, in(manipulator_arm_2), puzzle_room, 52).
holds(2, in(puzzle_room_table), puzzle_room, 52).
holds(2, in(talos), puzzle_room, 52).
holds(2, in_tower((block,1),(block,1)), true, 52).
holds(2, in_tower((block,1),(block,2)), false, 52).
holds(2, in_tower((block,1),(block,3)), false, 52).
holds(2, in_tower((block,1),(block,4)), false, 52).
holds(2, in_tower((block,1),(block,5)), false, 52).
holds(2, in_tower((block,1),(block,6)), false, 52).
holds(2, in_tower((block,2),(block,1)), false, 52).
holds(2, in_tower((block,2),(block,2)), false, 52).
holds(2, in_tower((block,2),(block,3)), false, 52).
holds(2, in_tower((block,2),(block,4)), false, 52).
holds(2, in_tower((block,2),(block,5)), false, 52).
holds(2, in_tower((block,2),(block,6)), false, 52).
holds(2, in_tower((block,3),(block,1)), false, 52).
holds(2, in_tower((block,3),(block,2)), true, 52).
holds(2, in_tower((block,3),(block,3)), true, 52).
holds(2, in_tower((block,3),(block,4)), false, 52).
holds(2, in_tower((block,3),(block,5)), false, 52).
holds(2, in_tower((block,3),(block,6)), false, 52).
holds(2, in_tower((block,4),(block,1)), false, 52).
holds(2, in_tower((block,4),(block,2)), false, 52).
holds(2, in_tower((block,4),(block,3)), false, 52).
holds(2, in_tower((block,4),(block,4)), false, 52).
holds(2, in_tower((block,4),(block,5)), false, 52).
holds(2, in_tower((block,4),(block,6)), false, 52).
holds(2, in_tower((block,5),(block,1)), false, 52).
holds(2, in_tower((block,5),(block,2)), false, 52).
holds(2, in_tower((block,5),(block,3)), false, 52).
holds(2, in_tower((block,5),(block,4)), false, 52).
holds(2, in_tower((block,5),(block,5)), false, 52).
holds(2, in_tower((block,5),(block,6)), false, 52).
holds(2, in_tower((block,6),(block,1)), false, 52).
holds(2, in_tower((block,6),(block,2)), false, 52).
holds(2, in_tower((block,6),(block,3)), false, 52).
holds(2, in_tower((block,6),(block,4)), false, 52).
holds(2, in_tower((block,6),(block,5)), true, 52).
holds(2, in_tower((block,6),(block,6)), true, 52).
holds(2, on((block,1)), puzzle_room_table, 52).
holds(2, on((block,2)), (block,3), 52).
holds(2, on((block,3)), puzzle_room_table, 52).
holds(2, on((block,4)), nothing, 52).
holds(2, on((block,5)), (block,6), 52).
holds(2, on((block,6)), puzzle_room_table, 52).
holds(2, tower_base((block,1),puzzle_room_table), true, 52).
holds(2, tower_base((block,2),puzzle_room_table), false, 52).
holds(2, tower_base((block,3),puzzle_room_table), true, 52).
holds(2, tower_base((block,4),puzzle_room_table), false, 52).
holds(2, tower_base((block,5),puzzle_room_table), false, 52).
holds(2, tower_base((block,6),puzzle_room_table), true, 52).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 52).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 52).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 52).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 52).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 52).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 52).

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 33})
SubGoal({'L': 2, 'R': 'talos', 'A': 'lift(manipulator_arm_2,(block,1))', 'F': 'on((block,1))', 'V': 'nothing', 'I': 33})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 33})

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 3 rules into program part base:

sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 33).
sub_goal(2, talos, lift(manipulator_arm_2,(block,1)), on((block,1)), nothing, 33).
sub_goal(2, talos, release(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), nothing, 33).

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001DBED6ABCA0>]
	incrementor = SolveIncrementor(step_start=52, step_increase=1, step_increase_initial=2, step_end_min=53, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 52), range_=None), IncPart(name='plan_module', args=('#inc', 52, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 52, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 52, 33, 33, 'sequential', 'false'), range_=None)]

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 811 rules

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004684199999928751s

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.029705s.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004954s with result Satisfiable.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DBECFF5950>

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 52)
	('last_sgoals', 33)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001DBAB24FA60>)
	('first_sgoals', 33)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001DBECFF5950>)

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 52). %* None *%
#program plan_module(#inc, 52, true, false). %* None *%
#program optimisation_module(#inc, 52, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 52, 33, 33, sequential, false). %* None *%

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     51 : Current =     53
Incrementor step ends | Minimum  =     53 : Maximum =    200

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(53)]), ('state_module', [Number(52), Number(52)]), ('plan_module', [Number(52), Number(52), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(52), Number(52), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(52)]), ('action_preconditions', [Number(52)]), ('variable_relations', [Number(52)]), ('abstraction_mappings', [Number(52)]), ('conformance_module', [Number(52), Number(52), Number(33), Number(33), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(53), Number(52)]), ('plan_module', [Number(53), Number(52), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(53), Number(52), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(53)]), ('action_preconditions', [Number(53)]), ('variable_relations', [Number(53)]), ('abstraction_mappings', [Number(53)]), ('conformance_module', [Number(53), Number(52), Number(33), Number(33), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.242563s.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010945s with result Satisfiable.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.25350830000002134, Incremental time limit = None
Running cumulative time = 0.25350830000002134, Cumulative time limit = 1800
Used memory = (RSS = 1157.664062Mb, VMS = 1148.824219Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.242563s, Solving = 0.010945s, Total = 0.253508s, Memory = (RSS = 1157.664062Mb, VMS = 1148.824219Mb), Step range = [52-53]), Calls = 1
Final Model :: Total atoms = 4157, Cost = (3, 0, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.242563s, Solving = 0.010945s, Total = 0.253508s, Memory = (RSS = 1157.664062Mb, VMS = 1148.824219Mb), Step range = [52-53]

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.253508s due to: Stop condition reached.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 4, 10: 5, 11: 6, 12: 7, 13: 8, 14: 8, 15: 9, 16: 9, 17: 10, 18: 11, 19: 11, 20: 12, 21: 13, 22: 13, 23: 13, 24: 13, 25: 13, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 19, 33: 19, 34: 20, 35: 21, 36: 22, 37: 23, 38: 23, 39: 24, 40: 25, 41: 25, 42: 26, 43: 27, 44: 28, 45: 28, 46: 28, 47: 29, 48: 30, 49: 31, 50: 31, 51: 32, 52: 32}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 14, 9: 16, 10: 17, 11: 19, 12: 20, 13: 25, 14: 27, 15: 28, 16: 29, 17: 30, 18: 31, 19: 33, 20: 34, 21: 35, 22: 36, 23: 38, 24: 39, 25: 41, 26: 42, 27: 43, 28: 46, 29: 47, 30: 48, 31: 50, 32: 52}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 36}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 4, 10: 5, 11: 6, 12: 7, 13: 8, 14: 8, 15: 9, 16: 9, 17: 10, 18: 11, 19: 11, 20: 12, 21: 13, 22: 13, 23: 13, 24: 13, 25: 13, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 19, 33: 19, 34: 20, 35: 21, 36: 22, 37: 23, 38: 23, 39: 24, 40: 25, 41: 25, 42: 26, 43: 27, 44: 28, 45: 28, 46: 28, 47: 29, 48: 30, 49: 31, 50: 31, 51: 32, 52: 32, 53: 33}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 14, 9: 16, 10: 17, 11: 19, 12: 20, 13: 25, 14: 27, 15: 28, 16: 29, 17: 30, 18: 31, 19: 33, 20: 34, 21: 35, 22: 36, 23: 38, 24: 39, 25: 41, 26: 42, 27: 43, 28: 46, 29: 47, 30: 48, 31: 50, 32: 52, 33: 53}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 36}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 33, Last requested goal index = 33, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.242563s, Solving = 0.010945s, Total = 0.253508s, Memory = (RSS = 1157.664062Mb, VMS = 1148.824219Mb), Step range = [52-53]), Calls = 1
Model :: Total atoms = 4157, Cost = (3, 0, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 3                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 4:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 10:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 11:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 12:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 13:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 14:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 15:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 16:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
        talos : grasp(manipulator_end_2,(block,6))
Step 17:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 21:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 22:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 23:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 24:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 25:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,5))
Step 26:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 27:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 28:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 29:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 31:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 32:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 33:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 34:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,6),puzzle_room_table_right)
Step 35:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,6))
Step 36:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 37:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 38:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 39:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 40:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 41:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 42:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 43:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 44:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 45:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 46:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,3)))
        talos : configure(manipulator_limb_1,extended)
Step 47:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 29] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 29] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,3))
        talos : put(manipulator_end_1,(block,5),(block,6))
Step 48:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 30] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_end_2,(block,3),puzzle_room_table_left)
        talos : release(manipulator_end_1,(block,5))
Step 49:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 50:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
        talos : release(manipulator_end_2,(block,3))
Step 51:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,1)))
Step 52:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,1))
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 53:
    Current Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
        [Index = 33] talos : lift(manipulator_arm_2,(block,1)) -> on((block,1)) = nothing
        [Index = 33] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
        [Index = 33] talos : lift(manipulator_arm_2,(block,1)) -> on((block,1)) = nothing
        [Index = 33] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
        talos : lift(manipulator_end_2,(block,1))
        talos : release(manipulator_end_1,(block,2))

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Monolevel problem 22 at level 1 solved.

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Online planning increment 22 finished.

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 5 : Total constraining sub-goal stages = 14 : Goals achieved = 11 : Goals unachieved = 3 : Complete = False
Level = 1 : Solved problems = 22 : Total constraining sub-goal stages = 36 : Goals achieved = 33 : Goals unachieved = 3 : Complete = False

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 2.

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 23 by method ground-first is [1-1].

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 23 at level 1:
Total Templated Partial Problems = 5, Problem Range = [21-25], Size = 5, Sub-goal Stage Range = [32-36]
Division points [total=4] : [(Index = 32, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 33, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 34, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 35, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [34-34]

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [34-34], problem number = 23, increment number = 23

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 34)
	('last_sgoals', 34)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001DBAB24FA60>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [34-34] : Concurrency enabled : Minimum search length bound disabled with value 53

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 34
last_sgoals = 34
start_step = 53
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 53

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[09-02-2022_23-55-37] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[09-02-2022_23-55-37] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 53 as problem start state.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 53})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,1))', 'S': 53})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 53})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 53})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 53})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 53})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 53})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 53})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'S': 53})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 53})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,1)', 'S': 53})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 53})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 53})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 53})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 53})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 53})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 53})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 53})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 53})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 53})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 53})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 53})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 53})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 53})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 53})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 53})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 53})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 53})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'S': 53})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 53})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 53})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 53})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 53})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 53})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 53})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 53})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 53})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 53})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 53})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 53})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 53})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 53})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'S': 53})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 53})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 53})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 53})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 53})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 53})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 53})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 53})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 53})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 53})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 53})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 53})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'S': 53})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 53})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 53})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 53})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 53})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 53})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 53})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 53})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 53})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 53})

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 53).
holds(1, complete_tower(red,puzzle_room_table), false, 53).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 53).
holds(1, configuration(manipulator_end_2), aligned_with((block,1)), 53).
holds(1, configuration(manipulator_limb_1), extended, 53).
holds(1, configuration(manipulator_limb_2), retracted, 53).
holds(1, configuration(puzzle_room_door), open, 53).
holds(1, configuration(starting_room_door), closed, 53).
holds(1, configuration(store_room_door), open, 53).
holds(1, grasping(manipulator_arm_1), nothing, 53).
holds(1, grasping(manipulator_arm_2), (block,1), 53).
holds(1, grasping(manipulator_end_1), nothing, 53).
holds(1, grasping(manipulator_end_2), (block,1), 53).
holds(1, in((block,1)), (puzzle_room,1), 53).
holds(1, in((block,2)), (puzzle_room,1), 53).
holds(1, in((block,3)), (puzzle_room,1), 53).
holds(1, in((block,4)), (store_room,0), 53).
holds(1, in((block,5)), (puzzle_room,1), 53).
holds(1, in((block,6)), (puzzle_room,1), 53).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 53).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 53).
holds(1, in(manipulator_end_1), (puzzle_room,1), 53).
holds(1, in(manipulator_end_2), (puzzle_room,1), 53).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 53).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 53).
holds(1, in(puzzle_room_table), (puzzle_room,1), 53).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 53).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 53).
holds(1, in(talos), (puzzle_room,1), 53).
holds(1, in_tower((block,1),(block,1)), false, 53).
holds(1, in_tower((block,1),(block,2)), false, 53).
holds(1, in_tower((block,1),(block,3)), false, 53).
holds(1, in_tower((block,1),(block,4)), false, 53).
holds(1, in_tower((block,1),(block,5)), false, 53).
holds(1, in_tower((block,1),(block,6)), false, 53).
holds(1, in_tower((block,2),(block,1)), false, 53).
holds(1, in_tower((block,2),(block,2)), false, 53).
holds(1, in_tower((block,2),(block,3)), false, 53).
holds(1, in_tower((block,2),(block,4)), false, 53).
holds(1, in_tower((block,2),(block,5)), false, 53).
holds(1, in_tower((block,2),(block,6)), false, 53).
holds(1, in_tower((block,3),(block,1)), false, 53).
holds(1, in_tower((block,3),(block,2)), true, 53).
holds(1, in_tower((block,3),(block,3)), true, 53).
holds(1, in_tower((block,3),(block,4)), false, 53).
holds(1, in_tower((block,3),(block,5)), false, 53).
holds(1, in_tower((block,3),(block,6)), false, 53).
holds(1, in_tower((block,4),(block,1)), false, 53).
holds(1, in_tower((block,4),(block,2)), false, 53).
holds(1, in_tower((block,4),(block,3)), false, 53).
holds(1, in_tower((block,4),(block,4)), false, 53).
holds(1, in_tower((block,4),(block,5)), false, 53).
holds(1, in_tower((block,4),(block,6)), false, 53).
holds(1, in_tower((block,5),(block,1)), false, 53).
holds(1, in_tower((block,5),(block,2)), false, 53).
holds(1, in_tower((block,5),(block,3)), false, 53).
holds(1, in_tower((block,5),(block,4)), false, 53).
holds(1, in_tower((block,5),(block,5)), false, 53).
holds(1, in_tower((block,5),(block,6)), false, 53).
holds(1, in_tower((block,6),(block,1)), false, 53).
holds(1, in_tower((block,6),(block,2)), false, 53).
holds(1, in_tower((block,6),(block,3)), false, 53).
holds(1, in_tower((block,6),(block,4)), false, 53).
holds(1, in_tower((block,6),(block,5)), true, 53).
holds(1, in_tower((block,6),(block,6)), true, 53).
holds(1, on((block,1)), nothing, 53).
holds(1, on((block,2)), (block,3), 53).
holds(1, on((block,3)), puzzle_room_table_left, 53).
holds(1, on((block,4)), nothing, 53).
holds(1, on((block,5)), (block,6), 53).
holds(1, on((block,6)), puzzle_room_table_right, 53).
holds(1, tower_base((block,1),puzzle_room_table), false, 53).
holds(1, tower_base((block,2),puzzle_room_table), false, 53).
holds(1, tower_base((block,3),puzzle_room_table), true, 53).
holds(1, tower_base((block,4),puzzle_room_table), false, 53).
holds(1, tower_base((block,5),puzzle_room_table), false, 53).
holds(1, tower_base((block,6),puzzle_room_table), true, 53).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 53).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 53).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 53).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 53).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 53).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 53).
holds(2, complete_tower(blue,puzzle_room_table), false, 53).
holds(2, complete_tower(red,puzzle_room_table), false, 53).
holds(2, configuration(manipulator_arm_1), extended, 53).
holds(2, configuration(manipulator_arm_2), retracted, 53).
holds(2, configuration(puzzle_room_door), open, 53).
holds(2, configuration(starting_room_door), closed, 53).
holds(2, configuration(store_room_door), open, 53).
holds(2, grasping(manipulator_arm_1), nothing, 53).
holds(2, grasping(manipulator_arm_2), (block,1), 53).
holds(2, in((block,1)), puzzle_room, 53).
holds(2, in((block,2)), puzzle_room, 53).
holds(2, in((block,3)), puzzle_room, 53).
holds(2, in((block,4)), store_room, 53).
holds(2, in((block,5)), puzzle_room, 53).
holds(2, in((block,6)), puzzle_room, 53).
holds(2, in(manipulator_arm_1), puzzle_room, 53).
holds(2, in(manipulator_arm_2), puzzle_room, 53).
holds(2, in(puzzle_room_table), puzzle_room, 53).
holds(2, in(talos), puzzle_room, 53).
holds(2, in_tower((block,1),(block,1)), false, 53).
holds(2, in_tower((block,1),(block,2)), false, 53).
holds(2, in_tower((block,1),(block,3)), false, 53).
holds(2, in_tower((block,1),(block,4)), false, 53).
holds(2, in_tower((block,1),(block,5)), false, 53).
holds(2, in_tower((block,1),(block,6)), false, 53).
holds(2, in_tower((block,2),(block,1)), false, 53).
holds(2, in_tower((block,2),(block,2)), false, 53).
holds(2, in_tower((block,2),(block,3)), false, 53).
holds(2, in_tower((block,2),(block,4)), false, 53).
holds(2, in_tower((block,2),(block,5)), false, 53).
holds(2, in_tower((block,2),(block,6)), false, 53).
holds(2, in_tower((block,3),(block,1)), false, 53).
holds(2, in_tower((block,3),(block,2)), true, 53).
holds(2, in_tower((block,3),(block,3)), true, 53).
holds(2, in_tower((block,3),(block,4)), false, 53).
holds(2, in_tower((block,3),(block,5)), false, 53).
holds(2, in_tower((block,3),(block,6)), false, 53).
holds(2, in_tower((block,4),(block,1)), false, 53).
holds(2, in_tower((block,4),(block,2)), false, 53).
holds(2, in_tower((block,4),(block,3)), false, 53).
holds(2, in_tower((block,4),(block,4)), false, 53).
holds(2, in_tower((block,4),(block,5)), false, 53).
holds(2, in_tower((block,4),(block,6)), false, 53).
holds(2, in_tower((block,5),(block,1)), false, 53).
holds(2, in_tower((block,5),(block,2)), false, 53).
holds(2, in_tower((block,5),(block,3)), false, 53).
holds(2, in_tower((block,5),(block,4)), false, 53).
holds(2, in_tower((block,5),(block,5)), false, 53).
holds(2, in_tower((block,5),(block,6)), false, 53).
holds(2, in_tower((block,6),(block,1)), false, 53).
holds(2, in_tower((block,6),(block,2)), false, 53).
holds(2, in_tower((block,6),(block,3)), false, 53).
holds(2, in_tower((block,6),(block,4)), false, 53).
holds(2, in_tower((block,6),(block,5)), true, 53).
holds(2, in_tower((block,6),(block,6)), true, 53).
holds(2, on((block,1)), nothing, 53).
holds(2, on((block,2)), (block,3), 53).
holds(2, on((block,3)), puzzle_room_table, 53).
holds(2, on((block,4)), nothing, 53).
holds(2, on((block,5)), (block,6), 53).
holds(2, on((block,6)), puzzle_room_table, 53).
holds(2, tower_base((block,1),puzzle_room_table), false, 53).
holds(2, tower_base((block,2),puzzle_room_table), false, 53).
holds(2, tower_base((block,3),puzzle_room_table), true, 53).
holds(2, tower_base((block,4),puzzle_room_table), false, 53).
holds(2, tower_base((block,5),puzzle_room_table), false, 53).
holds(2, tower_base((block,6),puzzle_room_table), true, 53).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 53).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 53).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 53).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 53).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 53).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 53).

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 34})

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part base:

sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 34).

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001DBED6ABF70>]
	incrementor = SolveIncrementor(step_start=53, step_increase=1, step_increase_initial=2, step_end_min=54, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 53), range_=None), IncPart(name='plan_module', args=('#inc', 53, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 53, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 53, 34, 34, 'sequential', 'false'), range_=None)]

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 809 rules

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004520599999978003s

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.029287s.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004889s with result Satisfiable.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DBED9590E0>

[09-02-2022_23-55-37] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 53)
	('last_sgoals', 34)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001DBAB24FA60>)
	('first_sgoals', 34)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001DBED9590E0>)

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 53). %* None *%
#program plan_module(#inc, 53, true, false). %* None *%
#program optimisation_module(#inc, 53, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 53, 34, 34, sequential, false). %* None *%

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     52 : Current =     54
Incrementor step ends | Minimum  =     54 : Maximum =    200

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(54)]), ('state_module', [Number(53), Number(53)]), ('plan_module', [Number(53), Number(53), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(53), Number(53), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(53)]), ('action_preconditions', [Number(53)]), ('variable_relations', [Number(53)]), ('abstraction_mappings', [Number(53)]), ('conformance_module', [Number(53), Number(53), Number(34), Number(34), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(54), Number(53)]), ('plan_module', [Number(54), Number(53), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(54), Number(53), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(54)]), ('action_preconditions', [Number(54)]), ('variable_relations', [Number(54)]), ('abstraction_mappings', [Number(54)]), ('conformance_module', [Number(54), Number(53), Number(34), Number(34), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.240026s.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011658s with result Satisfiable.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2516834000000472, Incremental time limit = None
Running cumulative time = 0.2516834000000472, Cumulative time limit = 1800
Used memory = (RSS = 1157.664062Mb, VMS = 1148.824219Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.240026s, Solving = 0.011658s, Total = 0.251683s, Memory = (RSS = 1157.664062Mb, VMS = 1148.824219Mb), Step range = [53-54]), Calls = 1
Final Model :: Total atoms = 4150, Cost = (1, 0, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.240026s, Solving = 0.011658s, Total = 0.251683s, Memory = (RSS = 1157.664062Mb, VMS = 1148.824219Mb), Step range = [53-54]

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.251683s due to: Stop condition reached.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_23-55-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 4, 10: 5, 11: 6, 12: 7, 13: 8, 14: 8, 15: 9, 16: 9, 17: 10, 18: 11, 19: 11, 20: 12, 21: 13, 22: 13, 23: 13, 24: 13, 25: 13, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 19, 33: 19, 34: 20, 35: 21, 36: 22, 37: 23, 38: 23, 39: 24, 40: 25, 41: 25, 42: 26, 43: 27, 44: 28, 45: 28, 46: 28, 47: 29, 48: 30, 49: 31, 50: 31, 51: 32, 52: 32, 53: 33}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 14, 9: 16, 10: 17, 11: 19, 12: 20, 13: 25, 14: 27, 15: 28, 16: 29, 17: 30, 18: 31, 19: 33, 20: 34, 21: 35, 22: 36, 23: 38, 24: 39, 25: 41, 26: 42, 27: 43, 28: 46, 29: 47, 30: 48, 31: 50, 32: 52, 33: 53}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 36}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 4, 10: 5, 11: 6, 12: 7, 13: 8, 14: 8, 15: 9, 16: 9, 17: 10, 18: 11, 19: 11, 20: 12, 21: 13, 22: 13, 23: 13, 24: 13, 25: 13, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 19, 33: 19, 34: 20, 35: 21, 36: 22, 37: 23, 38: 23, 39: 24, 40: 25, 41: 25, 42: 26, 43: 27, 44: 28, 45: 28, 46: 28, 47: 29, 48: 30, 49: 31, 50: 31, 51: 32, 52: 32, 53: 33, 54: 34}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 14, 9: 16, 10: 17, 11: 19, 12: 20, 13: 25, 14: 27, 15: 28, 16: 29, 17: 30, 18: 31, 19: 33, 20: 34, 21: 35, 22: 36, 23: 38, 24: 39, 25: 41, 26: 42, 27: 43, 28: 46, 29: 47, 30: 48, 31: 50, 32: 52, 33: 53, 34: 54}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 36}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 34, Last requested goal index = 34, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.240026s, Solving = 0.011658s, Total = 0.251683s, Memory = (RSS = 1157.664062Mb, VMS = 1148.824219Mb), Step range = [53-54]), Calls = 1
Model :: Total atoms = 4150, Cost = (1, 0, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 4:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 10:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 11:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 12:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 13:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 14:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 15:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 16:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
        talos : grasp(manipulator_end_2,(block,6))
Step 17:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 21:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 22:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 23:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 24:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 25:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,5))
Step 26:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 27:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 28:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 29:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 31:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 32:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 33:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 34:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,6),puzzle_room_table_right)
Step 35:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,6))
Step 36:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 37:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 38:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 39:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 40:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 41:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 42:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 43:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 44:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 45:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 46:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,3)))
        talos : configure(manipulator_limb_1,extended)
Step 47:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 29] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 29] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,3))
        talos : put(manipulator_end_1,(block,5),(block,6))
Step 48:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 30] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_end_2,(block,3),puzzle_room_table_left)
        talos : release(manipulator_end_1,(block,5))
Step 49:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 50:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
        talos : release(manipulator_end_2,(block,3))
Step 51:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,1)))
Step 52:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,1))
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 53:
    Current Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
        [Index = 33] talos : lift(manipulator_arm_2,(block,1)) -> on((block,1)) = nothing
        [Index = 33] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
        [Index = 33] talos : lift(manipulator_arm_2,(block,1)) -> on((block,1)) = nothing
        [Index = 33] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
        talos : lift(manipulator_end_2,(block,1))
        talos : release(manipulator_end_1,(block,2))
Step 54:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Monolevel problem 23 at level 1 solved.

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Online planning increment 23 finished.

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 5 : Total constraining sub-goal stages = 14 : Goals achieved = 11 : Goals unachieved = 3 : Complete = False
Level = 1 : Solved problems = 23 : Total constraining sub-goal stages = 36 : Goals achieved = 34 : Goals unachieved = 2 : Complete = False

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 2.

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 24 by method ground-first is [1-1].

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 24 at level 1:
Total Templated Partial Problems = 5, Problem Range = [21-25], Size = 5, Sub-goal Stage Range = [32-36]
Division points [total=4] : [(Index = 32, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 33, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 34, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 35, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [35-35]

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [35-35], problem number = 24, increment number = 24

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 35)
	('last_sgoals', 35)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001DBAB24FA60>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [35-35] : Concurrency enabled : Minimum search length bound disabled with value 54

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 35
last_sgoals = 35
start_step = 54
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 54

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[09-02-2022_23-55-38] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[09-02-2022_23-55-38] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 54 as problem start state.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 54})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,1))', 'S': 54})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 54})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 54})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 54})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 54})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 54})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 54})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'S': 54})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 54})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,1)', 'S': 54})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 54})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 54})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 54})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 54})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 54})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 54})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 54})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 54})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 54})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 54})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 54})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 54})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 54})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 54})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 54})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 54})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 54})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'S': 54})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 54})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 54})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 54})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 54})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 54})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 54})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 54})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 54})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 54})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 54})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 54})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 54})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 54})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'S': 54})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 54})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 54})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 54})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 54})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 54})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 54})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 54})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 54})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 54})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 54})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 54})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'S': 54})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 54})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 54})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 54})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 54})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 54})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 54})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 54})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 54})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 54})

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 54).
holds(1, complete_tower(red,puzzle_room_table), false, 54).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 54).
holds(1, configuration(manipulator_end_2), aligned_with((block,1)), 54).
holds(1, configuration(manipulator_limb_1), retracted, 54).
holds(1, configuration(manipulator_limb_2), retracted, 54).
holds(1, configuration(puzzle_room_door), open, 54).
holds(1, configuration(starting_room_door), closed, 54).
holds(1, configuration(store_room_door), open, 54).
holds(1, grasping(manipulator_arm_1), nothing, 54).
holds(1, grasping(manipulator_arm_2), (block,1), 54).
holds(1, grasping(manipulator_end_1), nothing, 54).
holds(1, grasping(manipulator_end_2), (block,1), 54).
holds(1, in((block,1)), (puzzle_room,1), 54).
holds(1, in((block,2)), (puzzle_room,1), 54).
holds(1, in((block,3)), (puzzle_room,1), 54).
holds(1, in((block,4)), (store_room,0), 54).
holds(1, in((block,5)), (puzzle_room,1), 54).
holds(1, in((block,6)), (puzzle_room,1), 54).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 54).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 54).
holds(1, in(manipulator_end_1), (puzzle_room,1), 54).
holds(1, in(manipulator_end_2), (puzzle_room,1), 54).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 54).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 54).
holds(1, in(puzzle_room_table), (puzzle_room,1), 54).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 54).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 54).
holds(1, in(talos), (puzzle_room,1), 54).
holds(1, in_tower((block,1),(block,1)), false, 54).
holds(1, in_tower((block,1),(block,2)), false, 54).
holds(1, in_tower((block,1),(block,3)), false, 54).
holds(1, in_tower((block,1),(block,4)), false, 54).
holds(1, in_tower((block,1),(block,5)), false, 54).
holds(1, in_tower((block,1),(block,6)), false, 54).
holds(1, in_tower((block,2),(block,1)), false, 54).
holds(1, in_tower((block,2),(block,2)), false, 54).
holds(1, in_tower((block,2),(block,3)), false, 54).
holds(1, in_tower((block,2),(block,4)), false, 54).
holds(1, in_tower((block,2),(block,5)), false, 54).
holds(1, in_tower((block,2),(block,6)), false, 54).
holds(1, in_tower((block,3),(block,1)), false, 54).
holds(1, in_tower((block,3),(block,2)), true, 54).
holds(1, in_tower((block,3),(block,3)), true, 54).
holds(1, in_tower((block,3),(block,4)), false, 54).
holds(1, in_tower((block,3),(block,5)), false, 54).
holds(1, in_tower((block,3),(block,6)), false, 54).
holds(1, in_tower((block,4),(block,1)), false, 54).
holds(1, in_tower((block,4),(block,2)), false, 54).
holds(1, in_tower((block,4),(block,3)), false, 54).
holds(1, in_tower((block,4),(block,4)), false, 54).
holds(1, in_tower((block,4),(block,5)), false, 54).
holds(1, in_tower((block,4),(block,6)), false, 54).
holds(1, in_tower((block,5),(block,1)), false, 54).
holds(1, in_tower((block,5),(block,2)), false, 54).
holds(1, in_tower((block,5),(block,3)), false, 54).
holds(1, in_tower((block,5),(block,4)), false, 54).
holds(1, in_tower((block,5),(block,5)), false, 54).
holds(1, in_tower((block,5),(block,6)), false, 54).
holds(1, in_tower((block,6),(block,1)), false, 54).
holds(1, in_tower((block,6),(block,2)), false, 54).
holds(1, in_tower((block,6),(block,3)), false, 54).
holds(1, in_tower((block,6),(block,4)), false, 54).
holds(1, in_tower((block,6),(block,5)), true, 54).
holds(1, in_tower((block,6),(block,6)), true, 54).
holds(1, on((block,1)), nothing, 54).
holds(1, on((block,2)), (block,3), 54).
holds(1, on((block,3)), puzzle_room_table_left, 54).
holds(1, on((block,4)), nothing, 54).
holds(1, on((block,5)), (block,6), 54).
holds(1, on((block,6)), puzzle_room_table_right, 54).
holds(1, tower_base((block,1),puzzle_room_table), false, 54).
holds(1, tower_base((block,2),puzzle_room_table), false, 54).
holds(1, tower_base((block,3),puzzle_room_table), true, 54).
holds(1, tower_base((block,4),puzzle_room_table), false, 54).
holds(1, tower_base((block,5),puzzle_room_table), false, 54).
holds(1, tower_base((block,6),puzzle_room_table), true, 54).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 54).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 54).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 54).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 54).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 54).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 54).
holds(2, complete_tower(blue,puzzle_room_table), false, 54).
holds(2, complete_tower(red,puzzle_room_table), false, 54).
holds(2, configuration(manipulator_arm_1), retracted, 54).
holds(2, configuration(manipulator_arm_2), retracted, 54).
holds(2, configuration(puzzle_room_door), open, 54).
holds(2, configuration(starting_room_door), closed, 54).
holds(2, configuration(store_room_door), open, 54).
holds(2, grasping(manipulator_arm_1), nothing, 54).
holds(2, grasping(manipulator_arm_2), (block,1), 54).
holds(2, in((block,1)), puzzle_room, 54).
holds(2, in((block,2)), puzzle_room, 54).
holds(2, in((block,3)), puzzle_room, 54).
holds(2, in((block,4)), store_room, 54).
holds(2, in((block,5)), puzzle_room, 54).
holds(2, in((block,6)), puzzle_room, 54).
holds(2, in(manipulator_arm_1), puzzle_room, 54).
holds(2, in(manipulator_arm_2), puzzle_room, 54).
holds(2, in(puzzle_room_table), puzzle_room, 54).
holds(2, in(talos), puzzle_room, 54).
holds(2, in_tower((block,1),(block,1)), false, 54).
holds(2, in_tower((block,1),(block,2)), false, 54).
holds(2, in_tower((block,1),(block,3)), false, 54).
holds(2, in_tower((block,1),(block,4)), false, 54).
holds(2, in_tower((block,1),(block,5)), false, 54).
holds(2, in_tower((block,1),(block,6)), false, 54).
holds(2, in_tower((block,2),(block,1)), false, 54).
holds(2, in_tower((block,2),(block,2)), false, 54).
holds(2, in_tower((block,2),(block,3)), false, 54).
holds(2, in_tower((block,2),(block,4)), false, 54).
holds(2, in_tower((block,2),(block,5)), false, 54).
holds(2, in_tower((block,2),(block,6)), false, 54).
holds(2, in_tower((block,3),(block,1)), false, 54).
holds(2, in_tower((block,3),(block,2)), true, 54).
holds(2, in_tower((block,3),(block,3)), true, 54).
holds(2, in_tower((block,3),(block,4)), false, 54).
holds(2, in_tower((block,3),(block,5)), false, 54).
holds(2, in_tower((block,3),(block,6)), false, 54).
holds(2, in_tower((block,4),(block,1)), false, 54).
holds(2, in_tower((block,4),(block,2)), false, 54).
holds(2, in_tower((block,4),(block,3)), false, 54).
holds(2, in_tower((block,4),(block,4)), false, 54).
holds(2, in_tower((block,4),(block,5)), false, 54).
holds(2, in_tower((block,4),(block,6)), false, 54).
holds(2, in_tower((block,5),(block,1)), false, 54).
holds(2, in_tower((block,5),(block,2)), false, 54).
holds(2, in_tower((block,5),(block,3)), false, 54).
holds(2, in_tower((block,5),(block,4)), false, 54).
holds(2, in_tower((block,5),(block,5)), false, 54).
holds(2, in_tower((block,5),(block,6)), false, 54).
holds(2, in_tower((block,6),(block,1)), false, 54).
holds(2, in_tower((block,6),(block,2)), false, 54).
holds(2, in_tower((block,6),(block,3)), false, 54).
holds(2, in_tower((block,6),(block,4)), false, 54).
holds(2, in_tower((block,6),(block,5)), true, 54).
holds(2, in_tower((block,6),(block,6)), true, 54).
holds(2, on((block,1)), nothing, 54).
holds(2, on((block,2)), (block,3), 54).
holds(2, on((block,3)), puzzle_room_table, 54).
holds(2, on((block,4)), nothing, 54).
holds(2, on((block,5)), (block,6), 54).
holds(2, on((block,6)), puzzle_room_table, 54).
holds(2, tower_base((block,1),puzzle_room_table), false, 54).
holds(2, tower_base((block,2),puzzle_room_table), false, 54).
holds(2, tower_base((block,3),puzzle_room_table), true, 54).
holds(2, tower_base((block,4),puzzle_room_table), false, 54).
holds(2, tower_base((block,5),puzzle_room_table), false, 54).
holds(2, tower_base((block,6),puzzle_room_table), true, 54).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 54).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 54).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 54).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 54).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 54).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 54).

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 35})

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part base:

sub_goal(2, talos, move(hallway), in(talos), hallway, 35).

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001DBED6AB9D0>]
	incrementor = SolveIncrementor(step_start=54, step_increase=1, step_increase_initial=2, step_end_min=55, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 54), range_=None), IncPart(name='plan_module', args=('#inc', 54, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 54, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 54, 35, 35, 'sequential', 'false'), range_=None)]

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 809 rules

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004606100000046354s

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.029425s.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004928s with result Satisfiable.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DBEDAC6DB0>

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 54)
	('last_sgoals', 35)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001DBAB24FA60>)
	('first_sgoals', 35)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001DBEDAC6DB0>)

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 54). %* None *%
#program plan_module(#inc, 54, true, false). %* None *%
#program optimisation_module(#inc, 54, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 54, 35, 35, sequential, false). %* None *%

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     53 : Current =     55
Incrementor step ends | Minimum  =     55 : Maximum =    200

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(55)]), ('state_module', [Number(54), Number(54)]), ('plan_module', [Number(54), Number(54), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(54), Number(54), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(54)]), ('action_preconditions', [Number(54)]), ('variable_relations', [Number(54)]), ('abstraction_mappings', [Number(54)]), ('conformance_module', [Number(54), Number(54), Number(35), Number(35), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(55), Number(54)]), ('plan_module', [Number(55), Number(54), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(55), Number(54), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(55)]), ('action_preconditions', [Number(55)]), ('variable_relations', [Number(55)]), ('abstraction_mappings', [Number(55)]), ('conformance_module', [Number(55), Number(54), Number(35), Number(35), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.239549s.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008699s with result Unsatisfiable.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.24824859999989712, Incremental time limit = None
Running cumulative time = 0.24824859999989712, Cumulative time limit = 1800
Used memory = (RSS = 1157.664062Mb, VMS = 1148.824219Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     55 : Current =     56
Incrementor step ends | Minimum  =     55 : Maximum =    200

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(56)]), ('state_module', [Number(56), Number(54)]), ('plan_module', [Number(56), Number(54), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(56), Number(54), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(56)]), ('action_preconditions', [Number(56)]), ('variable_relations', [Number(56)]), ('abstraction_mappings', [Number(56)]), ('conformance_module', [Number(56), Number(54), Number(35), Number(35), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.133544s.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007083s with result Satisfiable.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.14062680000006367, Incremental time limit = None
Running cumulative time = 0.3888753999999608, Cumulative time limit = 1800
Used memory = (RSS = 1157.664062Mb, VMS = 1148.824219Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.373094s, Solving = 0.015782s, Total = 0.388875s, Memory = (RSS = 1157.664062Mb, VMS = 1148.824219Mb), Step range = [54-56]), Calls = 2
Final Model :: Total atoms = 4520, Cost = (2, 0, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.239549s, Solving = 0.008699s, Total = 0.248249s, Memory = (RSS = 1157.664062Mb, VMS = 1148.824219Mb), Step range = [54-55]
2 : Statistics :: Grounding = 0.133544s, Solving = 0.007083s, Total = 0.140627s, Memory = (RSS = 1157.664062Mb, VMS = 1148.824219Mb), Step range = [56-56]

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.388875s due to: Stop condition reached.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 4, 10: 5, 11: 6, 12: 7, 13: 8, 14: 8, 15: 9, 16: 9, 17: 10, 18: 11, 19: 11, 20: 12, 21: 13, 22: 13, 23: 13, 24: 13, 25: 13, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 19, 33: 19, 34: 20, 35: 21, 36: 22, 37: 23, 38: 23, 39: 24, 40: 25, 41: 25, 42: 26, 43: 27, 44: 28, 45: 28, 46: 28, 47: 29, 48: 30, 49: 31, 50: 31, 51: 32, 52: 32, 53: 33, 54: 34}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 14, 9: 16, 10: 17, 11: 19, 12: 20, 13: 25, 14: 27, 15: 28, 16: 29, 17: 30, 18: 31, 19: 33, 20: 34, 21: 35, 22: 36, 23: 38, 24: 39, 25: 41, 26: 42, 27: 43, 28: 46, 29: 47, 30: 48, 31: 50, 32: 52, 33: 53, 34: 54}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 36}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 4, 10: 5, 11: 6, 12: 7, 13: 8, 14: 8, 15: 9, 16: 9, 17: 10, 18: 11, 19: 11, 20: 12, 21: 13, 22: 13, 23: 13, 24: 13, 25: 13, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 19, 33: 19, 34: 20, 35: 21, 36: 22, 37: 23, 38: 23, 39: 24, 40: 25, 41: 25, 42: 26, 43: 27, 44: 28, 45: 28, 46: 28, 47: 29, 48: 30, 49: 31, 50: 31, 51: 32, 52: 32, 53: 33, 54: 34, 55: 35, 56: 35}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 14, 9: 16, 10: 17, 11: 19, 12: 20, 13: 25, 14: 27, 15: 28, 16: 29, 17: 30, 18: 31, 19: 33, 20: 34, 21: 35, 22: 36, 23: 38, 24: 39, 25: 41, 26: 42, 27: 43, 28: 46, 29: 47, 30: 48, 31: 50, 32: 52, 33: 53, 34: 54, 35: 56}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 36}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 35, Last requested goal index = 35, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.373094s, Solving = 0.015782s, Total = 0.388875s, Memory = (RSS = 1157.664062Mb, VMS = 1148.824219Mb), Step range = [54-56]), Calls = 2
Model :: Total atoms = 4520, Cost = (2, 0, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 2 :: Actions = 2                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 4:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 10:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 11:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 12:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 13:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 14:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 15:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 16:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
        talos : grasp(manipulator_end_2,(block,6))
Step 17:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 21:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 22:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 23:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 24:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 25:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,5))
Step 26:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 27:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 28:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 29:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 31:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 32:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 33:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 34:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,6),puzzle_room_table_right)
Step 35:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,6))
Step 36:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 37:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 38:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 39:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 40:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 41:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 42:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 43:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 44:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 45:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 46:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,3)))
        talos : configure(manipulator_limb_1,extended)
Step 47:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 29] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 29] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,3))
        talos : put(manipulator_end_1,(block,5),(block,6))
Step 48:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 30] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_end_2,(block,3),puzzle_room_table_left)
        talos : release(manipulator_end_1,(block,5))
Step 49:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 50:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
        talos : release(manipulator_end_2,(block,3))
Step 51:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,1)))
Step 52:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,1))
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 53:
    Current Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
        [Index = 33] talos : lift(manipulator_arm_2,(block,1)) -> on((block,1)) = nothing
        [Index = 33] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
        [Index = 33] talos : lift(manipulator_arm_2,(block,1)) -> on((block,1)) = nothing
        [Index = 33] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
        talos : lift(manipulator_end_2,(block,1))
        talos : release(manipulator_end_1,(block,2))
Step 54:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 55:
    Current Sub-goals:
        [Index = 35] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 56:
    Current Sub-goals:
        [Index = 35] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 35] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Monolevel problem 24 at level 1 solved.

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Online planning increment 24 finished.

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 5 : Total constraining sub-goal stages = 14 : Goals achieved = 11 : Goals unachieved = 3 : Complete = False
Level = 1 : Solved problems = 24 : Total constraining sub-goal stages = 36 : Goals achieved = 35 : Goals unachieved = 1 : Complete = False

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 2.

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 25 by method ground-first is [1-1].

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 25 at level 1:
Total Templated Partial Problems = 5, Problem Range = [21-25], Size = 5, Sub-goal Stage Range = [32-36]
Division points [total=4] : [(Index = 32, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 33, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 34, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 35, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [36-36]

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [36-36], problem number = 25, increment number = 25

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 36)
	('last_sgoals', 36)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001DBAB24FA60>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [36-36] : Concurrency enabled : Minimum search length bound disabled with value 56

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 36
last_sgoals = 36
start_step = 56
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 56

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[09-02-2022_23-55-38] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[09-02-2022_23-55-38] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 56 as problem start state.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 56})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,1))', 'S': 56})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 56})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 56})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 56})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 56})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 56})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 56})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'S': 56})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 56})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(hallway,2)', 'S': 56})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 56})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(hallway,2)', 'S': 56})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(hallway,2)', 'S': 56})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(hallway,2)', 'S': 56})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(hallway,2)', 'S': 56})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(hallway,2)', 'S': 56})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(hallway,2)', 'S': 56})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 56})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(hallway,2)', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 56})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 56})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'S': 56})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 56})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 56})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 56})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 56})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 56})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 56})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 56})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 56})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 56})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 56})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 56})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 56})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 56})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'S': 56})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'hallway', 'S': 56})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 56})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 56})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 56})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 56})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 56})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'hallway', 'S': 56})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'hallway', 'S': 56})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 56})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'hallway', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 56})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 56})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'S': 56})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 56})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 56})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 56})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 56})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 56})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 56})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 56})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 56})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 56})

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 56).
holds(1, complete_tower(red,puzzle_room_table), false, 56).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 56).
holds(1, configuration(manipulator_end_2), aligned_with((block,1)), 56).
holds(1, configuration(manipulator_limb_1), retracted, 56).
holds(1, configuration(manipulator_limb_2), retracted, 56).
holds(1, configuration(puzzle_room_door), open, 56).
holds(1, configuration(starting_room_door), closed, 56).
holds(1, configuration(store_room_door), open, 56).
holds(1, grasping(manipulator_arm_1), nothing, 56).
holds(1, grasping(manipulator_arm_2), (block,1), 56).
holds(1, grasping(manipulator_end_1), nothing, 56).
holds(1, grasping(manipulator_end_2), (block,1), 56).
holds(1, in((block,1)), (hallway,2), 56).
holds(1, in((block,2)), (puzzle_room,1), 56).
holds(1, in((block,3)), (puzzle_room,1), 56).
holds(1, in((block,4)), (store_room,0), 56).
holds(1, in((block,5)), (puzzle_room,1), 56).
holds(1, in((block,6)), (puzzle_room,1), 56).
holds(1, in(manipulator_arm_1), (hallway,2), 56).
holds(1, in(manipulator_arm_2), (hallway,2), 56).
holds(1, in(manipulator_end_1), (hallway,2), 56).
holds(1, in(manipulator_end_2), (hallway,2), 56).
holds(1, in(manipulator_limb_1), (hallway,2), 56).
holds(1, in(manipulator_limb_2), (hallway,2), 56).
holds(1, in(puzzle_room_table), (puzzle_room,1), 56).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 56).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 56).
holds(1, in(talos), (hallway,2), 56).
holds(1, in_tower((block,1),(block,1)), false, 56).
holds(1, in_tower((block,1),(block,2)), false, 56).
holds(1, in_tower((block,1),(block,3)), false, 56).
holds(1, in_tower((block,1),(block,4)), false, 56).
holds(1, in_tower((block,1),(block,5)), false, 56).
holds(1, in_tower((block,1),(block,6)), false, 56).
holds(1, in_tower((block,2),(block,1)), false, 56).
holds(1, in_tower((block,2),(block,2)), false, 56).
holds(1, in_tower((block,2),(block,3)), false, 56).
holds(1, in_tower((block,2),(block,4)), false, 56).
holds(1, in_tower((block,2),(block,5)), false, 56).
holds(1, in_tower((block,2),(block,6)), false, 56).
holds(1, in_tower((block,3),(block,1)), false, 56).
holds(1, in_tower((block,3),(block,2)), true, 56).
holds(1, in_tower((block,3),(block,3)), true, 56).
holds(1, in_tower((block,3),(block,4)), false, 56).
holds(1, in_tower((block,3),(block,5)), false, 56).
holds(1, in_tower((block,3),(block,6)), false, 56).
holds(1, in_tower((block,4),(block,1)), false, 56).
holds(1, in_tower((block,4),(block,2)), false, 56).
holds(1, in_tower((block,4),(block,3)), false, 56).
holds(1, in_tower((block,4),(block,4)), false, 56).
holds(1, in_tower((block,4),(block,5)), false, 56).
holds(1, in_tower((block,4),(block,6)), false, 56).
holds(1, in_tower((block,5),(block,1)), false, 56).
holds(1, in_tower((block,5),(block,2)), false, 56).
holds(1, in_tower((block,5),(block,3)), false, 56).
holds(1, in_tower((block,5),(block,4)), false, 56).
holds(1, in_tower((block,5),(block,5)), false, 56).
holds(1, in_tower((block,5),(block,6)), false, 56).
holds(1, in_tower((block,6),(block,1)), false, 56).
holds(1, in_tower((block,6),(block,2)), false, 56).
holds(1, in_tower((block,6),(block,3)), false, 56).
holds(1, in_tower((block,6),(block,4)), false, 56).
holds(1, in_tower((block,6),(block,5)), true, 56).
holds(1, in_tower((block,6),(block,6)), true, 56).
holds(1, on((block,1)), nothing, 56).
holds(1, on((block,2)), (block,3), 56).
holds(1, on((block,3)), puzzle_room_table_left, 56).
holds(1, on((block,4)), nothing, 56).
holds(1, on((block,5)), (block,6), 56).
holds(1, on((block,6)), puzzle_room_table_right, 56).
holds(1, tower_base((block,1),puzzle_room_table), false, 56).
holds(1, tower_base((block,2),puzzle_room_table), false, 56).
holds(1, tower_base((block,3),puzzle_room_table), true, 56).
holds(1, tower_base((block,4),puzzle_room_table), false, 56).
holds(1, tower_base((block,5),puzzle_room_table), false, 56).
holds(1, tower_base((block,6),puzzle_room_table), true, 56).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 56).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 56).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 56).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 56).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 56).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 56).
holds(2, complete_tower(blue,puzzle_room_table), false, 56).
holds(2, complete_tower(red,puzzle_room_table), false, 56).
holds(2, configuration(manipulator_arm_1), retracted, 56).
holds(2, configuration(manipulator_arm_2), retracted, 56).
holds(2, configuration(puzzle_room_door), open, 56).
holds(2, configuration(starting_room_door), closed, 56).
holds(2, configuration(store_room_door), open, 56).
holds(2, grasping(manipulator_arm_1), nothing, 56).
holds(2, grasping(manipulator_arm_2), (block,1), 56).
holds(2, in((block,1)), hallway, 56).
holds(2, in((block,2)), puzzle_room, 56).
holds(2, in((block,3)), puzzle_room, 56).
holds(2, in((block,4)), store_room, 56).
holds(2, in((block,5)), puzzle_room, 56).
holds(2, in((block,6)), puzzle_room, 56).
holds(2, in(manipulator_arm_1), hallway, 56).
holds(2, in(manipulator_arm_2), hallway, 56).
holds(2, in(puzzle_room_table), puzzle_room, 56).
holds(2, in(talos), hallway, 56).
holds(2, in_tower((block,1),(block,1)), false, 56).
holds(2, in_tower((block,1),(block,2)), false, 56).
holds(2, in_tower((block,1),(block,3)), false, 56).
holds(2, in_tower((block,1),(block,4)), false, 56).
holds(2, in_tower((block,1),(block,5)), false, 56).
holds(2, in_tower((block,1),(block,6)), false, 56).
holds(2, in_tower((block,2),(block,1)), false, 56).
holds(2, in_tower((block,2),(block,2)), false, 56).
holds(2, in_tower((block,2),(block,3)), false, 56).
holds(2, in_tower((block,2),(block,4)), false, 56).
holds(2, in_tower((block,2),(block,5)), false, 56).
holds(2, in_tower((block,2),(block,6)), false, 56).
holds(2, in_tower((block,3),(block,1)), false, 56).
holds(2, in_tower((block,3),(block,2)), true, 56).
holds(2, in_tower((block,3),(block,3)), true, 56).
holds(2, in_tower((block,3),(block,4)), false, 56).
holds(2, in_tower((block,3),(block,5)), false, 56).
holds(2, in_tower((block,3),(block,6)), false, 56).
holds(2, in_tower((block,4),(block,1)), false, 56).
holds(2, in_tower((block,4),(block,2)), false, 56).
holds(2, in_tower((block,4),(block,3)), false, 56).
holds(2, in_tower((block,4),(block,4)), false, 56).
holds(2, in_tower((block,4),(block,5)), false, 56).
holds(2, in_tower((block,4),(block,6)), false, 56).
holds(2, in_tower((block,5),(block,1)), false, 56).
holds(2, in_tower((block,5),(block,2)), false, 56).
holds(2, in_tower((block,5),(block,3)), false, 56).
holds(2, in_tower((block,5),(block,4)), false, 56).
holds(2, in_tower((block,5),(block,5)), false, 56).
holds(2, in_tower((block,5),(block,6)), false, 56).
holds(2, in_tower((block,6),(block,1)), false, 56).
holds(2, in_tower((block,6),(block,2)), false, 56).
holds(2, in_tower((block,6),(block,3)), false, 56).
holds(2, in_tower((block,6),(block,4)), false, 56).
holds(2, in_tower((block,6),(block,5)), true, 56).
holds(2, in_tower((block,6),(block,6)), true, 56).
holds(2, on((block,1)), nothing, 56).
holds(2, on((block,2)), (block,3), 56).
holds(2, on((block,3)), puzzle_room_table, 56).
holds(2, on((block,4)), nothing, 56).
holds(2, on((block,5)), (block,6), 56).
holds(2, on((block,6)), puzzle_room_table, 56).
holds(2, tower_base((block,1),puzzle_room_table), false, 56).
holds(2, tower_base((block,2),puzzle_room_table), false, 56).
holds(2, tower_base((block,3),puzzle_room_table), true, 56).
holds(2, tower_base((block,4),puzzle_room_table), false, 56).
holds(2, tower_base((block,5),puzzle_room_table), false, 56).
holds(2, tower_base((block,6),puzzle_room_table), true, 56).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 56).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 56).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 56).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 56).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 56).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 56).

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 36})

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part base:

sub_goal(2, talos, move(store_room), in(talos), store_room, 36).

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001DBED6AB430>]
	incrementor = SolveIncrementor(step_start=56, step_increase=1, step_increase_initial=2, step_end_min=57, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 56), range_=None), IncPart(name='plan_module', args=('#inc', 56, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 56, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 56, 36, 36, 'sequential', 'false'), range_=None)]

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 809 rules

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0044848000000001775s

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.029114s.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005051s with result Satisfiable.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DBED75D1D0>

[09-02-2022_23-55-38] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 56)
	('last_sgoals', 36)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001DBAB24FA60>)
	('first_sgoals', 36)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001DBED75D1D0>)

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 56). %* None *%
#program plan_module(#inc, 56, true, false). %* None *%
#program optimisation_module(#inc, 56, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 56, 36, 36, sequential, false). %* None *%

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     55 : Current =     57
Incrementor step ends | Minimum  =     57 : Maximum =    200

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(57)]), ('state_module', [Number(56), Number(56)]), ('plan_module', [Number(56), Number(56), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(56), Number(56), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(56)]), ('action_preconditions', [Number(56)]), ('variable_relations', [Number(56)]), ('abstraction_mappings', [Number(56)]), ('conformance_module', [Number(56), Number(56), Number(36), Number(36), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(57), Number(56)]), ('plan_module', [Number(57), Number(56), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(57), Number(56), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(57)]), ('action_preconditions', [Number(57)]), ('variable_relations', [Number(57)]), ('abstraction_mappings', [Number(57)]), ('conformance_module', [Number(57), Number(56), Number(36), Number(36), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.245761s.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008566s with result Unsatisfiable.

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2543268000001717, Incremental time limit = None
Running cumulative time = 0.2543268000001717, Cumulative time limit = 1800
Used memory = (RSS = 1157.664062Mb, VMS = 1148.824219Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     57 : Current =     58
Incrementor step ends | Minimum  =     57 : Maximum =    200

[09-02-2022_23-55-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(58)]), ('state_module', [Number(58), Number(56)]), ('plan_module', [Number(58), Number(56), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(58), Number(56), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(58)]), ('action_preconditions', [Number(58)]), ('variable_relations', [Number(58)]), ('abstraction_mappings', [Number(58)]), ('conformance_module', [Number(58), Number(56), Number(36), Number(36), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.138821s.

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.003727s with result Unsatisfiable.

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.14254820000019208, Incremental time limit = None
Running cumulative time = 0.3968750000003638, Cumulative time limit = 1800
Used memory = (RSS = 1157.664062Mb, VMS = 1148.824219Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     58 : Current =     59
Incrementor step ends | Minimum  =     57 : Maximum =    200

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(59)]), ('state_module', [Number(59), Number(56)]), ('plan_module', [Number(59), Number(56), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(59), Number(56), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(59)]), ('action_preconditions', [Number(59)]), ('variable_relations', [Number(59)]), ('abstraction_mappings', [Number(59)]), ('conformance_module', [Number(59), Number(56), Number(36), Number(36), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.177515s.

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009246s with result Satisfiable.

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.18676030000005994, Incremental time limit = None
Running cumulative time = 0.5836353000004237, Cumulative time limit = 1800
Used memory = (RSS = 1157.664062Mb, VMS = 1148.824219Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.562096s, Solving = 0.021539s, Total = 0.583635s, Memory = (RSS = 1157.664062Mb, VMS = 1148.824219Mb), Step range = [56-59]), Calls = 3
Final Model :: Total atoms = 4890, Cost = (3, 0, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.245761s, Solving = 0.008566s, Total = 0.254327s, Memory = (RSS = 1157.664062Mb, VMS = 1148.824219Mb), Step range = [56-57]
2 : Statistics :: Grounding = 0.138821s, Solving = 0.003727s, Total = 0.142548s, Memory = (RSS = 1157.664062Mb, VMS = 1148.824219Mb), Step range = [58-58]
3 : Statistics :: Grounding = 0.177515s, Solving = 0.009246s, Total = 0.186760s, Memory = (RSS = 1157.664062Mb, VMS = 1148.824219Mb), Step range = [59-59]

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.583635s due to: Stop condition reached.

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[09-02-2022_23-55-39] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 4, 10: 5, 11: 6, 12: 7, 13: 8, 14: 8, 15: 9, 16: 9, 17: 10, 18: 11, 19: 11, 20: 12, 21: 13, 22: 13, 23: 13, 24: 13, 25: 13, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 19, 33: 19, 34: 20, 35: 21, 36: 22, 37: 23, 38: 23, 39: 24, 40: 25, 41: 25, 42: 26, 43: 27, 44: 28, 45: 28, 46: 28, 47: 29, 48: 30, 49: 31, 50: 31, 51: 32, 52: 32, 53: 33, 54: 34, 55: 35, 56: 35}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 14, 9: 16, 10: 17, 11: 19, 12: 20, 13: 25, 14: 27, 15: 28, 16: 29, 17: 30, 18: 31, 19: 33, 20: 34, 21: 35, 22: 36, 23: 38, 24: 39, 25: 41, 26: 42, 27: 43, 28: 46, 29: 47, 30: 48, 31: 50, 32: 52, 33: 53, 34: 54, 35: 56}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 36}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_23-55-39] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 4, 10: 5, 11: 6, 12: 7, 13: 8, 14: 8, 15: 9, 16: 9, 17: 10, 18: 11, 19: 11, 20: 12, 21: 13, 22: 13, 23: 13, 24: 13, 25: 13, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 19, 33: 19, 34: 20, 35: 21, 36: 22, 37: 23, 38: 23, 39: 24, 40: 25, 41: 25, 42: 26, 43: 27, 44: 28, 45: 28, 46: 28, 47: 29, 48: 30, 49: 31, 50: 31, 51: 32, 52: 32, 53: 33, 54: 34, 55: 35, 56: 35, 57: 36, 58: 36, 59: 36}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 14, 9: 16, 10: 17, 11: 19, 12: 20, 13: 25, 14: 27, 15: 28, 16: 29, 17: 30, 18: 31, 19: 33, 20: 34, 21: 35, 22: 36, 23: 38, 24: 39, 25: 41, 26: 42, 27: 43, 28: 46, 29: 47, 30: 48, 31: 50, 32: 52, 33: 53, 34: 54, 35: 56, 36: 59}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 36}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_23-55-39] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 36, Last requested goal index = 36, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[09-02-2022_23-55-39] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.562096s, Solving = 0.021539s, Total = 0.583635s, Memory = (RSS = 1157.664062Mb, VMS = 1148.824219Mb), Step range = [56-59]), Calls = 3
Model :: Total atoms = 4890, Cost = (3, 0, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[09-02-2022_23-55-39] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 3 :: Actions = 3                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 4:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 10:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 11:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 12:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 13:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 14:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 15:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 16:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
        talos : grasp(manipulator_end_2,(block,6))
Step 17:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 21:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 22:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 23:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 24:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 25:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,5))
Step 26:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 27:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 28:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 29:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 31:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 32:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 33:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 34:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,6),puzzle_room_table_right)
Step 35:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,6))
Step 36:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 37:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 38:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 39:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 40:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 41:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 42:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 43:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 44:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 45:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 46:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,3)))
        talos : configure(manipulator_limb_1,extended)
Step 47:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 29] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 29] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,3))
        talos : put(manipulator_end_1,(block,5),(block,6))
Step 48:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 30] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_end_2,(block,3),puzzle_room_table_left)
        talos : release(manipulator_end_1,(block,5))
Step 49:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 50:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
        talos : release(manipulator_end_2,(block,3))
Step 51:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,1)))
Step 52:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,1))
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 53:
    Current Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
        [Index = 33] talos : lift(manipulator_arm_2,(block,1)) -> on((block,1)) = nothing
        [Index = 33] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
        [Index = 33] talos : lift(manipulator_arm_2,(block,1)) -> on((block,1)) = nothing
        [Index = 33] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
        talos : lift(manipulator_end_2,(block,1))
        talos : release(manipulator_end_1,(block,2))
Step 54:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 55:
    Current Sub-goals:
        [Index = 35] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 56:
    Current Sub-goals:
        [Index = 35] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 35] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 57:
    Current Sub-goals:
        [Index = 36] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 58:
    Current Sub-goals:
        [Index = 36] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 59:
    Current Sub-goals:
        [Index = 36] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 36] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))

[09-02-2022_23-55-39] DEBUG :: ASH Planner Main #1 >> Monolevel problem 25 at level 1 solved.

[09-02-2022_23-55-39] DEBUG :: ASH Planner Main #1 >> Online planning increment 25 finished.

[09-02-2022_23-55-39] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 5 : Total constraining sub-goal stages = 14 : Goals achieved = 11 : Goals unachieved = 3 : Complete = False
Level = 1 : Solved problems = 25 : Total constraining sub-goal stages = 36 : Goals achieved = 36 : Goals unachieved = 0 : Complete = False

[09-02-2022_23-55-39] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 2, Highest = 2.

[09-02-2022_23-55-39] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 26 by method ground-first is [1-2].

[09-02-2022_23-55-39] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning problem 6 at level 2:
Total Templated Partial Problems = 6, Problem Range = [1-6], Size = 14, Sub-goal Stage Range = [1-14]
Division points [total=5] : [(Index = 2, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 4, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 6, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 8, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 11, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[09-02-2022_23-55-39] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [12-14]

[09-02-2022_23-55-39] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [12-14], problem number = 6, increment number = 26

[09-02-2022_23-55-39] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 12)
	('last_sgoals', 14)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001DBAB24FA60>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[09-02-2022_23-55-39] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 2] partial conformance refinement (sequential) with sgoals range [12-14] : Concurrency enabled : Minimum search length bound enabled with value 38

[09-02-2022_23-55-39] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 12
last_sgoals = 14
start_step = 36
is_initial = False
is_final = True
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 38

[09-02-2022_23-55-39] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[09-02-2022_23-55-39] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[09-02-2022_23-55-39] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[09-02-2022_23-55-39] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[09-02-2022_23-55-39] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_23-55-39] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 36 as problem start state.

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 36})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 36})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 36})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 36})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 36})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 36})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'S': 36})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'store_room', 'S': 36})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 36})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'store_room', 'S': 36})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'store_room', 'S': 36})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'store_room', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 36})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 36})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'S': 36})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 36})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 36})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 36})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 36})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 36})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 36})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 36})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 36})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'S': 36})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'store_room', 'S': 36})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 36})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'store_room', 'S': 36})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'store_room', 'S': 36})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 36})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'store_room', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 36})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 36})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'S': 36})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 36})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 36})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 36})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 36})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 36})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 36})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 36})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 36})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 36})

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state:

holds(2, complete_tower(blue,puzzle_room_table), false, 36).
holds(2, complete_tower(red,puzzle_room_table), false, 36).
holds(2, configuration(manipulator_arm_1), retracted, 36).
holds(2, configuration(manipulator_arm_2), retracted, 36).
holds(2, configuration(puzzle_room_door), open, 36).
holds(2, configuration(starting_room_door), closed, 36).
holds(2, configuration(store_room_door), open, 36).
holds(2, grasping(manipulator_arm_1), nothing, 36).
holds(2, grasping(manipulator_arm_2), (block,1), 36).
holds(2, in((block,1)), store_room, 36).
holds(2, in((block,2)), puzzle_room, 36).
holds(2, in((block,3)), puzzle_room, 36).
holds(2, in((block,4)), store_room, 36).
holds(2, in((block,5)), puzzle_room, 36).
holds(2, in((block,6)), puzzle_room, 36).
holds(2, in(manipulator_arm_1), store_room, 36).
holds(2, in(manipulator_arm_2), store_room, 36).
holds(2, in(puzzle_room_table), puzzle_room, 36).
holds(2, in(talos), store_room, 36).
holds(2, in_tower((block,1),(block,1)), false, 36).
holds(2, in_tower((block,1),(block,2)), false, 36).
holds(2, in_tower((block,1),(block,3)), false, 36).
holds(2, in_tower((block,1),(block,4)), false, 36).
holds(2, in_tower((block,1),(block,5)), false, 36).
holds(2, in_tower((block,1),(block,6)), false, 36).
holds(2, in_tower((block,2),(block,1)), false, 36).
holds(2, in_tower((block,2),(block,2)), false, 36).
holds(2, in_tower((block,2),(block,3)), false, 36).
holds(2, in_tower((block,2),(block,4)), false, 36).
holds(2, in_tower((block,2),(block,5)), false, 36).
holds(2, in_tower((block,2),(block,6)), false, 36).
holds(2, in_tower((block,3),(block,1)), false, 36).
holds(2, in_tower((block,3),(block,2)), true, 36).
holds(2, in_tower((block,3),(block,3)), true, 36).
holds(2, in_tower((block,3),(block,4)), false, 36).
holds(2, in_tower((block,3),(block,5)), false, 36).
holds(2, in_tower((block,3),(block,6)), false, 36).
holds(2, in_tower((block,4),(block,1)), false, 36).
holds(2, in_tower((block,4),(block,2)), false, 36).
holds(2, in_tower((block,4),(block,3)), false, 36).
holds(2, in_tower((block,4),(block,4)), false, 36).
holds(2, in_tower((block,4),(block,5)), false, 36).
holds(2, in_tower((block,4),(block,6)), false, 36).
holds(2, in_tower((block,5),(block,1)), false, 36).
holds(2, in_tower((block,5),(block,2)), false, 36).
holds(2, in_tower((block,5),(block,3)), false, 36).
holds(2, in_tower((block,5),(block,4)), false, 36).
holds(2, in_tower((block,5),(block,5)), false, 36).
holds(2, in_tower((block,5),(block,6)), false, 36).
holds(2, in_tower((block,6),(block,1)), false, 36).
holds(2, in_tower((block,6),(block,2)), false, 36).
holds(2, in_tower((block,6),(block,3)), false, 36).
holds(2, in_tower((block,6),(block,4)), false, 36).
holds(2, in_tower((block,6),(block,5)), true, 36).
holds(2, in_tower((block,6),(block,6)), true, 36).
holds(2, on((block,1)), nothing, 36).
holds(2, on((block,2)), (block,3), 36).
holds(2, on((block,3)), puzzle_room_table, 36).
holds(2, on((block,4)), nothing, 36).
holds(2, on((block,5)), (block,6), 36).
holds(2, on((block,6)), puzzle_room_table, 36).
holds(2, tower_base((block,1),puzzle_room_table), false, 36).
holds(2, tower_base((block,2),puzzle_room_table), false, 36).
holds(2, tower_base((block,3),puzzle_room_table), true, 36).
holds(2, tower_base((block,4),puzzle_room_table), false, 36).
holds(2, tower_base((block,5),puzzle_room_table), false, 36).
holds(2, tower_base((block,6),puzzle_room_table), true, 36).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 36).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 36).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 36).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 36).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 36).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 36).
holds(3, complete_tower(blue,puzzle_room_table), false, 36).
holds(3, complete_tower(red,puzzle_room_table), false, 36).
holds(3, grasping(manipulator_arm_1), nothing, 36).
holds(3, grasping(manipulator_arm_2), (block,1), 36).
holds(3, in((block,1)), store_room, 36).
holds(3, in((block,2)), puzzle_room, 36).
holds(3, in((block,3)), puzzle_room, 36).
holds(3, in((block,4)), store_room, 36).
holds(3, in((block,5)), puzzle_room, 36).
holds(3, in((block,6)), puzzle_room, 36).
holds(3, in(manipulator_arm_1), store_room, 36).
holds(3, in(manipulator_arm_2), store_room, 36).
holds(3, in(puzzle_room_table), puzzle_room, 36).
holds(3, in(talos), store_room, 36).
holds(3, in_tower((block,1),(block,1)), false, 36).
holds(3, in_tower((block,1),(block,2)), false, 36).
holds(3, in_tower((block,1),(block,3)), false, 36).
holds(3, in_tower((block,1),(block,4)), false, 36).
holds(3, in_tower((block,1),(block,5)), false, 36).
holds(3, in_tower((block,1),(block,6)), false, 36).
holds(3, in_tower((block,2),(block,1)), false, 36).
holds(3, in_tower((block,2),(block,2)), false, 36).
holds(3, in_tower((block,2),(block,3)), false, 36).
holds(3, in_tower((block,2),(block,4)), false, 36).
holds(3, in_tower((block,2),(block,5)), false, 36).
holds(3, in_tower((block,2),(block,6)), false, 36).
holds(3, in_tower((block,3),(block,1)), false, 36).
holds(3, in_tower((block,3),(block,2)), true, 36).
holds(3, in_tower((block,3),(block,3)), true, 36).
holds(3, in_tower((block,3),(block,4)), false, 36).
holds(3, in_tower((block,3),(block,5)), false, 36).
holds(3, in_tower((block,3),(block,6)), false, 36).
holds(3, in_tower((block,4),(block,1)), false, 36).
holds(3, in_tower((block,4),(block,2)), false, 36).
holds(3, in_tower((block,4),(block,3)), false, 36).
holds(3, in_tower((block,4),(block,4)), false, 36).
holds(3, in_tower((block,4),(block,5)), false, 36).
holds(3, in_tower((block,4),(block,6)), false, 36).
holds(3, in_tower((block,5),(block,1)), false, 36).
holds(3, in_tower((block,5),(block,2)), false, 36).
holds(3, in_tower((block,5),(block,3)), false, 36).
holds(3, in_tower((block,5),(block,4)), false, 36).
holds(3, in_tower((block,5),(block,5)), false, 36).
holds(3, in_tower((block,5),(block,6)), false, 36).
holds(3, in_tower((block,6),(block,1)), false, 36).
holds(3, in_tower((block,6),(block,2)), false, 36).
holds(3, in_tower((block,6),(block,3)), false, 36).
holds(3, in_tower((block,6),(block,4)), false, 36).
holds(3, in_tower((block,6),(block,5)), true, 36).
holds(3, in_tower((block,6),(block,6)), true, 36).
holds(3, on((block,1)), nothing, 36).
holds(3, on((block,2)), (block,3), 36).
holds(3, on((block,3)), puzzle_room_table, 36).
holds(3, on((block,4)), nothing, 36).
holds(3, on((block,5)), (block,6), 36).
holds(3, on((block,6)), puzzle_room_table, 36).
holds(3, tower_base((block,1),puzzle_room_table), false, 36).
holds(3, tower_base((block,2),puzzle_room_table), false, 36).
holds(3, tower_base((block,3),puzzle_room_table), true, 36).
holds(3, tower_base((block,4),puzzle_room_table), false, 36).
holds(3, tower_base((block,5),puzzle_room_table), false, 36).
holds(3, tower_base((block,6),puzzle_room_table), true, 36).
holds(3, unordered_tower((block,1),puzzle_room_table), false, 36).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 36).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 36).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 36).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 36).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 36).

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 284 rules into program part ash_goal_state:

final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).

[09-02-2022_23-55-39] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=38']

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,4))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'I': 12})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 13})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 14})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 14})

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 4 rules into program part base:

sub_goal(3, talos, grasp(manipulator_arm_1,(block,4)), grasping(manipulator_arm_1), (block,4), 12).
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 13).
sub_goal(3, talos, put(manipulator_arm_1,(block,4),(block,5)), on((block,4)), (block,5), 14).
sub_goal(3, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 14).

[09-02-2022_23-55-39] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=38']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001DBED95C670>]
	incrementor = SolveIncrementor(step_start=36, step_increase=1, step_increase_initial=3, step_end_min=39, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 36), range_=None), IncPart(name='plan_module', args=('#inc', 36, 'true', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 36, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 36, 12, 14, 'sequential', 'false'), range_=None)]

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 791 rules

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004441600000063772s

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.024983s.

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.003868s with result Satisfiable.

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DBEDC35BD0>

[09-02-2022_23-55-39] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 2)
	('start_step', 36)
	('last_sgoals', 14)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001DBAB24FA60>)
	('first_sgoals', 12)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001DBEDC35BD0>)

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 36). %* None *%
#program plan_module(#inc, 36, true, true). %* None *%
#program optimisation_module(#inc, 36, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 36, 12, 14, sequential, false). %* None *%

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     35 : Current =     38
Incrementor step ends | Minimum  =     39 : Maximum =    200

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(38)]), ('state_module', [Number(36), Number(36)]), ('plan_module', [Number(36), Number(36), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(36), Number(36), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(36)]), ('action_preconditions', [Number(36)]), ('variable_relations', [Number(36)]), ('abstraction_mappings', [Number(36)]), ('conformance_module', [Number(36), Number(36), Number(12), Number(14), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(37), Number(36)]), ('plan_module', [Number(37), Number(36), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(37), Number(36), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(37)]), ('action_preconditions', [Number(37)]), ('variable_relations', [Number(37)]), ('abstraction_mappings', [Number(37)]), ('conformance_module', [Number(37), Number(36), Number(12), Number(14), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(38), Number(36)]), ('plan_module', [Number(38), Number(36), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(38), Number(36), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(38)]), ('action_preconditions', [Number(38)]), ('variable_relations', [Number(38)]), ('abstraction_mappings', [Number(38)]), ('conformance_module', [Number(38), Number(36), Number(12), Number(14), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.208074s.

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.015562s with result Satisfiable.

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2236351999999897, Incremental time limit = None
Running cumulative time = 0.2236351999999897, Cumulative time limit = 1800
Used memory = (RSS = 1157.914062Mb, VMS = 1149.078125Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.208074s, Solving = 0.015562s, Total = 0.223635s, Memory = (RSS = 1157.914062Mb, VMS = 1149.078125Mb), Step range = [36-38]), Calls = 1
Final Model :: Total atoms = 4342, Cost = (2, 0, 0), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     38 : Current =     39
Incrementor step ends | Minimum  =     39 : Maximum =    200

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(39)]), ('state_module', [Number(39), Number(36)]), ('plan_module', [Number(39), Number(36), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(39), Number(36), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(39)]), ('action_preconditions', [Number(39)]), ('variable_relations', [Number(39)]), ('abstraction_mappings', [Number(39)]), ('conformance_module', [Number(39), Number(36), Number(12), Number(14), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.108907s.

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.003901s with result Unsatisfiable.

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11280879999981153, Incremental time limit = None
Running cumulative time = 0.33644399999980124, Cumulative time limit = 1800
Used memory = (RSS = 1157.914062Mb, VMS = 1149.078125Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     39 : Current =     40
Incrementor step ends | Minimum  =     39 : Maximum =    200

[09-02-2022_23-55-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(40)]), ('state_module', [Number(40), Number(36)]), ('plan_module', [Number(40), Number(36), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(40), Number(36), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(40)]), ('action_preconditions', [Number(40)]), ('variable_relations', [Number(40)]), ('abstraction_mappings', [Number(40)]), ('conformance_module', [Number(40), Number(36), Number(12), Number(14), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.109183s.

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005074s with result Unsatisfiable.

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1142571999998836, Incremental time limit = None
Running cumulative time = 0.45070119999968483, Cumulative time limit = 1800
Used memory = (RSS = 1157.914062Mb, VMS = 1149.078125Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     40 : Current =     41
Incrementor step ends | Minimum  =     39 : Maximum =    200

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(41)]), ('state_module', [Number(41), Number(36)]), ('plan_module', [Number(41), Number(36), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(41), Number(36), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(41)]), ('action_preconditions', [Number(41)]), ('variable_relations', [Number(41)]), ('abstraction_mappings', [Number(41)]), ('conformance_module', [Number(41), Number(36), Number(12), Number(14), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.114755s.

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006108s with result Unsatisfiable.

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.12086300000009942, Incremental time limit = None
Running cumulative time = 0.5715641999997843, Cumulative time limit = 1800
Used memory = (RSS = 1157.921875Mb, VMS = 1149.328125Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     41 : Current =     42
Incrementor step ends | Minimum  =     39 : Maximum =    200

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(42)]), ('state_module', [Number(42), Number(36)]), ('plan_module', [Number(42), Number(36), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(42), Number(36), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('conformance_module', [Number(42), Number(36), Number(12), Number(14), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.117243s.

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007062s with result Unsatisfiable.

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.12430450000010751, Incremental time limit = None
Running cumulative time = 0.6958686999998918, Cumulative time limit = 1800
Used memory = (RSS = 1157.949219Mb, VMS = 1149.328125Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     42 : Current =     43
Incrementor step ends | Minimum  =     39 : Maximum =    200

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(43)]), ('state_module', [Number(43), Number(36)]), ('plan_module', [Number(43), Number(36), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(43), Number(36), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(43)]), ('action_preconditions', [Number(43)]), ('variable_relations', [Number(43)]), ('abstraction_mappings', [Number(43)]), ('conformance_module', [Number(43), Number(36), Number(12), Number(14), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.120332s.

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.014207s with result Satisfiable.

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1345390999999836, Incremental time limit = None
Running cumulative time = 0.8304077999998754, Cumulative time limit = 1800
Used memory = (RSS = 1159.359375Mb, VMS = 1150.648438Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.778494s, Solving = 0.051913s, Total = 0.830408s, Memory = (RSS = 1159.359375Mb, VMS = 1150.648438Mb), Step range = [36-43]), Calls = 6
Final Model :: Total atoms = 6683, Cost = (9, 0, -2), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.208074s, Solving = 0.015562s, Total = 0.223635s, Memory = (RSS = 1157.914062Mb, VMS = 1149.078125Mb), Step range = [36-38]
2 : Statistics :: Grounding = 0.108907s, Solving = 0.003901s, Total = 0.112809s, Memory = (RSS = 1157.914062Mb, VMS = 1149.078125Mb), Step range = [39-39]
3 : Statistics :: Grounding = 0.109183s, Solving = 0.005074s, Total = 0.114257s, Memory = (RSS = 1157.914062Mb, VMS = 1149.078125Mb), Step range = [40-40]
4 : Statistics :: Grounding = 0.114755s, Solving = 0.006108s, Total = 0.120863s, Memory = (RSS = 1157.921875Mb, VMS = 1149.328125Mb), Step range = [41-41]
5 : Statistics :: Grounding = 0.117243s, Solving = 0.007062s, Total = 0.124305s, Memory = (RSS = 1157.949219Mb, VMS = 1149.328125Mb), Step range = [42-42]
6 : Statistics :: Grounding = 0.120332s, Solving = 0.014207s, Total = 0.134539s, Memory = (RSS = 1159.359375Mb, VMS = 1150.648438Mb), Step range = [43-43]

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.830408s due to: Stop condition reached.

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[09-02-2022_23-55-40] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 4, 10: 5, 11: 6, 12: 7, 13: 8, 14: 8, 15: 9, 16: 9, 17: 10, 18: 11, 19: 11, 20: 12, 21: 13, 22: 13, 23: 13, 24: 13, 25: 13, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 19, 33: 19, 34: 20, 35: 21, 36: 22, 37: 23, 38: 23, 39: 24, 40: 25, 41: 25, 42: 26, 43: 27, 44: 28, 45: 28, 46: 28, 47: 29, 48: 30, 49: 31, 50: 31, 51: 32, 52: 32, 53: 33, 54: 34, 55: 35, 56: 35, 57: 36, 58: 36, 59: 36}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 14, 9: 16, 10: 17, 11: 19, 12: 20, 13: 25, 14: 27, 15: 28, 16: 29, 17: 30, 18: 31, 19: 33, 20: 34, 21: 35, 22: 36, 23: 38, 24: 39, 25: 41, 26: 42, 27: 43, 28: 46, 29: 47, 30: 48, 31: 50, 32: 52, 33: 53, 34: 54, 35: 56, 36: 59}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 36}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_23-55-40] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 4, 10: 5, 11: 6, 12: 7, 13: 8, 14: 8, 15: 9, 16: 9, 17: 10, 18: 11, 19: 11, 20: 12, 21: 13, 22: 13, 23: 13, 24: 13, 25: 13, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 19, 33: 19, 34: 20, 35: 21, 36: 22, 37: 23, 38: 23, 39: 24, 40: 25, 41: 25, 42: 26, 43: 27, 44: 28, 45: 28, 46: 28, 47: 29, 48: 30, 49: 31, 50: 31, 51: 32, 52: 32, 53: 33, 54: 34, 55: 35, 56: 35, 57: 36, 58: 36, 59: 36}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 14, 9: 16, 10: 17, 11: 19, 12: 20, 13: 25, 14: 27, 15: 28, 16: 29, 17: 30, 18: 31, 19: 33, 20: 34, 21: 35, 22: 36, 23: 38, 24: 39, 25: 41, 26: 42, 27: 43, 28: 46, 29: 47, 30: 48, 31: 50, 32: 52, 33: 53, 34: 54, 35: 56, 36: 59}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11, 37: 12, 38: 12, 39: 13, 40: 13, 41: 13, 42: 14, 43: 14}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 36, 12: 38, 13: 41, 14: 43}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_23-55-40] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 14, Last requested goal index = 14, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[09-02-2022_23-55-40] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.778494s, Solving = 0.051913s, Total = 0.830408s, Memory = (RSS = 1159.359375Mb, VMS = 1150.648438Mb), Step range = [36-43]), Calls = 6
Model :: Total atoms = 6683, Cost = (9, 0, -2), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[09-02-2022_23-55-40] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                  Steps = 7 :: Actions = 9                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_2,store_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,store_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 8:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 9:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,5))
        talos : grasp(manipulator_arm_2,(block,6))
Step 10:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
        talos : configure(manipulator_arm_2,retracted)
Step 11:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 12:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,(block,5))
Step 14:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,puzzle_room_door)
Step 16:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 19:
    Current Sub-goals:
        [Index = 4] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 20:
    Current Sub-goals:
        [Index = 4] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 4] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_2,(block,6),puzzle_room_table)
Step 21:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,6))
Step 22:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 6] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 23:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 6] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 24:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 6] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 25:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 6] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,5))
Step 26:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 6] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 27:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 6] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : move(puzzle_room)
Step 28:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 6] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 29:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 6] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 6] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,3))
        talos : put(manipulator_arm_1,(block,5),(block,6))
Step 30:
    Current Sub-goals:
        [Index = 7] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 7] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 7] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 7] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_arm_2,(block,3),puzzle_room_table)
        talos : release(manipulator_arm_1,(block,5))
Step 31:
    Current Sub-goals:
        [Index = 8] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 8] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 8] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,2))
        talos : release(manipulator_arm_2,(block,3))
Step 32:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 9] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 9] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,1))
        talos : put(manipulator_arm_1,(block,2),(block,3))
Step 33:
    Current Sub-goals:
        [Index = 10] talos : lift(manipulator_arm_2,(block,1)) -> on((block,1)) = nothing
        [Index = 10] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 10] talos : lift(manipulator_arm_2,(block,1)) -> on((block,1)) = nothing
        [Index = 10] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
        talos : lift(manipulator_arm_2,(block,1))
        talos : release(manipulator_arm_1,(block,2))
Step 34:
    Current Sub-goals:
        [Index = 11] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 35:
    Current Sub-goals:
        [Index = 11] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 36:
    Current Sub-goals:
        [Index = 11] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 11] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 37:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 38:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,4))
Step 39:
    Current Sub-goals:
        [Index = 13] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 40:
    Current Sub-goals:
        [Index = 13] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 41:
    Current Sub-goals:
        [Index = 13] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 13] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 42:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 14] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 43:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 14] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 14] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_arm_1,(block,4),(block,5))
        talos : put(manipulator_arm_2,(block,1),(block,2))

[09-02-2022_23-55-40] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=36, total_plan_length=43, step_range=range(36, 44)

[09-02-2022_23-55-40] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 14, Total actions = 21, Produced sub-goal stages = 21
Level [2]: Length = 43, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 59, Total actions = 70, Produced sub-goal stages = 0

[09-02-2022_23-55-40] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 2 (par-ref), LE =   7, AC =   9, CF = 0.8, GT =   4.87s, ST =   1.40s, OT = 0.00s, TT =   6.28s, EF = (LE = 2.3, AC = 2.2), ED = (LE = 0.6, AC = 0.6), EB = (LE = 0.2, AC = 0.2)

[09-02-2022_23-55-40] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=6, plan_length=7, start_step=36, blend=Blend(left=0, right=0)

[09-02-2022_23-55-40] DEBUG :: core.Strategies >> Decided: number_small_problems=5, number_large_problems=1, small_group_size=1, large_group_size=2

[09-02-2022_23-55-40] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=37, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1), DivisionPoint(index=38, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1), DivisionPoint(index=39, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1), DivisionPoint(index=40, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1), DivisionPoint(index=41, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[09-02-2022_23-55-40] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 6, Problem Range = [26-31], Size = 7, Sub-goal Stage Range = [37-43]
Division points [total=5] : [(Index = 37, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 38, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 39, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 40, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 41, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[09-02-2022_23-55-40] DEBUG :: ASH Planner Main #1 >> Monolevel problem 6 at level 2 solved.

[09-02-2022_23-55-40] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 26 at level 1:
Total Templated Partial Problems = 6, Problem Range = [26-31], Size = 7, Sub-goal Stage Range = [37-43]
Division points [total=5] : [(Index = 37, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 38, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 39, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 40, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 41, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[09-02-2022_23-55-40] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [37-37]

[09-02-2022_23-55-40] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [37-37], problem number = 26, increment number = 26

[09-02-2022_23-55-40] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 37)
	('last_sgoals', 37)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001DBAB24FA60>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[09-02-2022_23-55-40] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [37-37] : Concurrency enabled : Minimum search length bound disabled with value 59

[09-02-2022_23-55-40] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 37
last_sgoals = 37
start_step = 59
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 59

[09-02-2022_23-55-40] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[09-02-2022_23-55-40] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[09-02-2022_23-55-40] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[09-02-2022_23-55-40] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[09-02-2022_23-55-40] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_23-55-40] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 59 as problem start state.

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 59})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,1))', 'S': 59})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 59})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 59})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 59})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 59})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 59})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 59})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'S': 59})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 59})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(store_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 59})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(store_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(store_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(store_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(store_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(store_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(store_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(store_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 59})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'S': 59})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 59})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 59})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 59})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 59})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 59})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 59})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 59})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 59})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 59})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 59})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 59})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 59})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 59})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'S': 59})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'store_room', 'S': 59})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 59})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 59})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 59})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 59})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 59})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'store_room', 'S': 59})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'store_room', 'S': 59})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 59})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'store_room', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 59})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'S': 59})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 59})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 59})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 59})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 59})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 59})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 59})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 59})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 59})

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 59).
holds(1, complete_tower(red,puzzle_room_table), false, 59).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 59).
holds(1, configuration(manipulator_end_2), aligned_with((block,1)), 59).
holds(1, configuration(manipulator_limb_1), retracted, 59).
holds(1, configuration(manipulator_limb_2), retracted, 59).
holds(1, configuration(puzzle_room_door), open, 59).
holds(1, configuration(starting_room_door), closed, 59).
holds(1, configuration(store_room_door), open, 59).
holds(1, grasping(manipulator_arm_1), nothing, 59).
holds(1, grasping(manipulator_arm_2), (block,1), 59).
holds(1, grasping(manipulator_end_1), nothing, 59).
holds(1, grasping(manipulator_end_2), (block,1), 59).
holds(1, in((block,1)), (store_room,1), 59).
holds(1, in((block,2)), (puzzle_room,1), 59).
holds(1, in((block,3)), (puzzle_room,1), 59).
holds(1, in((block,4)), (store_room,0), 59).
holds(1, in((block,5)), (puzzle_room,1), 59).
holds(1, in((block,6)), (puzzle_room,1), 59).
holds(1, in(manipulator_arm_1), (store_room,1), 59).
holds(1, in(manipulator_arm_2), (store_room,1), 59).
holds(1, in(manipulator_end_1), (store_room,1), 59).
holds(1, in(manipulator_end_2), (store_room,1), 59).
holds(1, in(manipulator_limb_1), (store_room,1), 59).
holds(1, in(manipulator_limb_2), (store_room,1), 59).
holds(1, in(puzzle_room_table), (puzzle_room,1), 59).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 59).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 59).
holds(1, in(talos), (store_room,1), 59).
holds(1, in_tower((block,1),(block,1)), false, 59).
holds(1, in_tower((block,1),(block,2)), false, 59).
holds(1, in_tower((block,1),(block,3)), false, 59).
holds(1, in_tower((block,1),(block,4)), false, 59).
holds(1, in_tower((block,1),(block,5)), false, 59).
holds(1, in_tower((block,1),(block,6)), false, 59).
holds(1, in_tower((block,2),(block,1)), false, 59).
holds(1, in_tower((block,2),(block,2)), false, 59).
holds(1, in_tower((block,2),(block,3)), false, 59).
holds(1, in_tower((block,2),(block,4)), false, 59).
holds(1, in_tower((block,2),(block,5)), false, 59).
holds(1, in_tower((block,2),(block,6)), false, 59).
holds(1, in_tower((block,3),(block,1)), false, 59).
holds(1, in_tower((block,3),(block,2)), true, 59).
holds(1, in_tower((block,3),(block,3)), true, 59).
holds(1, in_tower((block,3),(block,4)), false, 59).
holds(1, in_tower((block,3),(block,5)), false, 59).
holds(1, in_tower((block,3),(block,6)), false, 59).
holds(1, in_tower((block,4),(block,1)), false, 59).
holds(1, in_tower((block,4),(block,2)), false, 59).
holds(1, in_tower((block,4),(block,3)), false, 59).
holds(1, in_tower((block,4),(block,4)), false, 59).
holds(1, in_tower((block,4),(block,5)), false, 59).
holds(1, in_tower((block,4),(block,6)), false, 59).
holds(1, in_tower((block,5),(block,1)), false, 59).
holds(1, in_tower((block,5),(block,2)), false, 59).
holds(1, in_tower((block,5),(block,3)), false, 59).
holds(1, in_tower((block,5),(block,4)), false, 59).
holds(1, in_tower((block,5),(block,5)), false, 59).
holds(1, in_tower((block,5),(block,6)), false, 59).
holds(1, in_tower((block,6),(block,1)), false, 59).
holds(1, in_tower((block,6),(block,2)), false, 59).
holds(1, in_tower((block,6),(block,3)), false, 59).
holds(1, in_tower((block,6),(block,4)), false, 59).
holds(1, in_tower((block,6),(block,5)), true, 59).
holds(1, in_tower((block,6),(block,6)), true, 59).
holds(1, on((block,1)), nothing, 59).
holds(1, on((block,2)), (block,3), 59).
holds(1, on((block,3)), puzzle_room_table_left, 59).
holds(1, on((block,4)), nothing, 59).
holds(1, on((block,5)), (block,6), 59).
holds(1, on((block,6)), puzzle_room_table_right, 59).
holds(1, tower_base((block,1),puzzle_room_table), false, 59).
holds(1, tower_base((block,2),puzzle_room_table), false, 59).
holds(1, tower_base((block,3),puzzle_room_table), true, 59).
holds(1, tower_base((block,4),puzzle_room_table), false, 59).
holds(1, tower_base((block,5),puzzle_room_table), false, 59).
holds(1, tower_base((block,6),puzzle_room_table), true, 59).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 59).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 59).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 59).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 59).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 59).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 59).
holds(2, complete_tower(blue,puzzle_room_table), false, 59).
holds(2, complete_tower(red,puzzle_room_table), false, 59).
holds(2, configuration(manipulator_arm_1), retracted, 59).
holds(2, configuration(manipulator_arm_2), retracted, 59).
holds(2, configuration(puzzle_room_door), open, 59).
holds(2, configuration(starting_room_door), closed, 59).
holds(2, configuration(store_room_door), open, 59).
holds(2, grasping(manipulator_arm_1), nothing, 59).
holds(2, grasping(manipulator_arm_2), (block,1), 59).
holds(2, in((block,1)), store_room, 59).
holds(2, in((block,2)), puzzle_room, 59).
holds(2, in((block,3)), puzzle_room, 59).
holds(2, in((block,4)), store_room, 59).
holds(2, in((block,5)), puzzle_room, 59).
holds(2, in((block,6)), puzzle_room, 59).
holds(2, in(manipulator_arm_1), store_room, 59).
holds(2, in(manipulator_arm_2), store_room, 59).
holds(2, in(puzzle_room_table), puzzle_room, 59).
holds(2, in(talos), store_room, 59).
holds(2, in_tower((block,1),(block,1)), false, 59).
holds(2, in_tower((block,1),(block,2)), false, 59).
holds(2, in_tower((block,1),(block,3)), false, 59).
holds(2, in_tower((block,1),(block,4)), false, 59).
holds(2, in_tower((block,1),(block,5)), false, 59).
holds(2, in_tower((block,1),(block,6)), false, 59).
holds(2, in_tower((block,2),(block,1)), false, 59).
holds(2, in_tower((block,2),(block,2)), false, 59).
holds(2, in_tower((block,2),(block,3)), false, 59).
holds(2, in_tower((block,2),(block,4)), false, 59).
holds(2, in_tower((block,2),(block,5)), false, 59).
holds(2, in_tower((block,2),(block,6)), false, 59).
holds(2, in_tower((block,3),(block,1)), false, 59).
holds(2, in_tower((block,3),(block,2)), true, 59).
holds(2, in_tower((block,3),(block,3)), true, 59).
holds(2, in_tower((block,3),(block,4)), false, 59).
holds(2, in_tower((block,3),(block,5)), false, 59).
holds(2, in_tower((block,3),(block,6)), false, 59).
holds(2, in_tower((block,4),(block,1)), false, 59).
holds(2, in_tower((block,4),(block,2)), false, 59).
holds(2, in_tower((block,4),(block,3)), false, 59).
holds(2, in_tower((block,4),(block,4)), false, 59).
holds(2, in_tower((block,4),(block,5)), false, 59).
holds(2, in_tower((block,4),(block,6)), false, 59).
holds(2, in_tower((block,5),(block,1)), false, 59).
holds(2, in_tower((block,5),(block,2)), false, 59).
holds(2, in_tower((block,5),(block,3)), false, 59).
holds(2, in_tower((block,5),(block,4)), false, 59).
holds(2, in_tower((block,5),(block,5)), false, 59).
holds(2, in_tower((block,5),(block,6)), false, 59).
holds(2, in_tower((block,6),(block,1)), false, 59).
holds(2, in_tower((block,6),(block,2)), false, 59).
holds(2, in_tower((block,6),(block,3)), false, 59).
holds(2, in_tower((block,6),(block,4)), false, 59).
holds(2, in_tower((block,6),(block,5)), true, 59).
holds(2, in_tower((block,6),(block,6)), true, 59).
holds(2, on((block,1)), nothing, 59).
holds(2, on((block,2)), (block,3), 59).
holds(2, on((block,3)), puzzle_room_table, 59).
holds(2, on((block,4)), nothing, 59).
holds(2, on((block,5)), (block,6), 59).
holds(2, on((block,6)), puzzle_room_table, 59).
holds(2, tower_base((block,1),puzzle_room_table), false, 59).
holds(2, tower_base((block,2),puzzle_room_table), false, 59).
holds(2, tower_base((block,3),puzzle_room_table), true, 59).
holds(2, tower_base((block,4),puzzle_room_table), false, 59).
holds(2, tower_base((block,5),puzzle_room_table), false, 59).
holds(2, tower_base((block,6),puzzle_room_table), true, 59).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 59).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 59).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 59).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 59).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 59).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 59).

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[09-02-2022_23-55-40] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 37})

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part base:

sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 37).

[09-02-2022_23-55-40] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001DBED95CA60>]
	incrementor = SolveIncrementor(step_start=59, step_increase=1, step_increase_initial=2, step_end_min=60, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 59), range_=None), IncPart(name='plan_module', args=('#inc', 59, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 59, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 59, 37, 37, 'sequential', 'false'), range_=None)]

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 809 rules

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004536299999926996s

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.029226s.

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004851s with result Satisfiable.

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DBEDD709F0>

[09-02-2022_23-55-40] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 59)
	('last_sgoals', 37)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001DBAB24FA60>)
	('first_sgoals', 37)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001DBEDD709F0>)

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 59). %* None *%
#program plan_module(#inc, 59, true, false). %* None *%
#program optimisation_module(#inc, 59, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 59, 37, 37, sequential, false). %* None *%

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     58 : Current =     60
Incrementor step ends | Minimum  =     60 : Maximum =    200

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(60)]), ('state_module', [Number(59), Number(59)]), ('plan_module', [Number(59), Number(59), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(59), Number(59), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(59)]), ('action_preconditions', [Number(59)]), ('variable_relations', [Number(59)]), ('abstraction_mappings', [Number(59)]), ('conformance_module', [Number(59), Number(59), Number(37), Number(37), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(60), Number(59)]), ('plan_module', [Number(60), Number(59), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(60), Number(59), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(60)]), ('action_preconditions', [Number(60)]), ('variable_relations', [Number(60)]), ('abstraction_mappings', [Number(60)]), ('conformance_module', [Number(60), Number(59), Number(37), Number(37), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.239996s.

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012272s with result Satisfiable.

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2522674999997889, Incremental time limit = None
Running cumulative time = 0.2522674999997889, Cumulative time limit = 1800
Used memory = (RSS = 1159.984375Mb, VMS = 1151.148438Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.239996s, Solving = 0.012272s, Total = 0.252267s, Memory = (RSS = 1159.984375Mb, VMS = 1151.148438Mb), Step range = [59-60]), Calls = 1
Final Model :: Total atoms = 4151, Cost = (1, 0, 0), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.239996s, Solving = 0.012272s, Total = 0.252267s, Memory = (RSS = 1159.984375Mb, VMS = 1151.148438Mb), Step range = [59-60]

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.252267s due to: Stop condition reached.

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_23-55-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[09-02-2022_23-55-41] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 4, 10: 5, 11: 6, 12: 7, 13: 8, 14: 8, 15: 9, 16: 9, 17: 10, 18: 11, 19: 11, 20: 12, 21: 13, 22: 13, 23: 13, 24: 13, 25: 13, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 19, 33: 19, 34: 20, 35: 21, 36: 22, 37: 23, 38: 23, 39: 24, 40: 25, 41: 25, 42: 26, 43: 27, 44: 28, 45: 28, 46: 28, 47: 29, 48: 30, 49: 31, 50: 31, 51: 32, 52: 32, 53: 33, 54: 34, 55: 35, 56: 35, 57: 36, 58: 36, 59: 36}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 14, 9: 16, 10: 17, 11: 19, 12: 20, 13: 25, 14: 27, 15: 28, 16: 29, 17: 30, 18: 31, 19: 33, 20: 34, 21: 35, 22: 36, 23: 38, 24: 39, 25: 41, 26: 42, 27: 43, 28: 46, 29: 47, 30: 48, 31: 50, 32: 52, 33: 53, 34: 54, 35: 56, 36: 59}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11, 37: 12, 38: 12, 39: 13, 40: 13, 41: 13, 42: 14, 43: 14}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 36, 12: 38, 13: 41, 14: 43}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_23-55-41] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 4, 10: 5, 11: 6, 12: 7, 13: 8, 14: 8, 15: 9, 16: 9, 17: 10, 18: 11, 19: 11, 20: 12, 21: 13, 22: 13, 23: 13, 24: 13, 25: 13, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 19, 33: 19, 34: 20, 35: 21, 36: 22, 37: 23, 38: 23, 39: 24, 40: 25, 41: 25, 42: 26, 43: 27, 44: 28, 45: 28, 46: 28, 47: 29, 48: 30, 49: 31, 50: 31, 51: 32, 52: 32, 53: 33, 54: 34, 55: 35, 56: 35, 57: 36, 58: 36, 59: 36, 60: 37}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 14, 9: 16, 10: 17, 11: 19, 12: 20, 13: 25, 14: 27, 15: 28, 16: 29, 17: 30, 18: 31, 19: 33, 20: 34, 21: 35, 22: 36, 23: 38, 24: 39, 25: 41, 26: 42, 27: 43, 28: 46, 29: 47, 30: 48, 31: 50, 32: 52, 33: 53, 34: 54, 35: 56, 36: 59, 37: 60}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11, 37: 12, 38: 12, 39: 13, 40: 13, 41: 13, 42: 14, 43: 14}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 36, 12: 38, 13: 41, 14: 43}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_23-55-41] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 37, Last requested goal index = 37, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[09-02-2022_23-55-41] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.239996s, Solving = 0.012272s, Total = 0.252267s, Memory = (RSS = 1159.984375Mb, VMS = 1151.148438Mb), Step range = [59-60]), Calls = 1
Model :: Total atoms = 4151, Cost = (1, 0, 0), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[09-02-2022_23-55-41] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 4:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 10:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 11:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 12:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 13:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 14:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 15:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 16:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
        talos : grasp(manipulator_end_2,(block,6))
Step 17:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 21:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 22:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 23:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 24:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 25:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,5))
Step 26:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 27:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 28:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 29:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 31:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 32:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 33:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 34:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,6),puzzle_room_table_right)
Step 35:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,6))
Step 36:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 37:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 38:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 39:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 40:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 41:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 42:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 43:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 44:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 45:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 46:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,3)))
        talos : configure(manipulator_limb_1,extended)
Step 47:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 29] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 29] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,3))
        talos : put(manipulator_end_1,(block,5),(block,6))
Step 48:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 30] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_end_2,(block,3),puzzle_room_table_left)
        talos : release(manipulator_end_1,(block,5))
Step 49:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 50:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
        talos : release(manipulator_end_2,(block,3))
Step 51:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,1)))
Step 52:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,1))
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 53:
    Current Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
        [Index = 33] talos : lift(manipulator_arm_2,(block,1)) -> on((block,1)) = nothing
        [Index = 33] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
        [Index = 33] talos : lift(manipulator_arm_2,(block,1)) -> on((block,1)) = nothing
        [Index = 33] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
        talos : lift(manipulator_end_2,(block,1))
        talos : release(manipulator_end_1,(block,2))
Step 54:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 55:
    Current Sub-goals:
        [Index = 35] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 56:
    Current Sub-goals:
        [Index = 35] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 35] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 57:
    Current Sub-goals:
        [Index = 36] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 58:
    Current Sub-goals:
        [Index = 36] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 59:
    Current Sub-goals:
        [Index = 36] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 36] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 60:
    Current Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)

[09-02-2022_23-55-41] DEBUG :: ASH Planner Main #1 >> Monolevel problem 26 at level 1 solved.

[09-02-2022_23-55-41] DEBUG :: ASH Planner Main #1 >> Online planning increment 26 finished.

[09-02-2022_23-55-41] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 6 : Total constraining sub-goal stages = 14 : Goals achieved = 14 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 26 : Total constraining sub-goal stages = 43 : Goals achieved = 37 : Goals unachieved = 6 : Complete = False

[09-02-2022_23-55-41] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[09-02-2022_23-55-41] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 27 by method ground-first is [1-1].

[09-02-2022_23-55-41] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 27 at level 1:
Total Templated Partial Problems = 6, Problem Range = [26-31], Size = 7, Sub-goal Stage Range = [37-43]
Division points [total=5] : [(Index = 37, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 38, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 39, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 40, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 41, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[09-02-2022_23-55-41] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [38-38]

[09-02-2022_23-55-41] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [38-38], problem number = 27, increment number = 27

[09-02-2022_23-55-41] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 38)
	('last_sgoals', 38)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001DBAB24FA60>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[09-02-2022_23-55-41] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [38-38] : Concurrency enabled : Minimum search length bound disabled with value 60

[09-02-2022_23-55-41] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 38
last_sgoals = 38
start_step = 60
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 60

[09-02-2022_23-55-41] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[09-02-2022_23-55-41] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[09-02-2022_23-55-41] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[09-02-2022_23-55-41] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[09-02-2022_23-55-41] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_23-55-41] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 60 as problem start state.

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 60})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,1))', 'S': 60})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 60})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 60})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 60})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 60})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 60})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 60})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'S': 60})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 60})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,1)', 'S': 60})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(store_room,1)', 'S': 60})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 60})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 60})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 60})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 60})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 60})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(store_room,1)', 'S': 60})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(store_room,1)', 'S': 60})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(store_room,1)', 'S': 60})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(store_room,1)', 'S': 60})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(store_room,1)', 'S': 60})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(store_room,1)', 'S': 60})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 60})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 60})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 60})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(store_room,1)', 'S': 60})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 60})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 60})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 60})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 60})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'S': 60})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 60})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 60})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 60})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 60})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 60})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 60})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 60})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 60})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 60})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 60})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 60})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 60})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 60})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 60})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'S': 60})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'store_room', 'S': 60})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 60})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 60})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 60})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 60})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 60})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'store_room', 'S': 60})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'store_room', 'S': 60})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 60})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'store_room', 'S': 60})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 60})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 60})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 60})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 60})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'S': 60})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 60})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 60})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 60})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 60})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 60})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 60})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 60})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 60})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 60})

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 60).
holds(1, complete_tower(red,puzzle_room_table), false, 60).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 60).
holds(1, configuration(manipulator_end_2), aligned_with((block,1)), 60).
holds(1, configuration(manipulator_limb_1), extended, 60).
holds(1, configuration(manipulator_limb_2), retracted, 60).
holds(1, configuration(puzzle_room_door), open, 60).
holds(1, configuration(starting_room_door), closed, 60).
holds(1, configuration(store_room_door), open, 60).
holds(1, grasping(manipulator_arm_1), nothing, 60).
holds(1, grasping(manipulator_arm_2), (block,1), 60).
holds(1, grasping(manipulator_end_1), nothing, 60).
holds(1, grasping(manipulator_end_2), (block,1), 60).
holds(1, in((block,1)), (store_room,1), 60).
holds(1, in((block,2)), (puzzle_room,1), 60).
holds(1, in((block,3)), (puzzle_room,1), 60).
holds(1, in((block,4)), (store_room,0), 60).
holds(1, in((block,5)), (puzzle_room,1), 60).
holds(1, in((block,6)), (puzzle_room,1), 60).
holds(1, in(manipulator_arm_1), (store_room,1), 60).
holds(1, in(manipulator_arm_2), (store_room,1), 60).
holds(1, in(manipulator_end_1), (store_room,1), 60).
holds(1, in(manipulator_end_2), (store_room,1), 60).
holds(1, in(manipulator_limb_1), (store_room,1), 60).
holds(1, in(manipulator_limb_2), (store_room,1), 60).
holds(1, in(puzzle_room_table), (puzzle_room,1), 60).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 60).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 60).
holds(1, in(talos), (store_room,1), 60).
holds(1, in_tower((block,1),(block,1)), false, 60).
holds(1, in_tower((block,1),(block,2)), false, 60).
holds(1, in_tower((block,1),(block,3)), false, 60).
holds(1, in_tower((block,1),(block,4)), false, 60).
holds(1, in_tower((block,1),(block,5)), false, 60).
holds(1, in_tower((block,1),(block,6)), false, 60).
holds(1, in_tower((block,2),(block,1)), false, 60).
holds(1, in_tower((block,2),(block,2)), false, 60).
holds(1, in_tower((block,2),(block,3)), false, 60).
holds(1, in_tower((block,2),(block,4)), false, 60).
holds(1, in_tower((block,2),(block,5)), false, 60).
holds(1, in_tower((block,2),(block,6)), false, 60).
holds(1, in_tower((block,3),(block,1)), false, 60).
holds(1, in_tower((block,3),(block,2)), true, 60).
holds(1, in_tower((block,3),(block,3)), true, 60).
holds(1, in_tower((block,3),(block,4)), false, 60).
holds(1, in_tower((block,3),(block,5)), false, 60).
holds(1, in_tower((block,3),(block,6)), false, 60).
holds(1, in_tower((block,4),(block,1)), false, 60).
holds(1, in_tower((block,4),(block,2)), false, 60).
holds(1, in_tower((block,4),(block,3)), false, 60).
holds(1, in_tower((block,4),(block,4)), false, 60).
holds(1, in_tower((block,4),(block,5)), false, 60).
holds(1, in_tower((block,4),(block,6)), false, 60).
holds(1, in_tower((block,5),(block,1)), false, 60).
holds(1, in_tower((block,5),(block,2)), false, 60).
holds(1, in_tower((block,5),(block,3)), false, 60).
holds(1, in_tower((block,5),(block,4)), false, 60).
holds(1, in_tower((block,5),(block,5)), false, 60).
holds(1, in_tower((block,5),(block,6)), false, 60).
holds(1, in_tower((block,6),(block,1)), false, 60).
holds(1, in_tower((block,6),(block,2)), false, 60).
holds(1, in_tower((block,6),(block,3)), false, 60).
holds(1, in_tower((block,6),(block,4)), false, 60).
holds(1, in_tower((block,6),(block,5)), true, 60).
holds(1, in_tower((block,6),(block,6)), true, 60).
holds(1, on((block,1)), nothing, 60).
holds(1, on((block,2)), (block,3), 60).
holds(1, on((block,3)), puzzle_room_table_left, 60).
holds(1, on((block,4)), nothing, 60).
holds(1, on((block,5)), (block,6), 60).
holds(1, on((block,6)), puzzle_room_table_right, 60).
holds(1, tower_base((block,1),puzzle_room_table), false, 60).
holds(1, tower_base((block,2),puzzle_room_table), false, 60).
holds(1, tower_base((block,3),puzzle_room_table), true, 60).
holds(1, tower_base((block,4),puzzle_room_table), false, 60).
holds(1, tower_base((block,5),puzzle_room_table), false, 60).
holds(1, tower_base((block,6),puzzle_room_table), true, 60).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 60).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 60).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 60).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 60).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 60).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 60).
holds(2, complete_tower(blue,puzzle_room_table), false, 60).
holds(2, complete_tower(red,puzzle_room_table), false, 60).
holds(2, configuration(manipulator_arm_1), extended, 60).
holds(2, configuration(manipulator_arm_2), retracted, 60).
holds(2, configuration(puzzle_room_door), open, 60).
holds(2, configuration(starting_room_door), closed, 60).
holds(2, configuration(store_room_door), open, 60).
holds(2, grasping(manipulator_arm_1), nothing, 60).
holds(2, grasping(manipulator_arm_2), (block,1), 60).
holds(2, in((block,1)), store_room, 60).
holds(2, in((block,2)), puzzle_room, 60).
holds(2, in((block,3)), puzzle_room, 60).
holds(2, in((block,4)), store_room, 60).
holds(2, in((block,5)), puzzle_room, 60).
holds(2, in((block,6)), puzzle_room, 60).
holds(2, in(manipulator_arm_1), store_room, 60).
holds(2, in(manipulator_arm_2), store_room, 60).
holds(2, in(puzzle_room_table), puzzle_room, 60).
holds(2, in(talos), store_room, 60).
holds(2, in_tower((block,1),(block,1)), false, 60).
holds(2, in_tower((block,1),(block,2)), false, 60).
holds(2, in_tower((block,1),(block,3)), false, 60).
holds(2, in_tower((block,1),(block,4)), false, 60).
holds(2, in_tower((block,1),(block,5)), false, 60).
holds(2, in_tower((block,1),(block,6)), false, 60).
holds(2, in_tower((block,2),(block,1)), false, 60).
holds(2, in_tower((block,2),(block,2)), false, 60).
holds(2, in_tower((block,2),(block,3)), false, 60).
holds(2, in_tower((block,2),(block,4)), false, 60).
holds(2, in_tower((block,2),(block,5)), false, 60).
holds(2, in_tower((block,2),(block,6)), false, 60).
holds(2, in_tower((block,3),(block,1)), false, 60).
holds(2, in_tower((block,3),(block,2)), true, 60).
holds(2, in_tower((block,3),(block,3)), true, 60).
holds(2, in_tower((block,3),(block,4)), false, 60).
holds(2, in_tower((block,3),(block,5)), false, 60).
holds(2, in_tower((block,3),(block,6)), false, 60).
holds(2, in_tower((block,4),(block,1)), false, 60).
holds(2, in_tower((block,4),(block,2)), false, 60).
holds(2, in_tower((block,4),(block,3)), false, 60).
holds(2, in_tower((block,4),(block,4)), false, 60).
holds(2, in_tower((block,4),(block,5)), false, 60).
holds(2, in_tower((block,4),(block,6)), false, 60).
holds(2, in_tower((block,5),(block,1)), false, 60).
holds(2, in_tower((block,5),(block,2)), false, 60).
holds(2, in_tower((block,5),(block,3)), false, 60).
holds(2, in_tower((block,5),(block,4)), false, 60).
holds(2, in_tower((block,5),(block,5)), false, 60).
holds(2, in_tower((block,5),(block,6)), false, 60).
holds(2, in_tower((block,6),(block,1)), false, 60).
holds(2, in_tower((block,6),(block,2)), false, 60).
holds(2, in_tower((block,6),(block,3)), false, 60).
holds(2, in_tower((block,6),(block,4)), false, 60).
holds(2, in_tower((block,6),(block,5)), true, 60).
holds(2, in_tower((block,6),(block,6)), true, 60).
holds(2, on((block,1)), nothing, 60).
holds(2, on((block,2)), (block,3), 60).
holds(2, on((block,3)), puzzle_room_table, 60).
holds(2, on((block,4)), nothing, 60).
holds(2, on((block,5)), (block,6), 60).
holds(2, on((block,6)), puzzle_room_table, 60).
holds(2, tower_base((block,1),puzzle_room_table), false, 60).
holds(2, tower_base((block,2),puzzle_room_table), false, 60).
holds(2, tower_base((block,3),puzzle_room_table), true, 60).
holds(2, tower_base((block,4),puzzle_room_table), false, 60).
holds(2, tower_base((block,5),puzzle_room_table), false, 60).
holds(2, tower_base((block,6),puzzle_room_table), true, 60).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 60).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 60).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 60).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 60).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 60).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 60).

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[09-02-2022_23-55-41] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,4))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'I': 38})

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part base:

sub_goal(2, talos, grasp(manipulator_arm_1,(block,4)), grasping(manipulator_arm_1), (block,4), 38).

[09-02-2022_23-55-41] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001DBED95CE50>]
	incrementor = SolveIncrementor(step_start=60, step_increase=1, step_increase_initial=2, step_end_min=61, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 60), range_=None), IncPart(name='plan_module', args=('#inc', 60, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 60, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 60, 38, 38, 'sequential', 'false'), range_=None)]

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 809 rules

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004635699999880671s

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.029336s.

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004843s with result Satisfiable.

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DBEDC577C0>

[09-02-2022_23-55-41] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 60)
	('last_sgoals', 38)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001DBAB24FA60>)
	('first_sgoals', 38)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001DBEDC577C0>)

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 60). %* None *%
#program plan_module(#inc, 60, true, false). %* None *%
#program optimisation_module(#inc, 60, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 60, 38, 38, sequential, false). %* None *%

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     59 : Current =     61
Incrementor step ends | Minimum  =     61 : Maximum =    200

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(61)]), ('state_module', [Number(60), Number(60)]), ('plan_module', [Number(60), Number(60), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(60), Number(60), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(60)]), ('action_preconditions', [Number(60)]), ('variable_relations', [Number(60)]), ('abstraction_mappings', [Number(60)]), ('conformance_module', [Number(60), Number(60), Number(38), Number(38), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(61), Number(60)]), ('plan_module', [Number(61), Number(60), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(61), Number(60), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(61)]), ('action_preconditions', [Number(61)]), ('variable_relations', [Number(61)]), ('abstraction_mappings', [Number(61)]), ('conformance_module', [Number(61), Number(60), Number(38), Number(38), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.240003s.

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008766s with result Unsatisfiable.

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.24876930000004904, Incremental time limit = None
Running cumulative time = 0.24876930000004904, Cumulative time limit = 1800
Used memory = (RSS = 1159.984375Mb, VMS = 1151.148438Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     61 : Current =     62
Incrementor step ends | Minimum  =     61 : Maximum =    200

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(62)]), ('state_module', [Number(62), Number(60)]), ('plan_module', [Number(62), Number(60), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(62), Number(60), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(62)]), ('action_preconditions', [Number(62)]), ('variable_relations', [Number(62)]), ('abstraction_mappings', [Number(62)]), ('conformance_module', [Number(62), Number(60), Number(38), Number(38), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.128350s.

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.003359s with result Unsatisfiable.

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.13170900000000074, Incremental time limit = None
Running cumulative time = 0.3804783000000498, Cumulative time limit = 1800
Used memory = (RSS = 1159.984375Mb, VMS = 1151.148438Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     62 : Current =     63
Incrementor step ends | Minimum  =     61 : Maximum =    200

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(63)]), ('state_module', [Number(63), Number(60)]), ('plan_module', [Number(63), Number(60), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(63), Number(60), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(63)]), ('action_preconditions', [Number(63)]), ('variable_relations', [Number(63)]), ('abstraction_mappings', [Number(63)]), ('conformance_module', [Number(63), Number(60), Number(38), Number(38), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.141527s.

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004081s with result Unsatisfiable.

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.14560740000001715, Incremental time limit = None
Running cumulative time = 0.5260857000000669, Cumulative time limit = 1800
Used memory = (RSS = 1159.984375Mb, VMS = 1151.148438Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     63 : Current =     64
Incrementor step ends | Minimum  =     61 : Maximum =    200

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(64)]), ('state_module', [Number(64), Number(60)]), ('plan_module', [Number(64), Number(60), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(64), Number(60), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(64)]), ('action_preconditions', [Number(64)]), ('variable_relations', [Number(64)]), ('abstraction_mappings', [Number(64)]), ('conformance_module', [Number(64), Number(60), Number(38), Number(38), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.182215s.

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006519s with result Unsatisfiable.

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.18873310000003585, Incremental time limit = None
Running cumulative time = 0.7148188000001028, Cumulative time limit = 1800
Used memory = (RSS = 1159.984375Mb, VMS = 1151.148438Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     64 : Current =     65
Incrementor step ends | Minimum  =     61 : Maximum =    200

[09-02-2022_23-55-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(65)]), ('state_module', [Number(65), Number(60)]), ('plan_module', [Number(65), Number(60), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(65), Number(60), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(65)]), ('action_preconditions', [Number(65)]), ('variable_relations', [Number(65)]), ('abstraction_mappings', [Number(65)]), ('conformance_module', [Number(65), Number(60), Number(38), Number(38), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.198549s.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.029272s with result Satisfiable.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.22782110000025568, Incremental time limit = None
Running cumulative time = 0.9426399000003585, Cumulative time limit = 1800
Used memory = (RSS = 1160.777344Mb, VMS = 1152.152344Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.890644s, Solving = 0.051996s, Total = 0.942640s, Memory = (RSS = 1160.777344Mb, VMS = 1152.152344Mb), Step range = [60-65]), Calls = 5
Final Model :: Total atoms = 5628, Cost = (5, 0, 0), Optimality proven = False, Number = 3, Thread ID = 3, Model type = ModelType.StableModel

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.240003s, Solving = 0.008766s, Total = 0.248769s, Memory = (RSS = 1159.984375Mb, VMS = 1151.148438Mb), Step range = [60-61]
2 : Statistics :: Grounding = 0.128350s, Solving = 0.003359s, Total = 0.131709s, Memory = (RSS = 1159.984375Mb, VMS = 1151.148438Mb), Step range = [62-62]
3 : Statistics :: Grounding = 0.141527s, Solving = 0.004081s, Total = 0.145607s, Memory = (RSS = 1159.984375Mb, VMS = 1151.148438Mb), Step range = [63-63]
4 : Statistics :: Grounding = 0.182215s, Solving = 0.006519s, Total = 0.188733s, Memory = (RSS = 1159.984375Mb, VMS = 1151.148438Mb), Step range = [64-64]
5 : Statistics :: Grounding = 0.198549s, Solving = 0.029272s, Total = 0.227821s, Memory = (RSS = 1160.777344Mb, VMS = 1152.152344Mb), Step range = [65-65]

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.942640s due to: Stop condition reached.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 4, 10: 5, 11: 6, 12: 7, 13: 8, 14: 8, 15: 9, 16: 9, 17: 10, 18: 11, 19: 11, 20: 12, 21: 13, 22: 13, 23: 13, 24: 13, 25: 13, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 19, 33: 19, 34: 20, 35: 21, 36: 22, 37: 23, 38: 23, 39: 24, 40: 25, 41: 25, 42: 26, 43: 27, 44: 28, 45: 28, 46: 28, 47: 29, 48: 30, 49: 31, 50: 31, 51: 32, 52: 32, 53: 33, 54: 34, 55: 35, 56: 35, 57: 36, 58: 36, 59: 36, 60: 37}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 14, 9: 16, 10: 17, 11: 19, 12: 20, 13: 25, 14: 27, 15: 28, 16: 29, 17: 30, 18: 31, 19: 33, 20: 34, 21: 35, 22: 36, 23: 38, 24: 39, 25: 41, 26: 42, 27: 43, 28: 46, 29: 47, 30: 48, 31: 50, 32: 52, 33: 53, 34: 54, 35: 56, 36: 59, 37: 60}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11, 37: 12, 38: 12, 39: 13, 40: 13, 41: 13, 42: 14, 43: 14}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 36, 12: 38, 13: 41, 14: 43}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 4, 10: 5, 11: 6, 12: 7, 13: 8, 14: 8, 15: 9, 16: 9, 17: 10, 18: 11, 19: 11, 20: 12, 21: 13, 22: 13, 23: 13, 24: 13, 25: 13, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 19, 33: 19, 34: 20, 35: 21, 36: 22, 37: 23, 38: 23, 39: 24, 40: 25, 41: 25, 42: 26, 43: 27, 44: 28, 45: 28, 46: 28, 47: 29, 48: 30, 49: 31, 50: 31, 51: 32, 52: 32, 53: 33, 54: 34, 55: 35, 56: 35, 57: 36, 58: 36, 59: 36, 60: 37, 61: 38, 62: 38, 63: 38, 64: 38, 65: 38}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 14, 9: 16, 10: 17, 11: 19, 12: 20, 13: 25, 14: 27, 15: 28, 16: 29, 17: 30, 18: 31, 19: 33, 20: 34, 21: 35, 22: 36, 23: 38, 24: 39, 25: 41, 26: 42, 27: 43, 28: 46, 29: 47, 30: 48, 31: 50, 32: 52, 33: 53, 34: 54, 35: 56, 36: 59, 37: 60, 38: 65}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11, 37: 12, 38: 12, 39: 13, 40: 13, 41: 13, 42: 14, 43: 14}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 36, 12: 38, 13: 41, 14: 43}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 38, Last requested goal index = 38, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.890644s, Solving = 0.051996s, Total = 0.942640s, Memory = (RSS = 1160.777344Mb, VMS = 1152.152344Mb), Step range = [60-65]), Calls = 5
Model :: Total atoms = 5628, Cost = (5, 0, 0), Optimality proven = False, Number = 3, Thread ID = 3, Model type = ModelType.StableModel

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 5 :: Actions = 5                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 4:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 10:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 11:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 12:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 13:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 14:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 15:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 16:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
        talos : grasp(manipulator_end_2,(block,6))
Step 17:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 21:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 22:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 23:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 24:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 25:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,5))
Step 26:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 27:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 28:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 29:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 31:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 32:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 33:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 34:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,6),puzzle_room_table_right)
Step 35:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,6))
Step 36:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 37:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 38:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 39:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 40:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 41:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 42:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 43:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 44:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 45:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 46:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,3)))
        talos : configure(manipulator_limb_1,extended)
Step 47:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 29] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 29] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,3))
        talos : put(manipulator_end_1,(block,5),(block,6))
Step 48:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 30] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_end_2,(block,3),puzzle_room_table_left)
        talos : release(manipulator_end_1,(block,5))
Step 49:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 50:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
        talos : release(manipulator_end_2,(block,3))
Step 51:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,1)))
Step 52:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,1))
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 53:
    Current Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
        [Index = 33] talos : lift(manipulator_arm_2,(block,1)) -> on((block,1)) = nothing
        [Index = 33] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
        [Index = 33] talos : lift(manipulator_arm_2,(block,1)) -> on((block,1)) = nothing
        [Index = 33] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
        talos : lift(manipulator_end_2,(block,1))
        talos : release(manipulator_end_1,(block,2))
Step 54:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 55:
    Current Sub-goals:
        [Index = 35] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 56:
    Current Sub-goals:
        [Index = 35] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 35] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 57:
    Current Sub-goals:
        [Index = 36] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 58:
    Current Sub-goals:
        [Index = 36] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 59:
    Current Sub-goals:
        [Index = 36] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 36] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 60:
    Current Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 61:
    Current Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 62:
    Current Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 63:
    Current Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 64:
    Current Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
Step 65:
    Current Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Monolevel problem 27 at level 1 solved.

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Online planning increment 27 finished.

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 6 : Total constraining sub-goal stages = 14 : Goals achieved = 14 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 27 : Total constraining sub-goal stages = 43 : Goals achieved = 38 : Goals unachieved = 5 : Complete = False

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 28 by method ground-first is [1-1].

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 28 at level 1:
Total Templated Partial Problems = 6, Problem Range = [26-31], Size = 7, Sub-goal Stage Range = [37-43]
Division points [total=5] : [(Index = 37, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 38, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 39, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 40, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 41, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [39-39]

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [39-39], problem number = 28, increment number = 28

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 39)
	('last_sgoals', 39)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001DBAB24FA60>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [39-39] : Concurrency enabled : Minimum search length bound disabled with value 65

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 39
last_sgoals = 39
start_step = 65
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 65

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[09-02-2022_23-55-42] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[09-02-2022_23-55-42] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 65 as problem start state.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,4))', 'S': 65})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,1))', 'S': 65})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 65})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 65})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 65})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 65})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 65})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'S': 65})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'S': 65})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,4)', 'S': 65})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,1)', 'S': 65})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(store_room,0)', 'S': 65})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 65})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 65})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 65})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 65})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 65})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(store_room,0)', 'S': 65})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(store_room,0)', 'S': 65})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(store_room,0)', 'S': 65})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(store_room,0)', 'S': 65})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(store_room,0)', 'S': 65})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(store_room,0)', 'S': 65})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 65})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 65})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 65})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(store_room,0)', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 65})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'S': 65})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 65})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 65})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 65})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 65})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 65})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 65})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 65})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 65})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 65})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 65})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 65})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 65})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'S': 65})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'S': 65})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'store_room', 'S': 65})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 65})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 65})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 65})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 65})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 65})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'store_room', 'S': 65})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'store_room', 'S': 65})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 65})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'store_room', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 65})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'S': 65})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 65})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 65})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 65})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 65})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 65})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 65})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 65})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 65})

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 65).
holds(1, complete_tower(red,puzzle_room_table), false, 65).
holds(1, configuration(manipulator_end_1), aligned_with((block,4)), 65).
holds(1, configuration(manipulator_end_2), aligned_with((block,1)), 65).
holds(1, configuration(manipulator_limb_1), extended, 65).
holds(1, configuration(manipulator_limb_2), retracted, 65).
holds(1, configuration(puzzle_room_door), open, 65).
holds(1, configuration(starting_room_door), closed, 65).
holds(1, configuration(store_room_door), open, 65).
holds(1, grasping(manipulator_arm_1), (block,4), 65).
holds(1, grasping(manipulator_arm_2), (block,1), 65).
holds(1, grasping(manipulator_end_1), (block,4), 65).
holds(1, grasping(manipulator_end_2), (block,1), 65).
holds(1, in((block,1)), (store_room,0), 65).
holds(1, in((block,2)), (puzzle_room,1), 65).
holds(1, in((block,3)), (puzzle_room,1), 65).
holds(1, in((block,4)), (store_room,0), 65).
holds(1, in((block,5)), (puzzle_room,1), 65).
holds(1, in((block,6)), (puzzle_room,1), 65).
holds(1, in(manipulator_arm_1), (store_room,0), 65).
holds(1, in(manipulator_arm_2), (store_room,0), 65).
holds(1, in(manipulator_end_1), (store_room,0), 65).
holds(1, in(manipulator_end_2), (store_room,0), 65).
holds(1, in(manipulator_limb_1), (store_room,0), 65).
holds(1, in(manipulator_limb_2), (store_room,0), 65).
holds(1, in(puzzle_room_table), (puzzle_room,1), 65).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 65).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 65).
holds(1, in(talos), (store_room,0), 65).
holds(1, in_tower((block,1),(block,1)), false, 65).
holds(1, in_tower((block,1),(block,2)), false, 65).
holds(1, in_tower((block,1),(block,3)), false, 65).
holds(1, in_tower((block,1),(block,4)), false, 65).
holds(1, in_tower((block,1),(block,5)), false, 65).
holds(1, in_tower((block,1),(block,6)), false, 65).
holds(1, in_tower((block,2),(block,1)), false, 65).
holds(1, in_tower((block,2),(block,2)), false, 65).
holds(1, in_tower((block,2),(block,3)), false, 65).
holds(1, in_tower((block,2),(block,4)), false, 65).
holds(1, in_tower((block,2),(block,5)), false, 65).
holds(1, in_tower((block,2),(block,6)), false, 65).
holds(1, in_tower((block,3),(block,1)), false, 65).
holds(1, in_tower((block,3),(block,2)), true, 65).
holds(1, in_tower((block,3),(block,3)), true, 65).
holds(1, in_tower((block,3),(block,4)), false, 65).
holds(1, in_tower((block,3),(block,5)), false, 65).
holds(1, in_tower((block,3),(block,6)), false, 65).
holds(1, in_tower((block,4),(block,1)), false, 65).
holds(1, in_tower((block,4),(block,2)), false, 65).
holds(1, in_tower((block,4),(block,3)), false, 65).
holds(1, in_tower((block,4),(block,4)), false, 65).
holds(1, in_tower((block,4),(block,5)), false, 65).
holds(1, in_tower((block,4),(block,6)), false, 65).
holds(1, in_tower((block,5),(block,1)), false, 65).
holds(1, in_tower((block,5),(block,2)), false, 65).
holds(1, in_tower((block,5),(block,3)), false, 65).
holds(1, in_tower((block,5),(block,4)), false, 65).
holds(1, in_tower((block,5),(block,5)), false, 65).
holds(1, in_tower((block,5),(block,6)), false, 65).
holds(1, in_tower((block,6),(block,1)), false, 65).
holds(1, in_tower((block,6),(block,2)), false, 65).
holds(1, in_tower((block,6),(block,3)), false, 65).
holds(1, in_tower((block,6),(block,4)), false, 65).
holds(1, in_tower((block,6),(block,5)), true, 65).
holds(1, in_tower((block,6),(block,6)), true, 65).
holds(1, on((block,1)), nothing, 65).
holds(1, on((block,2)), (block,3), 65).
holds(1, on((block,3)), puzzle_room_table_left, 65).
holds(1, on((block,4)), nothing, 65).
holds(1, on((block,5)), (block,6), 65).
holds(1, on((block,6)), puzzle_room_table_right, 65).
holds(1, tower_base((block,1),puzzle_room_table), false, 65).
holds(1, tower_base((block,2),puzzle_room_table), false, 65).
holds(1, tower_base((block,3),puzzle_room_table), true, 65).
holds(1, tower_base((block,4),puzzle_room_table), false, 65).
holds(1, tower_base((block,5),puzzle_room_table), false, 65).
holds(1, tower_base((block,6),puzzle_room_table), true, 65).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 65).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 65).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 65).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 65).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 65).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 65).
holds(2, complete_tower(blue,puzzle_room_table), false, 65).
holds(2, complete_tower(red,puzzle_room_table), false, 65).
holds(2, configuration(manipulator_arm_1), extended, 65).
holds(2, configuration(manipulator_arm_2), retracted, 65).
holds(2, configuration(puzzle_room_door), open, 65).
holds(2, configuration(starting_room_door), closed, 65).
holds(2, configuration(store_room_door), open, 65).
holds(2, grasping(manipulator_arm_1), (block,4), 65).
holds(2, grasping(manipulator_arm_2), (block,1), 65).
holds(2, in((block,1)), store_room, 65).
holds(2, in((block,2)), puzzle_room, 65).
holds(2, in((block,3)), puzzle_room, 65).
holds(2, in((block,4)), store_room, 65).
holds(2, in((block,5)), puzzle_room, 65).
holds(2, in((block,6)), puzzle_room, 65).
holds(2, in(manipulator_arm_1), store_room, 65).
holds(2, in(manipulator_arm_2), store_room, 65).
holds(2, in(puzzle_room_table), puzzle_room, 65).
holds(2, in(talos), store_room, 65).
holds(2, in_tower((block,1),(block,1)), false, 65).
holds(2, in_tower((block,1),(block,2)), false, 65).
holds(2, in_tower((block,1),(block,3)), false, 65).
holds(2, in_tower((block,1),(block,4)), false, 65).
holds(2, in_tower((block,1),(block,5)), false, 65).
holds(2, in_tower((block,1),(block,6)), false, 65).
holds(2, in_tower((block,2),(block,1)), false, 65).
holds(2, in_tower((block,2),(block,2)), false, 65).
holds(2, in_tower((block,2),(block,3)), false, 65).
holds(2, in_tower((block,2),(block,4)), false, 65).
holds(2, in_tower((block,2),(block,5)), false, 65).
holds(2, in_tower((block,2),(block,6)), false, 65).
holds(2, in_tower((block,3),(block,1)), false, 65).
holds(2, in_tower((block,3),(block,2)), true, 65).
holds(2, in_tower((block,3),(block,3)), true, 65).
holds(2, in_tower((block,3),(block,4)), false, 65).
holds(2, in_tower((block,3),(block,5)), false, 65).
holds(2, in_tower((block,3),(block,6)), false, 65).
holds(2, in_tower((block,4),(block,1)), false, 65).
holds(2, in_tower((block,4),(block,2)), false, 65).
holds(2, in_tower((block,4),(block,3)), false, 65).
holds(2, in_tower((block,4),(block,4)), false, 65).
holds(2, in_tower((block,4),(block,5)), false, 65).
holds(2, in_tower((block,4),(block,6)), false, 65).
holds(2, in_tower((block,5),(block,1)), false, 65).
holds(2, in_tower((block,5),(block,2)), false, 65).
holds(2, in_tower((block,5),(block,3)), false, 65).
holds(2, in_tower((block,5),(block,4)), false, 65).
holds(2, in_tower((block,5),(block,5)), false, 65).
holds(2, in_tower((block,5),(block,6)), false, 65).
holds(2, in_tower((block,6),(block,1)), false, 65).
holds(2, in_tower((block,6),(block,2)), false, 65).
holds(2, in_tower((block,6),(block,3)), false, 65).
holds(2, in_tower((block,6),(block,4)), false, 65).
holds(2, in_tower((block,6),(block,5)), true, 65).
holds(2, in_tower((block,6),(block,6)), true, 65).
holds(2, on((block,1)), nothing, 65).
holds(2, on((block,2)), (block,3), 65).
holds(2, on((block,3)), puzzle_room_table, 65).
holds(2, on((block,4)), nothing, 65).
holds(2, on((block,5)), (block,6), 65).
holds(2, on((block,6)), puzzle_room_table, 65).
holds(2, tower_base((block,1),puzzle_room_table), false, 65).
holds(2, tower_base((block,2),puzzle_room_table), false, 65).
holds(2, tower_base((block,3),puzzle_room_table), true, 65).
holds(2, tower_base((block,4),puzzle_room_table), false, 65).
holds(2, tower_base((block,5),puzzle_room_table), false, 65).
holds(2, tower_base((block,6),puzzle_room_table), true, 65).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 65).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 65).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 65).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 65).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 65).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 65).

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 39})

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part base:

sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 39).

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001DBEDC393A0>]
	incrementor = SolveIncrementor(step_start=65, step_increase=1, step_increase_initial=2, step_end_min=66, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 65), range_=None), IncPart(name='plan_module', args=('#inc', 65, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 65, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 65, 39, 39, 'sequential', 'false'), range_=None)]

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 809 rules

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004752699999926335s

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.031164s.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005357s with result Satisfiable.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DBEDECAC70>

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 65)
	('last_sgoals', 39)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001DBAB24FA60>)
	('first_sgoals', 39)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001DBEDECAC70>)

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 65). %* None *%
#program plan_module(#inc, 65, true, false). %* None *%
#program optimisation_module(#inc, 65, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 65, 39, 39, sequential, false). %* None *%

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     64 : Current =     66
Incrementor step ends | Minimum  =     66 : Maximum =    200

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(66)]), ('state_module', [Number(65), Number(65)]), ('plan_module', [Number(65), Number(65), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(65), Number(65), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(65)]), ('action_preconditions', [Number(65)]), ('variable_relations', [Number(65)]), ('abstraction_mappings', [Number(65)]), ('conformance_module', [Number(65), Number(65), Number(39), Number(39), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(66), Number(65)]), ('plan_module', [Number(66), Number(65), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(66), Number(65), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(66)]), ('action_preconditions', [Number(66)]), ('variable_relations', [Number(66)]), ('abstraction_mappings', [Number(66)]), ('conformance_module', [Number(66), Number(65), Number(39), Number(39), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.259927s.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.014188s with result Satisfiable.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2741143999999167, Incremental time limit = None
Running cumulative time = 0.2741143999999167, Cumulative time limit = 1800
Used memory = (RSS = 1160.859375Mb, VMS = 1152.152344Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.259927s, Solving = 0.014188s, Total = 0.274114s, Memory = (RSS = 1160.859375Mb, VMS = 1152.152344Mb), Step range = [65-66]), Calls = 1
Final Model :: Total atoms = 4149, Cost = (1, 0, 0), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.259927s, Solving = 0.014188s, Total = 0.274114s, Memory = (RSS = 1160.859375Mb, VMS = 1152.152344Mb), Step range = [65-66]

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.274114s due to: Stop condition reached.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 4, 10: 5, 11: 6, 12: 7, 13: 8, 14: 8, 15: 9, 16: 9, 17: 10, 18: 11, 19: 11, 20: 12, 21: 13, 22: 13, 23: 13, 24: 13, 25: 13, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 19, 33: 19, 34: 20, 35: 21, 36: 22, 37: 23, 38: 23, 39: 24, 40: 25, 41: 25, 42: 26, 43: 27, 44: 28, 45: 28, 46: 28, 47: 29, 48: 30, 49: 31, 50: 31, 51: 32, 52: 32, 53: 33, 54: 34, 55: 35, 56: 35, 57: 36, 58: 36, 59: 36, 60: 37, 61: 38, 62: 38, 63: 38, 64: 38, 65: 38}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 14, 9: 16, 10: 17, 11: 19, 12: 20, 13: 25, 14: 27, 15: 28, 16: 29, 17: 30, 18: 31, 19: 33, 20: 34, 21: 35, 22: 36, 23: 38, 24: 39, 25: 41, 26: 42, 27: 43, 28: 46, 29: 47, 30: 48, 31: 50, 32: 52, 33: 53, 34: 54, 35: 56, 36: 59, 37: 60, 38: 65}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11, 37: 12, 38: 12, 39: 13, 40: 13, 41: 13, 42: 14, 43: 14}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 36, 12: 38, 13: 41, 14: 43}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 4, 10: 5, 11: 6, 12: 7, 13: 8, 14: 8, 15: 9, 16: 9, 17: 10, 18: 11, 19: 11, 20: 12, 21: 13, 22: 13, 23: 13, 24: 13, 25: 13, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 19, 33: 19, 34: 20, 35: 21, 36: 22, 37: 23, 38: 23, 39: 24, 40: 25, 41: 25, 42: 26, 43: 27, 44: 28, 45: 28, 46: 28, 47: 29, 48: 30, 49: 31, 50: 31, 51: 32, 52: 32, 53: 33, 54: 34, 55: 35, 56: 35, 57: 36, 58: 36, 59: 36, 60: 37, 61: 38, 62: 38, 63: 38, 64: 38, 65: 38, 66: 39}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 14, 9: 16, 10: 17, 11: 19, 12: 20, 13: 25, 14: 27, 15: 28, 16: 29, 17: 30, 18: 31, 19: 33, 20: 34, 21: 35, 22: 36, 23: 38, 24: 39, 25: 41, 26: 42, 27: 43, 28: 46, 29: 47, 30: 48, 31: 50, 32: 52, 33: 53, 34: 54, 35: 56, 36: 59, 37: 60, 38: 65, 39: 66}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11, 37: 12, 38: 12, 39: 13, 40: 13, 41: 13, 42: 14, 43: 14}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 36, 12: 38, 13: 41, 14: 43}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 39, Last requested goal index = 39, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.259927s, Solving = 0.014188s, Total = 0.274114s, Memory = (RSS = 1160.859375Mb, VMS = 1152.152344Mb), Step range = [65-66]), Calls = 1
Model :: Total atoms = 4149, Cost = (1, 0, 0), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 4:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 10:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 11:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 12:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 13:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 14:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 15:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 16:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
        talos : grasp(manipulator_end_2,(block,6))
Step 17:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 21:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 22:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 23:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 24:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 25:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,5))
Step 26:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 27:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 28:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 29:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 31:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 32:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 33:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 34:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,6),puzzle_room_table_right)
Step 35:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,6))
Step 36:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 37:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 38:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 39:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 40:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 41:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 42:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 43:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 44:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 45:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 46:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,3)))
        talos : configure(manipulator_limb_1,extended)
Step 47:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 29] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 29] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,3))
        talos : put(manipulator_end_1,(block,5),(block,6))
Step 48:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 30] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_end_2,(block,3),puzzle_room_table_left)
        talos : release(manipulator_end_1,(block,5))
Step 49:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 50:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
        talos : release(manipulator_end_2,(block,3))
Step 51:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,1)))
Step 52:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,1))
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 53:
    Current Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
        [Index = 33] talos : lift(manipulator_arm_2,(block,1)) -> on((block,1)) = nothing
        [Index = 33] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
        [Index = 33] talos : lift(manipulator_arm_2,(block,1)) -> on((block,1)) = nothing
        [Index = 33] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
        talos : lift(manipulator_end_2,(block,1))
        talos : release(manipulator_end_1,(block,2))
Step 54:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 55:
    Current Sub-goals:
        [Index = 35] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 56:
    Current Sub-goals:
        [Index = 35] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 35] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 57:
    Current Sub-goals:
        [Index = 36] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 58:
    Current Sub-goals:
        [Index = 36] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 59:
    Current Sub-goals:
        [Index = 36] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 36] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 60:
    Current Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 61:
    Current Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 62:
    Current Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 63:
    Current Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 64:
    Current Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
Step 65:
    Current Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))
Step 66:
    Current Sub-goals:
        [Index = 39] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 39] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Monolevel problem 28 at level 1 solved.

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Online planning increment 28 finished.

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 6 : Total constraining sub-goal stages = 14 : Goals achieved = 14 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 28 : Total constraining sub-goal stages = 43 : Goals achieved = 39 : Goals unachieved = 4 : Complete = False

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 29 by method ground-first is [1-1].

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 29 at level 1:
Total Templated Partial Problems = 6, Problem Range = [26-31], Size = 7, Sub-goal Stage Range = [37-43]
Division points [total=5] : [(Index = 37, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 38, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 39, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 40, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 41, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [40-40]

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [40-40], problem number = 29, increment number = 29

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 40)
	('last_sgoals', 40)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001DBAB24FA60>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [40-40] : Concurrency enabled : Minimum search length bound disabled with value 66

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 40
last_sgoals = 40
start_step = 66
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 66

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[09-02-2022_23-55-42] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[09-02-2022_23-55-42] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 66 as problem start state.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,4))', 'S': 66})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,1))', 'S': 66})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 66})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 66})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 66})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 66})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 66})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'S': 66})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'S': 66})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,4)', 'S': 66})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,1)', 'S': 66})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(store_room,0)', 'S': 66})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 66})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 66})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 66})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 66})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 66})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(store_room,0)', 'S': 66})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(store_room,0)', 'S': 66})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(store_room,0)', 'S': 66})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(store_room,0)', 'S': 66})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(store_room,0)', 'S': 66})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(store_room,0)', 'S': 66})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 66})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 66})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 66})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(store_room,0)', 'S': 66})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 66})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 66})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 66})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 66})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'S': 66})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 66})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 66})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 66})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 66})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 66})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 66})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 66})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 66})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 66})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 66})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 66})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 66})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'S': 66})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'S': 66})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'store_room', 'S': 66})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 66})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 66})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 66})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 66})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 66})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'store_room', 'S': 66})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'store_room', 'S': 66})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 66})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'store_room', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 66})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 66})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'S': 66})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 66})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 66})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 66})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 66})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 66})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 66})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 66})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 66})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 66})

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 66).
holds(1, complete_tower(red,puzzle_room_table), false, 66).
holds(1, configuration(manipulator_end_1), aligned_with((block,4)), 66).
holds(1, configuration(manipulator_end_2), aligned_with((block,1)), 66).
holds(1, configuration(manipulator_limb_1), retracted, 66).
holds(1, configuration(manipulator_limb_2), retracted, 66).
holds(1, configuration(puzzle_room_door), open, 66).
holds(1, configuration(starting_room_door), closed, 66).
holds(1, configuration(store_room_door), open, 66).
holds(1, grasping(manipulator_arm_1), (block,4), 66).
holds(1, grasping(manipulator_arm_2), (block,1), 66).
holds(1, grasping(manipulator_end_1), (block,4), 66).
holds(1, grasping(manipulator_end_2), (block,1), 66).
holds(1, in((block,1)), (store_room,0), 66).
holds(1, in((block,2)), (puzzle_room,1), 66).
holds(1, in((block,3)), (puzzle_room,1), 66).
holds(1, in((block,4)), (store_room,0), 66).
holds(1, in((block,5)), (puzzle_room,1), 66).
holds(1, in((block,6)), (puzzle_room,1), 66).
holds(1, in(manipulator_arm_1), (store_room,0), 66).
holds(1, in(manipulator_arm_2), (store_room,0), 66).
holds(1, in(manipulator_end_1), (store_room,0), 66).
holds(1, in(manipulator_end_2), (store_room,0), 66).
holds(1, in(manipulator_limb_1), (store_room,0), 66).
holds(1, in(manipulator_limb_2), (store_room,0), 66).
holds(1, in(puzzle_room_table), (puzzle_room,1), 66).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 66).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 66).
holds(1, in(talos), (store_room,0), 66).
holds(1, in_tower((block,1),(block,1)), false, 66).
holds(1, in_tower((block,1),(block,2)), false, 66).
holds(1, in_tower((block,1),(block,3)), false, 66).
holds(1, in_tower((block,1),(block,4)), false, 66).
holds(1, in_tower((block,1),(block,5)), false, 66).
holds(1, in_tower((block,1),(block,6)), false, 66).
holds(1, in_tower((block,2),(block,1)), false, 66).
holds(1, in_tower((block,2),(block,2)), false, 66).
holds(1, in_tower((block,2),(block,3)), false, 66).
holds(1, in_tower((block,2),(block,4)), false, 66).
holds(1, in_tower((block,2),(block,5)), false, 66).
holds(1, in_tower((block,2),(block,6)), false, 66).
holds(1, in_tower((block,3),(block,1)), false, 66).
holds(1, in_tower((block,3),(block,2)), true, 66).
holds(1, in_tower((block,3),(block,3)), true, 66).
holds(1, in_tower((block,3),(block,4)), false, 66).
holds(1, in_tower((block,3),(block,5)), false, 66).
holds(1, in_tower((block,3),(block,6)), false, 66).
holds(1, in_tower((block,4),(block,1)), false, 66).
holds(1, in_tower((block,4),(block,2)), false, 66).
holds(1, in_tower((block,4),(block,3)), false, 66).
holds(1, in_tower((block,4),(block,4)), false, 66).
holds(1, in_tower((block,4),(block,5)), false, 66).
holds(1, in_tower((block,4),(block,6)), false, 66).
holds(1, in_tower((block,5),(block,1)), false, 66).
holds(1, in_tower((block,5),(block,2)), false, 66).
holds(1, in_tower((block,5),(block,3)), false, 66).
holds(1, in_tower((block,5),(block,4)), false, 66).
holds(1, in_tower((block,5),(block,5)), false, 66).
holds(1, in_tower((block,5),(block,6)), false, 66).
holds(1, in_tower((block,6),(block,1)), false, 66).
holds(1, in_tower((block,6),(block,2)), false, 66).
holds(1, in_tower((block,6),(block,3)), false, 66).
holds(1, in_tower((block,6),(block,4)), false, 66).
holds(1, in_tower((block,6),(block,5)), true, 66).
holds(1, in_tower((block,6),(block,6)), true, 66).
holds(1, on((block,1)), nothing, 66).
holds(1, on((block,2)), (block,3), 66).
holds(1, on((block,3)), puzzle_room_table_left, 66).
holds(1, on((block,4)), nothing, 66).
holds(1, on((block,5)), (block,6), 66).
holds(1, on((block,6)), puzzle_room_table_right, 66).
holds(1, tower_base((block,1),puzzle_room_table), false, 66).
holds(1, tower_base((block,2),puzzle_room_table), false, 66).
holds(1, tower_base((block,3),puzzle_room_table), true, 66).
holds(1, tower_base((block,4),puzzle_room_table), false, 66).
holds(1, tower_base((block,5),puzzle_room_table), false, 66).
holds(1, tower_base((block,6),puzzle_room_table), true, 66).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 66).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 66).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 66).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 66).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 66).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 66).
holds(2, complete_tower(blue,puzzle_room_table), false, 66).
holds(2, complete_tower(red,puzzle_room_table), false, 66).
holds(2, configuration(manipulator_arm_1), retracted, 66).
holds(2, configuration(manipulator_arm_2), retracted, 66).
holds(2, configuration(puzzle_room_door), open, 66).
holds(2, configuration(starting_room_door), closed, 66).
holds(2, configuration(store_room_door), open, 66).
holds(2, grasping(manipulator_arm_1), (block,4), 66).
holds(2, grasping(manipulator_arm_2), (block,1), 66).
holds(2, in((block,1)), store_room, 66).
holds(2, in((block,2)), puzzle_room, 66).
holds(2, in((block,3)), puzzle_room, 66).
holds(2, in((block,4)), store_room, 66).
holds(2, in((block,5)), puzzle_room, 66).
holds(2, in((block,6)), puzzle_room, 66).
holds(2, in(manipulator_arm_1), store_room, 66).
holds(2, in(manipulator_arm_2), store_room, 66).
holds(2, in(puzzle_room_table), puzzle_room, 66).
holds(2, in(talos), store_room, 66).
holds(2, in_tower((block,1),(block,1)), false, 66).
holds(2, in_tower((block,1),(block,2)), false, 66).
holds(2, in_tower((block,1),(block,3)), false, 66).
holds(2, in_tower((block,1),(block,4)), false, 66).
holds(2, in_tower((block,1),(block,5)), false, 66).
holds(2, in_tower((block,1),(block,6)), false, 66).
holds(2, in_tower((block,2),(block,1)), false, 66).
holds(2, in_tower((block,2),(block,2)), false, 66).
holds(2, in_tower((block,2),(block,3)), false, 66).
holds(2, in_tower((block,2),(block,4)), false, 66).
holds(2, in_tower((block,2),(block,5)), false, 66).
holds(2, in_tower((block,2),(block,6)), false, 66).
holds(2, in_tower((block,3),(block,1)), false, 66).
holds(2, in_tower((block,3),(block,2)), true, 66).
holds(2, in_tower((block,3),(block,3)), true, 66).
holds(2, in_tower((block,3),(block,4)), false, 66).
holds(2, in_tower((block,3),(block,5)), false, 66).
holds(2, in_tower((block,3),(block,6)), false, 66).
holds(2, in_tower((block,4),(block,1)), false, 66).
holds(2, in_tower((block,4),(block,2)), false, 66).
holds(2, in_tower((block,4),(block,3)), false, 66).
holds(2, in_tower((block,4),(block,4)), false, 66).
holds(2, in_tower((block,4),(block,5)), false, 66).
holds(2, in_tower((block,4),(block,6)), false, 66).
holds(2, in_tower((block,5),(block,1)), false, 66).
holds(2, in_tower((block,5),(block,2)), false, 66).
holds(2, in_tower((block,5),(block,3)), false, 66).
holds(2, in_tower((block,5),(block,4)), false, 66).
holds(2, in_tower((block,5),(block,5)), false, 66).
holds(2, in_tower((block,5),(block,6)), false, 66).
holds(2, in_tower((block,6),(block,1)), false, 66).
holds(2, in_tower((block,6),(block,2)), false, 66).
holds(2, in_tower((block,6),(block,3)), false, 66).
holds(2, in_tower((block,6),(block,4)), false, 66).
holds(2, in_tower((block,6),(block,5)), true, 66).
holds(2, in_tower((block,6),(block,6)), true, 66).
holds(2, on((block,1)), nothing, 66).
holds(2, on((block,2)), (block,3), 66).
holds(2, on((block,3)), puzzle_room_table, 66).
holds(2, on((block,4)), nothing, 66).
holds(2, on((block,5)), (block,6), 66).
holds(2, on((block,6)), puzzle_room_table, 66).
holds(2, tower_base((block,1),puzzle_room_table), false, 66).
holds(2, tower_base((block,2),puzzle_room_table), false, 66).
holds(2, tower_base((block,3),puzzle_room_table), true, 66).
holds(2, tower_base((block,4),puzzle_room_table), false, 66).
holds(2, tower_base((block,5),puzzle_room_table), false, 66).
holds(2, tower_base((block,6),puzzle_room_table), true, 66).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 66).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 66).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 66).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 66).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 66).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 66).

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 40})

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part base:

sub_goal(2, talos, move(hallway), in(talos), hallway, 40).

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001DBEDC398B0>]
	incrementor = SolveIncrementor(step_start=66, step_increase=1, step_increase_initial=2, step_end_min=67, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 66), range_=None), IncPart(name='plan_module', args=('#inc', 66, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 66, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 66, 40, 40, 'sequential', 'false'), range_=None)]

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 809 rules

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004456100000197694s

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.030325s.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005085s with result Satisfiable.

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DBEDCBB9A0>

[09-02-2022_23-55-42] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 66)
	('last_sgoals', 40)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001DBAB24FA60>)
	('first_sgoals', 40)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001DBEDCBB9A0>)

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 66). %* None *%
#program plan_module(#inc, 66, true, false). %* None *%
#program optimisation_module(#inc, 66, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 66, 40, 40, sequential, false). %* None *%

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     65 : Current =     67
Incrementor step ends | Minimum  =     67 : Maximum =    200

[09-02-2022_23-55-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(67)]), ('state_module', [Number(66), Number(66)]), ('plan_module', [Number(66), Number(66), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(66), Number(66), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(66)]), ('action_preconditions', [Number(66)]), ('variable_relations', [Number(66)]), ('abstraction_mappings', [Number(66)]), ('conformance_module', [Number(66), Number(66), Number(40), Number(40), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(67), Number(66)]), ('plan_module', [Number(67), Number(66), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(67), Number(66), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(67)]), ('action_preconditions', [Number(67)]), ('variable_relations', [Number(67)]), ('abstraction_mappings', [Number(67)]), ('conformance_module', [Number(67), Number(66), Number(40), Number(40), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.244434s.

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009074s with result Unsatisfiable.

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.25350840000010066, Incremental time limit = None
Running cumulative time = 0.25350840000010066, Cumulative time limit = 1800
Used memory = (RSS = 1160.984375Mb, VMS = 1152.152344Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     67 : Current =     68
Incrementor step ends | Minimum  =     67 : Maximum =    200

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(68)]), ('state_module', [Number(68), Number(66)]), ('plan_module', [Number(68), Number(66), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(68), Number(66), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(68)]), ('action_preconditions', [Number(68)]), ('variable_relations', [Number(68)]), ('abstraction_mappings', [Number(68)]), ('conformance_module', [Number(68), Number(66), Number(40), Number(40), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.135200s.

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007588s with result Satisfiable.

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.14278849999982413, Incremental time limit = None
Running cumulative time = 0.3962968999999248, Cumulative time limit = 1800
Used memory = (RSS = 1160.984375Mb, VMS = 1152.152344Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.379634s, Solving = 0.016663s, Total = 0.396297s, Memory = (RSS = 1160.984375Mb, VMS = 1152.152344Mb), Step range = [66-68]), Calls = 2
Final Model :: Total atoms = 4518, Cost = (2, 0, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.244434s, Solving = 0.009074s, Total = 0.253508s, Memory = (RSS = 1160.984375Mb, VMS = 1152.152344Mb), Step range = [66-67]
2 : Statistics :: Grounding = 0.135200s, Solving = 0.007588s, Total = 0.142788s, Memory = (RSS = 1160.984375Mb, VMS = 1152.152344Mb), Step range = [68-68]

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.396297s due to: Stop condition reached.

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[09-02-2022_23-55-43] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 4, 10: 5, 11: 6, 12: 7, 13: 8, 14: 8, 15: 9, 16: 9, 17: 10, 18: 11, 19: 11, 20: 12, 21: 13, 22: 13, 23: 13, 24: 13, 25: 13, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 19, 33: 19, 34: 20, 35: 21, 36: 22, 37: 23, 38: 23, 39: 24, 40: 25, 41: 25, 42: 26, 43: 27, 44: 28, 45: 28, 46: 28, 47: 29, 48: 30, 49: 31, 50: 31, 51: 32, 52: 32, 53: 33, 54: 34, 55: 35, 56: 35, 57: 36, 58: 36, 59: 36, 60: 37, 61: 38, 62: 38, 63: 38, 64: 38, 65: 38, 66: 39}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 14, 9: 16, 10: 17, 11: 19, 12: 20, 13: 25, 14: 27, 15: 28, 16: 29, 17: 30, 18: 31, 19: 33, 20: 34, 21: 35, 22: 36, 23: 38, 24: 39, 25: 41, 26: 42, 27: 43, 28: 46, 29: 47, 30: 48, 31: 50, 32: 52, 33: 53, 34: 54, 35: 56, 36: 59, 37: 60, 38: 65, 39: 66}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11, 37: 12, 38: 12, 39: 13, 40: 13, 41: 13, 42: 14, 43: 14}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 36, 12: 38, 13: 41, 14: 43}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_23-55-43] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 4, 10: 5, 11: 6, 12: 7, 13: 8, 14: 8, 15: 9, 16: 9, 17: 10, 18: 11, 19: 11, 20: 12, 21: 13, 22: 13, 23: 13, 24: 13, 25: 13, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 19, 33: 19, 34: 20, 35: 21, 36: 22, 37: 23, 38: 23, 39: 24, 40: 25, 41: 25, 42: 26, 43: 27, 44: 28, 45: 28, 46: 28, 47: 29, 48: 30, 49: 31, 50: 31, 51: 32, 52: 32, 53: 33, 54: 34, 55: 35, 56: 35, 57: 36, 58: 36, 59: 36, 60: 37, 61: 38, 62: 38, 63: 38, 64: 38, 65: 38, 66: 39, 67: 40, 68: 40}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 14, 9: 16, 10: 17, 11: 19, 12: 20, 13: 25, 14: 27, 15: 28, 16: 29, 17: 30, 18: 31, 19: 33, 20: 34, 21: 35, 22: 36, 23: 38, 24: 39, 25: 41, 26: 42, 27: 43, 28: 46, 29: 47, 30: 48, 31: 50, 32: 52, 33: 53, 34: 54, 35: 56, 36: 59, 37: 60, 38: 65, 39: 66, 40: 68}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11, 37: 12, 38: 12, 39: 13, 40: 13, 41: 13, 42: 14, 43: 14}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 36, 12: 38, 13: 41, 14: 43}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_23-55-43] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 40, Last requested goal index = 40, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[09-02-2022_23-55-43] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.379634s, Solving = 0.016663s, Total = 0.396297s, Memory = (RSS = 1160.984375Mb, VMS = 1152.152344Mb), Step range = [66-68]), Calls = 2
Model :: Total atoms = 4518, Cost = (2, 0, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[09-02-2022_23-55-43] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 2 :: Actions = 2                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 4:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 10:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 11:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 12:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 13:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 14:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 15:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 16:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
        talos : grasp(manipulator_end_2,(block,6))
Step 17:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 21:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 22:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 23:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 24:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 25:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,5))
Step 26:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 27:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 28:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 29:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 31:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 32:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 33:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 34:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,6),puzzle_room_table_right)
Step 35:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,6))
Step 36:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 37:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 38:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 39:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 40:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 41:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 42:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 43:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 44:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 45:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 46:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,3)))
        talos : configure(manipulator_limb_1,extended)
Step 47:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 29] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 29] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,3))
        talos : put(manipulator_end_1,(block,5),(block,6))
Step 48:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 30] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_end_2,(block,3),puzzle_room_table_left)
        talos : release(manipulator_end_1,(block,5))
Step 49:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 50:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
        talos : release(manipulator_end_2,(block,3))
Step 51:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,1)))
Step 52:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,1))
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 53:
    Current Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
        [Index = 33] talos : lift(manipulator_arm_2,(block,1)) -> on((block,1)) = nothing
        [Index = 33] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
        [Index = 33] talos : lift(manipulator_arm_2,(block,1)) -> on((block,1)) = nothing
        [Index = 33] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
        talos : lift(manipulator_end_2,(block,1))
        talos : release(manipulator_end_1,(block,2))
Step 54:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 55:
    Current Sub-goals:
        [Index = 35] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 56:
    Current Sub-goals:
        [Index = 35] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 35] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 57:
    Current Sub-goals:
        [Index = 36] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 58:
    Current Sub-goals:
        [Index = 36] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 59:
    Current Sub-goals:
        [Index = 36] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 36] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 60:
    Current Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 61:
    Current Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 62:
    Current Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 63:
    Current Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 64:
    Current Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
Step 65:
    Current Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))
Step 66:
    Current Sub-goals:
        [Index = 39] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 39] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 67:
    Current Sub-goals:
        [Index = 40] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 68:
    Current Sub-goals:
        [Index = 40] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 40] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))

[09-02-2022_23-55-43] DEBUG :: ASH Planner Main #1 >> Monolevel problem 29 at level 1 solved.

[09-02-2022_23-55-43] DEBUG :: ASH Planner Main #1 >> Online planning increment 29 finished.

[09-02-2022_23-55-43] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 6 : Total constraining sub-goal stages = 14 : Goals achieved = 14 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 29 : Total constraining sub-goal stages = 43 : Goals achieved = 40 : Goals unachieved = 3 : Complete = False

[09-02-2022_23-55-43] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[09-02-2022_23-55-43] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 30 by method ground-first is [1-1].

[09-02-2022_23-55-43] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 30 at level 1:
Total Templated Partial Problems = 6, Problem Range = [26-31], Size = 7, Sub-goal Stage Range = [37-43]
Division points [total=5] : [(Index = 37, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 38, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 39, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 40, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 41, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[09-02-2022_23-55-43] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [41-41]

[09-02-2022_23-55-43] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [41-41], problem number = 30, increment number = 30

[09-02-2022_23-55-43] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 41)
	('last_sgoals', 41)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001DBAB24FA60>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[09-02-2022_23-55-43] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [41-41] : Concurrency enabled : Minimum search length bound disabled with value 68

[09-02-2022_23-55-43] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 41
last_sgoals = 41
start_step = 68
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 68

[09-02-2022_23-55-43] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[09-02-2022_23-55-43] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[09-02-2022_23-55-43] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[09-02-2022_23-55-43] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[09-02-2022_23-55-43] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_23-55-43] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 68 as problem start state.

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,4))', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,1))', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 68})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'S': 68})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'S': 68})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,4)', 'S': 68})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(hallway,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(hallway,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(hallway,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(hallway,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(hallway,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(hallway,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(hallway,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(hallway,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(hallway,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 68})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'S': 68})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'hallway', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'hallway', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'hallway', 'S': 68})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'hallway', 'S': 68})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'hallway', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 68})

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 68).
holds(1, complete_tower(red,puzzle_room_table), false, 68).
holds(1, configuration(manipulator_end_1), aligned_with((block,4)), 68).
holds(1, configuration(manipulator_end_2), aligned_with((block,1)), 68).
holds(1, configuration(manipulator_limb_1), retracted, 68).
holds(1, configuration(manipulator_limb_2), retracted, 68).
holds(1, configuration(puzzle_room_door), open, 68).
holds(1, configuration(starting_room_door), closed, 68).
holds(1, configuration(store_room_door), open, 68).
holds(1, grasping(manipulator_arm_1), (block,4), 68).
holds(1, grasping(manipulator_arm_2), (block,1), 68).
holds(1, grasping(manipulator_end_1), (block,4), 68).
holds(1, grasping(manipulator_end_2), (block,1), 68).
holds(1, in((block,1)), (hallway,0), 68).
holds(1, in((block,2)), (puzzle_room,1), 68).
holds(1, in((block,3)), (puzzle_room,1), 68).
holds(1, in((block,4)), (hallway,0), 68).
holds(1, in((block,5)), (puzzle_room,1), 68).
holds(1, in((block,6)), (puzzle_room,1), 68).
holds(1, in(manipulator_arm_1), (hallway,0), 68).
holds(1, in(manipulator_arm_2), (hallway,0), 68).
holds(1, in(manipulator_end_1), (hallway,0), 68).
holds(1, in(manipulator_end_2), (hallway,0), 68).
holds(1, in(manipulator_limb_1), (hallway,0), 68).
holds(1, in(manipulator_limb_2), (hallway,0), 68).
holds(1, in(puzzle_room_table), (puzzle_room,1), 68).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 68).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 68).
holds(1, in(talos), (hallway,0), 68).
holds(1, in_tower((block,1),(block,1)), false, 68).
holds(1, in_tower((block,1),(block,2)), false, 68).
holds(1, in_tower((block,1),(block,3)), false, 68).
holds(1, in_tower((block,1),(block,4)), false, 68).
holds(1, in_tower((block,1),(block,5)), false, 68).
holds(1, in_tower((block,1),(block,6)), false, 68).
holds(1, in_tower((block,2),(block,1)), false, 68).
holds(1, in_tower((block,2),(block,2)), false, 68).
holds(1, in_tower((block,2),(block,3)), false, 68).
holds(1, in_tower((block,2),(block,4)), false, 68).
holds(1, in_tower((block,2),(block,5)), false, 68).
holds(1, in_tower((block,2),(block,6)), false, 68).
holds(1, in_tower((block,3),(block,1)), false, 68).
holds(1, in_tower((block,3),(block,2)), true, 68).
holds(1, in_tower((block,3),(block,3)), true, 68).
holds(1, in_tower((block,3),(block,4)), false, 68).
holds(1, in_tower((block,3),(block,5)), false, 68).
holds(1, in_tower((block,3),(block,6)), false, 68).
holds(1, in_tower((block,4),(block,1)), false, 68).
holds(1, in_tower((block,4),(block,2)), false, 68).
holds(1, in_tower((block,4),(block,3)), false, 68).
holds(1, in_tower((block,4),(block,4)), false, 68).
holds(1, in_tower((block,4),(block,5)), false, 68).
holds(1, in_tower((block,4),(block,6)), false, 68).
holds(1, in_tower((block,5),(block,1)), false, 68).
holds(1, in_tower((block,5),(block,2)), false, 68).
holds(1, in_tower((block,5),(block,3)), false, 68).
holds(1, in_tower((block,5),(block,4)), false, 68).
holds(1, in_tower((block,5),(block,5)), false, 68).
holds(1, in_tower((block,5),(block,6)), false, 68).
holds(1, in_tower((block,6),(block,1)), false, 68).
holds(1, in_tower((block,6),(block,2)), false, 68).
holds(1, in_tower((block,6),(block,3)), false, 68).
holds(1, in_tower((block,6),(block,4)), false, 68).
holds(1, in_tower((block,6),(block,5)), true, 68).
holds(1, in_tower((block,6),(block,6)), true, 68).
holds(1, on((block,1)), nothing, 68).
holds(1, on((block,2)), (block,3), 68).
holds(1, on((block,3)), puzzle_room_table_left, 68).
holds(1, on((block,4)), nothing, 68).
holds(1, on((block,5)), (block,6), 68).
holds(1, on((block,6)), puzzle_room_table_right, 68).
holds(1, tower_base((block,1),puzzle_room_table), false, 68).
holds(1, tower_base((block,2),puzzle_room_table), false, 68).
holds(1, tower_base((block,3),puzzle_room_table), true, 68).
holds(1, tower_base((block,4),puzzle_room_table), false, 68).
holds(1, tower_base((block,5),puzzle_room_table), false, 68).
holds(1, tower_base((block,6),puzzle_room_table), true, 68).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 68).
holds(2, complete_tower(blue,puzzle_room_table), false, 68).
holds(2, complete_tower(red,puzzle_room_table), false, 68).
holds(2, configuration(manipulator_arm_1), retracted, 68).
holds(2, configuration(manipulator_arm_2), retracted, 68).
holds(2, configuration(puzzle_room_door), open, 68).
holds(2, configuration(starting_room_door), closed, 68).
holds(2, configuration(store_room_door), open, 68).
holds(2, grasping(manipulator_arm_1), (block,4), 68).
holds(2, grasping(manipulator_arm_2), (block,1), 68).
holds(2, in((block,1)), hallway, 68).
holds(2, in((block,2)), puzzle_room, 68).
holds(2, in((block,3)), puzzle_room, 68).
holds(2, in((block,4)), hallway, 68).
holds(2, in((block,5)), puzzle_room, 68).
holds(2, in((block,6)), puzzle_room, 68).
holds(2, in(manipulator_arm_1), hallway, 68).
holds(2, in(manipulator_arm_2), hallway, 68).
holds(2, in(puzzle_room_table), puzzle_room, 68).
holds(2, in(talos), hallway, 68).
holds(2, in_tower((block,1),(block,1)), false, 68).
holds(2, in_tower((block,1),(block,2)), false, 68).
holds(2, in_tower((block,1),(block,3)), false, 68).
holds(2, in_tower((block,1),(block,4)), false, 68).
holds(2, in_tower((block,1),(block,5)), false, 68).
holds(2, in_tower((block,1),(block,6)), false, 68).
holds(2, in_tower((block,2),(block,1)), false, 68).
holds(2, in_tower((block,2),(block,2)), false, 68).
holds(2, in_tower((block,2),(block,3)), false, 68).
holds(2, in_tower((block,2),(block,4)), false, 68).
holds(2, in_tower((block,2),(block,5)), false, 68).
holds(2, in_tower((block,2),(block,6)), false, 68).
holds(2, in_tower((block,3),(block,1)), false, 68).
holds(2, in_tower((block,3),(block,2)), true, 68).
holds(2, in_tower((block,3),(block,3)), true, 68).
holds(2, in_tower((block,3),(block,4)), false, 68).
holds(2, in_tower((block,3),(block,5)), false, 68).
holds(2, in_tower((block,3),(block,6)), false, 68).
holds(2, in_tower((block,4),(block,1)), false, 68).
holds(2, in_tower((block,4),(block,2)), false, 68).
holds(2, in_tower((block,4),(block,3)), false, 68).
holds(2, in_tower((block,4),(block,4)), false, 68).
holds(2, in_tower((block,4),(block,5)), false, 68).
holds(2, in_tower((block,4),(block,6)), false, 68).
holds(2, in_tower((block,5),(block,1)), false, 68).
holds(2, in_tower((block,5),(block,2)), false, 68).
holds(2, in_tower((block,5),(block,3)), false, 68).
holds(2, in_tower((block,5),(block,4)), false, 68).
holds(2, in_tower((block,5),(block,5)), false, 68).
holds(2, in_tower((block,5),(block,6)), false, 68).
holds(2, in_tower((block,6),(block,1)), false, 68).
holds(2, in_tower((block,6),(block,2)), false, 68).
holds(2, in_tower((block,6),(block,3)), false, 68).
holds(2, in_tower((block,6),(block,4)), false, 68).
holds(2, in_tower((block,6),(block,5)), true, 68).
holds(2, in_tower((block,6),(block,6)), true, 68).
holds(2, on((block,1)), nothing, 68).
holds(2, on((block,2)), (block,3), 68).
holds(2, on((block,3)), puzzle_room_table, 68).
holds(2, on((block,4)), nothing, 68).
holds(2, on((block,5)), (block,6), 68).
holds(2, on((block,6)), puzzle_room_table, 68).
holds(2, tower_base((block,1),puzzle_room_table), false, 68).
holds(2, tower_base((block,2),puzzle_room_table), false, 68).
holds(2, tower_base((block,3),puzzle_room_table), true, 68).
holds(2, tower_base((block,4),puzzle_room_table), false, 68).
holds(2, tower_base((block,5),puzzle_room_table), false, 68).
holds(2, tower_base((block,6),puzzle_room_table), true, 68).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 68).

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[09-02-2022_23-55-43] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 41})

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part base:

sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 41).

[09-02-2022_23-55-43] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001DBEDC39DC0>]
	incrementor = SolveIncrementor(step_start=68, step_increase=1, step_increase_initial=2, step_end_min=69, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 68), range_=None), IncPart(name='plan_module', args=('#inc', 68, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 68, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 68, 41, 41, 'sequential', 'false'), range_=None)]

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 809 rules

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.00462840000000142s

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.029752s.

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004775s with result Satisfiable.

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DBEDE10D10>

[09-02-2022_23-55-43] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 68)
	('last_sgoals', 41)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001DBAB24FA60>)
	('first_sgoals', 41)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001DBEDE10D10>)

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 68). %* None *%
#program plan_module(#inc, 68, true, false). %* None *%
#program optimisation_module(#inc, 68, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 68, 41, 41, sequential, false). %* None *%

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     67 : Current =     69
Incrementor step ends | Minimum  =     69 : Maximum =    200

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(69)]), ('state_module', [Number(68), Number(68)]), ('plan_module', [Number(68), Number(68), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(68), Number(68), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(68)]), ('action_preconditions', [Number(68)]), ('variable_relations', [Number(68)]), ('abstraction_mappings', [Number(68)]), ('conformance_module', [Number(68), Number(68), Number(41), Number(41), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(69), Number(68)]), ('plan_module', [Number(69), Number(68), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(69), Number(68), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(69)]), ('action_preconditions', [Number(69)]), ('variable_relations', [Number(69)]), ('abstraction_mappings', [Number(69)]), ('conformance_module', [Number(69), Number(68), Number(41), Number(41), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.243568s.

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008470s with result Unsatisfiable.

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.25203799999985677, Incremental time limit = None
Running cumulative time = 0.25203799999985677, Cumulative time limit = 1800
Used memory = (RSS = 1160.984375Mb, VMS = 1152.152344Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     69 : Current =     70
Incrementor step ends | Minimum  =     69 : Maximum =    200

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(70)]), ('state_module', [Number(70), Number(68)]), ('plan_module', [Number(70), Number(68), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(70), Number(68), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(70)]), ('action_preconditions', [Number(70)]), ('variable_relations', [Number(70)]), ('abstraction_mappings', [Number(70)]), ('conformance_module', [Number(70), Number(68), Number(41), Number(41), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.145626s.

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.003632s with result Unsatisfiable.

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.14925779999998667, Incremental time limit = None
Running cumulative time = 0.40129579999984344, Cumulative time limit = 1800
Used memory = (RSS = 1160.984375Mb, VMS = 1152.152344Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     70 : Current =     71
Incrementor step ends | Minimum  =     69 : Maximum =    200

[09-02-2022_23-55-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(71)]), ('state_module', [Number(71), Number(68)]), ('plan_module', [Number(71), Number(68), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(71), Number(68), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(71)]), ('action_preconditions', [Number(71)]), ('variable_relations', [Number(71)]), ('abstraction_mappings', [Number(71)]), ('conformance_module', [Number(71), Number(68), Number(41), Number(41), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.186003s.

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009481s with result Satisfiable.

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.19548469999995177, Incremental time limit = None
Running cumulative time = 0.5967804999997952, Cumulative time limit = 1800
Used memory = (RSS = 1161.000000Mb, VMS = 1152.402344Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.575197s, Solving = 0.021583s, Total = 0.596780s, Memory = (RSS = 1161.000000Mb, VMS = 1152.402344Mb), Step range = [68-71]), Calls = 3
Final Model :: Total atoms = 4887, Cost = (3, 0, 0), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.243568s, Solving = 0.008470s, Total = 0.252038s, Memory = (RSS = 1160.984375Mb, VMS = 1152.152344Mb), Step range = [68-69]
2 : Statistics :: Grounding = 0.145626s, Solving = 0.003632s, Total = 0.149258s, Memory = (RSS = 1160.984375Mb, VMS = 1152.152344Mb), Step range = [70-70]
3 : Statistics :: Grounding = 0.186003s, Solving = 0.009481s, Total = 0.195485s, Memory = (RSS = 1161.000000Mb, VMS = 1152.402344Mb), Step range = [71-71]

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.596780s due to: Stop condition reached.

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[09-02-2022_23-55-44] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 4, 10: 5, 11: 6, 12: 7, 13: 8, 14: 8, 15: 9, 16: 9, 17: 10, 18: 11, 19: 11, 20: 12, 21: 13, 22: 13, 23: 13, 24: 13, 25: 13, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 19, 33: 19, 34: 20, 35: 21, 36: 22, 37: 23, 38: 23, 39: 24, 40: 25, 41: 25, 42: 26, 43: 27, 44: 28, 45: 28, 46: 28, 47: 29, 48: 30, 49: 31, 50: 31, 51: 32, 52: 32, 53: 33, 54: 34, 55: 35, 56: 35, 57: 36, 58: 36, 59: 36, 60: 37, 61: 38, 62: 38, 63: 38, 64: 38, 65: 38, 66: 39, 67: 40, 68: 40}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 14, 9: 16, 10: 17, 11: 19, 12: 20, 13: 25, 14: 27, 15: 28, 16: 29, 17: 30, 18: 31, 19: 33, 20: 34, 21: 35, 22: 36, 23: 38, 24: 39, 25: 41, 26: 42, 27: 43, 28: 46, 29: 47, 30: 48, 31: 50, 32: 52, 33: 53, 34: 54, 35: 56, 36: 59, 37: 60, 38: 65, 39: 66, 40: 68}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11, 37: 12, 38: 12, 39: 13, 40: 13, 41: 13, 42: 14, 43: 14}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 36, 12: 38, 13: 41, 14: 43}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_23-55-44] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 4, 10: 5, 11: 6, 12: 7, 13: 8, 14: 8, 15: 9, 16: 9, 17: 10, 18: 11, 19: 11, 20: 12, 21: 13, 22: 13, 23: 13, 24: 13, 25: 13, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 19, 33: 19, 34: 20, 35: 21, 36: 22, 37: 23, 38: 23, 39: 24, 40: 25, 41: 25, 42: 26, 43: 27, 44: 28, 45: 28, 46: 28, 47: 29, 48: 30, 49: 31, 50: 31, 51: 32, 52: 32, 53: 33, 54: 34, 55: 35, 56: 35, 57: 36, 58: 36, 59: 36, 60: 37, 61: 38, 62: 38, 63: 38, 64: 38, 65: 38, 66: 39, 67: 40, 68: 40, 69: 41, 70: 41, 71: 41}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 14, 9: 16, 10: 17, 11: 19, 12: 20, 13: 25, 14: 27, 15: 28, 16: 29, 17: 30, 18: 31, 19: 33, 20: 34, 21: 35, 22: 36, 23: 38, 24: 39, 25: 41, 26: 42, 27: 43, 28: 46, 29: 47, 30: 48, 31: 50, 32: 52, 33: 53, 34: 54, 35: 56, 36: 59, 37: 60, 38: 65, 39: 66, 40: 68, 41: 71}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11, 37: 12, 38: 12, 39: 13, 40: 13, 41: 13, 42: 14, 43: 14}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 36, 12: 38, 13: 41, 14: 43}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_23-55-44] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 41, Last requested goal index = 41, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[09-02-2022_23-55-44] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.575197s, Solving = 0.021583s, Total = 0.596780s, Memory = (RSS = 1161.000000Mb, VMS = 1152.402344Mb), Step range = [68-71]), Calls = 3
Model :: Total atoms = 4887, Cost = (3, 0, 0), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[09-02-2022_23-55-44] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 3 :: Actions = 3                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 4:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 10:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 11:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 12:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 13:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 14:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 15:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 16:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
        talos : grasp(manipulator_end_2,(block,6))
Step 17:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 21:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 22:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 23:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 24:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 25:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,5))
Step 26:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 27:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 28:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 29:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 31:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 32:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 33:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 34:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,6),puzzle_room_table_right)
Step 35:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,6))
Step 36:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 37:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 38:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 39:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 40:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 41:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 42:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 43:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 44:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 45:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 46:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,3)))
        talos : configure(manipulator_limb_1,extended)
Step 47:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 29] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 29] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,3))
        talos : put(manipulator_end_1,(block,5),(block,6))
Step 48:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 30] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_end_2,(block,3),puzzle_room_table_left)
        talos : release(manipulator_end_1,(block,5))
Step 49:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 50:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
        talos : release(manipulator_end_2,(block,3))
Step 51:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,1)))
Step 52:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,1))
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 53:
    Current Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
        [Index = 33] talos : lift(manipulator_arm_2,(block,1)) -> on((block,1)) = nothing
        [Index = 33] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
        [Index = 33] talos : lift(manipulator_arm_2,(block,1)) -> on((block,1)) = nothing
        [Index = 33] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
        talos : lift(manipulator_end_2,(block,1))
        talos : release(manipulator_end_1,(block,2))
Step 54:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 55:
    Current Sub-goals:
        [Index = 35] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 56:
    Current Sub-goals:
        [Index = 35] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 35] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 57:
    Current Sub-goals:
        [Index = 36] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 58:
    Current Sub-goals:
        [Index = 36] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 59:
    Current Sub-goals:
        [Index = 36] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 36] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 60:
    Current Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 61:
    Current Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 62:
    Current Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 63:
    Current Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 64:
    Current Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
Step 65:
    Current Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))
Step 66:
    Current Sub-goals:
        [Index = 39] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 39] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 67:
    Current Sub-goals:
        [Index = 40] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 68:
    Current Sub-goals:
        [Index = 40] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 40] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 69:
    Current Sub-goals:
        [Index = 41] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 70:
    Current Sub-goals:
        [Index = 41] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 71:
    Current Sub-goals:
        [Index = 41] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 41] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))

[09-02-2022_23-55-44] DEBUG :: ASH Planner Main #1 >> Monolevel problem 30 at level 1 solved.

[09-02-2022_23-55-44] DEBUG :: ASH Planner Main #1 >> Online planning increment 30 finished.

[09-02-2022_23-55-44] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 6 : Total constraining sub-goal stages = 14 : Goals achieved = 14 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 30 : Total constraining sub-goal stages = 43 : Goals achieved = 41 : Goals unachieved = 2 : Complete = False

[09-02-2022_23-55-44] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[09-02-2022_23-55-44] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 31 by method ground-first is [1-1].

[09-02-2022_23-55-44] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 31 at level 1:
Total Templated Partial Problems = 6, Problem Range = [26-31], Size = 7, Sub-goal Stage Range = [37-43]
Division points [total=5] : [(Index = 37, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 38, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 39, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 40, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 41, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[09-02-2022_23-55-44] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [42-43]

[09-02-2022_23-55-44] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [42-43], problem number = 31, increment number = 31

[09-02-2022_23-55-44] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 42)
	('last_sgoals', 43)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001DBAB24FA60>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[09-02-2022_23-55-44] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [42-43] : Concurrency enabled : Minimum search length bound enabled with value 72

[09-02-2022_23-55-44] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 42
last_sgoals = 43
start_step = 71
is_initial = False
is_final = True
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 72

[09-02-2022_23-55-44] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[09-02-2022_23-55-44] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[09-02-2022_23-55-44] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[09-02-2022_23-55-44] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[09-02-2022_23-55-44] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_23-55-44] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 71 as problem start state.

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,4))', 'S': 71})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,1))', 'S': 71})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 71})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 71})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 71})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 71})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 71})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'S': 71})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'S': 71})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,4)', 'S': 71})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,1)', 'S': 71})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,0)', 'S': 71})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 71})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 71})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,0)', 'S': 71})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 71})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 71})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,0)', 'S': 71})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,0)', 'S': 71})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,0)', 'S': 71})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,0)', 'S': 71})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,0)', 'S': 71})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,0)', 'S': 71})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 71})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 71})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 71})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,0)', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 71})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'S': 71})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 71})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 71})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 71})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 71})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 71})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 71})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 71})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 71})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 71})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 71})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 71})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 71})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'S': 71})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'S': 71})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 71})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 71})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 71})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 71})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 71})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 71})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 71})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 71})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 71})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 71})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'S': 71})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 71})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 71})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 71})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 71})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 71})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 71})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 71})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 71})

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 71).
holds(1, complete_tower(red,puzzle_room_table), false, 71).
holds(1, configuration(manipulator_end_1), aligned_with((block,4)), 71).
holds(1, configuration(manipulator_end_2), aligned_with((block,1)), 71).
holds(1, configuration(manipulator_limb_1), retracted, 71).
holds(1, configuration(manipulator_limb_2), retracted, 71).
holds(1, configuration(puzzle_room_door), open, 71).
holds(1, configuration(starting_room_door), closed, 71).
holds(1, configuration(store_room_door), open, 71).
holds(1, grasping(manipulator_arm_1), (block,4), 71).
holds(1, grasping(manipulator_arm_2), (block,1), 71).
holds(1, grasping(manipulator_end_1), (block,4), 71).
holds(1, grasping(manipulator_end_2), (block,1), 71).
holds(1, in((block,1)), (puzzle_room,0), 71).
holds(1, in((block,2)), (puzzle_room,1), 71).
holds(1, in((block,3)), (puzzle_room,1), 71).
holds(1, in((block,4)), (puzzle_room,0), 71).
holds(1, in((block,5)), (puzzle_room,1), 71).
holds(1, in((block,6)), (puzzle_room,1), 71).
holds(1, in(manipulator_arm_1), (puzzle_room,0), 71).
holds(1, in(manipulator_arm_2), (puzzle_room,0), 71).
holds(1, in(manipulator_end_1), (puzzle_room,0), 71).
holds(1, in(manipulator_end_2), (puzzle_room,0), 71).
holds(1, in(manipulator_limb_1), (puzzle_room,0), 71).
holds(1, in(manipulator_limb_2), (puzzle_room,0), 71).
holds(1, in(puzzle_room_table), (puzzle_room,1), 71).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 71).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 71).
holds(1, in(talos), (puzzle_room,0), 71).
holds(1, in_tower((block,1),(block,1)), false, 71).
holds(1, in_tower((block,1),(block,2)), false, 71).
holds(1, in_tower((block,1),(block,3)), false, 71).
holds(1, in_tower((block,1),(block,4)), false, 71).
holds(1, in_tower((block,1),(block,5)), false, 71).
holds(1, in_tower((block,1),(block,6)), false, 71).
holds(1, in_tower((block,2),(block,1)), false, 71).
holds(1, in_tower((block,2),(block,2)), false, 71).
holds(1, in_tower((block,2),(block,3)), false, 71).
holds(1, in_tower((block,2),(block,4)), false, 71).
holds(1, in_tower((block,2),(block,5)), false, 71).
holds(1, in_tower((block,2),(block,6)), false, 71).
holds(1, in_tower((block,3),(block,1)), false, 71).
holds(1, in_tower((block,3),(block,2)), true, 71).
holds(1, in_tower((block,3),(block,3)), true, 71).
holds(1, in_tower((block,3),(block,4)), false, 71).
holds(1, in_tower((block,3),(block,5)), false, 71).
holds(1, in_tower((block,3),(block,6)), false, 71).
holds(1, in_tower((block,4),(block,1)), false, 71).
holds(1, in_tower((block,4),(block,2)), false, 71).
holds(1, in_tower((block,4),(block,3)), false, 71).
holds(1, in_tower((block,4),(block,4)), false, 71).
holds(1, in_tower((block,4),(block,5)), false, 71).
holds(1, in_tower((block,4),(block,6)), false, 71).
holds(1, in_tower((block,5),(block,1)), false, 71).
holds(1, in_tower((block,5),(block,2)), false, 71).
holds(1, in_tower((block,5),(block,3)), false, 71).
holds(1, in_tower((block,5),(block,4)), false, 71).
holds(1, in_tower((block,5),(block,5)), false, 71).
holds(1, in_tower((block,5),(block,6)), false, 71).
holds(1, in_tower((block,6),(block,1)), false, 71).
holds(1, in_tower((block,6),(block,2)), false, 71).
holds(1, in_tower((block,6),(block,3)), false, 71).
holds(1, in_tower((block,6),(block,4)), false, 71).
holds(1, in_tower((block,6),(block,5)), true, 71).
holds(1, in_tower((block,6),(block,6)), true, 71).
holds(1, on((block,1)), nothing, 71).
holds(1, on((block,2)), (block,3), 71).
holds(1, on((block,3)), puzzle_room_table_left, 71).
holds(1, on((block,4)), nothing, 71).
holds(1, on((block,5)), (block,6), 71).
holds(1, on((block,6)), puzzle_room_table_right, 71).
holds(1, tower_base((block,1),puzzle_room_table), false, 71).
holds(1, tower_base((block,2),puzzle_room_table), false, 71).
holds(1, tower_base((block,3),puzzle_room_table), true, 71).
holds(1, tower_base((block,4),puzzle_room_table), false, 71).
holds(1, tower_base((block,5),puzzle_room_table), false, 71).
holds(1, tower_base((block,6),puzzle_room_table), true, 71).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 71).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 71).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 71).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 71).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 71).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 71).
holds(2, complete_tower(blue,puzzle_room_table), false, 71).
holds(2, complete_tower(red,puzzle_room_table), false, 71).
holds(2, configuration(manipulator_arm_1), retracted, 71).
holds(2, configuration(manipulator_arm_2), retracted, 71).
holds(2, configuration(puzzle_room_door), open, 71).
holds(2, configuration(starting_room_door), closed, 71).
holds(2, configuration(store_room_door), open, 71).
holds(2, grasping(manipulator_arm_1), (block,4), 71).
holds(2, grasping(manipulator_arm_2), (block,1), 71).
holds(2, in((block,1)), puzzle_room, 71).
holds(2, in((block,2)), puzzle_room, 71).
holds(2, in((block,3)), puzzle_room, 71).
holds(2, in((block,4)), puzzle_room, 71).
holds(2, in((block,5)), puzzle_room, 71).
holds(2, in((block,6)), puzzle_room, 71).
holds(2, in(manipulator_arm_1), puzzle_room, 71).
holds(2, in(manipulator_arm_2), puzzle_room, 71).
holds(2, in(puzzle_room_table), puzzle_room, 71).
holds(2, in(talos), puzzle_room, 71).
holds(2, in_tower((block,1),(block,1)), false, 71).
holds(2, in_tower((block,1),(block,2)), false, 71).
holds(2, in_tower((block,1),(block,3)), false, 71).
holds(2, in_tower((block,1),(block,4)), false, 71).
holds(2, in_tower((block,1),(block,5)), false, 71).
holds(2, in_tower((block,1),(block,6)), false, 71).
holds(2, in_tower((block,2),(block,1)), false, 71).
holds(2, in_tower((block,2),(block,2)), false, 71).
holds(2, in_tower((block,2),(block,3)), false, 71).
holds(2, in_tower((block,2),(block,4)), false, 71).
holds(2, in_tower((block,2),(block,5)), false, 71).
holds(2, in_tower((block,2),(block,6)), false, 71).
holds(2, in_tower((block,3),(block,1)), false, 71).
holds(2, in_tower((block,3),(block,2)), true, 71).
holds(2, in_tower((block,3),(block,3)), true, 71).
holds(2, in_tower((block,3),(block,4)), false, 71).
holds(2, in_tower((block,3),(block,5)), false, 71).
holds(2, in_tower((block,3),(block,6)), false, 71).
holds(2, in_tower((block,4),(block,1)), false, 71).
holds(2, in_tower((block,4),(block,2)), false, 71).
holds(2, in_tower((block,4),(block,3)), false, 71).
holds(2, in_tower((block,4),(block,4)), false, 71).
holds(2, in_tower((block,4),(block,5)), false, 71).
holds(2, in_tower((block,4),(block,6)), false, 71).
holds(2, in_tower((block,5),(block,1)), false, 71).
holds(2, in_tower((block,5),(block,2)), false, 71).
holds(2, in_tower((block,5),(block,3)), false, 71).
holds(2, in_tower((block,5),(block,4)), false, 71).
holds(2, in_tower((block,5),(block,5)), false, 71).
holds(2, in_tower((block,5),(block,6)), false, 71).
holds(2, in_tower((block,6),(block,1)), false, 71).
holds(2, in_tower((block,6),(block,2)), false, 71).
holds(2, in_tower((block,6),(block,3)), false, 71).
holds(2, in_tower((block,6),(block,4)), false, 71).
holds(2, in_tower((block,6),(block,5)), true, 71).
holds(2, in_tower((block,6),(block,6)), true, 71).
holds(2, on((block,1)), nothing, 71).
holds(2, on((block,2)), (block,3), 71).
holds(2, on((block,3)), puzzle_room_table, 71).
holds(2, on((block,4)), nothing, 71).
holds(2, on((block,5)), (block,6), 71).
holds(2, on((block,6)), puzzle_room_table, 71).
holds(2, tower_base((block,1),puzzle_room_table), false, 71).
holds(2, tower_base((block,2),puzzle_room_table), false, 71).
holds(2, tower_base((block,3),puzzle_room_table), true, 71).
holds(2, tower_base((block,4),puzzle_room_table), false, 71).
holds(2, tower_base((block,5),puzzle_room_table), false, 71).
holds(2, tower_base((block,6),puzzle_room_table), true, 71).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 71).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 71).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 71).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 71).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 71).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 71).

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[09-02-2022_23-55-44] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=72']

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 42})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 42})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 43})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 43})

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 4 rules into program part base:

sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 42).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 42).
sub_goal(2, talos, put(manipulator_arm_1,(block,4),(block,5)), on((block,4)), (block,5), 43).
sub_goal(2, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 43).

[09-02-2022_23-55-44] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=72']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001DBEDE45310>]
	incrementor = SolveIncrementor(step_start=71, step_increase=1, step_increase_initial=2, step_end_min=73, step_end_max=200, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 71), range_=None), IncPart(name='plan_module', args=('#inc', 71, 'true', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 71, 'true', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 71, 42, 43, 'sequential', 'false'), range_=None)]

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 812 rules

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.00449109999999564s

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.029487s.

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005211s with result Satisfiable.

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001DBEDDDD6D0>

[09-02-2022_23-55-44] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 71)
	('last_sgoals', 43)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001DBAB24FA60>)
	('first_sgoals', 42)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001DBEDDDD6D0>)

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 71). %* None *%
#program plan_module(#inc, 71, true, true). %* None *%
#program optimisation_module(#inc, 71, true, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 71, 42, 43, sequential, false). %* None *%

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     70 : Current =     72
Incrementor step ends | Minimum  =     73 : Maximum =    200

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(72)]), ('state_module', [Number(71), Number(71)]), ('plan_module', [Number(71), Number(71), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(71), Number(71), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(71)]), ('action_preconditions', [Number(71)]), ('variable_relations', [Number(71)]), ('abstraction_mappings', [Number(71)]), ('conformance_module', [Number(71), Number(71), Number(42), Number(43), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(72), Number(71)]), ('plan_module', [Number(72), Number(71), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(72), Number(71), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(72)]), ('action_preconditions', [Number(72)]), ('variable_relations', [Number(72)]), ('abstraction_mappings', [Number(72)]), ('conformance_module', [Number(72), Number(71), Number(42), Number(43), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.249061s.

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011753s with result Satisfiable.

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2608132000000296, Incremental time limit = None
Running cumulative time = 0.2608132000000296, Cumulative time limit = 1800
Used memory = (RSS = 1161.429688Mb, VMS = 1152.652344Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.249061s, Solving = 0.011753s, Total = 0.260813s, Memory = (RSS = 1161.429688Mb, VMS = 1152.652344Mb), Step range = [71-72]), Calls = 1
Final Model :: Total atoms = 4432, Cost = (1, 0, 0), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     72 : Current =     73
Incrementor step ends | Minimum  =     73 : Maximum =    200

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(73)]), ('state_module', [Number(73), Number(71)]), ('plan_module', [Number(73), Number(71), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(73), Number(71), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(73)]), ('action_preconditions', [Number(73)]), ('variable_relations', [Number(73)]), ('abstraction_mappings', [Number(73)]), ('conformance_module', [Number(73), Number(71), Number(42), Number(43), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.144239s.

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.003977s with result Unsatisfiable.

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.14821649999998954, Incremental time limit = None
Running cumulative time = 0.40902970000001915, Cumulative time limit = 1800
Used memory = (RSS = 1161.429688Mb, VMS = 1152.652344Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     73 : Current =     74
Incrementor step ends | Minimum  =     73 : Maximum =    200

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(74)]), ('state_module', [Number(74), Number(71)]), ('plan_module', [Number(74), Number(71), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(74), Number(71), Function('true', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(74)]), ('action_preconditions', [Number(74)]), ('variable_relations', [Number(74)]), ('abstraction_mappings', [Number(74)]), ('conformance_module', [Number(74), Number(71), Number(42), Number(43), Function('sequential', [], True), Function('false', [], True)])]

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.185853s.

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009121s with result Satisfiable.

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.19497390000015002, Incremental time limit = None
Running cumulative time = 0.6040036000001692, Cumulative time limit = 1800
Used memory = (RSS = 1161.867188Mb, VMS = 1153.152344Mb), Total system virtual memory = 16324.0078125Mb

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.579153s, Solving = 0.024850s, Total = 0.604004s, Memory = (RSS = 1161.867188Mb, VMS = 1153.152344Mb), Step range = [71-74]), Calls = 3
Final Model :: Total atoms = 5463, Cost = (5, 0, -2), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.249061s, Solving = 0.011753s, Total = 0.260813s, Memory = (RSS = 1161.429688Mb, VMS = 1152.652344Mb), Step range = [71-72]
2 : Statistics :: Grounding = 0.144239s, Solving = 0.003977s, Total = 0.148216s, Memory = (RSS = 1161.429688Mb, VMS = 1152.652344Mb), Step range = [73-73]
3 : Statistics :: Grounding = 0.185853s, Solving = 0.009121s, Total = 0.194974s, Memory = (RSS = 1161.867188Mb, VMS = 1153.152344Mb), Step range = [74-74]

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.604004s due to: Stop condition reached.

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[09-02-2022_23-55-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[09-02-2022_23-55-45] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 4, 10: 5, 11: 6, 12: 7, 13: 8, 14: 8, 15: 9, 16: 9, 17: 10, 18: 11, 19: 11, 20: 12, 21: 13, 22: 13, 23: 13, 24: 13, 25: 13, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 19, 33: 19, 34: 20, 35: 21, 36: 22, 37: 23, 38: 23, 39: 24, 40: 25, 41: 25, 42: 26, 43: 27, 44: 28, 45: 28, 46: 28, 47: 29, 48: 30, 49: 31, 50: 31, 51: 32, 52: 32, 53: 33, 54: 34, 55: 35, 56: 35, 57: 36, 58: 36, 59: 36, 60: 37, 61: 38, 62: 38, 63: 38, 64: 38, 65: 38, 66: 39, 67: 40, 68: 40, 69: 41, 70: 41, 71: 41}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 14, 9: 16, 10: 17, 11: 19, 12: 20, 13: 25, 14: 27, 15: 28, 16: 29, 17: 30, 18: 31, 19: 33, 20: 34, 21: 35, 22: 36, 23: 38, 24: 39, 25: 41, 26: 42, 27: 43, 28: 46, 29: 47, 30: 48, 31: 50, 32: 52, 33: 53, 34: 54, 35: 56, 36: 59, 37: 60, 38: 65, 39: 66, 40: 68, 41: 71}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11, 37: 12, 38: 12, 39: 13, 40: 13, 41: 13, 42: 14, 43: 14}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 36, 12: 38, 13: 41, 14: 43}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_23-55-45] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 4, 10: 5, 11: 6, 12: 7, 13: 8, 14: 8, 15: 9, 16: 9, 17: 10, 18: 11, 19: 11, 20: 12, 21: 13, 22: 13, 23: 13, 24: 13, 25: 13, 26: 14, 27: 14, 28: 15, 29: 16, 30: 17, 31: 18, 32: 19, 33: 19, 34: 20, 35: 21, 36: 22, 37: 23, 38: 23, 39: 24, 40: 25, 41: 25, 42: 26, 43: 27, 44: 28, 45: 28, 46: 28, 47: 29, 48: 30, 49: 31, 50: 31, 51: 32, 52: 32, 53: 33, 54: 34, 55: 35, 56: 35, 57: 36, 58: 36, 59: 36, 60: 37, 61: 38, 62: 38, 63: 38, 64: 38, 65: 38, 66: 39, 67: 40, 68: 40, 69: 41, 70: 41, 71: 41, 72: 42, 73: 42, 74: 43}
Sub-goal achievement steps: {1: 2, 2: 3, 3: 8, 4: 9, 5: 10, 6: 11, 7: 12, 8: 14, 9: 16, 10: 17, 11: 19, 12: 20, 13: 25, 14: 27, 15: 28, 16: 29, 17: 30, 18: 31, 19: 33, 20: 34, 21: 35, 22: 36, 23: 38, 24: 39, 25: 41, 26: 42, 27: 43, 28: 46, 29: 47, 30: 48, 31: 50, 32: 52, 33: 53, 34: 54, 35: 56, 36: 59, 37: 60, 38: 65, 39: 66, 40: 68, 41: 71, 42: 73, 43: 74}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 17: 3, 18: 3, 19: 4, 20: 4, 21: 5, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11, 37: 12, 38: 12, 39: 13, 40: 13, 41: 13, 42: 14, 43: 14}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 18, 4: 20, 5: 21, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 36, 12: 38, 13: 41, 14: 43}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[09-02-2022_23-55-45] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 43, Last requested goal index = 43, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[09-02-2022_23-55-45] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.579153s, Solving = 0.024850s, Total = 0.604004s, Memory = (RSS = 1161.867188Mb, VMS = 1153.152344Mb), Step range = [71-74]), Calls = 3
Model :: Total atoms = 5463, Cost = (5, 0, -2), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[09-02-2022_23-55-45] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 3 :: Actions = 5                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 4:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 8:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 10:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 11:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 12:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 13:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 14:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 15:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 16:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
        talos : grasp(manipulator_end_2,(block,6))
Step 17:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 21:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 22:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 23:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 24:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 25:
    Current Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 13] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,5))
Step 26:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 27:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 28:
    Current Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 15] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 29:
    Current Sub-goals:
        [Index = 16] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 16] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 17] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 31:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 32:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 33:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 34:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,6),puzzle_room_table_right)
Step 35:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,6))
Step 36:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 37:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 38:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 39:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 40:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 41:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 42:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 43:
    Current Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 27] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 44:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 45:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 46:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 28] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,3)))
        talos : configure(manipulator_limb_1,extended)
Step 47:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 29] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
        [Index = 29] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,3))
        talos : put(manipulator_end_1,(block,5),(block,6))
Step 48:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 30] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 30] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_end_2,(block,3),puzzle_room_table_left)
        talos : release(manipulator_end_1,(block,5))
Step 49:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 50:
    Current Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 31] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
        [Index = 31] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
        talos : release(manipulator_end_2,(block,3))
Step 51:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,1)))
Step 52:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
        [Index = 32] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,1))
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 53:
    Current Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
        [Index = 33] talos : lift(manipulator_arm_2,(block,1)) -> on((block,1)) = nothing
        [Index = 33] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
        [Index = 33] talos : lift(manipulator_arm_2,(block,1)) -> on((block,1)) = nothing
        [Index = 33] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
        talos : lift(manipulator_end_2,(block,1))
        talos : release(manipulator_end_1,(block,2))
Step 54:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 55:
    Current Sub-goals:
        [Index = 35] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 56:
    Current Sub-goals:
        [Index = 35] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 35] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 57:
    Current Sub-goals:
        [Index = 36] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 58:
    Current Sub-goals:
        [Index = 36] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 59:
    Current Sub-goals:
        [Index = 36] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 36] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 60:
    Current Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 61:
    Current Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 62:
    Current Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 63:
    Current Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 64:
    Current Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
Step 65:
    Current Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))
Step 66:
    Current Sub-goals:
        [Index = 39] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 39] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 67:
    Current Sub-goals:
        [Index = 40] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 68:
    Current Sub-goals:
        [Index = 40] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 40] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 69:
    Current Sub-goals:
        [Index = 41] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 70:
    Current Sub-goals:
        [Index = 41] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 71:
    Current Sub-goals:
        [Index = 41] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 41] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 72:
    Current Sub-goals:
        [Index = 42] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 42] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 73:
    Current Sub-goals:
        [Index = 42] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 42] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 42] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 42] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 74:
    Current Sub-goals:
        [Index = 43] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 43] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 43] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
        [Index = 43] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_end_1,(block,4),(block,5))
        talos : put(manipulator_end_2,(block,1),(block,2))

[09-02-2022_23-55-45] DEBUG :: ASH Planner Main #1 >> Monolevel problem 31 at level 1 solved.

[09-02-2022_23-55-45] DEBUG :: ASH Planner Main #1 >> Online planning increment 31 finished.

[09-02-2022_23-55-45] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=74, step_range=range(0, 75)

[09-02-2022_23-55-45] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 14, Total actions = 21, Produced sub-goal stages = 21
Level [2]: Length = 43, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 74, Total actions = 87, Produced sub-goal stages = 0

[09-02-2022_23-55-45] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=43, step_range=range(0, 44)

[09-02-2022_23-55-45] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 14, Total actions = 21, Produced sub-goal stages = 21
Level [2]: Length = 43, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 74, Total actions = 87, Produced sub-goal stages = 0

[09-02-2022_23-55-45] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=14, step_range=range(0, 15)

[09-02-2022_23-55-45] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 14, Total actions = 21, Produced sub-goal stages = 21
Level [2]: Length = 43, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 74, Total actions = 87, Produced sub-goal stages = 0

[09-02-2022_23-55-45] DEBUG :: ASH Planner Main #1 >> Hierarchical plan generated successfully :: Ground Plan Quality >> Length = 74, Actions = 87

[09-02-2022_23-55-45] DEBUG :: ASH Planner Main #1 >> Hierarchical planning summary: (Execution latency = 3.8975776000002043, Average ground wait time = 0.7622060870967069, Absolution time = 22.452086399998734)

     ========================================================================================================================================================================================================     
     |        Lvl = 3 (classic), LE =  14, AC =  21, CF = 0.7, GT =   1.20s, ST =   0.15s, OT = 0.00s, TT =   1.35s, EF = (LE = 1.0, AC = 1.0), ED = (LE = 0.0, AC = 0.0), EB = (LE = 0.0, AC = 0.0)        |     
     |        Lvl = 2 (com-ref), LE =  43, AC =  55, CF = 0.8, GT =   4.87s, ST =   1.40s, OT = 0.00s, TT =   6.28s, EF = (LE = 3.1, AC = 2.6), ED = (LE = 2.8, AC = 2.6), EB = (LE = 0.9, AC = 0.9)        |     
     |        Lvl = 1 (com-ref), LE =  74, AC =  87, CF = 0.9, GT =  14.15s, ST =   0.68s, OT = 0.00s, TT =  14.83s, EF = (LE = 1.7, AC = 1.6), ED = (LE = 1.1, AC = 1.1), EB = (LE = 0.6, AC = 0.7)        |     
     ========================================================================================================================================================================================================     

[09-02-2022_23-55-45] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=74, step_range=range(0, 75)

[09-02-2022_23-55-45] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 14, Total actions = 21, Produced sub-goal stages = 21
Level [2]: Length = 43, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 74, Total actions = 87, Produced sub-goal stages = 0

[09-02-2022_23-55-45] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=43, step_range=range(0, 44)

[09-02-2022_23-55-45] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 14, Total actions = 21, Produced sub-goal stages = 21
Level [2]: Length = 43, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 74, Total actions = 87, Produced sub-goal stages = 0

[09-02-2022_23-55-45] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=14, step_range=range(0, 15)

[09-02-2022_23-55-45] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 14, Total actions = 21, Produced sub-goal stages = 21
Level [2]: Length = 43, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 74, Total actions = 87, Produced sub-goal stages = 0

[09-02-2022_23-55-45] DEBUG :: Experiment >> 

      ================================================      
           Experimental run 50 : Time 31.134921s            
      ================================================      

[09-02-2022_23-55-45] INFO :: Experiment >> 

  ################################################################################################  
        Completed 50 experimental runs : Real time 1607.083653s, Proccess time 1644.984375s         
  ################################################################################################  

[09-02-2022_23-55-45] DEBUG :: Experiment >> Refinement spread at run=0, level=2:
Root Mean Squared Errors: rmse_mchild=6.029053806022829, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.941537046091827
Mean Absolute Errors: mae_mchild=5.035714285714286, mae_div_indices=0.5714285714285717, mae_div_steps=2.642857142857143

[09-02-2022_23-55-45] DEBUG :: Experiment >> Refinement spread at run=0, level=1:
Root Mean Squared Errors: rmse_mchild=2.7309534957382136, rmse_div_indices=2.308818997082777, rmse_div_steps=2.533445632768454
Mean Absolute Errors: mae_mchild=2.1758024691358004, mae_div_indices=1.7862903225806448, mae_div_steps=1.6461693548387095

[09-02-2022_23-55-45] DEBUG :: Experiment >> Refinement spread at run=1, level=2:
Root Mean Squared Errors: rmse_mchild=5.7589770208371736, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.726247527328349
Mean Absolute Errors: mae_mchild=4.82142857142857, mae_div_indices=0.5714285714285717, mae_div_steps=2.4999999999999996

[09-02-2022_23-55-45] DEBUG :: Experiment >> Refinement spread at run=1, level=1:
Root Mean Squared Errors: rmse_mchild=2.1948117198675434, rmse_div_indices=2.0500295041149847, rmse_div_steps=2.4760953913564743
Mean Absolute Errors: mae_mchild=1.722552731206057, mae_div_indices=1.6381048387096762, mae_div_steps=1.8608870967741935

[09-02-2022_23-55-45] DEBUG :: Experiment >> Refinement spread at run=2, level=2:
Root Mean Squared Errors: rmse_mchild=5.922328899329784, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.941537046091827
Mean Absolute Errors: mae_mchild=4.892857142857143, mae_div_indices=0.5714285714285717, mae_div_steps=2.642857142857143

[09-02-2022_23-55-45] DEBUG :: Experiment >> Refinement spread at run=2, level=1:
Root Mean Squared Errors: rmse_mchild=2.7108985951923086, rmse_div_indices=2.308818997082777, rmse_div_steps=2.5817286032124223
Mean Absolute Errors: mae_mchild=2.153580246913578, mae_div_indices=1.7862903225806448, mae_div_steps=1.6774193548387095

[09-02-2022_23-55-45] DEBUG :: Experiment >> Refinement spread at run=3, level=2:
Root Mean Squared Errors: rmse_mchild=5.663389408458218, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.726247527328349
Mean Absolute Errors: mae_mchild=4.678571428571428, mae_div_indices=0.5714285714285717, mae_div_steps=2.4999999999999996

[09-02-2022_23-55-45] DEBUG :: Experiment >> Refinement spread at run=3, level=1:
Root Mean Squared Errors: rmse_mchild=2.1566554640687676, rmse_div_indices=2.0500295041149847, rmse_div_steps=2.4933378974715277
Mean Absolute Errors: mae_mchild=1.6992969172525685, mae_div_indices=1.6381048387096762, mae_div_steps=1.8921370967741935

[09-02-2022_23-55-45] DEBUG :: Experiment >> Refinement spread at run=4, level=2:
Root Mean Squared Errors: rmse_mchild=5.7589770208371736, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.726247527328349
Mean Absolute Errors: mae_mchild=4.82142857142857, mae_div_indices=0.5714285714285717, mae_div_steps=2.4999999999999996

[09-02-2022_23-55-45] DEBUG :: Experiment >> Refinement spread at run=4, level=1:
Root Mean Squared Errors: rmse_mchild=2.1948117198675434, rmse_div_indices=2.0500295041149847, rmse_div_steps=2.4760953913564743
Mean Absolute Errors: mae_mchild=1.722552731206057, mae_div_indices=1.6381048387096762, mae_div_steps=1.8608870967741935

[09-02-2022_23-55-46] DEBUG :: Experiment >> Refinement spread at run=5, level=2:
Root Mean Squared Errors: rmse_mchild=5.922328899329784, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.941537046091827
Mean Absolute Errors: mae_mchild=4.892857142857143, mae_div_indices=0.5714285714285717, mae_div_steps=2.642857142857143

[09-02-2022_23-55-46] DEBUG :: Experiment >> Refinement spread at run=5, level=1:
Root Mean Squared Errors: rmse_mchild=2.7108985951923086, rmse_div_indices=2.308818997082777, rmse_div_steps=2.5817286032124223
Mean Absolute Errors: mae_mchild=2.153580246913578, mae_div_indices=1.7862903225806448, mae_div_steps=1.6774193548387095

[09-02-2022_23-55-46] DEBUG :: Experiment >> Refinement spread at run=6, level=2:
Root Mean Squared Errors: rmse_mchild=6.029053806022829, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.941537046091827
Mean Absolute Errors: mae_mchild=5.035714285714286, mae_div_indices=0.5714285714285717, mae_div_steps=2.642857142857143

[09-02-2022_23-55-46] DEBUG :: Experiment >> Refinement spread at run=6, level=1:
Root Mean Squared Errors: rmse_mchild=2.7309534957382136, rmse_div_indices=2.308818997082777, rmse_div_steps=2.533445632768454
Mean Absolute Errors: mae_mchild=2.1758024691358004, mae_div_indices=1.7862903225806448, mae_div_steps=1.6461693548387095

[09-02-2022_23-55-46] DEBUG :: Experiment >> Refinement spread at run=7, level=2:
Root Mean Squared Errors: rmse_mchild=5.7589770208371736, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.726247527328349
Mean Absolute Errors: mae_mchild=4.82142857142857, mae_div_indices=0.5714285714285717, mae_div_steps=2.4999999999999996

[09-02-2022_23-55-46] DEBUG :: Experiment >> Refinement spread at run=7, level=1:
Root Mean Squared Errors: rmse_mchild=2.1948117198675434, rmse_div_indices=2.0500295041149847, rmse_div_steps=2.4760953913564743
Mean Absolute Errors: mae_mchild=1.722552731206057, mae_div_indices=1.6381048387096762, mae_div_steps=1.8608870967741935

[09-02-2022_23-55-46] DEBUG :: Experiment >> Refinement spread at run=8, level=2:
Root Mean Squared Errors: rmse_mchild=5.698415461820083, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.726247527328349
Mean Absolute Errors: mae_mchild=4.749999999999999, mae_div_indices=0.5714285714285717, mae_div_steps=2.4999999999999996

[09-02-2022_23-55-46] DEBUG :: Experiment >> Refinement spread at run=8, level=1:
Root Mean Squared Errors: rmse_mchild=1.995668646783714, rmse_div_indices=2.0500295041149847, rmse_div_steps=2.3569988435268905
Mean Absolute Errors: mae_mchild=1.6484586262844774, mae_div_indices=1.6381048387096762, mae_div_steps=1.6965725806451617

[09-02-2022_23-55-46] DEBUG :: Experiment >> Refinement spread at run=9, level=2:
Root Mean Squared Errors: rmse_mchild=5.922328899329784, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.941537046091827
Mean Absolute Errors: mae_mchild=4.892857142857143, mae_div_indices=0.5714285714285717, mae_div_steps=2.642857142857143

[09-02-2022_23-55-46] DEBUG :: Experiment >> Refinement spread at run=9, level=1:
Root Mean Squared Errors: rmse_mchild=2.7204453762697542, rmse_div_indices=2.308818997082777, rmse_div_steps=2.5817286032124223
Mean Absolute Errors: mae_mchild=2.1758024691358004, mae_div_indices=1.7862903225806448, mae_div_steps=1.6774193548387095

[09-02-2022_23-55-47] DEBUG :: Experiment >> Refinement spread at run=10, level=2:
Root Mean Squared Errors: rmse_mchild=5.922328899329784, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.941537046091827
Mean Absolute Errors: mae_mchild=4.892857142857143, mae_div_indices=0.5714285714285717, mae_div_steps=2.642857142857143

[09-02-2022_23-55-47] DEBUG :: Experiment >> Refinement spread at run=10, level=1:
Root Mean Squared Errors: rmse_mchild=2.7108985951923086, rmse_div_indices=2.308818997082777, rmse_div_steps=2.5817286032124223
Mean Absolute Errors: mae_mchild=2.153580246913578, mae_div_indices=1.7862903225806448, mae_div_steps=1.6774193548387095

[09-02-2022_23-55-47] DEBUG :: Experiment >> Refinement spread at run=11, level=2:
Root Mean Squared Errors: rmse_mchild=5.922328899329784, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.941537046091827
Mean Absolute Errors: mae_mchild=4.892857142857143, mae_div_indices=0.5714285714285717, mae_div_steps=2.642857142857143

[09-02-2022_23-55-47] DEBUG :: Experiment >> Refinement spread at run=11, level=1:
Root Mean Squared Errors: rmse_mchild=2.7108985951923086, rmse_div_indices=2.308818997082777, rmse_div_steps=2.5817286032124223
Mean Absolute Errors: mae_mchild=2.153580246913578, mae_div_indices=1.7862903225806448, mae_div_steps=1.6774193548387095

[09-02-2022_23-55-47] DEBUG :: Experiment >> Refinement spread at run=12, level=2:
Root Mean Squared Errors: rmse_mchild=5.962681563572838, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.941537046091827
Mean Absolute Errors: mae_mchild=4.964285714285714, mae_div_indices=0.5714285714285717, mae_div_steps=2.642857142857143

[09-02-2022_23-55-47] DEBUG :: Experiment >> Refinement spread at run=12, level=1:
Root Mean Squared Errors: rmse_mchild=2.7108985951923086, rmse_div_indices=2.308818997082777, rmse_div_steps=2.5817286032124223
Mean Absolute Errors: mae_mchild=2.153580246913578, mae_div_indices=1.7862903225806448, mae_div_steps=1.6774193548387095

[09-02-2022_23-55-47] DEBUG :: Experiment >> Refinement spread at run=13, level=2:
Root Mean Squared Errors: rmse_mchild=5.922328899329784, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.941537046091827
Mean Absolute Errors: mae_mchild=4.892857142857143, mae_div_indices=0.5714285714285717, mae_div_steps=2.642857142857143

[09-02-2022_23-55-47] DEBUG :: Experiment >> Refinement spread at run=13, level=1:
Root Mean Squared Errors: rmse_mchild=2.7108985951923086, rmse_div_indices=2.308818997082777, rmse_div_steps=2.5817286032124223
Mean Absolute Errors: mae_mchild=2.153580246913578, mae_div_indices=1.7862903225806448, mae_div_steps=1.6774193548387095

[09-02-2022_23-55-47] DEBUG :: Experiment >> Refinement spread at run=14, level=2:
Root Mean Squared Errors: rmse_mchild=6.029053806022829, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.941537046091827
Mean Absolute Errors: mae_mchild=5.035714285714286, mae_div_indices=0.5714285714285717, mae_div_steps=2.642857142857143

[09-02-2022_23-55-47] DEBUG :: Experiment >> Refinement spread at run=14, level=1:
Root Mean Squared Errors: rmse_mchild=2.7404304128615675, rmse_div_indices=2.308818997082777, rmse_div_steps=2.533445632768454
Mean Absolute Errors: mae_mchild=2.1980246913580226, mae_div_indices=1.7862903225806448, mae_div_steps=1.6461693548387095

[09-02-2022_23-55-48] DEBUG :: Experiment >> Refinement spread at run=15, level=2:
Root Mean Squared Errors: rmse_mchild=6.029053806022829, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.941537046091827
Mean Absolute Errors: mae_mchild=5.035714285714286, mae_div_indices=0.5714285714285717, mae_div_steps=2.642857142857143

[09-02-2022_23-55-48] DEBUG :: Experiment >> Refinement spread at run=15, level=1:
Root Mean Squared Errors: rmse_mchild=2.7309534957382136, rmse_div_indices=2.308818997082777, rmse_div_steps=2.533445632768454
Mean Absolute Errors: mae_mchild=2.1758024691358004, mae_div_indices=1.7862903225806448, mae_div_steps=1.6461693548387095

[09-02-2022_23-55-48] DEBUG :: Experiment >> Refinement spread at run=16, level=2:
Root Mean Squared Errors: rmse_mchild=5.698415461820083, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.726247527328349
Mean Absolute Errors: mae_mchild=4.749999999999999, mae_div_indices=0.5714285714285717, mae_div_steps=2.4999999999999996

[09-02-2022_23-55-48] DEBUG :: Experiment >> Refinement spread at run=16, level=1:
Root Mean Squared Errors: rmse_mchild=2.1566554640687676, rmse_div_indices=2.0500295041149847, rmse_div_steps=2.4933378974715277
Mean Absolute Errors: mae_mchild=1.6992969172525685, mae_div_indices=1.6381048387096762, mae_div_steps=1.8921370967741935

[09-02-2022_23-55-48] DEBUG :: Experiment >> Refinement spread at run=17, level=2:
Root Mean Squared Errors: rmse_mchild=5.698415461820083, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.726247527328349
Mean Absolute Errors: mae_mchild=4.749999999999999, mae_div_indices=0.5714285714285717, mae_div_steps=2.4999999999999996

[09-02-2022_23-55-48] DEBUG :: Experiment >> Refinement spread at run=17, level=1:
Root Mean Squared Errors: rmse_mchild=2.1566554640687676, rmse_div_indices=2.0500295041149847, rmse_div_steps=2.4933378974715277
Mean Absolute Errors: mae_mchild=1.6992969172525685, mae_div_indices=1.6381048387096762, mae_div_steps=1.8921370967741935

[09-02-2022_23-55-48] DEBUG :: Experiment >> Refinement spread at run=18, level=2:
Root Mean Squared Errors: rmse_mchild=6.029053806022829, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.941537046091827
Mean Absolute Errors: mae_mchild=5.035714285714286, mae_div_indices=0.5714285714285717, mae_div_steps=2.642857142857143

[09-02-2022_23-55-48] DEBUG :: Experiment >> Refinement spread at run=18, level=1:
Root Mean Squared Errors: rmse_mchild=2.7309534957382136, rmse_div_indices=2.308818997082777, rmse_div_steps=2.533445632768454
Mean Absolute Errors: mae_mchild=2.1758024691358004, mae_div_indices=1.7862903225806448, mae_div_steps=1.6461693548387095

[09-02-2022_23-55-48] DEBUG :: Experiment >> Refinement spread at run=19, level=2:
Root Mean Squared Errors: rmse_mchild=6.029053806022829, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.941537046091827
Mean Absolute Errors: mae_mchild=5.035714285714286, mae_div_indices=0.5714285714285717, mae_div_steps=2.642857142857143

[09-02-2022_23-55-48] DEBUG :: Experiment >> Refinement spread at run=19, level=1:
Root Mean Squared Errors: rmse_mchild=2.7309534957382136, rmse_div_indices=2.308818997082777, rmse_div_steps=2.533445632768454
Mean Absolute Errors: mae_mchild=2.1758024691358004, mae_div_indices=1.7862903225806448, mae_div_steps=1.6461693548387095

[09-02-2022_23-55-49] DEBUG :: Experiment >> Refinement spread at run=20, level=2:
Root Mean Squared Errors: rmse_mchild=5.698415461820083, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.726247527328349
Mean Absolute Errors: mae_mchild=4.749999999999999, mae_div_indices=0.5714285714285717, mae_div_steps=2.4999999999999996

[09-02-2022_23-55-49] DEBUG :: Experiment >> Refinement spread at run=20, level=1:
Root Mean Squared Errors: rmse_mchild=2.1566554640687676, rmse_div_indices=2.0500295041149847, rmse_div_steps=2.4933378974715277
Mean Absolute Errors: mae_mchild=1.6992969172525685, mae_div_indices=1.6381048387096762, mae_div_steps=1.8921370967741935

[09-02-2022_23-55-49] DEBUG :: Experiment >> Refinement spread at run=21, level=2:
Root Mean Squared Errors: rmse_mchild=5.962681563572838, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.941537046091827
Mean Absolute Errors: mae_mchild=4.964285714285714, mae_div_indices=0.5714285714285717, mae_div_steps=2.642857142857143

[09-02-2022_23-55-49] DEBUG :: Experiment >> Refinement spread at run=21, level=1:
Root Mean Squared Errors: rmse_mchild=2.7108985951923086, rmse_div_indices=2.308818997082777, rmse_div_steps=2.5817286032124223
Mean Absolute Errors: mae_mchild=2.153580246913578, mae_div_indices=1.7862903225806448, mae_div_steps=1.6774193548387095

[09-02-2022_23-55-49] DEBUG :: Experiment >> Refinement spread at run=22, level=2:
Root Mean Squared Errors: rmse_mchild=5.962681563572838, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.941537046091827
Mean Absolute Errors: mae_mchild=4.964285714285714, mae_div_indices=0.5714285714285717, mae_div_steps=2.642857142857143

[09-02-2022_23-55-49] DEBUG :: Experiment >> Refinement spread at run=22, level=1:
Root Mean Squared Errors: rmse_mchild=2.7204453762697542, rmse_div_indices=2.308818997082777, rmse_div_steps=2.5817286032124223
Mean Absolute Errors: mae_mchild=2.1758024691358004, mae_div_indices=1.7862903225806448, mae_div_steps=1.6774193548387095

[09-02-2022_23-55-49] DEBUG :: Experiment >> Refinement spread at run=23, level=2:
Root Mean Squared Errors: rmse_mchild=5.698415461820083, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.726247527328349
Mean Absolute Errors: mae_mchild=4.749999999999999, mae_div_indices=0.5714285714285717, mae_div_steps=2.4999999999999996

[09-02-2022_23-55-49] DEBUG :: Experiment >> Refinement spread at run=23, level=1:
Root Mean Squared Errors: rmse_mchild=2.1566554640687676, rmse_div_indices=2.0500295041149847, rmse_div_steps=2.4933378974715277
Mean Absolute Errors: mae_mchild=1.6992969172525685, mae_div_indices=1.6381048387096762, mae_div_steps=1.8921370967741935

[09-02-2022_23-55-49] DEBUG :: Experiment >> Refinement spread at run=24, level=2:
Root Mean Squared Errors: rmse_mchild=5.922328899329784, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.941537046091827
Mean Absolute Errors: mae_mchild=4.892857142857143, mae_div_indices=0.5714285714285717, mae_div_steps=2.642857142857143

[09-02-2022_23-55-49] DEBUG :: Experiment >> Refinement spread at run=24, level=1:
Root Mean Squared Errors: rmse_mchild=2.7108985951923086, rmse_div_indices=2.308818997082777, rmse_div_steps=2.5817286032124223
Mean Absolute Errors: mae_mchild=2.153580246913578, mae_div_indices=1.7862903225806448, mae_div_steps=1.6774193548387095

[09-02-2022_23-55-50] DEBUG :: Experiment >> Refinement spread at run=25, level=2:
Root Mean Squared Errors: rmse_mchild=5.922328899329784, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.941537046091827
Mean Absolute Errors: mae_mchild=4.892857142857143, mae_div_indices=0.5714285714285717, mae_div_steps=2.642857142857143

[09-02-2022_23-55-50] DEBUG :: Experiment >> Refinement spread at run=25, level=1:
Root Mean Squared Errors: rmse_mchild=2.7108985951923086, rmse_div_indices=2.308818997082777, rmse_div_steps=2.5817286032124223
Mean Absolute Errors: mae_mchild=2.153580246913578, mae_div_indices=1.7862903225806448, mae_div_steps=1.6774193548387095

[09-02-2022_23-55-50] DEBUG :: Experiment >> Refinement spread at run=26, level=2:
Root Mean Squared Errors: rmse_mchild=5.922328899329784, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.941537046091827
Mean Absolute Errors: mae_mchild=4.892857142857143, mae_div_indices=0.5714285714285717, mae_div_steps=2.642857142857143

[09-02-2022_23-55-50] DEBUG :: Experiment >> Refinement spread at run=26, level=1:
Root Mean Squared Errors: rmse_mchild=2.7108985951923086, rmse_div_indices=2.308818997082777, rmse_div_steps=2.5817286032124223
Mean Absolute Errors: mae_mchild=2.153580246913578, mae_div_indices=1.7862903225806448, mae_div_steps=1.6774193548387095

[09-02-2022_23-55-50] DEBUG :: Experiment >> Refinement spread at run=27, level=2:
Root Mean Squared Errors: rmse_mchild=5.962681563572838, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.941537046091827
Mean Absolute Errors: mae_mchild=4.964285714285714, mae_div_indices=0.5714285714285717, mae_div_steps=2.642857142857143

[09-02-2022_23-55-50] DEBUG :: Experiment >> Refinement spread at run=27, level=1:
Root Mean Squared Errors: rmse_mchild=2.7108985951923086, rmse_div_indices=2.308818997082777, rmse_div_steps=2.5817286032124223
Mean Absolute Errors: mae_mchild=2.153580246913578, mae_div_indices=1.7862903225806448, mae_div_steps=1.6774193548387095

[09-02-2022_23-55-50] DEBUG :: Experiment >> Refinement spread at run=28, level=2:
Root Mean Squared Errors: rmse_mchild=5.922328899329784, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.941537046091827
Mean Absolute Errors: mae_mchild=4.892857142857143, mae_div_indices=0.5714285714285717, mae_div_steps=2.642857142857143

[09-02-2022_23-55-50] DEBUG :: Experiment >> Refinement spread at run=28, level=1:
Root Mean Squared Errors: rmse_mchild=2.7108985951923086, rmse_div_indices=2.308818997082777, rmse_div_steps=2.5817286032124223
Mean Absolute Errors: mae_mchild=2.153580246913578, mae_div_indices=1.7862903225806448, mae_div_steps=1.6774193548387095

[09-02-2022_23-55-50] DEBUG :: Experiment >> Refinement spread at run=29, level=2:
Root Mean Squared Errors: rmse_mchild=5.962681563572838, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.941537046091827
Mean Absolute Errors: mae_mchild=4.964285714285714, mae_div_indices=0.5714285714285717, mae_div_steps=2.642857142857143

[09-02-2022_23-55-50] DEBUG :: Experiment >> Refinement spread at run=29, level=1:
Root Mean Squared Errors: rmse_mchild=2.7108985951923086, rmse_div_indices=2.308818997082777, rmse_div_steps=2.5817286032124223
Mean Absolute Errors: mae_mchild=2.153580246913578, mae_div_indices=1.7862903225806448, mae_div_steps=1.6774193548387095

[09-02-2022_23-55-51] DEBUG :: Experiment >> Refinement spread at run=30, level=2:
Root Mean Squared Errors: rmse_mchild=5.663389408458218, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.726247527328349
Mean Absolute Errors: mae_mchild=4.678571428571428, mae_div_indices=0.5714285714285717, mae_div_steps=2.4999999999999996

[09-02-2022_23-55-51] DEBUG :: Experiment >> Refinement spread at run=30, level=1:
Root Mean Squared Errors: rmse_mchild=1.995668646783714, rmse_div_indices=2.0500295041149847, rmse_div_steps=2.3569988435268905
Mean Absolute Errors: mae_mchild=1.6484586262844774, mae_div_indices=1.6381048387096762, mae_div_steps=1.6965725806451617

[09-02-2022_23-55-51] DEBUG :: Experiment >> Refinement spread at run=31, level=2:
Root Mean Squared Errors: rmse_mchild=5.922328899329784, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.941537046091827
Mean Absolute Errors: mae_mchild=4.892857142857143, mae_div_indices=0.5714285714285717, mae_div_steps=2.642857142857143

[09-02-2022_23-55-51] DEBUG :: Experiment >> Refinement spread at run=31, level=1:
Root Mean Squared Errors: rmse_mchild=2.7204453762697542, rmse_div_indices=2.308818997082777, rmse_div_steps=2.5817286032124223
Mean Absolute Errors: mae_mchild=2.1758024691358004, mae_div_indices=1.7862903225806448, mae_div_steps=1.6774193548387095

[09-02-2022_23-55-51] DEBUG :: Experiment >> Refinement spread at run=32, level=2:
Root Mean Squared Errors: rmse_mchild=5.922328899329784, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.941537046091827
Mean Absolute Errors: mae_mchild=4.892857142857143, mae_div_indices=0.5714285714285717, mae_div_steps=2.642857142857143

[09-02-2022_23-55-51] DEBUG :: Experiment >> Refinement spread at run=32, level=1:
Root Mean Squared Errors: rmse_mchild=2.7108985951923086, rmse_div_indices=2.308818997082777, rmse_div_steps=2.5817286032124223
Mean Absolute Errors: mae_mchild=2.153580246913578, mae_div_indices=1.7862903225806448, mae_div_steps=1.6774193548387095

[09-02-2022_23-55-51] DEBUG :: Experiment >> Refinement spread at run=33, level=2:
Root Mean Squared Errors: rmse_mchild=5.922328899329784, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.941537046091827
Mean Absolute Errors: mae_mchild=4.892857142857143, mae_div_indices=0.5714285714285717, mae_div_steps=2.642857142857143

[09-02-2022_23-55-51] DEBUG :: Experiment >> Refinement spread at run=33, level=1:
Root Mean Squared Errors: rmse_mchild=2.7108985951923086, rmse_div_indices=2.308818997082777, rmse_div_steps=2.5817286032124223
Mean Absolute Errors: mae_mchild=2.153580246913578, mae_div_indices=1.7862903225806448, mae_div_steps=1.6774193548387095

[09-02-2022_23-55-51] DEBUG :: Experiment >> Refinement spread at run=34, level=2:
Root Mean Squared Errors: rmse_mchild=5.663389408458218, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.726247527328349
Mean Absolute Errors: mae_mchild=4.678571428571428, mae_div_indices=0.5714285714285717, mae_div_steps=2.4999999999999996

[09-02-2022_23-55-51] DEBUG :: Experiment >> Refinement spread at run=34, level=1:
Root Mean Squared Errors: rmse_mchild=2.1566554640687676, rmse_div_indices=2.0500295041149847, rmse_div_steps=2.4933378974715277
Mean Absolute Errors: mae_mchild=1.6992969172525685, mae_div_indices=1.6381048387096762, mae_div_steps=1.8921370967741935

[09-02-2022_23-55-52] DEBUG :: Experiment >> Refinement spread at run=35, level=2:
Root Mean Squared Errors: rmse_mchild=5.922328899329784, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.941537046091827
Mean Absolute Errors: mae_mchild=4.892857142857143, mae_div_indices=0.5714285714285717, mae_div_steps=2.642857142857143

[09-02-2022_23-55-52] DEBUG :: Experiment >> Refinement spread at run=35, level=1:
Root Mean Squared Errors: rmse_mchild=2.7108985951923086, rmse_div_indices=2.308818997082777, rmse_div_steps=2.5817286032124223
Mean Absolute Errors: mae_mchild=2.153580246913578, mae_div_indices=1.7862903225806448, mae_div_steps=1.6774193548387095

[09-02-2022_23-55-52] DEBUG :: Experiment >> Refinement spread at run=36, level=2:
Root Mean Squared Errors: rmse_mchild=6.029053806022829, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.941537046091827
Mean Absolute Errors: mae_mchild=5.035714285714286, mae_div_indices=0.5714285714285717, mae_div_steps=2.642857142857143

[09-02-2022_23-55-52] DEBUG :: Experiment >> Refinement spread at run=36, level=1:
Root Mean Squared Errors: rmse_mchild=2.7309534957382136, rmse_div_indices=2.308818997082777, rmse_div_steps=2.533445632768454
Mean Absolute Errors: mae_mchild=2.1758024691358004, mae_div_indices=1.7862903225806448, mae_div_steps=1.6461693548387095

[09-02-2022_23-55-52] DEBUG :: Experiment >> Refinement spread at run=37, level=2:
Root Mean Squared Errors: rmse_mchild=5.922328899329784, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.941537046091827
Mean Absolute Errors: mae_mchild=4.892857142857143, mae_div_indices=0.5714285714285717, mae_div_steps=2.642857142857143

[09-02-2022_23-55-52] DEBUG :: Experiment >> Refinement spread at run=37, level=1:
Root Mean Squared Errors: rmse_mchild=2.7108985951923086, rmse_div_indices=2.308818997082777, rmse_div_steps=2.5817286032124223
Mean Absolute Errors: mae_mchild=2.153580246913578, mae_div_indices=1.7862903225806448, mae_div_steps=1.6774193548387095

[09-02-2022_23-55-52] DEBUG :: Experiment >> Refinement spread at run=38, level=2:
Root Mean Squared Errors: rmse_mchild=5.922328899329784, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.941537046091827
Mean Absolute Errors: mae_mchild=4.892857142857143, mae_div_indices=0.5714285714285717, mae_div_steps=2.642857142857143

[09-02-2022_23-55-52] DEBUG :: Experiment >> Refinement spread at run=38, level=1:
Root Mean Squared Errors: rmse_mchild=2.7108985951923086, rmse_div_indices=2.308818997082777, rmse_div_steps=2.5817286032124223
Mean Absolute Errors: mae_mchild=2.153580246913578, mae_div_indices=1.7862903225806448, mae_div_steps=1.6774193548387095

[09-02-2022_23-55-52] DEBUG :: Experiment >> Refinement spread at run=39, level=2:
Root Mean Squared Errors: rmse_mchild=5.922328899329784, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.941537046091827
Mean Absolute Errors: mae_mchild=4.892857142857143, mae_div_indices=0.5714285714285717, mae_div_steps=2.642857142857143

[09-02-2022_23-55-52] DEBUG :: Experiment >> Refinement spread at run=39, level=1:
Root Mean Squared Errors: rmse_mchild=2.7108985951923086, rmse_div_indices=2.308818997082777, rmse_div_steps=2.5817286032124223
Mean Absolute Errors: mae_mchild=2.153580246913578, mae_div_indices=1.7862903225806448, mae_div_steps=1.6774193548387095

[09-02-2022_23-55-53] DEBUG :: Experiment >> Refinement spread at run=40, level=2:
Root Mean Squared Errors: rmse_mchild=5.663389408458218, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.726247527328349
Mean Absolute Errors: mae_mchild=4.678571428571428, mae_div_indices=0.5714285714285717, mae_div_steps=2.4999999999999996

[09-02-2022_23-55-53] DEBUG :: Experiment >> Refinement spread at run=40, level=1:
Root Mean Squared Errors: rmse_mchild=2.1566554640687676, rmse_div_indices=2.0500295041149847, rmse_div_steps=2.4933378974715277
Mean Absolute Errors: mae_mchild=1.6992969172525685, mae_div_indices=1.6381048387096762, mae_div_steps=1.8921370967741935

[09-02-2022_23-55-53] DEBUG :: Experiment >> Refinement spread at run=41, level=2:
Root Mean Squared Errors: rmse_mchild=5.922328899329784, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.941537046091827
Mean Absolute Errors: mae_mchild=4.892857142857143, mae_div_indices=0.5714285714285717, mae_div_steps=2.642857142857143

[09-02-2022_23-55-53] DEBUG :: Experiment >> Refinement spread at run=41, level=1:
Root Mean Squared Errors: rmse_mchild=2.7204453762697542, rmse_div_indices=2.308818997082777, rmse_div_steps=2.5817286032124223
Mean Absolute Errors: mae_mchild=2.1758024691358004, mae_div_indices=1.7862903225806448, mae_div_steps=1.6774193548387095

[09-02-2022_23-55-53] DEBUG :: Experiment >> Refinement spread at run=42, level=2:
Root Mean Squared Errors: rmse_mchild=5.922328899329784, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.941537046091827
Mean Absolute Errors: mae_mchild=4.892857142857143, mae_div_indices=0.5714285714285717, mae_div_steps=2.642857142857143

[09-02-2022_23-55-53] DEBUG :: Experiment >> Refinement spread at run=42, level=1:
Root Mean Squared Errors: rmse_mchild=2.7108985951923086, rmse_div_indices=2.308818997082777, rmse_div_steps=2.5817286032124223
Mean Absolute Errors: mae_mchild=2.153580246913578, mae_div_indices=1.7862903225806448, mae_div_steps=1.6774193548387095

[09-02-2022_23-55-53] DEBUG :: Experiment >> Refinement spread at run=43, level=2:
Root Mean Squared Errors: rmse_mchild=5.922328899329784, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.941537046091827
Mean Absolute Errors: mae_mchild=4.892857142857143, mae_div_indices=0.5714285714285717, mae_div_steps=2.642857142857143

[09-02-2022_23-55-53] DEBUG :: Experiment >> Refinement spread at run=43, level=1:
Root Mean Squared Errors: rmse_mchild=2.7108985951923086, rmse_div_indices=2.308818997082777, rmse_div_steps=2.5817286032124223
Mean Absolute Errors: mae_mchild=2.153580246913578, mae_div_indices=1.7862903225806448, mae_div_steps=1.6774193548387095

[09-02-2022_23-55-53] DEBUG :: Experiment >> Refinement spread at run=44, level=2:
Root Mean Squared Errors: rmse_mchild=5.922328899329784, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.941537046091827
Mean Absolute Errors: mae_mchild=4.892857142857143, mae_div_indices=0.5714285714285717, mae_div_steps=2.642857142857143

[09-02-2022_23-55-53] DEBUG :: Experiment >> Refinement spread at run=44, level=1:
Root Mean Squared Errors: rmse_mchild=2.7108985951923086, rmse_div_indices=2.308818997082777, rmse_div_steps=2.5817286032124223
Mean Absolute Errors: mae_mchild=2.153580246913578, mae_div_indices=1.7862903225806448, mae_div_steps=1.6774193548387095

[09-02-2022_23-55-54] DEBUG :: Experiment >> Refinement spread at run=45, level=2:
Root Mean Squared Errors: rmse_mchild=5.663389408458218, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.726247527328349
Mean Absolute Errors: mae_mchild=4.678571428571428, mae_div_indices=0.5714285714285717, mae_div_steps=2.4999999999999996

[09-02-2022_23-55-54] DEBUG :: Experiment >> Refinement spread at run=45, level=1:
Root Mean Squared Errors: rmse_mchild=1.995668646783714, rmse_div_indices=2.0500295041149847, rmse_div_steps=2.3569988435268905
Mean Absolute Errors: mae_mchild=1.6484586262844774, mae_div_indices=1.6381048387096762, mae_div_steps=1.6965725806451617

[09-02-2022_23-55-54] DEBUG :: Experiment >> Refinement spread at run=46, level=2:
Root Mean Squared Errors: rmse_mchild=5.922328899329784, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.941537046091827
Mean Absolute Errors: mae_mchild=4.892857142857143, mae_div_indices=0.5714285714285717, mae_div_steps=2.642857142857143

[09-02-2022_23-55-54] DEBUG :: Experiment >> Refinement spread at run=46, level=1:
Root Mean Squared Errors: rmse_mchild=2.7108985951923086, rmse_div_indices=2.308818997082777, rmse_div_steps=2.5817286032124223
Mean Absolute Errors: mae_mchild=2.153580246913578, mae_div_indices=1.7862903225806448, mae_div_steps=1.6774193548387095

[09-02-2022_23-55-54] DEBUG :: Experiment >> Refinement spread at run=47, level=2:
Root Mean Squared Errors: rmse_mchild=5.962681563572838, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.941537046091827
Mean Absolute Errors: mae_mchild=4.964285714285714, mae_div_indices=0.5714285714285717, mae_div_steps=2.642857142857143

[09-02-2022_23-55-54] DEBUG :: Experiment >> Refinement spread at run=47, level=1:
Root Mean Squared Errors: rmse_mchild=2.7108985951923086, rmse_div_indices=2.308818997082777, rmse_div_steps=2.5817286032124223
Mean Absolute Errors: mae_mchild=2.153580246913578, mae_div_indices=1.7862903225806448, mae_div_steps=1.6774193548387095

[09-02-2022_23-55-54] DEBUG :: Experiment >> Refinement spread at run=48, level=2:
Root Mean Squared Errors: rmse_mchild=5.962681563572838, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.941537046091827
Mean Absolute Errors: mae_mchild=4.964285714285714, mae_div_indices=0.5714285714285717, mae_div_steps=2.642857142857143

[09-02-2022_23-55-54] DEBUG :: Experiment >> Refinement spread at run=48, level=1:
Root Mean Squared Errors: rmse_mchild=2.7204453762697542, rmse_div_indices=2.308818997082777, rmse_div_steps=2.5817286032124223
Mean Absolute Errors: mae_mchild=2.1758024691358004, mae_div_indices=1.7862903225806448, mae_div_steps=1.6774193548387095

[09-02-2022_23-55-54] DEBUG :: Experiment >> Refinement spread at run=49, level=2:
Root Mean Squared Errors: rmse_mchild=5.663389408458218, rmse_div_indices=0.7346308866924534, rmse_div_steps=3.726247527328349
Mean Absolute Errors: mae_mchild=4.678571428571428, mae_div_indices=0.5714285714285717, mae_div_steps=2.4999999999999996

[09-02-2022_23-55-54] DEBUG :: Experiment >> Refinement spread at run=49, level=1:
Root Mean Squared Errors: rmse_mchild=2.1566554640687676, rmse_div_indices=2.0500295041149847, rmse_div_steps=2.4933378974715277
Mean Absolute Errors: mae_mchild=1.6992969172525685, mae_div_indices=1.6381048387096762, mae_div_steps=1.8921370967741935

[09-02-2022_23-55-55] INFO :: Experiment >> 

          ========================================          
                    Experimental Results                    
          ========================================          

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
                     Concatenated Plans                     

 RU  AL  LE  AC       CF        GT       ST  OT        TT       LT        CT       WT         RSS         VMS  QL_SCORE  LT_SCORE  CT_SCORE  AW_SCORE  AME_SCORE  LT_GRADE  CT_GRADE  AW_GRADE  AME_GRADE    GRADE
  0   3  14  21 0.666667  1.206753 0.156780 0.0  1.363533 1.363533  1.363533 1.363533  234.199219  222.957031  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
  0   2  45  57 0.789474  5.138815 0.475001 0.0  5.613816 2.505230  6.977350 1.186447  240.992188  230.132812  0.736842       1.0  0.854442       1.0        1.0  0.736842  0.629589  0.736842   0.736842 0.736842
  0   1  82  95 0.863158 15.432441 0.903216 0.0 16.335657 2.927102 23.313007 0.789717  235.820312  224.003906  0.705263       1.0  0.604995       1.0        1.0  0.705263  0.426680  0.705263   0.705263 0.705263
  1   3  14  21 0.666667  1.203737 0.214041 0.0  1.417778 1.417778  1.417778 1.417778  235.906250  224.808594  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
  1   2  43  55 0.781818  4.883618 0.462962 0.0  5.346580 2.557602  6.764358 1.150983  238.730469  227.996094  0.763636       1.0  0.864345       1.0        1.0  0.763636  0.660045  0.763636   0.763636 0.763636
  1   1  74  87 0.850575 14.081022 0.898172 0.0 14.979194 2.982057 21.743552 0.741006  238.832031  226.757812  0.770115       1.0  0.616302       1.0        1.0  0.770115  0.474624  0.770115   0.770115 0.770115
  2   3  14  21 0.666667  1.204813 0.138178 0.0  1.342990 1.342990  1.342990 1.342990  241.664062  229.882812  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
  2   2  45  57 0.789474  5.122067 0.520302 0.0  5.642369 2.480263  6.985360 1.187963  258.417969  246.367188  0.736842       1.0  0.854084       1.0        1.0  0.736842  0.629325  0.736842   0.736842 0.736842
  2   1  82  95 0.863158 15.425540 1.026052 0.0 16.451592 2.970246 23.436952 0.796338  261.054688  249.175781  0.705263       1.0  0.604141       1.0        1.0  0.705263  0.426079  0.705263   0.705263 0.705263
  3   3  14  21 0.666667  1.202322 0.243684 0.0  1.446006 1.446006  1.446006 1.446006  264.312500  253.394531  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
  3   2  43  55 0.781818  4.884872 0.598211 0.0  5.483083 2.582231  6.929090 1.178678  277.250000  265.585938  0.763636       1.0  0.856623       1.0        1.0  0.763636  0.654148  0.763636   0.763636 0.763636
  3   1  74  87 0.850575 14.106126 0.947126 0.0 15.053252 3.000990 21.982341 0.747170  279.796875  268.093750  0.770115       1.0  0.614519       1.0        1.0  0.770115  0.473250  0.770115   0.770115 0.770115
  4   3  14  21 0.666667  1.205989 0.255006 0.0  1.460995 1.460995  1.460995 1.460995  283.542969  272.148438  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
  4   2  43  55 0.781818  4.902325 0.535266 0.0  5.437591 2.596151  6.898586 1.173780  295.367188  283.546875  0.763636       1.0  0.858019       1.0        1.0  0.763636  0.655215  0.763636   0.763636 0.763636
  4   1  74  87 0.850575 14.106009 1.025564 0.0 15.131573 3.018841 22.030159 0.752466  295.007812  283.222656  0.770115       1.0  0.614165       1.0        1.0  0.770115  0.472977  0.770115   0.770115 0.770115
  5   3  14  21 0.666667  1.204648 0.141924 0.0  1.346572 1.346572  1.346572 1.346572  298.328125  287.550781  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
  5   2  45  57 0.789474  5.143673 0.447778 0.0  5.591451 2.489339  6.938023 1.180221  316.332031  304.609375  0.736842       1.0  0.856216       1.0        1.0  0.736842  0.630896  0.736842   0.736842 0.736842
  5   1  82  95 0.863158 15.436784 0.996386 0.0 16.433170 2.910880 23.371194 0.800124  317.230469  305.480469  0.705263       1.0  0.604593       1.0        1.0  0.705263  0.426397  0.705263   0.705263 0.705263
  6   3  14  21 0.666667  1.204906 0.158540 0.0  1.363446 1.363446  1.363446 1.363446  323.046875  311.765625  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
  6   2  45  57 0.789474  5.133190 0.779092 0.0  5.912283 2.508936  7.275729 1.236356  336.371094  325.574219  0.736842       1.0  0.841701       1.0        1.0  0.736842  0.620200  0.736842   0.736842 0.736842
  6   1  82  95 0.863158 15.450525 0.875224 0.0 16.325749 2.932111 23.601478 0.804330  336.503906  325.707031  0.705263       1.0  0.603017       1.0        1.0  0.705263  0.425285  0.705263   0.705263 0.705263
  7   3  14  21 0.666667  1.204046 0.136626 0.0  1.340671 1.340671  1.340671 1.340671  341.015625  330.386719  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
  7   2  43  55 0.781818  4.892521 0.563272 0.0  5.455793 2.482551  6.796464 1.156448  351.949219  341.191406  0.763636       1.0  0.862804       1.0        1.0  0.763636  0.658869  0.763636   0.763636 0.763636
  7   1  74  87 0.850575 14.096612 1.001876 0.0 15.098488 2.904525 21.894952 0.744267  350.859375  341.988281  0.770115       1.0  0.615169       1.0        1.0  0.770115  0.473751  0.770115   0.770115 0.770115
  8   3  14  21 0.666667  1.205074 0.339313 0.0  1.544387 1.544387  1.544387 1.544387  357.652344  348.058594  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
  8   2  43  55 0.781818  4.877481 0.395754 0.0  5.273234 2.681267  6.817622 1.160385  371.078125  360.445312  0.763636       1.0  0.861799       1.0        1.0  0.763636  0.658101  0.763636   0.763636 0.763636
  8   1  78  91 0.857143 14.809642 0.706295 0.0 15.515937 3.105818 22.333559 0.765014  373.468750  362.703125  0.736264       1.0  0.611938       1.0        1.0  0.736264  0.450548  0.736264   0.736264 0.736264
  9   3  14  21 0.666667  1.205110 0.153914 0.0  1.359024 1.359024  1.359024 1.359024  376.898438  366.335938  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
  9   2  45  57 0.789474  5.146829 0.432088 0.0  5.578917 2.498197  6.937941 1.180169  392.683594  382.062500  0.736842       1.0  0.856220       1.0        1.0  0.736842  0.630899  0.736842   0.736842 0.736842
  9   1  82  95 0.863158 15.481586 0.953989 0.0 16.435575 2.918997 23.373515 0.799017  394.601562  383.816406  0.705263       1.0  0.604577       1.0        1.0  0.705263  0.426386  0.705263   0.705263 0.705263
 10   3  14  21 0.666667  1.205265 0.150642 0.0  1.355906 1.355906  1.355906 1.355906  397.257812  386.640625  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 10   2  45  57 0.789474  5.143424 0.694550 0.0  5.837974 2.494622  7.193881 1.222837  412.851562  403.296875  0.736842       1.0  0.845076       1.0        1.0  0.736842  0.622688  0.736842   0.736842 0.736842
 10   1  82  95 0.863158 15.433328 0.723959 0.0 16.157287 2.917174 23.351168 0.791409  414.421875  403.832031  0.705263       1.0  0.604731       1.0        1.0  0.705263  0.426495  0.705263   0.705263 0.705263
 11   3  14  21 0.666667  1.201247 0.396805 0.0  1.598052 1.598052  1.598052 1.598052  418.406250  407.964844  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 11   2  45  57 0.789474  5.138904 0.715751 0.0  5.854655 2.731071  7.452707 1.266214  433.132812  422.546875  0.736842       1.0  0.834681       1.0        1.0  0.736842  0.615028  0.736842   0.736842 0.736842
 11   1  82  95 0.863158 15.438563 0.985553 0.0 16.424116 3.152346 23.876823 0.808315  435.132812  424.550781  0.705263       1.0  0.601156       1.0        1.0  0.705263  0.423973  0.705263   0.705263 0.705263
 12   3  14  21 0.666667  1.208336 0.148811 0.0  1.357147 1.357147  1.357147 1.357147  437.515625  427.195312  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 12   2  45  57 0.789474  5.142267 0.441130 0.0  5.583397 2.492040  6.940544 1.180435  451.167969  441.328125  0.736842       1.0  0.856102       1.0        1.0  0.736842  0.630812  0.736842   0.736842 0.736842
 12   1  82  95 0.863158 15.436172 1.281407 0.0 16.717579 2.913410 23.658123 0.801200  453.515625  443.308594  0.705263       1.0  0.602632       1.0        1.0  0.705263  0.425014  0.705263   0.705263 0.705263
 13   3  14  21 0.666667  1.207139 0.155725 0.0  1.362864 1.362864  1.362864 1.362864  458.742188  448.691406  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 13   2  45  57 0.789474  5.143801 0.738384 0.0  5.882186 2.494797  7.245050 1.231215  471.847656  461.320312  0.736842       1.0  0.842956       1.0        1.0  0.736842  0.621125  0.736842   0.736842 0.736842
 13   1  82  95 0.863158 15.411687 1.018142 0.0 16.429830 2.914175 23.674880 0.801694  473.847656  463.324219  0.705263       1.0  0.602518       1.0        1.0  0.705263  0.424934  0.705263   0.705263 0.705263
 14   3  14  21 0.666667  1.204169 0.147681 0.0  1.351850 1.351850  1.351850 1.351850  477.781250  467.355469  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 14   2  45  57 0.789474  5.146513 0.446613 0.0  5.593126 2.498429  6.944975 1.181151  491.480469  481.003906  0.736842       1.0  0.855901       1.0        1.0  0.736842  0.630664  0.736842   0.736842 0.736842
 14   1  82  95 0.863158 15.442037 1.066048 0.0 16.508085 2.919248 23.453060 0.804472  492.988281  482.503906  0.705263       1.0  0.604031       1.0        1.0  0.705263  0.426001  0.705263   0.705263 0.705263
 15   3  14  21 0.666667  1.217869 0.150246 0.0  1.368115 1.368115  1.368115 1.368115  497.976562  488.097656  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 15   2  45  57 0.789474  5.145309 0.427443 0.0  5.572753 2.501491  6.940868 1.180809  509.964844  500.183594  0.736842       1.0  0.856087       1.0        1.0  0.736842  0.630801  0.736842   0.736842 0.736842
 15   1  82  95 0.863158 15.447661 0.739793 0.0 16.187454 2.931745 23.128322 0.784105  512.496094  502.226562  0.705263       1.0  0.606277       1.0        1.0  0.705263  0.427585  0.705263   0.705263 0.705263
 16   3  14  21 0.666667  1.204113 0.154393 0.0  1.358506 1.358506  1.358506 1.358506  517.296875  507.101562  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 16   2  43  55 0.781818  4.902273 0.760808 0.0  5.663081 2.503605  7.021588 1.194182  528.820312  518.386719  0.763636       1.0  0.852475       1.0        1.0  0.763636  0.650981  0.763636   0.763636 0.763636
 16   1  74  87 0.850575 14.107605 1.042585 0.0 15.150190 2.922175 22.171778 0.753323  530.820312  520.390625  0.770115       1.0  0.613121       1.0        1.0  0.770115  0.472173  0.770115   0.770115 0.770115
 17   3  14  21 0.666667  1.199780 0.139867 0.0  1.339647 1.339647  1.339647 1.339647  533.769531  523.750000  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 17   2  43  55 0.781818  4.892316 0.387501 0.0  5.279818 2.472393  6.619465 1.127207  546.156250  535.906250  0.763636       1.0  0.871528       1.0        1.0  0.763636  0.665530  0.763636   0.763636 0.763636
 17   1  74  87 0.850575 14.121907 1.035263 0.0 15.157170 2.898512 21.776635 0.740764  548.660156  538.410156  0.770115       1.0  0.616054       1.0        1.0  0.770115  0.474432  0.770115   0.770115 0.770115
 18   3  14  21 0.666667  1.204377 0.526478 0.0  1.730856 1.730856  1.730856 1.730856  552.359375  542.250000  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 18   2  45  57 0.789474  5.148253 0.458019 0.0  5.606271 2.869204  7.337127 1.246715  566.765625  556.605469  0.736842       1.0  0.839223       1.0        1.0  0.736842  0.618375  0.736842   0.736842 0.736842
 18   1  82  95 0.863158 15.475032 1.125390 0.0 16.600422 3.291106 23.937549 0.810265  567.445312  557.285156  0.705263       1.0  0.600749       1.0        1.0  0.705263  0.423686  0.705263   0.705263 0.705263
 19   3  14  21 0.666667  1.205078 0.146801 0.0  1.351879 1.351879  1.351879 1.351879  572.074219  561.859375  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 19   2  45  57 0.789474  5.138971 0.432321 0.0  5.571292 2.487173  6.923172 1.177773  585.339844  575.160156  0.736842       1.0  0.856892       1.0        1.0  0.736842  0.631394  0.736842   0.736842 0.736842
 19   1  82  95 0.863158 15.455458 1.552998 0.0 17.008456 2.911150 23.931628 0.810089  586.464844  576.667969  0.705263       1.0  0.600788       1.0        1.0  0.705263  0.423714  0.705263   0.705263 0.705263
 20   3  14  21 0.666667  1.204623 0.135313 0.0  1.339936 1.339936  1.339936 1.339936  590.250000  580.375000  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 20   2  43  55 0.781818  4.897574 0.407979 0.0  5.305553 2.480624  6.645489 1.131477  602.890625  593.101562  0.763636       1.0  0.870209       1.0        1.0  0.763636  0.664523  0.763636   0.763636 0.763636
 20   1  74  87 0.850575 14.107962 1.102315 0.0 15.210277 2.903222 21.855765 0.743116  604.488281  594.234375  0.770115       1.0  0.615461       1.0        1.0  0.770115  0.473976  0.770115   0.770115 0.770115
 21   3  14  21 0.666667  1.203536 0.572661 0.0  1.776197 1.776197  1.776197 1.776197  607.769531  597.617188  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 21   2  45  57 0.789474  5.150971 0.885401 0.0  6.036372 2.911639  7.812569 1.325971  622.742188  613.117188  0.736842       1.0  0.821453       1.0        1.0  0.736842  0.605281  0.736842   0.736842 0.736842
 21   1  82  95 0.863158 15.443469 0.727206 0.0 16.170676 3.333705 23.983244 0.811676  625.242188  615.210938  0.705263       1.0  0.600443       1.0        1.0  0.705263  0.423471  0.705263   0.705263 0.705263
 22   3  14  21 0.666667  1.206027 0.168247 0.0  1.374274 1.374274  1.374274 1.374274  629.886719  619.925781  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 22   2  45  57 0.789474  5.139245 0.450510 0.0  5.589755 2.509203  6.964029 1.184554  641.878906  632.296875  0.736842       1.0  0.855041       1.0        1.0  0.736842  0.630030  0.736842   0.736842 0.736842
 22   1  82  95 0.863158 15.434286 1.688300 0.0 17.122586 2.933109 24.086615 0.815266  643.851562  634.304688  0.705263       1.0  0.599755       1.0        1.0  0.705263  0.422985  0.705263   0.705263 0.705263
 23   3  14  21 0.666667  1.205689 0.146042 0.0  1.351731 1.351731  1.351731 1.351731  648.503906  638.949219  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 23   2  43  55 0.781818  4.890272 0.412102 0.0  5.302374 2.497337  6.654104 1.132905  661.082031  651.093750  0.763636       1.0  0.869775       1.0        1.0  0.763636  0.664192  0.763636   0.763636 0.763636
 23   1  74  87 0.850575 14.113268 0.671816 0.0 14.785084 2.920793 21.439188 0.745493  663.082031  653.097656  0.770115       1.0  0.618611       1.0        1.0  0.770115  0.476401  0.770115   0.770115 0.770115
 24   3  14  21 0.666667  1.227301 0.159885 0.0  1.387185 1.387185  1.387185 1.387185  666.324219  656.621094  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 24   2  45  57 0.789474  5.275164 0.460123 0.0  5.735287 2.544158  7.122472 1.212185  681.429688  671.585938  0.736842       1.0  0.848093       1.0        1.0  0.736842  0.624911  0.736842   0.736842 0.736842
 24   1  82  95 0.863158 15.735212 1.246790 0.0 16.982002 2.983688 24.104474 0.816406  683.421875  673.589844  0.705263       1.0  0.599636       1.0        1.0  0.705263  0.422901  0.705263   0.705263 0.705263
 25   3  14  21 0.666667  1.252511 0.147592 0.0  1.400103 1.400103  1.400103 1.400103  686.417969  676.578125  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 25   2  45  57 0.789474  5.165996 0.987081 0.0  6.153077 2.555578  7.553179 1.282872  699.714844  689.753906  0.736842       1.0  0.830854       1.0        1.0  0.736842  0.612208  0.736842   0.736842 0.736842
 25   1  82  95 0.863158 15.490846 0.726916 0.0 16.217762 2.981767 23.770941 0.805018  699.605469  689.890625  0.705263       1.0  0.601868       1.0        1.0  0.705263  0.424476  0.705263   0.705263 0.705263
 26   3  14  21 0.666667  1.198759 0.147064 0.0  1.345823 1.345823  1.345823 1.345823  704.550781  694.800781  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 26   2  45  57 0.789474  5.128652 0.446273 0.0  5.574925 2.489715  6.920748 1.177292  719.773438  710.453125  0.736842       1.0  0.857003       1.0        1.0  0.736842  0.631476  0.736842   0.736842 0.736842
 26   1  82  95 0.863158 15.383509 1.267675 0.0 16.651184 2.909243 23.571933 0.798335  719.593750  709.988281  0.705263       1.0  0.603218       1.0        1.0  0.705263  0.425427  0.705263   0.705263 0.705263
 27   3  14  21 0.666667  1.198489 0.158536 0.0  1.357024 1.357024  1.357024 1.357024  724.593750  715.000000  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 27   2  45  57 0.789474  5.119772 0.441606 0.0  5.561378 2.493171  6.918402 1.176782  738.136719  728.328125  0.736842       1.0  0.857110       1.0        1.0  0.736842  0.631555  0.736842   0.736842 0.736842
 27   1  82  95 0.863158 15.377851 1.287054 0.0 16.664905 2.913559 23.583308 0.798608  738.812500  728.964844  0.705263       1.0  0.603140       1.0        1.0  0.705263  0.425373  0.705263   0.705263 0.705263
 28   3  14  21 0.666667  1.204851 0.143941 0.0  1.348792 1.348792  1.348792 1.348792  745.210938  735.675781  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 28   2  45  57 0.789474  5.128214 0.475015 0.0  5.603229 2.483562  6.952022 1.182501  758.078125  748.550781  0.736842       1.0  0.855582       1.0        1.0  0.736842  0.630429  0.736842   0.736842 0.736842
 28   1  82  95 0.863158 15.355690 0.727276 0.0 16.082967 2.903082 23.034988 0.799539  759.820312  750.054688  0.705263       1.0  0.606929       1.0        1.0  0.705263  0.428045  0.705263   0.705263 0.705263
 29   3  14  21 0.666667  1.199394 0.140534 0.0  1.339929 1.339929  1.339929 1.339929  763.421875  754.136719  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 29   2  45  57 0.789474  5.117589 0.440788 0.0  5.558377 2.475213  6.898305 1.173536  776.246094  766.710938  0.736842       1.0  0.858032       1.0        1.0  0.736842  0.632234  0.736842   0.736842 0.736842
 29   1  82  95 0.863158 15.370676 0.722439 0.0 16.093115 2.895995 22.991421 0.799380  778.832031  769.214844  0.705263       1.0  0.607235       1.0        1.0  0.705263  0.428260  0.705263   0.705263 0.705263
 30   3  14  21 0.666667  1.198457 0.147436 0.0  1.345894 1.345894  1.345894 1.345894  783.531250  774.152344  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 30   2  43  55 0.781818  4.870108 0.405743 0.0  5.275851 2.483003  6.621745 1.127710  796.316406  786.695312  0.763636       1.0  0.871412       1.0        1.0  0.763636  0.665442  0.763636   0.763636 0.763636
 30   1  78  91 0.857143 14.763283 1.334027 0.0 16.097310 2.902659 22.719055 0.770785  798.105469  788.593750  0.736264       1.0  0.609162       1.0        1.0  0.736264  0.448504  0.736264   0.736264 0.736264
 31   3  14  21 0.666667  1.200203 0.151309 0.0  1.351512 1.351512  1.351512 1.351512  802.914062  793.792969  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 31   2  45  57 0.789474  5.121683 0.465097 0.0  5.586781 2.488942  6.938293 1.180075  815.960938  806.378906  0.736842       1.0  0.856204       1.0        1.0  0.736842  0.630887  0.736842   0.736842 0.736842
 31   1  82  95 0.863158 15.370539 0.729021 0.0 16.099559 2.913117 23.037852 0.780949  817.398438  807.878906  0.705263       1.0  0.606909       1.0        1.0  0.705263  0.428031  0.705263   0.705263 0.705263
 32   3  14  21 0.666667  1.199506 0.147081 0.0  1.346588 1.346588  1.346588 1.346588  820.796875  811.402344  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 32   2  45  57 0.789474  5.131078 1.098972 0.0  6.230051 2.482235  7.576638 1.286626  835.257812  825.730469  0.736842       1.0  0.829976       1.0        1.0  0.736842  0.611561  0.736842   0.736842 0.736842
 32   1  82  95 0.863158 15.375502 0.737621 0.0 16.113123 2.902531 23.689761 0.802153  837.757812  828.234375  0.705263       1.0  0.602417       1.0        1.0  0.705263  0.424863  0.705263   0.705263 0.705263
 33   3  14  21 0.666667  1.199771 0.147070 0.0  1.346841 1.346841  1.346841 1.346841  838.804688  829.238281  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 33   2  45  57 0.789474  5.123679 1.110754 0.0  6.234432 2.485230  7.581273 1.287339  853.847656  844.304688  0.736842       1.0  0.829803       1.0        1.0  0.736842  0.611434  0.736842   0.736842 0.736842
 33   1  82  95 0.863158 15.376146 0.711366 0.0 16.087512 2.905772 23.668785 0.801502  856.410156  846.808594  0.705263       1.0  0.602559       1.0        1.0  0.705263  0.424963  0.705263   0.705263 0.705263
 34   3  14  21 0.666667  1.198963 0.155335 0.0  1.354298 1.354298  1.354298 1.354298  859.890625  851.085938  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 34   2  43  55 0.781818  4.873568 0.395686 0.0  5.269254 2.489448  6.623552 1.127783  873.820312  864.480469  0.763636       1.0  0.871320       1.0        1.0  0.763636  0.665371  0.763636   0.763636 0.763636
 34   1  74  87 0.850575 14.049430 1.370916 0.0 15.420346 2.910092 22.043898 0.748942  875.824219  866.484375  0.770115       1.0  0.614063       1.0        1.0  0.770115  0.472899  0.770115   0.770115 0.770115
 35   3  14  21 0.666667  1.198376 0.144360 0.0  1.342735 1.342735  1.342735 1.342735  876.843750  867.484375  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 35   2  45  57 0.789474  5.114983 0.430994 0.0  5.545977 2.473931  6.888712 1.171958  890.871094  882.636719  0.736842       1.0  0.858474       1.0        1.0  0.736842  0.632560  0.736842   0.736842 0.736842
 35   1  82  95 0.863158 15.375404 1.454717 0.0 16.830121 2.894448 23.718833 0.803131  893.371094  883.957031  0.705263       1.0  0.602220       1.0        1.0  0.705263  0.424724  0.705263   0.705263 0.705263
 36   3  14  21 0.666667  1.197184 0.134227 0.0  1.331411 1.331411  1.331411 1.331411  895.328125  886.445312  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 36   2  45  57 0.789474  5.126466 1.173943 0.0  6.300409 2.473736  7.631820 1.295702  909.640625  900.261719  0.736842       1.0  0.827933       1.0        1.0  0.736842  0.610056  0.736842   0.736842 0.736842
 36   1  82  95 0.863158 15.388263 0.722495 0.0 16.110758 2.893473 23.742578 0.803846  912.144531  902.765625  0.705263       1.0  0.602060       1.0        1.0  0.705263  0.424611  0.705263   0.705263 0.705263
 37   3  14  21 0.666667  1.200252 0.139062 0.0  1.339314 1.339314  1.339314 1.339314  914.917969  905.792969  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 37   2  45  57 0.789474  5.119531 0.449191 0.0  5.568722 2.481533  6.908036 1.175064  930.511719  921.230469  0.736842       1.0  0.857585       1.0        1.0  0.736842  0.631905  0.736842   0.736842 0.736842
 37   1  82  95 0.863158 15.362823 0.720892 0.0 16.083715 2.900808 22.991751 0.804311  933.074219  923.734375  0.705263       1.0  0.607233       1.0        1.0  0.705263  0.428259  0.705263   0.705263 0.705263
 38   3  14  21 0.666667  1.196509 0.158015 0.0  1.354524 1.354524  1.354524 1.354524  936.589844  927.199219  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 38   2  45  57 0.789474  5.125522 1.243019 0.0  6.368542 2.493054  7.723065 1.311142  950.183594  940.890625  0.736842       1.0  0.824623       1.0        1.0  0.736842  0.607617  0.736842   0.736842 0.736842
 38   1  82  95 0.863158 15.394810 0.728369 0.0 16.123178 2.915101 23.846244 0.807123  952.183594  942.894531  0.705263       1.0  0.601361       1.0        1.0  0.705263  0.424118  0.705263   0.705263 0.705263
 39   3  14  21 0.666667  1.199846 0.138505 0.0  1.338351 1.338351  1.338351 1.338351  954.214844  945.382812  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 39   2  45  57 0.789474  5.125774 0.451787 0.0  5.577561 2.464084  6.915912 1.176530  967.847656  958.746094  0.736842       1.0  0.857224       1.0        1.0  0.736842  0.631639  0.736842   0.736842 0.736842
 39   1  82  95 0.863158 15.368035 0.716191 0.0 16.084226 2.884002 23.000138 0.779809  970.867188  961.757812  0.705263       1.0  0.607174       1.0        1.0  0.705263  0.428217  0.705263   0.705263 0.705263
 40   3  14  21 0.666667  1.196508 0.152903 0.0  1.349411 1.349411  1.349411 1.349411  973.621094  964.777344  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 40   2  43  55 0.781818  4.860291 1.233127 0.0  6.093418 3.302220  7.442829 1.264131  985.753906  976.636719  0.763636       1.0  0.835063       1.0        1.0  0.763636  0.637684  0.763636   0.763636 0.763636
 40   1  74  87 0.850575 14.042172 0.656244 0.0 14.698417 3.723295 22.141245 0.752231  988.316406  979.140625  0.770115       1.0  0.613345       1.0        1.0  0.770115  0.472346  0.770115   0.770115 0.770115
 41   3  14  21 0.666667  1.197268 0.137093 0.0  1.334361 1.334361  1.334361 1.334361  991.980469  983.234375  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 41   2  45  57 0.789474  5.106784 0.429625 0.0  5.536408 2.458405  6.870770 1.168840 1005.812500  996.671875  0.736842       1.0  0.859306       1.0        1.0  0.736842  0.633173  0.736842   0.736842 0.736842
 41   1  82  95 0.863158 15.375035 1.569487 0.0 16.944522 2.878799 23.815292 0.806031 1008.312500  999.175781  0.705263       1.0  0.601569       1.0        1.0  0.705263  0.424265  0.705263   0.705263 0.705263
 42   3  14  21 0.666667  1.198687 0.152315 0.0  1.351003 1.351003  1.351003 1.351003 1011.921875 1003.484375  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 42   2  45  57 0.789474  5.105925 0.452398 0.0  5.558323 2.484821  6.909325 1.175348 1025.980469 1017.003906  0.736842       1.0  0.857526       1.0        1.0  0.736842  0.631861  0.736842   0.736842 0.736842
 42   1  82  95 0.863158 15.371127 0.740594 0.0 16.111720 2.904759 23.021046 0.780641 1026.742188 1017.769531  0.705263       1.0  0.607027       1.0        1.0  0.705263  0.428114  0.705263   0.705263 0.705263
 43   3  14  21 0.666667  1.197899 0.141298 0.0  1.339198 1.339198  1.339198 1.339198 1031.339844 1022.898438  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 43   2  45  57 0.789474  5.107996 0.443613 0.0  5.551609 2.464950  6.890807 1.172208 1045.160156 1036.382812  0.736842       1.0  0.858378       1.0        1.0  0.736842  0.632489  0.736842   0.736842 0.736842
 43   1  82  95 0.863158 15.360545 0.734955 0.0 16.095500 2.885480 22.986306 0.779403 1045.542969 1036.566406  0.705263       1.0  0.607271       1.0        1.0  0.705263  0.428286  0.705263   0.705263 0.705263
 44   3  14  21 0.666667  1.196803 0.134097 0.0  1.330900 1.330900  1.330900 1.330900 1050.195312 1041.656250  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 44   2  45  57 0.789474  5.113077 0.459365 0.0  5.572441 2.461662  6.903341 1.174443 1064.417969 1055.410156  0.736842       1.0  0.857801       1.0        1.0  0.736842  0.632064  0.736842   0.736842 0.736842
 44   1  82  95 0.863158 15.376624 0.734500 0.0 16.111124 2.881296 23.014466 0.780086 1066.406250 1057.414062  0.705263       1.0  0.607073       1.0        1.0  0.705263  0.428146  0.705263   0.705263 0.705263
 45   3  14  21 0.666667  1.194522 1.071434 0.0  2.265956 2.265956  2.265956 2.265956 1069.414062 1060.683594  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 45   2  43  55 0.781818  4.863589 0.407206 0.0  5.270795 3.395022  7.536752 1.279844 1082.992188 1074.203125  0.763636       1.0  0.831472       1.0        1.0  0.763636  0.634942  0.763636   0.763636 0.763636
 45   1  78  91 0.857143 14.735354 0.696169 0.0 15.431522 3.813766 22.968274 0.778652 1083.675781 1074.882812  0.736264       1.0  0.607398       1.0        1.0  0.736264  0.447205  0.736264   0.736264 0.736264
 46   3  14  21 0.666667  1.197524 0.133290 0.0  1.330814 1.330814  1.330814 1.330814 1086.902344 1078.246094  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 46   2  45  57 0.789474  5.115405 0.467370 0.0  5.582775 2.460689  6.913590 1.175957 1102.394531 1093.433594  0.736842       1.0  0.857330       1.0        1.0  0.736842  0.631717  0.736842   0.736842 0.736842
 46   1  82  95 0.863158 15.359044 0.713376 0.0 16.072419 2.879282 22.986009 0.809496 1104.394531 1095.437500  0.705263       1.0  0.607273       1.0        1.0  0.705263  0.428287  0.705263   0.705263 0.705263
 47   3  14  21 0.666667  1.199248 0.152709 0.0  1.351956 1.351956  1.351956 1.351956 1106.621094 1098.460938  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 47   2  45  57 0.789474  5.111172 0.456745 0.0  5.567917 2.479669  6.919874 1.177132 1122.320312 1113.960938  0.736842       1.0  0.857043       1.0        1.0  0.736842  0.631505  0.736842   0.736842 0.736842
 47   1  82  95 0.863158 15.359158 1.713429 0.0 17.072588 2.898862 23.992461 0.811779 1123.554688 1114.777344  0.705263       1.0  0.600382       1.0        1.0  0.705263  0.423427  0.705263   0.705263 0.705263
 48   3  14  21 0.666667  1.200155 0.146154 0.0  1.346309 1.346309  1.346309 1.346309 1126.851562 1118.339844  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 48   2  45  57 0.789474  5.113146 0.469632 0.0  5.582778 2.480090  6.929087 1.178661 1141.394531 1132.773438  0.736842       1.0  0.856623       1.0        1.0  0.736842  0.631196  0.736842   0.736842 0.736842
 48   1  82  95 0.863158 15.380221 0.717242 0.0 16.097463 2.899989 23.026550 0.780500 1142.667969 1134.097656  0.705263       1.0  0.606988       1.0        1.0  0.705263  0.428087  0.705263   0.705263 0.705263
 49   3  14  21 0.666667  1.197131 0.151283 0.0  1.348415 1.348415  1.348415 1.348415 1146.078125 1137.656250  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
 49   2  43  55 0.781818  4.873038 1.403969 0.0  6.277007 3.476692  7.625421 1.294758 1159.359375 1150.648438  0.763636       1.0  0.828168       1.0        1.0  0.763636  0.632420  0.763636   0.763636 0.763636
 49   1  74  87 0.850575 14.149988 0.676677 0.0 14.826665 3.897578 22.452086 0.762206 1161.867188 1153.152344  0.770115       1.0  0.611078       1.0        1.0  0.770115  0.470601  0.770115   0.770115 0.770115

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
                      Level-wise Means                      

 AL    LE    AC       CF        GT       ST  OT        TT       LT        CT       WT        RSS        VMS  QL_SCORE  LT_SCORE  CT_SCORE  AW_SCORE  AME_SCORE  LT_GRADE  CT_GRADE  AW_GRADE  AME_GRADE    GRADE
  3 14.00 21.00 0.666667  1.203415 0.196205 0.0  1.399620 1.399620  1.399620 1.399620 677.308672 667.585781  0.952381       1.0  1.000000       1.0        1.0  0.952381  0.952381  0.952381   0.952381 0.952381
  2 44.44 56.44 0.787330  5.063674 0.591347 0.0  5.655021 2.572924  7.054641 1.199626 690.770313 680.934453  0.744344       1.0  0.851672       1.0        1.0  0.744344  0.633981  0.744344   0.744344 0.744344
  1 80.00 93.00 0.860029 15.086840 0.965022 0.0 16.051862 2.996118 23.106504 0.786430 692.286719 682.350469  0.721391       1.0  0.606527       1.0        1.0  0.721391  0.437665  0.721391   0.721391 0.721391

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
               Level-wise Standard Deviation                

 AL       LE       AC       CF       GT       ST  OT       TT       LT       CT       WT        RSS        VMS  QL_SCORE  LT_SCORE  CT_SCORE  AW_SCORE  AME_SCORE  LT_GRADE  CT_GRADE  AW_GRADE  AME_GRADE    GRADE
  3 0.000000 0.000000 0.000000 0.008971 0.155600 0.0 0.154917 0.154917 0.154917 0.154917 278.227956 279.076386  0.000000       0.0  0.000000       0.0        0.0  0.000000  0.000000  0.000000   0.000000 0.000000
  2 0.907115 0.907115 0.003472 0.116432 0.267274 0.0 0.289416 0.228733 0.311711 0.051958 278.902320 279.699303  0.012153       0.0  0.013135       0.0        0.0  0.012153  0.016160  0.012153   0.012153 0.012153
  1 3.356383 3.356383 0.005270 0.555257 0.294013 0.0 0.643444 0.228210 0.732353 0.023613 279.325480 280.152055  0.027159       0.0  0.005182       0.0        0.0  0.027159  0.020005  0.027159   0.027159 0.027159

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
                       Partial Plans                        

 RU  AL  IT  PN       GT       ST  OT       TT        YT       WT       ET         RSS         VMS  LE  AC       CF  PSG  START_S  END_S  SIZE  SGLITS_T  FIRST_I  LAST_I  PP_EF_L  PP_EF_A  SP_ED_L  SP_ED_A  SP_EB_L  SP_EB_A  SP_EBS_L  SP_EBS_A  TOT_CHOICES  PRE_CHOICES
  0   3   1   1 1.206753 0.156780 0.0 1.363533  1.363533 1.363533 0.000000  234.199219  222.957031  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   2   1   1 1.060860 0.080837 0.0 1.141697  2.505230 2.505230 1.390223  235.992188  224.097656   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
  0   2   2   2 1.288004 0.102219 0.0 1.390223  3.895454 1.390223 1.439233  237.636719  227.082031  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
  0   2   3   3 1.311204 0.128029 0.0 1.439233  5.334687 1.439233 0.266043  240.992188  230.132812  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
  0   2   4   4 0.242999 0.023045 0.0 0.266043  5.600730 0.266043 0.668380  232.246094  220.214844   2   4 0.500000    4       32     33     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  0   2   5   5 0.562544 0.105836 0.0 0.668380  6.269109 0.668380 0.849575  233.089844  221.000000   5   8 0.625000    8       34     38     3         5        9      11 1.666667 1.600000 0.577350 0.288675 0.346410 0.173205  0.585162  0.769150            0            1
  0   2   6   6 0.795725 0.053849 0.0 0.849575  7.118684 0.849575 0.000000  234.769531  222.929688   7   9 0.777778    9       39     45     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
  0   1   1   1 0.400595 0.021277 0.0 0.421872  2.927102 2.927102 1.675888  224.640625  215.980469   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   1   2   2 0.267024 0.018640 0.0 0.285664  4.602990 1.675888 2.442706  224.968750  217.371094   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   1   3   3 0.906950 0.096523 0.0 1.003473  7.045696 2.442706 0.687360  228.281250  218.746094   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   1   4   4 0.396358 0.024958 0.0 0.421316  7.733056 0.687360 1.092614  227.933594  218.039062   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   1   5   5 0.399386 0.024848 0.0 0.424234  8.825669 1.092614 1.657436  228.195312  218.273438   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   1   6   6 0.769590 0.038271 0.0 0.807861 10.483105 1.657436 0.289938  228.406250  218.289062   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
  0   1   7   7 0.269463 0.020476 0.0 0.289938 10.773044 0.289938 0.564221  231.289062  219.859375   1   1 1.000000    0       17     17     1         1       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   1   8   8 0.535344 0.028878 0.0 0.564221 11.337265 0.564221 1.036785  231.480469  219.914062   3   4 0.750000    0       18     20     2         3       11      12 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  0   1   9   9 0.979416 0.057369 0.0 1.036785 12.374050 1.036785 0.422336  233.156250  221.566406   5   5 1.000000    0       21     25     2         2       13      14 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
  0   1  10  10 0.397237 0.025099 0.0 0.422336 12.796386 0.422336 0.421389  221.910156  210.421875   2   2 1.000000    0       26     27     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   1  11  11 0.396377 0.025013 0.0 0.421389 13.217776 0.421389 0.678264  223.546875  212.683594   2   2 1.000000    0       28     29     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   1  12  12 0.584302 0.093962 0.0 0.678264 13.896040 0.678264 0.286015  224.464844  213.226562   3   3 1.000000    0       30     32     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
  0   1  13  13 0.268361 0.017654 0.0 0.286015 14.182055 0.286015 0.555654  234.519531  223.140625   1   1 1.000000    0       33     33     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   1  14  14 0.527923 0.027731 0.0 0.555654 14.737709 0.555654 0.798826  233.160156  221.621094   3   3 1.000000    0       34     36     2         2       22      23 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  0   1  15  15 0.762776 0.036051 0.0 0.798826 15.536535 0.798826 1.217285  232.289062  220.527344   4   4 1.000000    0       37     40     2         2       24      25 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
  0   1  16  16 1.105409 0.111875 0.0 1.217285 16.753820 1.217285 1.012162  234.328125  222.671875   6   6 1.000000    0       41     46     2         2       26      27 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            0
  0   1  17  17 0.966273 0.045888 0.0 1.012162 17.765982 1.012162 0.804693  233.113281  221.246094   5   5 1.000000    0       47     51     2         2       28      29 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
  0   1  18  18 0.767361 0.037332 0.0 0.804693 18.570675 0.804693 0.286562  232.097656  220.214844   4   6 0.666667    0       52     55     2         4       30      31 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
  0   1  19  19 0.268000 0.018562 0.0 0.286562 18.857237 0.286562 0.422345  232.246094  220.214844   1   2 0.500000    0       56     56     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  0   1  20  20 0.398235 0.024109 0.0 0.422345 19.279581 0.422345 0.283834  232.277344  220.214844   2   3 0.666667    0       57     58     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   1  21  21 0.266159 0.017675 0.0 0.283834 19.563415 0.283834 0.416201  233.089844  221.000000   1   1 1.000000    0       59     59     1         1       34      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  0   1  22  22 0.395518 0.020683 0.0 0.416201 19.979616 0.416201 0.284119  233.093750  221.000000   2   3 0.666667    0       60     61     1         2       35      35 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   1  23  23 0.267707 0.016412 0.0 0.284119 20.263735 0.284119 0.420617  233.093750  221.000000   1   3 0.333333    0       62     62     1         3       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   1  24  24 0.400331 0.020286 0.0 0.420617 20.684352 0.420617 0.611265  233.093750  221.000000   2   2 1.000000    0       63     64     1         1       37      37 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   1  25  25 0.585158 0.026107 0.0 0.611265 21.295617 0.611265 0.285430  233.089844  221.000000   3   3 1.000000    0       65     67     1         1       38      38 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   1  26  26 0.268940 0.016490 0.0 0.285430 21.581047 0.285430 0.954711  234.312500  222.191406   1   1 1.000000    0       68     68     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   1  27  27 0.905256 0.049455 0.0 0.954711 22.535758 0.954711 0.284223  235.820312  224.003906   5   5 1.000000    0       69     73     1         1       40      40 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   1  28  28 0.268531 0.015692 0.0 0.284223 22.819981 0.284223 0.422572  234.566406  222.460938   1   1 1.000000    0       74     74     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   1  29  29 0.403120 0.019452 0.0 0.422572 23.242553 0.422572 0.616731  234.566406  222.460938   2   2 1.000000    0       75     76     1         1       42      42 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   1  30  30 0.591389 0.025341 0.0 0.616731 23.859283 0.616731 0.621943  234.566406  222.460938   3   3 1.000000    0       77     79     1         1       43      43 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   1  31  31 0.593860 0.028083 0.0 0.621943 24.481226 0.621943 0.000000  235.300781  223.210938   3   5 0.600000    0       80     82     2         4       44      45 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
  1   3   1   1 1.203737 0.214041 0.0 1.417778  1.417778 1.417778 0.000000  235.906250  224.808594  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   2   1   1 1.058475 0.081350 0.0 1.139825  2.557602 2.557602 1.390981  238.324219  226.503906   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
  1   2   2   2 1.283442 0.107540 0.0 1.390981  3.948584 1.390981 1.213885  238.730469  227.996094  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
  1   2   3   3 1.057139 0.156746 0.0 1.213885  5.162468 1.213885 0.270130  237.269531  225.261719   9  11 0.818182   11       21     29     2         3        5       6 4.500000 3.666667 4.949747 2.828427 1.099944 0.942809 -1.572828 -0.936752            0            1
  1   2   4   4 0.247171 0.022959 0.0 0.270130  5.432599 0.270130 0.618623  235.164062  223.136719   2   4 0.500000    4       30     31     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  1   2   5   5 0.563871 0.054752 0.0 0.618623  6.051222 0.618623 0.854678  235.179688  223.136719   5   8 0.625000    8       32     36     3         5        9      11 1.666667 1.600000 0.577350 0.288675 0.346410 0.173205  0.585162  0.769150            0            1
  1   2   6   6 0.795910 0.058768 0.0 0.854678  6.905900 0.854678 0.000000  236.839844  224.757812   7   9 0.777778    9       37     43     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
  1   1   1   1 0.402898 0.021557 0.0 0.424455  2.982057 2.982057 1.676259  234.792969  222.796875   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   1   2   2 0.267204 0.018073 0.0 0.285278  4.658316 1.676259 2.158698  233.632812  221.628906   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   1   3   3 0.899459 0.045355 0.0 0.944814  6.817014 2.158698 0.690678  233.671875  221.628906   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   1   4   4 0.395283 0.025265 0.0 0.420548  7.507692 0.690678 1.085292  233.671875  221.628906   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   1   5   5 0.393543 0.073126 0.0 0.466669  8.592985 1.085292 1.666674  233.671875  221.628906   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   1   6   6 0.773392 0.038604 0.0 0.811996 10.259659 1.666674 0.286438  233.703125  221.628906   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
  1   1   7   7 0.268772 0.017666 0.0 0.286438 10.546097 0.286438 0.615607  222.632812  211.265625   1   2 0.500000    0       17     17     1         2       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   1   8   8 0.585924 0.029683 0.0 0.615607 11.161704 0.615607 1.451923  225.433594  214.132812   3   3 1.000000    0       18     20     2         2       11      12 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  1   1   9   9 1.321137 0.130786 0.0 1.451923 12.613627 1.451923 0.419009  235.242188  224.277344   7   7 1.000000    0       21     27     2         2       13      14 3.500000 3.500000 2.121320 2.121320 0.606092 0.606092 -0.642156 -0.642156            0            0
  1   1  10  10 0.393340 0.025670 0.0 0.419009 13.032636 0.419009 0.418316  232.386719  221.167969   2   2 1.000000    0       28     29     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   1  11  11 0.394212 0.024104 0.0 0.418316 13.450952 0.418316 0.622885  232.656250  221.453125   2   2 1.000000    0       30     31     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   1  12  12 0.585798 0.037087 0.0 0.622885 14.073837 0.622885 0.287092  232.753906  221.453125   3   3 1.000000    0       32     34     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
  1   1  13  13 0.269470 0.017623 0.0 0.287092 14.360929 0.287092 0.283103  234.968750  222.968750   1   1 1.000000    0       35     35     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   1  14  14 0.267064 0.016039 0.0 0.283103 14.644032 0.283103 0.420060  234.980469  222.968750   1   1 1.000000    0       36     36     1         1       22      22 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   1  15  15 0.400213 0.019848 0.0 0.420060 15.064093 0.420060 0.608964  234.980469  222.968750   2   2 1.000000    0       37     38     1         1       23      23 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   1  16  16 0.577063 0.031902 0.0 0.608964 15.673057 0.608964 0.419166  235.136719  223.136719   3   3 1.000000    0       39     41     2         2       24      25 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  1   1  17  17 0.396733 0.022433 0.0 0.419166 16.092223 0.419166 0.863755  235.136719  223.136719   2   2 1.000000    0       42     43     2         2       26      27 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   1  18  18 0.768607 0.095148 0.0 0.863755 16.955979 0.863755 0.288138  235.144531  223.136719   4   6 0.666667    0       44     47     2         4       28      29 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
  1   1  19  19 0.269676 0.018462 0.0 0.288138 17.244117 0.288138 0.419522  235.164062  223.136719   1   2 0.500000    0       48     48     1         2       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  1   1  20  20 0.394452 0.025070 0.0 0.419522 17.663638 0.419522 0.284082  235.171875  223.136719   2   3 0.666667    0       49     50     1         2       31      31 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   1  21  21 0.267023 0.017059 0.0 0.284082 17.947720 0.284082 0.475539  235.179688  223.136719   1   1 1.000000    0       51     51     1         1       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  1   1  22  22 0.397071 0.078468 0.0 0.475539 18.423259 0.475539 0.284862  235.179688  223.136719   2   3 0.666667    0       52     53     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   1  23  23 0.268129 0.016733 0.0 0.284862 18.708122 0.284862 0.421741  235.179688  223.136719   1   3 0.333333    0       54     54     1         3       34      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   1  24  24 0.401926 0.019815 0.0 0.421741 19.129863 0.421741 0.615461  235.179688  223.136719   2   2 1.000000    0       55     56     1         1       35      35 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   1  25  25 0.589446 0.026016 0.0 0.615461 19.745324 0.615461 0.282360  235.179688  223.136719   3   3 1.000000    0       57     59     1         1       36      36 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   1  26  26 0.265332 0.017028 0.0 0.282360 20.027684 0.282360 0.947188  237.339844  225.257812   1   1 1.000000    0       60     60     1         1       37      37 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   1  27  27 0.903684 0.043504 0.0 0.947188 20.974872 0.947188 0.346201  237.394531  225.507812   5   5 1.000000    0       61     65     1         1       38      38 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   1  28  28 0.267495 0.078706 0.0 0.346201 21.321072 0.346201 0.419938  237.964844  226.007812   1   1 1.000000    0       66     66     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   1  29  29 0.399542 0.020396 0.0 0.419938 21.741011 0.419938 0.609550  238.085938  226.007812   2   2 1.000000    0       67     68     1         1       40      40 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   1  30  30 0.583926 0.025624 0.0 0.609550 22.350561 0.609550 0.620624  238.085938  226.007812   3   3 1.000000    0       69     71     1         1       41      41 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   1  31  31 0.591968 0.028657 0.0 0.620624 22.971185 0.620624 0.000000  238.832031  226.757812   3   5 0.600000    0       72     74     2         4       42      43 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
  2   3   1   1 1.204813 0.138178 0.0 1.342990  1.342990 1.342990 0.000000  241.664062  229.882812  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  2   2   1   1 1.056148 0.081125 0.0 1.137273  2.480263 2.480263 1.472667  244.593750  232.632812   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
  2   2   2   2 1.279327 0.193340 0.0 1.472667  3.952930 1.472667 1.445448  253.675781  242.890625  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
  2   2   3   3 1.308826 0.136622 0.0 1.445448  5.398378 1.445448 0.269763  255.253906  244.324219  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
  2   2   4   4 0.246472 0.023291 0.0 0.269763  5.668141 0.269763 0.609254  254.718750  242.847656   2   4 0.500000    4       32     33     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  2   2   5   5 0.559446 0.049808 0.0 0.609254  6.277395 0.609254 0.850382  255.757812  243.851562   5   8 0.625000    8       34     38     3         5        9      11 1.666667 1.600000 1.154701 1.732051 0.692820 0.866025  0.301253  0.085162            0            1
  2   2   6   6 0.794801 0.055580 0.0 0.850382  7.127777 0.850382 0.000000  258.417969  246.367188   7   9 0.777778    9       39     45     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
  2   1   1   1 0.399789 0.090193 0.0 0.489983  2.970246 2.970246 1.759888  241.179688  229.066406   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  2   1   2   2 0.269916 0.017305 0.0 0.287221  4.730134 1.759888 2.389076  241.179688  229.066406   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  2   1   3   3 0.904079 0.039549 0.0 0.943628  7.119210 2.389076 0.686704  241.183594  229.066406   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  2   1   4   4 0.395738 0.021203 0.0 0.416941  7.805914 0.686704 1.027746  241.761719  229.761719   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  2   1   5   5 0.394364 0.024128 0.0 0.418492  8.833659 1.027746 1.658260  242.156250  230.011719   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  2   1   6   6 0.770008 0.037871 0.0 0.807879 10.491920 1.658260 0.286905  242.535156  230.511719   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
  2   1   7   7 0.266365 0.020540 0.0 0.286905 10.778825 0.286905 0.563955  234.792969  223.375000   1   1 1.000000    0       17     17     1         1       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  2   1   8   8 0.534414 0.029541 0.0 0.563955 11.342780 0.563955 1.039697  236.316406  224.679688   3   4 0.750000    0       18     20     2         3       11      12 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  2   1   9   9 0.980370 0.059327 0.0 1.039697 12.382477 1.039697 0.489485  244.218750  233.617188   5   5 1.000000    0       21     25     2         2       13      14 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
  2   1  10  10 0.395231 0.094254 0.0 0.489485 12.871962 0.489485 0.418142  243.285156  232.976562   2   2 1.000000    0       26     27     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  2   1  11  11 0.394384 0.023758 0.0 0.418142 13.290103 0.418142 0.620159  243.300781  232.976562   2   2 1.000000    0       28     29     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  2   1  12  12 0.583128 0.037031 0.0 0.620159 13.910262 0.620159 0.286423  244.316406  233.726562   3   3 1.000000    0       30     32     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
  2   1  13  13 0.269050 0.017373 0.0 0.286423 14.196686 0.286423 0.631945  251.566406  240.101562   1   1 1.000000    0       33     33     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  2   1  14  14 0.529195 0.102750 0.0 0.631945 14.828631 0.631945 0.799532  251.722656  240.101562   3   3 1.000000    0       34     36     2         2       22      23 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  2   1  15  15 0.762662 0.036870 0.0 0.799532 15.628163 0.799532 1.162053  252.054688  240.351562   4   4 1.000000    0       37     40     2         2       24      25 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
  2   1  16  16 1.106667 0.055385 0.0 1.162053 16.790216 1.162053 1.016418  253.718750  241.964844   6   6 1.000000    0       41     46     2         2       26      27 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            0
  2   1  17  17 0.970869 0.045549 0.0 1.016418 17.806634 1.016418 0.809869  253.214844  241.347656   5   5 1.000000    0       47     51     2         2       28      29 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
  2   1  18  18 0.772703 0.037166 0.0 0.809869 18.616503 0.809869 0.365335  253.835938  241.847656   4   6 0.666667    0       52     55     2         4       30      31 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
  2   1  19  19 0.268358 0.096977 0.0 0.365335 18.981839 0.365335 0.423261  254.968750  243.101562   1   2 0.500000    0       56     56     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  2   1  20  20 0.397923 0.025339 0.0 0.423261 19.405100 0.423261 0.417287  255.109375  243.101562   2   3 0.666667    0       57     58     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  2   1  21  21 0.392955 0.024333 0.0 0.417287 19.822387 0.417287 0.279736  256.265625  244.351562   2   3 0.666667    0       59     60     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  2   1  22  22 0.264914 0.014823 0.0 0.279736 20.102124 0.279736 0.289531  256.417969  244.378906   1   2 0.500000    0       61     61     1         2       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  2   1  23  23 0.272807 0.016724 0.0 0.289531 20.391655 0.289531 0.422236  256.421875  244.382812   1   2 0.500000    0       62     62     1         2       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  2   1  24  24 0.402395 0.019841 0.0 0.422236 20.813891 0.422236 0.695086  256.421875  244.382812   2   2 1.000000    0       63     64     1         1       37      37 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  2   1  25  25 0.586098 0.108988 0.0 0.695086 21.508977 0.695086 0.283625  256.546875  244.632812   3   3 1.000000    0       65     67     1         1       38      38 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  2   1  26  26 0.266137 0.017487 0.0 0.283625 21.792602 0.283625 0.949621  259.167969  247.117188   1   1 1.000000    0       68     68     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  2   1  27  27 0.905279 0.044343 0.0 0.949621 22.742223 0.949621 0.284980  259.589844  247.671875   5   5 1.000000    0       69     73     1         1       40      40 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  2   1  28  28 0.268766 0.016213 0.0 0.284980 23.027203 0.284980 0.425031  260.101562  248.175781   1   1 1.000000    0       74     74     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  2   1  29  29 0.404838 0.020194 0.0 0.425031 23.452234 0.425031 0.614030  260.210938  248.175781   2   2 1.000000    0       75     76     1         1       42      42 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  2   1  30  30 0.589290 0.024740 0.0 0.614030 24.066264 0.614030 0.620207  260.257812  248.175781   3   3 1.000000    0       77     79     1         1       43      43 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  2   1  31  31 0.591214 0.028993 0.0 0.620207 24.686471 0.620207 0.000000  261.054688  249.175781   3   5 0.600000    0       80     82     2         4       44      45 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
  3   3   1   1 1.202322 0.243684 0.0 1.446006  1.446006 1.446006 0.000000  264.312500  253.394531  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   2   1   1 1.056318 0.079908 0.0 1.136225  2.582231 2.582231 1.396622  265.769531  253.902344   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
  3   2   2   2 1.288050 0.108573 0.0 1.396622  3.978853 1.396622 1.262398  271.117188  259.953125  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
  3   2   3   3 1.058617 0.203782 0.0 1.262398  5.241252 1.262398 0.366617  276.031250  264.214844   9  11 0.818182   11       21     29     2         3        5       6 4.500000 3.666667 4.949747 2.828427 1.099944 0.942809 -1.572828 -0.936752            0            1
  3   2   4   4 0.244621 0.121996 0.0 0.366617  5.607869 0.366617 0.611503  273.875000  262.261719   2   4 0.500000    4       30     31     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  3   2   5   5 0.563506 0.047997 0.0 0.611503  6.219372 0.611503 0.852697  274.734375  263.011719   5   8 0.625000    8       32     36     3         5        9      11 1.666667 1.600000 1.154701 1.040833 0.692820 0.567727  0.301253  0.350674            0            1
  3   2   6   6 0.797491 0.055206 0.0 0.852697  7.072069 0.852697 0.000000  277.250000  265.585938   7   9 0.777778    9       37     43     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
  3   1   1   1 0.398213 0.020545 0.0 0.418759  3.000990 3.000990 1.680305  262.812500  250.753906   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   1   2   2 0.266436 0.017247 0.0 0.283683  4.681295 1.680305 2.213436  262.808594  250.753906   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   1   3   3 0.903842 0.047196 0.0 0.951038  6.894731 2.213436 0.874665  263.187500  251.253906   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   1   4   4 0.397002 0.111045 0.0 0.508047  7.769396 0.874665 1.031325  263.812500  251.753906   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   1   5   5 0.392582 0.027240 0.0 0.419822  8.800721 1.031325 1.662076  263.820312  251.753906   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   1   6   6 0.770417 0.038962 0.0 0.809379 10.462797 1.662076 0.285158  264.195312  252.253906   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
  3   1   7   7 0.268067 0.017091 0.0 0.285158 10.747955 0.285158 0.706254  267.945312  256.476562   1   2 0.500000    0       17     17     1         2       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   1   8   8 0.584326 0.121928 0.0 0.706254 11.454209 0.706254 1.402285  268.199219  256.476562   3   3 1.000000    0       18     20     2         2       11      12 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  3   1   9   9 1.323083 0.079202 0.0 1.402285 12.856494 1.402285 0.417576  271.273438  259.906250   7   7 1.000000    0       21     27     2         2       13      14 3.500000 3.500000 2.121320 2.121320 0.606092 0.606092 -0.642156 -0.642156            0            0
  3   1  10  10 0.395420 0.022156 0.0 0.417576 13.274069 0.417576 0.421135  269.898438  258.253906   2   2 1.000000    0       28     29     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   1  11  11 0.396599 0.024537 0.0 0.421135 13.695205 0.421135 0.614889  269.906250  258.253906   2   2 1.000000    0       30     31     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   1  12  12 0.584699 0.030190 0.0 0.614889 14.310094 0.614889 0.288721  269.910156  258.253906   3   3 1.000000    0       32     34     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
  3   1  13  13 0.271718 0.017003 0.0 0.288721 14.598815 0.288721 0.285797  272.453125  260.761719   1   1 1.000000    0       35     35     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   1  14  14 0.269737 0.016060 0.0 0.285797 14.884612 0.285797 0.422840  272.457031  260.761719   1   1 1.000000    0       36     36     1         1       22      22 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   1  15  15 0.403131 0.019709 0.0 0.422840 15.307452 0.422840 0.611537  272.519531  260.761719   2   2 1.000000    0       37     38     1         1       23      23 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   1  16  16 0.579079 0.032458 0.0 0.611537 15.918989 0.611537 0.416957  272.593750  260.761719   3   3 1.000000    0       39     41     2         2       24      25 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  3   1  17  17 0.394580 0.022377 0.0 0.416957 16.335946 0.416957 0.806340  272.843750  261.011719   2   2 1.000000    0       42     43     2         2       26      27 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   1  18  18 0.769367 0.036973 0.0 0.806340 17.142286 0.806340 0.288045  272.859375  261.011719   4   6 0.666667    0       44     47     2         4       28      29 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
  3   1  19  19 0.269652 0.018393 0.0 0.288045 17.430331 0.288045 0.420738  274.152344  262.511719   1   2 0.500000    0       48     48     1         2       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  3   1  20  20 0.396178 0.024560 0.0 0.420738 17.851068 0.420738 0.419317  274.230469  262.511719   2   3 0.666667    0       49     50     1         2       31      31 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   1  21  21 0.398766 0.020551 0.0 0.419317 18.270386 0.419317 0.283679  275.234375  263.515625   2   3 0.666667    0       51     52     1         2       32      32 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  3   1  22  22 0.268231 0.015448 0.0 0.283679 18.554064 0.283679 0.381171  275.234375  263.515625   1   3 0.333333    0       53     53     1         3       33      33 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   1  23  23 0.266698 0.114473 0.0 0.381171 18.935236 0.381171 0.420197  275.296875  263.515625   1   1 1.000000    0       54     54     1         1       34      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   1  24  24 0.399618 0.020579 0.0 0.420197 19.355433 0.420197 0.613707  275.359375  263.515625   2   2 1.000000    0       55     56     1         1       35      35 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   1  25  25 0.587567 0.026141 0.0 0.613707 19.969140 0.613707 0.287743  275.406250  263.765625   3   3 1.000000    0       57     59     1         1       36      36 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   1  26  26 0.271139 0.016603 0.0 0.287743 20.256883 0.287743 0.955157  277.730469  265.839844   1   1 1.000000    0       60     60     1         1       37      37 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   1  27  27 0.905146 0.050011 0.0 0.955157 21.212040 0.955157 0.286636  278.757812  267.089844   5   5 1.000000    0       61     65     1         1       38      38 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   1  28  28 0.270273 0.016363 0.0 0.286636 21.498676 0.286636 0.423567  278.859375  267.089844   1   1 1.000000    0       66     66     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   1  29  29 0.403109 0.020459 0.0 0.423567 21.922244 0.423567 0.617415  278.984375  267.089844   2   2 1.000000    0       67     68     1         1       40      40 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   1  30  30 0.591868 0.025548 0.0 0.617415 22.539659 0.617415 0.622625  278.984375  267.089844   3   3 1.000000    0       69     71     1         1       41      41 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   1  31  31 0.593971 0.028654 0.0 0.622625 23.162284 0.622625 0.000000  279.796875  268.093750   3   5 0.600000    0       72     74     2         4       42      43 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
  4   3   1   1 1.205989 0.255006 0.0 1.460995  1.460995 1.460995 0.000000  283.542969  272.148438  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   2   1   1 1.060355 0.074801 0.0 1.135156  2.596151 2.596151 1.421833  284.046875  272.132812   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
  4   2   2   2 1.297802 0.124031 0.0 1.421833  4.017984 1.421833 1.278617  293.753906  282.230469  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
  4   2   3   3 1.060948 0.217668 0.0 1.278617  5.296600 1.278617 0.270292  292.867188  280.906250   9  11 0.818182   11       21     29     2         3        5       6 4.500000 3.666667 4.949747 2.828427 1.099944 0.942809 -1.572828 -0.936752            0            1
  4   2   4   4 0.246241 0.024051 0.0 0.270292  5.566892 0.270292 0.623166  292.632812  280.789062   2   4 0.500000    4       30     31     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  4   2   5   5 0.564115 0.059051 0.0 0.623166  6.190059 0.623166 0.852621  294.558594  282.792969   5   8 0.625000    8       32     36     3         5        9      11 1.666667 1.600000 0.577350 0.288675 0.346410 0.173205  0.585162  0.769150            0            1
  4   2   6   6 0.797178 0.055443 0.0 0.852621  7.042679 0.852621 0.000000  295.367188  283.546875   7   9 0.777778    9       37     43     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
  4   1   1   1 0.401216 0.021474 0.0 0.422690  3.018841 3.018841 1.710331  282.218750  270.429688   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   1   2   2 0.270258 0.018241 0.0 0.288499  4.729172 1.710331 2.222078  282.218750  270.429688   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   1   3   3 0.902830 0.040631 0.0 0.943461  6.951250 2.222078 0.689966  282.398438  270.429688   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   1   4   4 0.394624 0.025050 0.0 0.419674  7.641216 0.689966 1.043556  283.515625  271.679688   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   1   5   5 0.395201 0.025188 0.0 0.420390  8.684772 1.043556 1.767117  283.960938  271.933594   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   1   6   6 0.768722 0.145774 0.0 0.914496 10.451889 1.767117 0.286786  283.980469  271.937500   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
  4   1   7   7 0.269611 0.017175 0.0 0.286786 10.738675 0.286786 0.614790  286.847656  274.921875   1   2 0.500000    0       17     17     1         2       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   1   8   8 0.586064 0.028726 0.0 0.614790 11.353465 0.614790 1.513464  286.972656  274.921875   3   3 1.000000    0       18     20     2         2       11      12 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  4   1   9   9 1.323803 0.189661 0.0 1.513464 12.866929 1.513464 0.419078  290.363281  278.542969   7   7 1.000000    0       21     27     2         2       13      14 3.500000 3.500000 2.121320 2.121320 0.606092 0.606092 -0.642156 -0.642156            0            0
  4   1  10  10 0.396583 0.022495 0.0 0.419078 13.286007 0.419078 0.419793  288.218750  276.238281   2   2 1.000000    0       28     29     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   1  11  11 0.394850 0.024943 0.0 0.419793 13.705800 0.419793 0.627798  288.218750  276.238281   2   2 1.000000    0       30     31     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   1  12  12 0.583235 0.044563 0.0 0.627798 14.333598 0.627798 0.288996  289.718750  277.738281   3   3 1.000000    0       32     34     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
  4   1  13  13 0.271157 0.017839 0.0 0.288996 14.622594 0.288996 0.286123  291.386719  279.539062   1   1 1.000000    0       35     35     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   1  14  14 0.270141 0.015982 0.0 0.286123 14.908717 0.286123 0.423820  291.386719  279.539062   1   1 1.000000    0       36     36     1         1       22      22 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   1  15  15 0.403163 0.020657 0.0 0.423820 15.332537 0.423820 0.614147  291.511719  279.539062   2   2 1.000000    0       37     38     1         1       23      23 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   1  16  16 0.581366 0.032781 0.0 0.614147 15.946684 0.614147 0.418197  291.511719  279.539062   3   3 1.000000    0       39     41     2         2       24      25 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  4   1  17  17 0.395341 0.022856 0.0 0.418197 16.364881 0.418197 0.809560  291.761719  279.789062   2   2 1.000000    0       42     43     2         2       26      27 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   1  18  18 0.772843 0.036717 0.0 0.809560 17.174440 0.809560 0.285102  291.761719  279.789062   4   6 0.666667    0       44     47     2         4       28      29 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
  4   1  19  19 0.266742 0.018360 0.0 0.285102 17.459543 0.285102 0.534993  293.003906  281.042969   1   2 0.500000    0       48     48     1         2       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  4   1  20  20 0.394729 0.140263 0.0 0.534993 17.994535 0.534993 0.283042  293.007812  281.042969   2   3 0.666667    0       49     50     1         2       31      31 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   1  21  21 0.265871 0.017170 0.0 0.283042 18.277577 0.283042 0.418063  294.878906  283.046875   1   1 1.000000    0       51     51     1         1       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  4   1  22  22 0.394058 0.024005 0.0 0.418063 18.695640 0.418063 0.284756  294.941406  283.046875   2   3 0.666667    0       52     53     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   1  23  23 0.268169 0.016587 0.0 0.284756 18.980395 0.284756 0.426900  295.003906  283.046875   1   3 0.333333    0       54     54     1         3       34      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   1  24  24 0.405779 0.021121 0.0 0.426900 19.407296 0.426900 0.611557  295.003906  283.046875   2   2 1.000000    0       55     56     1         1       35      35 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   1  25  25 0.585480 0.026077 0.0 0.611557 20.018852 0.611557 0.286849  295.007812  283.046875   3   3 1.000000    0       57     59     1         1       36      36 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   1  26  26 0.269344 0.017506 0.0 0.286849 20.305701 0.286849 1.072780  284.042969  274.769531   1   1 1.000000    0       60     60     1         1       37      37 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   1  27  27 0.903312 0.169468 0.0 1.072780 21.378481 1.072780 0.286715  290.945312  281.894531   5   5 1.000000    0       61     65     1         1       38      38 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   1  28  28 0.270286 0.016430 0.0 0.286715 21.665196 0.286715 0.422961  291.265625  282.296875   1   1 1.000000    0       66     66     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   1  29  29 0.402120 0.020841 0.0 0.422961 22.088157 0.422961 0.616494  291.316406  282.343750   2   2 1.000000    0       67     68     1         1       40      40 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   1  30  30 0.591765 0.024730 0.0 0.616494 22.704652 0.616494 0.621800  291.601562  282.390625   3   3 1.000000    0       69     71     1         1       41      41 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   1  31  31 0.593622 0.028178 0.0 0.621800 23.326452 0.621800 0.000000  292.750000  283.222656   3   5 0.600000    0       72     74     2         4       42      43 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
  5   3   1   1 1.204648 0.141924 0.0 1.346572  1.346572 1.346572 0.000000  298.328125  287.550781  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  5   2   1   1 1.063552 0.079215 0.0 1.142767  2.489339 2.489339 1.407024  301.753906  290.343750   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
  5   2   2   2 1.287723 0.119301 0.0 1.407024  3.896364 1.407024 1.447412  310.496094  299.656250  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
  5   2   3   3 1.309216 0.138196 0.0 1.447412  5.343776 1.447412 0.268336  315.148438  304.109375  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
  5   2   4   4 0.244790 0.023546 0.0 0.268336  5.612112 0.268336 0.617882  311.871094  300.445312   2   4 0.500000    4       32     33     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  5   2   5   5 0.565597 0.052285 0.0 0.617882  6.229994 0.617882 0.851330  313.738281  302.066406   5   8 0.625000    8       34     38     3         5        9      11 1.666667 1.600000 1.154701 1.040833 0.692820 0.567727  0.301253  0.350674            0            1
  5   2   6   6 0.796439 0.054891 0.0 0.851330  7.081324 0.851330 0.000000  316.332031  304.609375   7   9 0.777778    9       39     45     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
  5   1   1   1 0.399861 0.021680 0.0 0.421540  2.910880 2.910880 1.690257  300.816406  289.621094   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  5   1   2   2 0.265805 0.017428 0.0 0.283233  4.601137 1.690257 2.389808  301.046875  289.621094   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  5   1   3   3 0.901526 0.040869 0.0 0.942395  6.990945 2.389808 0.818596  301.070312  289.621094   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  5   1   4   4 0.398883 0.151377 0.0 0.550260  7.809541 0.818596 1.038732  301.757812  290.371094   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  5   1   5   5 0.396017 0.024833 0.0 0.420850  8.848273 1.038732 1.664166  302.089844  290.621094   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  5   1   6   6 0.772537 0.040298 0.0 0.812836 10.512439 1.664166 0.287808  302.253906  290.875000   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
  5   1   7   7 0.267855 0.019953 0.0 0.287808 10.800247 0.287808 0.564288  304.402344  292.707031   1   1 1.000000    0       17     17     1         1       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  5   1   8   8 0.534726 0.029562 0.0 0.564288 11.364535 0.564288 1.170112  304.535156  292.707031   3   4 0.750000    0       18     20     2         3       11      12 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  5   1   9   9 0.982345 0.187767 0.0 1.170112 12.534647 1.170112 0.422205  305.574219  293.820312   5   5 1.000000    0       21     25     2         2       13      14 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
  5   1  10  10 0.396776 0.025429 0.0 0.422205 12.956852 0.422205 0.420794  305.964844  294.070312   2   2 1.000000    0       26     27     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  5   1  11  11 0.396490 0.024304 0.0 0.420794 13.377646 0.420794 0.623178  305.964844  294.070312   2   2 1.000000    0       28     29     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  5   1  12  12 0.588615 0.034562 0.0 0.623178 14.000823 0.623178 0.419818  306.339844  294.570312   3   3 1.000000    0       30     32     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
  5   1  13  13 0.267787 0.152032 0.0 0.419818 14.420642 0.419818 0.558461  297.140625  285.929688   1   1 1.000000    0       33     33     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  5   1  14  14 0.530049 0.028411 0.0 0.558461 14.979103 0.558461 0.804949  300.183594  289.867188   3   3 1.000000    0       34     36     2         2       22      23 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  5   1  15  15 0.767507 0.037442 0.0 0.804949 15.784052 0.804949 1.160230  304.351562  294.464844   4   4 1.000000    0       37     40     2         2       24      25 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
  5   1  16  16 1.105879 0.054352 0.0 1.160230 16.944282 1.160230 1.010914  308.230469  297.531250   6   6 1.000000    0       41     46     2         2       26      27 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            0
  5   1  17  17 0.965314 0.045599 0.0 1.010914 17.955196 1.010914 0.807131  309.910156  298.550781   5   5 1.000000    0       47     51     2         2       28      29 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
  5   1  18  18 0.768829 0.038302 0.0 0.807131 18.762327 0.807131 0.284553  310.593750  299.050781   4   6 0.666667    0       52     55     2         4       30      31 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
  5   1  19  19 0.266694 0.017859 0.0 0.284553 19.046880 0.284553 0.558159  312.281250  300.695312   1   2 0.500000    0       56     56     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  5   1  20  20 0.397216 0.160943 0.0 0.558159 19.605039 0.558159 0.413995  312.457031  300.820312   2   3 0.666667    0       57     58     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  5   1  21  21 0.393048 0.020947 0.0 0.413995 20.019034 0.413995 0.284862  314.238281  302.570312   2   3 0.666667    0       59     60     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  5   1  22  22 0.269750 0.015112 0.0 0.284862 20.303896 0.284862 0.288013  314.355469  302.625000   1   3 0.333333    0       61     61     1         3       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  5   1  23  23 0.271132 0.016881 0.0 0.288013 20.591909 0.288013 0.424547  314.382812  302.625000   1   1 1.000000    0       62     62     1         1       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  5   1  24  24 0.404308 0.020239 0.0 0.424547 21.016456 0.424547 0.611194  314.382812  302.625000   2   2 1.000000    0       63     64     1         1       37      37 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  5   1  25  25 0.584314 0.026880 0.0 0.611194 21.627650 0.611194 0.283952  314.425781  302.625000   3   3 1.000000    0       65     67     1         1       38      38 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  5   1  26  26 0.266934 0.017018 0.0 0.283952 21.911603 0.283952 0.949655  315.109375  303.476562   1   1 1.000000    0       68     68     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  5   1  27  27 0.905608 0.044047 0.0 0.949655 22.861258 0.949655 0.284325  315.730469  303.980469   5   5 1.000000    0       69     73     1         1       40      40 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  5   1  28  28 0.267426 0.016898 0.0 0.284325 23.145583 0.284325 0.421186  316.355469  304.480469   1   1 1.000000    0       74     74     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  5   1  29  29 0.401545 0.019641 0.0 0.421186 23.566769 0.421186 0.617328  316.355469  304.480469   2   2 1.000000    0       75     76     1         1       42      42 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  5   1  30  30 0.592147 0.025182 0.0 0.617328 24.184097 0.617328 0.619734  316.394531  304.730469   3   3 1.000000    0       77     79     1         1       43      43 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  5   1  31  31 0.590840 0.028893 0.0 0.619734 24.803831 0.619734 0.000000  317.230469  305.480469   3   5 0.600000    0       80     82     2         4       44      45 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
  6   3   1   1 1.204906 0.158540 0.0 1.363446  1.363446 1.363446 0.000000  323.046875  311.765625  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  6   2   1   1 1.064001 0.081489 0.0 1.145490  2.508936 2.508936 1.383424  321.484375  310.398438   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
  6   2   2   2 1.282548 0.100876 0.0 1.383424  3.892360 1.383424 1.604864  326.523438  316.816406  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
  6   2   3   3 1.307082 0.297782 0.0 1.604864  5.497224 1.604864 0.273548  333.496094  323.316406  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
  6   2   4   4 0.245784 0.027763 0.0 0.273548  5.770772 0.273548 0.622791  332.402344  321.757812   2   4 0.500000    4       32     33     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  6   2   5   5 0.560273 0.062518 0.0 0.622791  6.393562 0.622791 1.024576  334.343750  323.511719   5   8 0.625000    8       34     38     3         5        9      11 1.666667 1.600000 0.577350 0.288675 0.346410 0.173205  0.585162  0.769150            0            1
  6   2   6   6 0.795997 0.228580 0.0 1.024576  7.418139 1.024576 0.000000  336.371094  325.574219   7   9 0.777778    9       39     45     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
  6   1   1   1 0.402355 0.020821 0.0 0.423176  2.932111 2.932111 1.672691  319.531250  308.625000   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  6   1   2   2 0.271413 0.017854 0.0 0.289267  4.604803 1.672691 2.555184  319.531250  308.625000   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  6   1   3   3 0.904805 0.045515 0.0 0.950320  7.159987 2.555184 0.695902  318.726562  308.628906   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  6   1   4   4 0.397135 0.025220 0.0 0.422355  7.855889 0.695902 1.042326  319.601562  309.593750   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  6   1   5   5 0.395288 0.024246 0.0 0.419535  8.898214 1.042326 1.977096  320.250000  310.109375   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  6   1   6   6 0.767300 0.185220 0.0 0.952520 10.875310 1.977096 0.287139  320.390625  310.109375   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
  6   1   7   7 0.267143 0.019996 0.0 0.287139 11.162449 0.287139 0.562851  323.667969  313.148438   1   1 1.000000    0       17     17     1         1       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  6   1   8   8 0.533168 0.029683 0.0 0.562851 11.725301 0.562851 1.032005  323.667969  313.148438   3   4 0.750000    0       18     20     2         3       11      12 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  6   1   9   9 0.980296 0.051710 0.0 1.032005 12.757306 1.032005 0.417243  324.636719  314.074219   5   5 1.000000    0       21     25     2         2       13      14 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
  6   1  10  10 0.395277 0.021965 0.0 0.417243 13.174549 0.417243 0.421570  325.199219  314.574219   2   2 1.000000    0       26     27     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  6   1  11  11 0.397413 0.024157 0.0 0.421570 13.596119 0.421570 0.623548  325.261719  314.574219   2   2 1.000000    0       28     29     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  6   1  12  12 0.584931 0.038617 0.0 0.623548 14.219667 0.623548 0.287177  326.136719  315.578125   3   3 1.000000    0       30     32     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
  6   1  13  13 0.269959 0.017218 0.0 0.287177 14.506844 0.287177 0.556813  328.574219  317.878906   1   1 1.000000    0       33     33     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  6   1  14  14 0.529147 0.027666 0.0 0.556813 15.063657 0.556813 0.797154  328.703125  317.878906   3   3 1.000000    0       34     36     2         2       22      23 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  6   1  15  15 0.761625 0.035530 0.0 0.797154 15.860811 0.797154 1.166142  328.714844  317.878906   4   4 1.000000    0       37     40     2         2       24      25 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
  6   1  16  16 1.110701 0.055441 0.0 1.166142 17.026954 1.166142 1.011763  329.878906  319.242188   6   6 1.000000    0       41     46     2         2       26      27 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            0
  6   1  17  17 0.964892 0.046871 0.0 1.011763 18.038717 1.011763 0.807628  330.636719  319.753906   5   5 1.000000    0       47     51     2         2       28      29 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
  6   1  18  18 0.769965 0.037663 0.0 0.807628 18.846345 0.807628 0.443016  331.269531  320.503906   4   6 0.666667    0       52     55     2         4       30      31 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
  6   1  19  19 0.270487 0.172529 0.0 0.443016 19.289361 0.443016 0.419623  332.671875  322.007812   1   2 0.500000    0       56     56     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  6   1  20  20 0.398159 0.021464 0.0 0.419623 19.708984 0.419623 0.283614  332.675781  322.007812   2   3 0.666667    0       57     58     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  6   1  21  21 0.266472 0.017143 0.0 0.283614 19.992599 0.283614 0.424238  334.406250  323.511719   1   1 1.000000    0       59     59     1         1       34      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  6   1  22  22 0.400171 0.024067 0.0 0.424238 20.416837 0.424238 0.288147  334.406250  323.511719   2   3 0.666667    0       60     61     1         2       35      35 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  6   1  23  23 0.271754 0.016394 0.0 0.288147 20.704984 0.288147 0.421678  334.414062  323.511719   1   3 0.333333    0       62     62     1         3       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  6   1  24  24 0.401935 0.019743 0.0 0.421678 21.126662 0.421678 0.612685  334.414062  323.511719   2   2 1.000000    0       63     64     1         1       37      37 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  6   1  25  25 0.586033 0.026651 0.0 0.612685 21.739347 0.612685 0.287875  334.414062  323.511719   3   3 1.000000    0       65     67     1         1       38      38 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  6   1  26  26 0.270688 0.017187 0.0 0.287875 22.027222 0.287875 0.957185  335.164062  324.457031   1   1 1.000000    0       68     68     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  6   1  27  27 0.908514 0.048671 0.0 0.957185 22.984407 0.957185 0.285731  335.441406  324.707031   5   5 1.000000    0       69     73     1         1       40      40 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  6   1  28  28 0.269128 0.016604 0.0 0.285731 23.270138 0.285731 0.422710  336.007812  325.207031   1   1 1.000000    0       74     74     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  6   1  29  29 0.403058 0.019652 0.0 0.422710 23.692849 0.422710 0.619371  336.132812  325.207031   2   2 1.000000    0       75     76     1         1       42      42 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  6   1  30  30 0.593858 0.025513 0.0 0.619371 24.312219 0.619371 0.622001  336.132812  325.207031   3   3 1.000000    0       77     79     1         1       43      43 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  6   1  31  31 0.592638 0.029362 0.0 0.622001 24.934220 0.622001 0.000000  336.503906  325.707031   3   5 0.600000    0       80     82     2         4       44      45 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
  7   3   1   1 1.204046 0.136626 0.0 1.340671  1.340671 1.340671 0.000000  341.015625  330.386719  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   2   1   1 1.061694 0.080186 0.0 1.141880  2.482551 2.482551 1.391930  342.300781  331.710938   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
  7   2   2   2 1.283689 0.108240 0.0 1.391930  3.874481 1.391930 1.147151  348.472656  338.742188  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
  7   2   3   3 1.060579 0.086572 0.0 1.147151  5.021632 1.147151 0.270987  349.539062  338.660156   9  11 0.818182   11       21     29     2         3        5       6 4.500000 3.666667 4.949747 2.828427 1.099944 0.942809 -1.572828 -0.936752            0            1
  7   2   4   4 0.245143 0.025844 0.0 0.270987  5.292619 0.270987 0.793994  348.750000  337.863281   2   4 0.500000    4       30     31     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  7   2   5   5 0.566007 0.227987 0.0 0.793994  6.086613 0.793994 0.852073  349.691406  338.867188   5   8 0.625000    8       32     36     3         5        9      11 1.666667 1.600000 0.577350 0.288675 0.346410 0.173205  0.585162  0.769150            0            1
  7   2   6   6 0.798071 0.054002 0.0 0.852073  6.938685 0.852073 0.000000  351.949219  341.191406   7   9 0.777778    9       37     43     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
  7   1   1   1 0.400576 0.021398 0.0 0.421974  2.904525 2.904525 1.678681  338.875000  328.062500   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   1   2   2 0.267947 0.018805 0.0 0.286752  4.583207 1.678681 2.258825  338.937500  328.062500   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   1   3   3 0.906571 0.205103 0.0 1.111674  6.842032 2.258825 0.691256  338.937500  328.062500   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   1   4   4 0.395746 0.024524 0.0 0.420270  7.533288 0.691256 1.211526  339.738281  329.062500   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   1   5   5 0.393059 0.024473 0.0 0.417533  8.744815 1.211526 1.657296  340.187500  329.312500   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   1   6   6 0.766784 0.038438 0.0 0.805223 10.402110 1.657296 0.283526  340.214844  329.312500   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
  7   1   7   7 0.266056 0.017470 0.0 0.283526 10.685636 0.283526 0.615769  342.578125  331.808594   1   2 0.500000    0       17     17     1         2       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   1   8   8 0.587029 0.028740 0.0 0.615769 11.301405 0.615769 1.399034  342.703125  331.808594   3   3 1.000000    0       18     20     2         2       11      12 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  7   1   9   9 1.323921 0.075113 0.0 1.399034 12.700439 1.399034 0.420209  347.144531  336.820312   7   7 1.000000    0       21     27     2         2       13      14 3.500000 3.500000 2.121320 2.121320 0.606092 0.606092 -0.642156 -0.642156            0            0
  7   1  10  10 0.394445 0.025764 0.0 0.420209 13.120648 0.420209 0.593826  344.160156  333.300781   2   2 1.000000    0       28     29     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   1  11  11 0.397751 0.196075 0.0 0.593826 13.714474 0.593826 0.623887  344.160156  333.300781   2   2 1.000000    0       30     31     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   1  12  12 0.586436 0.037451 0.0 0.623887 14.338361 0.623887 0.283322  344.660156  333.804688   3   3 1.000000    0       32     34     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
  7   1  13  13 0.266254 0.017067 0.0 0.283322 14.621683 0.283322 0.282130  346.246094  335.355469   1   1 1.000000    0       35     35     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   1  14  14 0.266550 0.015581 0.0 0.282130 14.903814 0.282130 0.420589  346.246094  335.355469   1   1 1.000000    0       36     36     1         1       22      22 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   1  15  15 0.400769 0.019820 0.0 0.420589 15.324402 0.420589 0.607266  346.246094  335.355469   2   2 1.000000    0       37     38     1         1       23      23 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   1  16  16 0.578030 0.029236 0.0 0.607266 15.931668 0.607266 0.419563  346.746094  335.855469   3   3 1.000000    0       39     41     2         2       24      25 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  7   1  17  17 0.395757 0.023805 0.0 0.419563 16.351231 0.419563 0.806748  347.250000  336.359375   2   2 1.000000    0       42     43     2         2       26      27 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   1  18  18 0.770013 0.036735 0.0 0.806748 17.157979 0.806748 0.285340  347.621094  336.859375   4   6 0.666667    0       44     47     2         4       28      29 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
  7   1  19  19 0.266408 0.018932 0.0 0.285340 17.443319 0.285340 0.419582  349.000000  338.117188   1   2 0.500000    0       48     48     1         2       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  7   1  20  20 0.395774 0.023808 0.0 0.419582 17.862901 0.419582 0.285612  348.996094  338.117188   2   3 0.666667    0       49     50     1         2       31      31 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   1  21  21 0.268466 0.017146 0.0 0.285612 18.148513 0.285612 0.417214  350.253906  339.367188   1   1 1.000000    0       51     51     1         1       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  7   1  22  22 0.396277 0.020937 0.0 0.417214 18.565727 0.417214 0.286271  350.253906  339.367188   2   3 0.666667    0       52     53     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   1  23  23 0.269225 0.017045 0.0 0.286271 18.851997 0.286271 0.426744  350.253906  339.367188   1   3 0.333333    0       54     54     1         3       34      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   1  24  24 0.405707 0.021037 0.0 0.426744 19.278741 0.426744 0.607044  350.253906  339.367188   2   2 1.000000    0       55     56     1         1       35      35 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   1  25  25 0.580648 0.026397 0.0 0.607044 19.885786 0.607044 0.286128  350.253906  339.367188   3   3 1.000000    0       57     59     1         1       36      36 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   1  26  26 0.269345 0.016784 0.0 0.286128 20.171914 0.286128 0.948671  341.605469  331.562500   1   1 1.000000    0       60     60     1         1       37      37 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   1  27  27 0.904287 0.044384 0.0 0.948671 21.120585 0.948671 0.286008  347.996094  339.417969   5   5 1.000000    0       61     65     1         1       38      38 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   1  28  28 0.269534 0.016474 0.0 0.286008 21.406593 0.286008 0.424348  348.937500  340.214844   1   1 1.000000    0       66     66     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   1  29  29 0.404550 0.019798 0.0 0.424348 21.830940 0.424348 0.618812  349.167969  340.433594   2   2 1.000000    0       67     68     1         1       40      40 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   1  30  30 0.592666 0.026146 0.0 0.618812 22.449752 0.618812 0.622530  349.414062  340.734375   3   3 1.000000    0       69     71     1         1       41      41 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   1  31  31 0.594083 0.028446 0.0 0.622530 23.072282 0.622530 0.000000  350.859375  341.988281   3   5 0.600000    0       72     74     2         4       42      43 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
  8   3   1   1 1.205074 0.339313 0.0 1.544387  1.544387 1.544387 0.000000  357.652344  348.058594  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   2   1   1 1.056642 0.080238 0.0 1.136880  2.681267 2.681267 1.398487  359.171875  348.597656   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
  8   2   2   2 1.281259 0.117227 0.0 1.398487  4.079754 1.398487 1.146208  367.671875  357.894531  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
  8   2   3   3 1.059341 0.086867 0.0 1.146208  5.225962 1.146208 0.269281  366.769531  355.992188   9  11 0.818182   11       21     29     2         3        5       6 4.500000 3.666667 4.949747 2.828427 1.099944 0.942809 -1.572828 -0.936752            0            1
  8   2   4   4 0.245672 0.023609 0.0 0.269281  5.495242 0.269281 0.615542  366.652344  356.042969   2   4 0.500000    4       30     31     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  8   2   5   5 0.561989 0.053552 0.0 0.615542  6.110784 0.615542 0.851526  368.855469  358.082031   5   8 0.625000    8       32     36     3         5        9      11 1.666667 1.600000 0.577350 0.577350 0.346410 0.346410  0.585162  0.585162            0            1
  8   2   6   6 0.797128 0.054397 0.0 0.851526  6.962310 0.851526 0.000000  371.078125  360.445312   7   9 0.777778    9       37     43     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
  8   1   1   1 0.403206 0.021345 0.0 0.424551  3.105818 3.105818 1.686944  356.183594  345.667969   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   1   2   2 0.270793 0.017665 0.0 0.288458  4.792763 1.686944 2.091467  356.382812  345.667969   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   1   3   3 0.900102 0.045157 0.0 0.945259  6.884230 2.091467 0.691551  356.957031  346.171875   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   1   4   4 0.397054 0.025217 0.0 0.422271  7.575781 0.691551 1.035230  356.546875  345.867188   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   1   5   5 0.395731 0.023957 0.0 0.419688  8.611010 1.035230 1.658178  356.933594  346.128906   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   1   6   6 0.767696 0.038956 0.0 0.806652 10.269188 1.658178 0.284617  356.949219  346.378906   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
  8   1   7   7 0.267340 0.017276 0.0 0.284617 10.553804 0.284617 0.613759  360.039062  349.503906   1   2 0.500000    0       17     17     1         2       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   1   8   8 0.584608 0.029151 0.0 0.613759 11.167564 0.613759 1.403484  360.101562  349.503906   3   3 1.000000    0       18     20     2         2       11      12 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  8   1   9   9 1.322848 0.080635 0.0 1.403484 12.571047 1.403484 0.416558  365.496094  355.585938   7   7 1.000000    0       21     27     2         2       13      14 3.500000 3.500000 3.535534 3.535534 1.010153 1.010153 -1.181272 -1.181272            0            0
  8   1  10  10 0.394847 0.021711 0.0 0.416558 12.987605 0.416558 0.421085  361.804688  351.082031   2   2 1.000000    0       28     29     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   1  11  11 0.396962 0.024123 0.0 0.421085 13.408690 0.421085 0.623733  361.800781  351.082031   2   2 1.000000    0       30     31     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   1  12  12 0.586031 0.037702 0.0 0.623733 14.032423 0.623733 0.286280  362.671875  352.082031   3   3 1.000000    0       32     34     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
  8   1  13  13 0.268380 0.017900 0.0 0.286280 14.318703 0.286280 0.286234  363.843750  353.281250   1   1 1.000000    0       35     35     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   1  14  14 0.270031 0.016203 0.0 0.286234 14.604937 0.286234 0.421993  363.859375  353.281250   1   1 1.000000    0       36     36     1         1       22      22 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   1  15  15 0.401800 0.020193 0.0 0.421993 15.026930 0.421993 1.017715  363.960938  353.281250   2   2 1.000000    0       37     38     1         1       23      23 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   1  16  16 0.968519 0.049196 0.0 1.017715 16.044645 1.017715 0.746901  366.023438  355.507812   5   5 1.000000    0       39     43     2         2       24      25 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
  8   1  17  17 0.714163 0.032737 0.0 0.746901 16.791545 0.746901 0.805177  365.382812  354.789062   4   4 1.000000    0       44     47     2         2       26      27 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
  8   1  18  18 0.768604 0.036574 0.0 0.805177 17.596723 0.805177 0.286851  365.882812  355.042969   4   6 0.666667    0       48     51     2         4       28      29 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
  8   1  19  19 0.268814 0.018037 0.0 0.286851 17.883574 0.286851 0.421013  366.921875  356.292969   1   2 0.500000    0       52     52     1         2       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  8   1  20  20 0.395677 0.025336 0.0 0.421013 18.304587 0.421013 0.416285  367.066406  356.292969   2   3 0.666667    0       53     54     1         2       31      31 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   1  21  21 0.395025 0.021260 0.0 0.416285 18.720872 0.416285 0.288139  369.355469  358.582031   2   3 0.666667    0       55     56     1         2       32      32 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  8   1  22  22 0.268779 0.019360 0.0 0.288139 19.009011 0.288139 0.286690  369.460938  358.625000   1   2 0.500000    0       57     57     1         2       33      33 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   1  23  23 0.269555 0.017135 0.0 0.286690 19.295701 0.286690 0.426889  369.460938  358.625000   1   2 0.500000    0       58     58     1         2       34      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   1  24  24 0.406312 0.020576 0.0 0.426889 19.722590 0.426889 0.612983  369.460938  358.625000   2   2 1.000000    0       59     60     1         1       35      35 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   1  25  25 0.585865 0.027118 0.0 0.612983 20.335573 0.612983 0.285158  369.460938  358.625000   3   3 1.000000    0       61     63     1         1       36      36 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   1  26  26 0.268464 0.016694 0.0 0.285158 20.620731 0.285158 0.951427  371.781250  360.949219   1   1 1.000000    0       64     64     1         1       37      37 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   1  27  27 0.903286 0.048141 0.0 0.951427 21.572158 0.951427 0.282676  372.558594  361.949219   5   5 1.000000    0       65     69     1         1       38      38 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   1  28  28 0.266428 0.016248 0.0 0.282676 21.854834 0.282676 0.421191  372.656250  361.949219   1   1 1.000000    0       70     70     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   1  29  29 0.401276 0.019915 0.0 0.421191 22.276025 0.421191 0.618300  372.781250  361.949219   2   2 1.000000    0       71     72     1         1       40      40 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   1  30  30 0.593134 0.025167 0.0 0.618300 22.894325 0.618300 0.821104  372.781250  361.949219   3   3 1.000000    0       73     75     1         1       41      41 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   1  31  31 0.591219 0.229885 0.0 0.821104 23.715430 0.821104 0.000000  373.468750  362.703125   3   5 0.600000    0       76     78     2         4       42      43 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
  9   3   1   1 1.205110 0.153914 0.0 1.359024  1.359024 1.359024 0.000000  376.898438  366.335938  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  9   2   1   1 1.063857 0.075315 0.0 1.139172  2.498197 2.498197 1.400000  378.253906  367.574219   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
  9   2   2   2 1.292199 0.107801 0.0 1.400000  3.898197 1.400000 1.439351  386.066406  376.476562  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
  9   2   3   3 1.309304 0.130047 0.0 1.439351  5.337547 1.439351 0.268287  391.121094  381.304688  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
  9   2   4   4 0.244270 0.024017 0.0 0.268287  5.605834 0.268287 0.619364  389.542969  378.804688   2   4 0.500000    4       32     33     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  9   2   5   5 0.563289 0.056075 0.0 0.619364  6.225198 0.619364 0.855816  391.058594  380.308594   5   8 0.625000    8       34     38     3         5        9      11 1.666667 1.600000 1.154701 1.040833 0.692820 0.567727  0.301253  0.350674            0            1
  9   2   6   6 0.797622 0.058194 0.0 0.855816  7.081014 0.855816 0.000000  392.683594  382.062500   7   9 0.777778    9       39     45     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
  9   1   1   1 0.399098 0.021702 0.0 0.420800  2.918997 2.918997 1.683739  376.546875  365.750000   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  9   1   2   2 0.266184 0.017555 0.0 0.283739  4.602736 1.683739 2.394596  376.546875  365.750000   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  9   1   3   3 0.911895 0.043350 0.0 0.955245  6.997332 2.394596 0.692978  376.574219  365.750000   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  9   1   4   4 0.398894 0.025798 0.0 0.424692  7.690310 0.692978 1.044192  376.562500  365.957031   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  9   1   5   5 0.399436 0.025392 0.0 0.424828  8.734502 1.044192 1.679430  377.031250  366.207031   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  9   1   6   6 0.783996 0.039618 0.0 0.823614 10.413932 1.679430 0.508871  377.035156  366.207031   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
  9   1   7   7 0.272606 0.236264 0.0 0.508871 10.922802 0.508871 0.575598  381.039062  370.710938   1   1 1.000000    0       17     17     1         1       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  9   1   8   8 0.545839 0.029760 0.0 0.575598 11.498401 0.575598 1.037539  380.972656  370.460938   3   4 0.750000    0       18     20     2         3       11      12 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  9   1   9   9 0.980682 0.056857 0.0 1.037539 12.535940 1.037539 0.436395  382.074219  371.460938   5   5 1.000000    0       21     25     2         2       13      14 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
  9   1  10  10 0.409876 0.026519 0.0 0.436395 12.972334 0.436395 0.420166  382.449219  371.714844   2   2 1.000000    0       26     27     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  9   1  11  11 0.395413 0.024753 0.0 0.420166 13.392501 0.420166 0.621843  382.449219  371.714844   2   2 1.000000    0       28     29     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  9   1  12  12 0.584052 0.037790 0.0 0.621843 14.014343 0.621843 0.286193  383.199219  372.464844   3   3 1.000000    0       30     32     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
  9   1  13  13 0.268700 0.017493 0.0 0.286193 14.300537 0.286193 0.558663  385.273438  374.671875   1   1 1.000000    0       33     33     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  9   1  14  14 0.529614 0.029048 0.0 0.558663 14.859199 0.558663 0.799628  385.363281  374.671875   3   3 1.000000    0       34     36     2         2       22      23 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  9   1  15  15 0.762627 0.037001 0.0 0.799628 15.658827 0.799628 1.162199  385.753906  375.175781   4   4 1.000000    0       37     40     2         2       24      25 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
  9   1  16  16 1.105896 0.056303 0.0 1.162199 16.821027 1.162199 1.228004  387.269531  376.789062   6   6 1.000000    0       41     46     2         2       26      27 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            0
  9   1  17  17 0.968223 0.259781 0.0 1.228004 18.049030 1.228004 0.817030  388.035156  377.300781   5   5 1.000000    0       47     51     2         2       28      29 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
  9   1  18  18 0.773813 0.043216 0.0 0.817030 18.866060 0.817030 0.286200  388.917969  378.304688   4   6 0.666667    0       52     55     2         4       30      31 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  9   1  19  19 0.267882 0.018318 0.0 0.286200 19.152260 0.286200 0.420505  389.667969  379.054688   1   2 0.500000    0       56     56     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  9   1  20  20 0.399637 0.020868 0.0 0.420505 19.572765 0.420505 0.415010  389.671875  379.054688   2   3 0.666667    0       57     58     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  9   1  21  21 0.394166 0.020845 0.0 0.415010 19.987775 0.415010 0.285944  391.312500  380.558594   2   3 0.666667    0       59     60     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  9   1  22  22 0.270495 0.015449 0.0 0.285944 20.273719 0.285944 0.288002  391.312500  380.558594   1   3 0.333333    0       61     61     1         3       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  9   1  23  23 0.270665 0.017337 0.0 0.288002 20.561722 0.288002 0.419040  391.312500  380.558594   1   1 1.000000    0       62     62     1         1       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  9   1  24  24 0.398897 0.020144 0.0 0.419040 20.980762 0.419040 0.610676  391.312500  380.558594   2   2 1.000000    0       63     64     1         1       37      37 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  9   1  25  25 0.585347 0.025328 0.0 0.610676 21.591438 0.610676 0.286060  391.312500  380.558594   3   3 1.000000    0       65     67     1         1       38      38 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  9   1  26  26 0.270040 0.016019 0.0 0.286060 21.877497 0.286060 0.955174  393.097656  382.562500   1   1 1.000000    0       68     68     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  9   1  27  27 0.906740 0.048434 0.0 0.955174 22.832671 0.955174 0.283905  393.718750  383.062500   5   5 1.000000    0       69     73     1         1       40      40 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  9   1  28  28 0.267272 0.016633 0.0 0.283905 23.116576 0.283905 0.419334  394.031250  383.312500   1   1 1.000000    0       74     74     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  9   1  29  29 0.399700 0.019634 0.0 0.419334 23.535910 0.419334 0.615280  394.093750  383.312500   2   2 1.000000    0       75     76     1         1       42      42 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  9   1  30  30 0.590223 0.025057 0.0 0.615280 24.151190 0.615280 0.618352  394.101562  383.312500   3   3 1.000000    0       77     79     1         1       43      43 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  9   1  31  31 0.589923 0.028429 0.0 0.618352 24.769542 0.618352 0.000000  394.601562  383.816406   3   5 0.600000    0       80     82     2         4       44      45 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 10   3   1   1 1.205265 0.150642 0.0 1.355906  1.355906 1.355906 0.000000  397.257812  386.640625  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 10   2   1   1 1.059425 0.079291 0.0 1.138715  2.494622 2.494622 1.394774  398.085938  387.382812   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 10   2   2   2 1.283110 0.111665 0.0 1.394774  3.889396 1.394774 1.472317  405.644531  395.937500  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 10   2   3   3 1.318291 0.154026 0.0 1.472317  5.361713 1.472317 0.501543  412.851562  403.296875  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 10   2   4   4 0.244081 0.257462 0.0 0.501543  5.863256 0.501543 0.615348  409.070312  398.570312   2   4 0.500000    4       32     33     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 10   2   5   5 0.563613 0.051735 0.0 0.615348  6.478605 0.615348 0.858417  410.472656  399.824219   5   8 0.625000    8       34     38     3         5        9      11 1.666667 1.600000 1.154701 1.040833 0.692820 0.567727  0.301253  0.350674            0            1
 10   2   6   6 0.798247 0.060169 0.0 0.858417  7.337021 0.858417 0.000000  412.425781  401.828125   7   9 0.777778    9       39     45     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 10   1   1   1 0.401428 0.021124 0.0 0.422552  2.917174 2.917174 1.682739  396.964844  386.433594   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 10   1   2   2 0.270178 0.017786 0.0 0.287965  4.599913 1.682739 2.420488  396.964844  386.433594   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 10   1   3   3 0.906764 0.041406 0.0 0.948170  7.020401 2.420488 0.919809  397.148438  386.433594   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 10   1   4   4 0.396510 0.021756 0.0 0.418266  7.940210 0.919809 1.037958  397.960938  387.183594   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 10   1   5   5 0.398556 0.024054 0.0 0.422610  8.978168 1.037958 1.669493  398.253906  387.687500   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 10   1   6   6 0.770400 0.040676 0.0 0.811076 10.647660 1.669493 0.287902  398.707031  387.937500   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 10   1   7   7 0.267469 0.020432 0.0 0.287902 10.935562 0.287902 0.559531  401.691406  391.488281   1   1 1.000000    0       17     17     1         1       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 10   1   8   8 0.531325 0.028206 0.0 0.559531 11.495093 0.559531 1.037042  401.847656  391.488281   3   4 0.750000    0       18     20     2         3       11      12 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 10   1   9   9 0.982379 0.054663 0.0 1.037042 12.532135 1.037042 0.422634  402.257812  391.738281   5   5 1.000000    0       21     25     2         2       13      14 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 10   1  10  10 0.397603 0.025031 0.0 0.422634 12.954769 0.422634 0.417699  402.945312  392.488281   2   2 1.000000    0       26     27     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 10   1  11  11 0.392985 0.024714 0.0 0.417699 13.372468 0.417699 0.619237  403.007812  392.488281   2   2 1.000000    0       28     29     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 10   1  12  12 0.581992 0.037245 0.0 0.619237 13.991705 0.619237 0.286638  403.757812  393.238281   3   3 1.000000    0       30     32     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 10   1  13  13 0.270022 0.016616 0.0 0.286638 14.278342 0.286638 0.560314  405.300781  394.953125   1   1 1.000000    0       33     33     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 10   1  14  14 0.533095 0.027219 0.0 0.560314 14.838657 0.560314 0.800407  405.550781  394.953125   3   3 1.000000    0       34     36     2         2       22      23 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 10   1  15  15 0.764183 0.036224 0.0 0.800407 15.639064 0.800407 1.163309  405.582031  394.953125   4   4 1.000000    0       37     40     2         2       24      25 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 10   1  16  16 1.107330 0.055980 0.0 1.163309 16.802373 1.163309 1.011926  407.015625  396.566406   6   6 1.000000    0       41     46     2         2       26      27 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            0
 10   1  17  17 0.964125 0.047801 0.0 1.011926 17.814299 1.011926 0.806133  407.753906  397.066406   5   5 1.000000    0       47     51     2         2       28      29 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 10   1  18  18 0.768692 0.037441 0.0 0.806133 18.620432 0.806133 0.287233  408.390625  397.820312   4   6 0.666667    0       52     55     2         4       30      31 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
 10   1  19  19 0.268617 0.018616 0.0 0.287233 18.907665 0.287233 0.422264  409.328125  398.820312   1   2 0.500000    0       56     56     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 10   1  20  20 0.397773 0.024491 0.0 0.422264 19.329929 0.422264 0.418527  409.398438  398.820312   2   3 0.666667    0       57     58     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 10   1  21  21 0.394451 0.024075 0.0 0.418527 19.748456 0.418527 0.283802  411.039062  400.324219   2   3 0.666667    0       59     60     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 10   1  22  22 0.268345 0.015457 0.0 0.283802 20.032258 0.283802 0.285294  411.039062  400.324219   1   3 0.333333    0       61     61     1         3       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 10   1  23  23 0.268938 0.016356 0.0 0.285294 20.317553 0.285294 0.423242  411.039062  400.324219   1   1 1.000000    0       62     62     1         1       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 10   1  24  24 0.402494 0.020747 0.0 0.423242 20.740794 0.423242 0.611323  411.039062  400.324219   2   2 1.000000    0       63     64     1         1       37      37 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 10   1  25  25 0.585159 0.026164 0.0 0.611323 21.352117 0.611323 0.284264  411.039062  400.324219   3   3 1.000000    0       65     67     1         1       38      38 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 10   1  26  26 0.267227 0.017037 0.0 0.284264 21.636382 0.284264 0.951416  412.843750  402.328125   1   1 1.000000    0       68     68     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 10   1  27  27 0.906744 0.044672 0.0 0.951416 22.587798 0.951416 0.282688  413.050781  402.328125   5   5 1.000000    0       69     73     1         1       40      40 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 10   1  28  28 0.266283 0.016404 0.0 0.282688 22.870486 0.282688 0.420211  413.550781  402.828125   1   1 1.000000    0       74     74     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 10   1  29  29 0.399979 0.020232 0.0 0.420211 23.290697 0.420211 0.618870  413.546875  402.828125   2   2 1.000000    0       75     76     1         1       42      42 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 10   1  30  30 0.592809 0.026061 0.0 0.618870 23.909567 0.618870 0.624103  413.601562  403.078125   3   3 1.000000    0       77     79     1         1       43      43 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 10   1  31  31 0.595052 0.029052 0.0 0.624103 24.533670 0.624103 0.000000  414.421875  403.832031   3   5 0.600000    0       80     82     2         4       44      45 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 11   3   1   1 1.201247 0.396805 0.0 1.598052  1.598052 1.598052 0.000000  418.406250  407.964844  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   2   1   1 1.057640 0.075379 0.0 1.133019  2.731071 2.731071 1.401223  418.988281  408.281250   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 11   2   2   2 1.285311 0.115912 0.0 1.401223  4.132294 1.401223 1.453401  426.781250  417.062500  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 11   2   3   3 1.310839 0.142562 0.0 1.453401  5.585695 1.453401 0.267884  431.250000  421.496094  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 11   2   4   4 0.244817 0.023067 0.0 0.267884  5.853579 0.267884 0.884434  429.937500  419.289062   2   4 0.500000    4       32     33     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 11   2   5   5 0.566080 0.318353 0.0 0.884434  6.738013 0.884434 0.859272  432.132812  421.542969   5   8 0.625000    8       34     38     3         5        9      11 1.666667 1.600000 1.154701 1.040833 0.692820 0.567727  0.301253  0.350674            0            1
 11   2   6   6 0.799114 0.060158 0.0 0.859272  7.597285 0.859272 0.000000  433.132812  422.546875   7   9 0.777778    9       39     45     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 11   1   1   1 0.399395 0.021879 0.0 0.421275  3.152346 3.152346 1.686811  417.289062  406.781250   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   1   2   2 0.268399 0.017189 0.0 0.285588  4.839157 1.686811 2.403299  417.289062  406.781250   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   1   3   3 0.905133 0.044766 0.0 0.949898  7.242456 2.403299 0.691805  417.632812  407.031250   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   1   4   4 0.399360 0.024561 0.0 0.423922  7.934261 0.691805 1.306745  418.382812  407.785156   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   1   5   5 0.398416 0.023895 0.0 0.422311  9.241007 1.306745 1.666826  418.757812  408.035156   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   1   6   6 0.767843 0.039711 0.0 0.807554 10.907832 1.666826 0.289376  418.761719  408.035156   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 11   1   7   7 0.267456 0.021920 0.0 0.289376 11.197209 0.289376 0.564392  421.355469  410.824219   1   1 1.000000    0       17     17     1         1       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   1   8   8 0.535807 0.028585 0.0 0.564392 11.761601 0.564392 1.037116  421.359375  410.824219   3   4 0.750000    0       18     20     2         3       11      12 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 11   1   9   9 0.977932 0.059184 0.0 1.037116 12.798717 1.037116 0.669365  422.414062  411.824219   5   5 1.000000    0       21     25     2         2       13      14 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 11   1  10  10 0.395995 0.273370 0.0 0.669365 13.468082 0.669365 0.420006  422.414062  411.824219   2   2 1.000000    0       26     27     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   1  11  11 0.394452 0.025554 0.0 0.420006 13.888088 0.420006 0.616501  422.539062  411.824219   2   2 1.000000    0       28     29     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   1  12  12 0.586187 0.030314 0.0 0.616501 14.504589 0.616501 0.284469  422.539062  411.824219   3   3 1.000000    0       30     32     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 11   1  13  13 0.267119 0.017350 0.0 0.284469 14.789058 0.284469 0.562596  425.785156  415.425781   1   1 1.000000    0       33     33     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   1  14  14 0.533841 0.028756 0.0 0.562596 15.351654 0.562596 0.796169  425.914062  415.425781   3   3 1.000000    0       34     36     2         2       22      23 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 11   1  15  15 0.758956 0.037213 0.0 0.796169 16.147823 0.796169 1.163867  426.101562  415.675781   4   4 1.000000    0       37     40     2         2       24      25 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 11   1  16  16 1.108041 0.055826 0.0 1.163867 17.311690 1.163867 1.012365  427.757812  417.289062   6   6 1.000000    0       41     46     2         2       26      27 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            0
 11   1  17  17 0.965334 0.047031 0.0 1.012365 18.324055 1.012365 0.809584  428.453125  418.039062   5   5 1.000000    0       47     51     2         2       28      29 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 11   1  18  18 0.768071 0.041514 0.0 0.809584 19.133639 0.809584 0.288928  429.464844  419.039062   4   6 0.666667    0       52     55     2         4       30      31 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
 11   1  19  19 0.270640 0.018288 0.0 0.288928 19.422567 0.288928 0.421707  430.207031  419.792969   1   2 0.500000    0       56     56     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 11   1  20  20 0.397167 0.024540 0.0 0.421707 19.844274 0.421707 0.421458  430.210938  419.792969   2   3 0.666667    0       57     58     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   1  21  21 0.396658 0.024800 0.0 0.421458 20.265733 0.421458 0.286777  432.195312  421.546875   2   3 0.666667    0       59     60     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 11   1  22  22 0.271049 0.015728 0.0 0.286777 20.552510 0.286777 0.286415  432.195312  421.546875   1   3 0.333333    0       61     61     1         3       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   1  23  23 0.269230 0.017185 0.0 0.286415 20.838925 0.286415 0.424186  432.195312  421.546875   1   1 1.000000    0       62     62     1         1       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   1  24  24 0.403679 0.020508 0.0 0.424186 21.263111 0.424186 0.613131  432.195312  421.546875   2   2 1.000000    0       63     64     1         1       37      37 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   1  25  25 0.586782 0.026348 0.0 0.613131 21.876242 0.613131 0.283107  432.195312  421.546875   3   3 1.000000    0       65     67     1         1       38      38 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   1  26  26 0.266509 0.016598 0.0 0.283107 22.159348 0.283107 0.952921  433.570312  423.046875   1   1 1.000000    0       68     68     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   1  27  27 0.908155 0.044765 0.0 0.952921 23.112269 0.952921 0.285512  433.695312  423.046875   5   5 1.000000    0       69     73     1         1       40      40 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   1  28  28 0.269342 0.016170 0.0 0.285512 23.397781 0.285512 0.421577  434.199219  423.546875   1   1 1.000000    0       74     74     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   1  29  29 0.402123 0.019454 0.0 0.421577 23.819358 0.421577 0.618191  434.199219  423.546875   2   2 1.000000    0       75     76     1         1       42      42 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   1  30  30 0.593033 0.025158 0.0 0.618191 24.437549 0.618191 0.620208  434.324219  423.800781   3   3 1.000000    0       77     79     1         1       43      43 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   1  31  31 0.591481 0.028727 0.0 0.620208 25.057758 0.620208 0.000000  435.132812  424.550781   3   5 0.600000    0       80     82     2         4       44      45 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 12   3   1   1 1.208336 0.148811 0.0 1.357147  1.357147 1.357147 0.000000  437.515625  427.195312  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 12   2   1   1 1.059385 0.075507 0.0 1.134892  2.492040 2.492040 1.401873  438.976562  428.468750   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 12   2   2   2 1.290166 0.111707 0.0 1.401873  3.893913 1.401873 1.450782  446.062500  436.449219  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 12   2   3   3 1.310780 0.140003 0.0 1.450782  5.344696 1.450782 0.271664  451.167969  441.328125  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 12   2   4   4 0.245222 0.026443 0.0 0.271664  5.616360 0.271664 0.615719  445.480469  436.097656   2   4 0.500000    4       32     33     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 12   2   5   5 0.563379 0.052340 0.0 0.615719  6.232079 0.615719 0.850530  447.867188  438.054688   5   8 0.625000    8       34     38     3         5        9      11 1.666667 1.600000 0.577350 0.577350 0.346410 0.346410  0.585162  0.585162            0            1
 12   2   6   6 0.796014 0.054517 0.0 0.850530  7.082610 0.850530 0.000000  451.054688  440.750000   7   9 0.777778    9       39     45     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 12   1   1   1 0.399973 0.021397 0.0 0.421370  2.913410 2.913410 1.688919  437.023438  426.402344   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 12   1   2   2 0.269012 0.018034 0.0 0.287046  4.602329 1.688919 2.400825  437.085938  426.402344   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 12   1   3   3 0.904576 0.045467 0.0 0.950043  7.003154 2.400825 0.692509  437.578125  426.902344   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 12   1   4   4 0.395899 0.024945 0.0 0.420844  7.695663 0.692509 1.301967  438.328125  427.656250   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 12   1   5   5 0.395953 0.290294 0.0 0.686248  8.997629 1.301967 1.659134  438.582031  427.906250   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 12   1   6   6 0.770247 0.038356 0.0 0.808604 10.656763 1.659134 0.286723  438.582031  427.906250   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 12   1   7   7 0.269922 0.016801 0.0 0.286723 10.943486 0.286723 0.561681  442.062500  431.707031   1   2 0.500000    0       17     17     1         2       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 12   1   8   8 0.532274 0.029406 0.0 0.561681 11.505167 0.561681 1.037792  442.187500  431.707031   3   3 1.000000    0       18     20     2         2       11      12 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 12   1   9   9 0.980254 0.057538 0.0 1.037792 12.542959 1.037792 0.421760  443.195312  432.707031   5   5 1.000000    0       21     25     2         2       13      14 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 12   1  10  10 0.399658 0.022102 0.0 0.421760 12.964719 0.421760 0.421180  443.320312  432.707031   2   2 1.000000    0       26     27     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 12   1  11  11 0.396823 0.024358 0.0 0.421180 13.385899 0.421180 0.619327  443.320312  432.707031   2   2 1.000000    0       28     29     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 12   1  12  12 0.585889 0.033438 0.0 0.619327 14.005226 0.619327 0.286494  443.859375  433.457031   3   3 1.000000    0       30     32     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 12   1  13  13 0.268019 0.018475 0.0 0.286494 14.291720 0.286494 0.558952  446.156250  435.851562   1   1 1.000000    0       33     33     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 12   1  14  14 0.530781 0.028171 0.0 0.558952 14.850671 0.558952 0.800354  446.257812  435.851562   3   3 1.000000    0       34     36     2         2       22      23 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 12   1  15  15 0.761580 0.038773 0.0 0.800354 15.651025 0.800354 1.164714  446.296875  435.851562   4   4 1.000000    0       37     40     2         2       24      25 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 12   1  16  16 1.108388 0.056326 0.0 1.164714 16.815739 1.164714 1.012119  448.167969  437.800781   6   6 1.000000    0       41     46     2         2       26      27 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            0
 12   1  17  17 0.963214 0.048905 0.0 1.012119 17.827858 1.012119 0.807776  443.003906  433.878906   5   5 1.000000    0       47     51     2         2       28      29 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 12   1  18  18 0.770436 0.037340 0.0 0.807776 18.635634 0.807776 0.288936  443.808594  434.656250   4   6 0.666667    0       52     55     2         4       30      31 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
 12   1  19  19 0.269132 0.019804 0.0 0.288936 18.924570 0.288936 0.418446  446.132812  436.804688   1   2 0.500000    0       56     56     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 12   1  20  20 0.397411 0.021035 0.0 0.418446 19.343015 0.418446 0.419573  446.179688  436.804688   2   3 0.666667    0       57     58     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 12   1  21  21 0.394936 0.024637 0.0 0.419573 19.762589 0.419573 0.289527  448.230469  438.304688   2   3 0.666667    0       59     60     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 12   1  22  22 0.270601 0.018926 0.0 0.289527 20.052116 0.289527 0.288378  448.343750  438.355469   1   1 1.000000    0       61     61     1         1       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 12   1  23  23 0.271801 0.016577 0.0 0.288378 20.340494 0.288378 0.422282  448.390625  438.402344   1   3 0.333333    0       62     62     1         3       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 12   1  24  24 0.401568 0.020713 0.0 0.422282 20.762776 0.422282 0.612129  448.457031  438.453125   2   2 1.000000    0       63     64     1         1       37      37 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 12   1  25  25 0.586542 0.025587 0.0 0.612129 21.374904 0.612129 0.282906  448.574219  438.753906   3   3 1.000000    0       65     67     1         1       38      38 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 12   1  26  26 0.266251 0.016655 0.0 0.282906 21.657810 0.282906 0.947555  451.742188  441.500000   1   1 1.000000    0       68     68     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 12   1  27  27 0.903162 0.044394 0.0 0.947555 22.605365 0.947555 0.285844  452.070312  441.750000   5   5 1.000000    0       69     73     1         1       40      40 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 12   1  28  28 0.269429 0.016415 0.0 0.285844 22.891209 0.285844 0.422960  452.636719  442.503906   1   1 1.000000    0       74     74     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 12   1  29  29 0.402915 0.020045 0.0 0.422960 23.314169 0.422960 0.618673  452.832031  442.503906   2   2 1.000000    0       75     76     1         1       42      42 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 12   1  30  30 0.593284 0.025390 0.0 0.618673 23.932843 0.618673 0.904346  452.851562  442.503906   3   3 1.000000    0       77     79     1         1       43      43 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 12   1  31  31 0.591062 0.313284 0.0 0.904346 24.837189 0.904346 0.000000  453.515625  443.308594   3   5 0.600000    0       80     82     2         4       44      45 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 13   3   1   1 1.207139 0.155725 0.0 1.362864  1.362864 1.362864 0.000000  458.742188  448.691406  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 13   2   1   1 1.061688 0.070244 0.0 1.131933  2.494797 2.494797 1.404793  458.496094  447.949219   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 13   2   2   2 1.287505 0.117288 0.0 1.404793  3.899590 1.404793 1.444627  467.570312  458.105469  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 13   2   3   3 1.313058 0.131570 0.0 1.444627  5.344217 1.444627 0.270136  470.074219  460.273438  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 13   2   4   4 0.243784 0.026351 0.0 0.270136  5.614353 0.270136 0.618535  468.519531  458.062500   2   4 0.500000    4       32     33     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 13   2   5   5 0.563202 0.055333 0.0 0.618535  6.232888 0.618535 1.154404  469.902344  459.312500   5   8 0.625000    8       34     38     3         5        9      11 1.666667 1.600000 1.154701 1.040833 0.692820 0.567727  0.301253  0.350674            0            1
 13   2   6   6 0.797402 0.357003 0.0 1.154404  7.387293 1.154404 0.000000  471.847656  461.320312   7   9 0.777778    9       39     45     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 13   1   1   1 0.398105 0.021273 0.0 0.419378  2.914175 2.914175 1.689674  456.656250  446.113281   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 13   1   2   2 0.267334 0.017547 0.0 0.284881  4.603849 1.689674 2.385543  456.718750  446.113281   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 13   1   3   3 0.900869 0.040047 0.0 0.940916  6.989393 2.385543 0.688389  456.980469  446.363281   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 13   1   4   4 0.393864 0.024389 0.0 0.418253  7.677781 0.688389 1.039301  458.171875  447.617188   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 13   1   5   5 0.396348 0.024418 0.0 0.420766  8.717083 1.039301 1.960437  458.496094  447.878906   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 13   1   6   6 0.767209 0.038823 0.0 0.806032 10.677519 1.960437 0.288796  458.621094  448.128906   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 13   1   7   7 0.268304 0.020492 0.0 0.288796 10.966316 0.288796 0.561912  461.859375  451.425781   1   1 1.000000    0       17     17     1         1       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 13   1   8   8 0.532609 0.029302 0.0 0.561912 11.528228 0.561912 1.041301  461.855469  451.425781   3   4 0.750000    0       18     20     2         3       11      12 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 13   1   9   9 0.985309 0.055991 0.0 1.041301 12.569528 1.041301 0.420492  462.781250  452.289062   5   5 1.000000    0       21     25     2         2       13      14 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 13   1  10  10 0.395546 0.024946 0.0 0.420492 12.990020 0.420492 0.716757  463.093750  452.539062   2   2 1.000000    0       26     27     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 13   1  11  11 0.399009 0.317748 0.0 0.716757 13.706777 0.716757 0.620577  463.093750  452.539062   2   2 1.000000    0       28     29     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 13   1  12  12 0.583085 0.037492 0.0 0.620577 14.327354 0.620577 0.286446  463.644531  453.289062   3   3 1.000000    0       30     32     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 13   1  13  13 0.267839 0.018607 0.0 0.286446 14.613799 0.286446 0.556893  466.738281  456.414062   1   1 1.000000    0       33     33     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 13   1  14  14 0.529407 0.027486 0.0 0.556893 15.170692 0.556893 0.798476  466.863281  456.414062   3   3 1.000000    0       34     36     2         2       22      23 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 13   1  15  15 0.761639 0.036838 0.0 0.798476 15.969169 0.798476 1.159864  466.871094  456.414062   4   4 1.000000    0       37     40     2         2       24      25 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 13   1  16  16 1.103851 0.056012 0.0 1.159864 17.129032 1.159864 1.009486  467.246094  456.914062   6   6 1.000000    0       41     46     2         2       26      27 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            0
 13   1  17  17 0.963933 0.045552 0.0 1.009486 18.138518 1.009486 0.805462  468.003906  457.667969   5   5 1.000000    0       47     51     2         2       28      29 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 13   1  18  18 0.768283 0.037178 0.0 0.805462 18.943980 0.805462 0.284883  467.328125  456.808594   4   6 0.666667    0       52     55     2         4       30      31 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
 13   1  19  19 0.266221 0.018662 0.0 0.284883 19.228863 0.284883 0.423808  468.769531  458.312500   1   2 0.500000    0       56     56     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 13   1  20  20 0.399162 0.024646 0.0 0.423808 19.652671 0.423808 0.417234  468.832031  458.312500   2   3 0.666667    0       57     58     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 13   1  21  21 0.395540 0.021694 0.0 0.417234 20.069905 0.417234 0.282579  469.902344  459.316406   2   3 0.666667    0       59     60     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 13   1  22  22 0.267072 0.015507 0.0 0.282579 20.352484 0.282579 0.284269  469.902344  459.316406   1   3 0.333333    0       61     61     1         3       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 13   1  23  23 0.267700 0.016570 0.0 0.284269 20.636753 0.284269 0.421704  469.902344  459.316406   1   1 1.000000    0       62     62     1         1       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 13   1  24  24 0.400995 0.020709 0.0 0.421704 21.058457 0.421704 0.613233  469.902344  459.316406   2   2 1.000000    0       63     64     1         1       37      37 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 13   1  25  25 0.586787 0.026445 0.0 0.613233 21.671690 0.613233 0.286232  470.089844  459.566406   3   3 1.000000    0       65     67     1         1       38      38 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 13   1  26  26 0.269317 0.016915 0.0 0.286232 21.957922 0.286232 0.949078  472.535156  462.070312   1   1 1.000000    0       68     68     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 13   1  27  27 0.905320 0.043758 0.0 0.949078 22.907000 0.949078 0.284707  472.664062  462.070312   5   5 1.000000    0       69     73     1         1       40      40 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 13   1  28  28 0.268304 0.016403 0.0 0.284707 23.191707 0.284707 0.421035  472.914062  462.324219   1   1 1.000000    0       74     74     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 13   1  29  29 0.400891 0.020145 0.0 0.421035 23.612743 0.421035 0.618455  472.914062  462.324219   2   2 1.000000    0       75     76     1         1       42      42 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 13   1  30  30 0.592984 0.025471 0.0 0.618455 24.231198 0.618455 0.621332  473.035156  462.574219   3   3 1.000000    0       77     79     1         1       43      43 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 13   1  31  31 0.592768 0.028564 0.0 0.621332 24.852529 0.621332 0.000000  473.847656  463.324219   3   5 0.600000    0       80     82     2         4       44      45 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 14   3   1   1 1.204169 0.147681 0.0 1.351850  1.351850 1.351850 0.000000  477.781250  467.355469  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   2   1   1 1.064437 0.082143 0.0 1.146579  2.498429 2.498429 1.405170  479.031250  468.621094   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 14   2   2   2 1.287191 0.117979 0.0 1.405170  3.903599 1.405170 1.440814  485.546875  476.078125  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 14   2   3   3 1.310824 0.129990 0.0 1.440814  5.344413 1.440814 0.268977  488.265625  478.613281  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 14   2   4   4 0.245316 0.023661 0.0 0.268977  5.613390 0.268977 0.616649  487.957031  477.496094   2   4 0.500000    4       32     33     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 14   2   5   5 0.564490 0.052159 0.0 0.616649  6.230039 0.616649 0.856869  488.992188  478.746094   5   8 0.625000    8       34     38     3         5        9      11 1.666667 1.600000 0.577350 0.288675 0.346410 0.173205  0.585162  0.769150            0            1
 14   2   6   6 0.796424 0.060445 0.0 0.856869  7.086908 0.856869 0.000000  491.480469  481.003906   7   9 0.777778    9       39     45     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 14   1   1   1 0.399651 0.021168 0.0 0.420819  2.919248 2.919248 1.694261  476.394531  465.812500   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   1   2   2 0.270661 0.018431 0.0 0.289091  4.613509 1.694261 2.391776  476.394531  465.812500   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   1   3   3 0.906003 0.044959 0.0 0.950962  7.005285 2.391776 0.688536  476.398438  466.062500   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   1   4   4 0.394588 0.024970 0.0 0.419559  7.693821 0.688536 1.037558  477.144531  466.562500   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   1   5   5 0.396244 0.024666 0.0 0.420909  8.731379 1.037558 1.667151  477.406250  467.062500   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   1   6   6 0.770591 0.039690 0.0 0.810282 10.398530 1.667151 0.598969  477.589844  467.070312   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 14   1   7   7 0.266608 0.332360 0.0 0.598969 10.997499 0.598969 0.567310  479.695312  469.507812   1   1 1.000000    0       17     17     1         1       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   1   8   8 0.537404 0.029906 0.0 0.567310 11.564808 0.567310 1.042155  479.761719  469.507812   3   4 0.750000    0       18     20     2         3       11      12 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 14   1   9   9 0.986016 0.056140 0.0 1.042155 12.606964 1.042155 0.419551  480.562500  470.257812   5   5 1.000000    0       21     25     2         2       13      14 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 14   1  10  10 0.394320 0.025231 0.0 0.419551 13.026515 0.419551 0.422642  480.769531  470.257812   2   2 1.000000    0       26     27     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   1  11  11 0.398272 0.024371 0.0 0.422642 13.449157 0.422642 0.629501  480.898438  470.507812   2   2 1.000000    0       28     29     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   1  12  12 0.587543 0.041958 0.0 0.629501 14.078658 0.629501 0.287348  482.050781  471.757812   3   3 1.000000    0       30     32     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 14   1  13  13 0.269934 0.017414 0.0 0.287348 14.366006 0.287348 0.557818  483.582031  473.273438   1   1 1.000000    0       33     33     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   1  14  14 0.529758 0.028060 0.0 0.557818 14.923823 0.557818 0.804034  483.660156  473.273438   3   3 1.000000    0       34     36     2         2       22      23 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 14   1  15  15 0.767197 0.036838 0.0 0.804034 15.727858 0.804034 1.160938  483.953125  473.773438   4   4 1.000000    0       37     40     2         2       24      25 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 14   1  16  16 1.105709 0.055229 0.0 1.160938 16.888796 1.160938 1.013082  486.277344  475.972656   6   6 1.000000    0       41     46     2         2       26      27 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            0
 14   1  17  17 0.967286 0.045796 0.0 1.013082 17.901878 1.013082 0.811285  486.386719  475.992188   5   5 1.000000    0       47     51     2         2       28      29 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 14   1  18  18 0.769959 0.041326 0.0 0.811285 18.713163 0.811285 0.284932  487.394531  476.992188   4   6 0.666667    0       52     55     2         4       30      31 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 14   1  19  19 0.266513 0.018419 0.0 0.284932 18.998096 0.284932 0.736364  488.203125  477.746094   1   2 0.500000    0       56     56     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 14   1  20  20 0.395139 0.341225 0.0 0.736364 19.734460 0.736364 0.283215  488.203125  477.746094   2   3 0.666667    0       57     58     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   1  21  21 0.265876 0.017338 0.0 0.283215 20.017675 0.283215 0.413920  489.328125  478.996094   1   1 1.000000    0       59     59     1         1       34      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 14   1  22  22 0.393581 0.020338 0.0 0.413920 20.431594 0.413920 0.284691  489.328125  478.996094   2   3 0.666667    0       60     61     1         2       35      35 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   1  23  23 0.267797 0.016894 0.0 0.284691 20.716285 0.284691 0.422452  489.328125  478.996094   1   3 0.333333    0       62     62     1         3       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   1  24  24 0.401973 0.020479 0.0 0.422452 21.138737 0.422452 0.614223  489.390625  478.996094   2   2 1.000000    0       63     64     1         1       37      37 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   1  25  25 0.587840 0.026383 0.0 0.614223 21.752960 0.614223 0.283536  489.488281  479.246094   3   3 1.000000    0       65     67     1         1       38      38 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   1  26  26 0.266413 0.017123 0.0 0.283536 22.036495 0.283536 0.956110  491.917969  481.503906   1   1 1.000000    0       68     68     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   1  27  27 0.907387 0.048723 0.0 0.956110 22.992605 0.956110 0.283686  491.992188  481.503906   5   5 1.000000    0       69     73     1         1       40      40 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   1  28  28 0.266629 0.017056 0.0 0.283686 23.276291 0.283686 0.425300  492.019531  481.753906   1   1 1.000000    0       74     74     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   1  29  29 0.405510 0.019790 0.0 0.425300 23.701591 0.425300 0.613510  492.015625  481.753906   2   2 1.000000    0       75     76     1         1       42      42 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   1  30  30 0.588060 0.025450 0.0 0.613510 24.315101 0.613510 0.623525  492.175781  481.753906   3   3 1.000000    0       77     79     1         1       43      43 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   1  31  31 0.594114 0.029411 0.0 0.623525 24.938626 0.623525 0.000000  492.988281  482.503906   3   5 0.600000    0       80     82     2         4       44      45 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 15   3   1   1 1.217869 0.150246 0.0 1.368115  1.368115 1.368115 0.000000  497.976562  488.097656  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   2   1   1 1.059806 0.073570 0.0 1.133376  2.501491 2.501491 1.392352  498.265625  487.925781   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 15   2   2   2 1.286525 0.105827 0.0 1.392352  3.893843 1.392352 1.455910  505.136719  495.714844  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 15   2   3   3 1.314198 0.141712 0.0 1.455910  5.349753 1.455910 0.268092  509.890625  500.183594  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 15   2   4   4 0.244617 0.023475 0.0 0.268092  5.617844 0.268092 0.611662  507.394531  496.968750   2   4 0.500000    4       32     33     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 15   2   5   5 0.563164 0.048498 0.0 0.611662  6.229507 0.611662 0.855345  508.226562  497.968750   5   8 0.625000    8       34     38     3         5        9      11 1.666667 1.600000 0.577350 0.288675 0.346410 0.173205  0.585162  0.769150            0            1
 15   2   6   6 0.801092 0.054254 0.0 0.855345  7.084852 0.855345 0.000000  509.964844  499.722656   7   9 0.777778    9       39     45     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 15   1   1   1 0.408648 0.021605 0.0 0.430254  2.931745 2.931745 1.680831  496.855469  486.703125   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   1   2   2 0.269126 0.019353 0.0 0.288479  4.612576 1.680831 2.406030  497.074219  486.703125   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   1   3   3 0.904244 0.045877 0.0 0.950120  7.018606 2.406030 0.687830  497.199219  486.953125   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   1   4   4 0.395071 0.024667 0.0 0.419738  7.706436 0.687830 1.032790  497.949219  487.703125   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   1   5   5 0.396974 0.024154 0.0 0.421128  8.739226 1.032790 1.664494  498.324219  487.953125   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   1   6   6 0.770743 0.038405 0.0 0.809149 10.403720 1.664494 0.287804  498.367188  487.953125   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 15   1   7   7 0.270608 0.017196 0.0 0.287804 10.691524 0.287804 0.561407  500.667969  490.445312   1   2 0.500000    0       17     17     1         2       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   1   8   8 0.531191 0.030215 0.0 0.561407 11.252931 0.561407 1.032780  500.734375  490.445312   3   3 1.000000    0       18     20     2         2       11      12 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 15   1   9   9 0.979975 0.052805 0.0 1.032780 12.285710 1.032780 0.418472  501.242188  490.945312   5   5 1.000000    0       21     25     2         2       13      14 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 15   1  10  10 0.393745 0.024727 0.0 0.418472 12.704183 0.418472 0.419645  501.988281  491.695312   2   2 1.000000    0       26     27     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   1  11  11 0.394962 0.024683 0.0 0.419645 13.123828 0.419645 0.628437  501.988281  491.695312   2   2 1.000000    0       28     29     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   1  12  12 0.587725 0.040712 0.0 0.628437 13.752265 0.628437 0.284908  503.175781  492.949219   3   3 1.000000    0       30     32     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 15   1  13  13 0.267545 0.017363 0.0 0.284908 14.037172 0.284908 0.558376  504.980469  494.714844   1   1 1.000000    0       33     33     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   1  14  14 0.530776 0.027601 0.0 0.558376 14.595549 0.558376 0.799381  505.074219  494.714844   3   3 1.000000    0       34     36     2         2       22      23 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 15   1  15  15 0.762089 0.037292 0.0 0.799381 15.394930 0.799381 1.159706  505.203125  494.714844   4   4 1.000000    0       37     40     2         2       24      25 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 15   1  16  16 1.104475 0.055231 0.0 1.159706 16.554636 1.159706 1.014091  505.203125  494.714844   6   6 1.000000    0       41     46     2         2       26      27 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            0
 15   1  17  17 0.967896 0.046195 0.0 1.014091 17.568727 1.014091 0.809119  505.957031  495.464844   5   5 1.000000    0       47     51     2         2       28      29 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 15   1  18  18 0.770700 0.038419 0.0 0.809119 18.377846 0.809119 0.286011  506.507812  496.214844   4   6 0.666667    0       52     55     2         4       30      31 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
 15   1  19  19 0.268076 0.017935 0.0 0.286011 18.663857 0.286011 0.419681  507.707031  497.218750   1   2 0.500000    0       56     56     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 15   1  20  20 0.398423 0.021258 0.0 0.419681 19.083538 0.419681 0.287562  507.707031  497.218750   2   3 0.666667    0       57     58     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   1  21  21 0.270099 0.017462 0.0 0.287562 19.371100 0.287562 0.420534  508.757812  498.468750   1   1 1.000000    0       59     59     1         1       34      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 15   1  22  22 0.395053 0.025480 0.0 0.420534 19.791633 0.420534 0.288735  508.960938  498.468750   2   3 0.666667    0       60     61     1         2       35      35 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   1  23  23 0.271243 0.017491 0.0 0.288735 20.080368 0.288735 0.422079  508.960938  498.468750   1   3 0.333333    0       62     62     1         3       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   1  24  24 0.401236 0.020843 0.0 0.422079 20.502446 0.422079 0.612033  508.960938  498.468750   2   2 1.000000    0       63     64     1         1       37      37 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   1  25  25 0.585530 0.026503 0.0 0.612033 21.114480 0.612033 0.285208  509.019531  498.722656   3   3 1.000000    0       65     67     1         1       38      38 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   1  26  26 0.268181 0.017027 0.0 0.285208 21.399687 0.285208 0.959083  510.453125  499.972656   1   1 1.000000    0       68     68     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   1  27  27 0.910567 0.048517 0.0 0.959083 22.358771 0.959083 0.285177  511.453125  500.976562   5   5 1.000000    0       69     73     1         1       40      40 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   1  28  28 0.268249 0.016928 0.0 0.285177 22.643948 0.285177 0.424236  511.828125  501.476562   1   1 1.000000    0       74     74     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   1  29  29 0.404269 0.019967 0.0 0.424236 23.068184 0.424236 0.618262  511.953125  501.476562   2   2 1.000000    0       75     76     1         1       42      42 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   1  30  30 0.592149 0.026113 0.0 0.618262 23.686446 0.618262 0.620817  511.953125  501.476562   3   3 1.000000    0       77     79     1         1       43      43 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   1  31  31 0.592086 0.028732 0.0 0.620817 24.307263 0.620817 0.000000  512.496094  502.226562   3   5 0.600000    0       80     82     2         4       44      45 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 16   3   1   1 1.204113 0.154393 0.0 1.358506  1.358506 1.358506 0.000000  517.296875  507.101562  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   2   1   1 1.062784 0.082314 0.0 1.145099  2.503605 2.503605 1.753397  516.933594  506.554688   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 16   2   2   2 1.291018 0.462380 0.0 1.753397  4.257002 1.753397 1.150666  523.859375  514.316406  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 16   2   3   3 1.057227 0.093438 0.0 1.150666  5.407668 1.150666 0.272527  524.703125  514.257812   9  11 0.818182   11       21     29     2         3        5       6 4.500000 3.666667 4.949747 2.828427 1.099944 0.942809 -1.572828 -0.936752            0            1
 16   2   4   4 0.246254 0.026273 0.0 0.272527  5.680194 0.272527 0.621807  525.187500  514.808594   2   4 0.500000    4       30     31     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 16   2   5   5 0.567009 0.054797 0.0 0.621807  6.302001 0.621807 0.863089  526.257812  516.062500   5   8 0.625000    8       32     36     3         5        9      11 1.666667 1.600000 0.577350 0.577350 0.346410 0.346410  0.585162  0.585162            0            1
 16   2   6   6 0.801011 0.062078 0.0 0.863089  7.165091 0.863089 0.000000  528.820312  518.386719   7   9 0.777778    9       37     43     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 16   1   1   1 0.397778 0.020791 0.0 0.418570  2.922175 2.922175 2.040454  514.187500  503.910156   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   1   2   2 0.268915 0.018142 0.0 0.287057  4.962629 2.040454 2.101905  514.378906  503.910156   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   1   3   3 0.903693 0.047546 0.0 0.951239  7.064534 2.101905 0.694843  514.378906  503.910156   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   1   4   4 0.396558 0.025759 0.0 0.422317  7.759377 0.694843 1.042226  515.003906  504.660156   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   1   5   5 0.396151 0.024269 0.0 0.420419  8.801603 1.042226 1.674604  515.375000  504.910156   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   1   6   6 0.771859 0.039656 0.0 0.811515 10.476207 1.674604 0.285889  515.402344  505.160156   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 16   1   7   7 0.268619 0.017270 0.0 0.285889 10.762096 0.285889 0.614525  519.785156  509.343750   1   2 0.500000    0       17     17     1         2       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   1   8   8 0.585328 0.029197 0.0 0.614525 11.376621 0.614525 1.406939  519.785156  509.343750   3   3 1.000000    0       18     20     2         2       11      12 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 16   1   9   9 1.326228 0.080710 0.0 1.406939 12.783560 1.406939 0.417297  522.582031  512.710938   7   7 1.000000    0       21     27     2         2       13      14 3.500000 3.500000 2.121320 2.121320 0.606092 0.606092 -0.642156 -0.642156            0            0
 16   1  10  10 0.395412 0.021885 0.0 0.417297 13.200856 0.417297 0.420467  520.820312  510.542969   2   2 1.000000    0       28     29     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   1  11  11 0.395766 0.024701 0.0 0.420467 13.621324 0.420467 0.621634  520.820312  510.542969   2   2 1.000000    0       30     31     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   1  12  12 0.584540 0.037094 0.0 0.621634 14.242958 0.621634 0.286323  521.574219  511.292969   3   3 1.000000    0       32     34     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 16   1  13  13 0.269242 0.017081 0.0 0.286323 14.529281 0.286323 0.284499  522.750000  512.300781   1   1 1.000000    0       35     35     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   1  14  14 0.267830 0.016669 0.0 0.284499 14.813779 0.284499 0.419549  522.750000  512.300781   1   1 1.000000    0       36     36     1         1       22      22 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   1  15  15 0.399707 0.019842 0.0 0.419549 15.233329 0.419549 0.611222  522.750000  512.300781   2   2 1.000000    0       37     38     1         1       23      23 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   1  16  16 0.577878 0.033344 0.0 0.611222 15.844551 0.611222 0.418211  523.621094  513.304688   3   3 1.000000    0       39     41     2         2       24      25 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 16   1  17  17 0.394590 0.023621 0.0 0.418211 16.262763 0.418211 0.812091  524.000000  513.558594   2   2 1.000000    0       42     43     2         2       26      27 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   1  18  18 0.773992 0.038099 0.0 0.812091 17.074854 0.812091 0.287886  524.003906  513.808594   4   6 0.666667    0       44     47     2         4       28      29 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
 16   1  19  19 0.269107 0.018779 0.0 0.287886 17.362739 0.287886 0.418613  525.500000  515.062500   1   2 0.500000    0       48     48     1         2       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 16   1  20  20 0.397753 0.020860 0.0 0.418613 17.781353 0.418613 0.420192  525.500000  515.062500   2   3 0.666667    0       49     50     1         2       31      31 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   1  21  21 0.395086 0.025106 0.0 0.420192 18.201545 0.420192 0.645700  526.265625  516.062500   2   3 0.666667    0       51     52     1         2       32      32 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 16   1  22  22 0.268970 0.376730 0.0 0.645700 18.847246 0.645700 0.284974  526.265625  516.062500   1   1 1.000000    0       53     53     1         1       33      33 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   1  23  23 0.267672 0.017302 0.0 0.284974 19.132220 0.284974 0.422093  526.265625  516.062500   1   3 0.333333    0       54     54     1         3       34      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   1  24  24 0.400751 0.021342 0.0 0.422093 19.554313 0.422093 0.614853  526.265625  516.062500   2   2 1.000000    0       55     56     1         1       35      35 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   1  25  25 0.587987 0.026867 0.0 0.614853 20.169166 0.614853 0.284481  526.503906  516.312500   3   3 1.000000    0       57     59     1         1       36      36 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   1  26  26 0.267616 0.016865 0.0 0.284481 20.453648 0.284481 0.952066  529.257812  518.886719   1   1 1.000000    0       60     60     1         1       37      37 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   1  27  27 0.907617 0.044449 0.0 0.952066 21.405714 0.952066 0.284478  529.351562  519.136719   5   5 1.000000    0       61     65     1         1       38      38 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   1  28  28 0.268579 0.015900 0.0 0.284478 21.690192 0.284478 0.421920  529.945312  519.636719   1   1 1.000000    0       66     66     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   1  29  29 0.401346 0.020573 0.0 0.421920 22.112112 0.421920 0.619344  530.070312  519.636719   2   2 1.000000    0       67     68     1         1       40      40 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   1  30  30 0.593379 0.025966 0.0 0.619344 22.731456 0.619344 0.621564  530.070312  519.636719   3   3 1.000000    0       69     71     1         1       41      41 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   1  31  31 0.591747 0.029817 0.0 0.621564 23.353020 0.621564 0.000000  530.820312  520.390625   3   5 0.600000    0       72     74     2         4       42      43 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 17   3   1   1 1.199780 0.139867 0.0 1.339647  1.339647 1.339647 0.000000  533.769531  523.750000  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   2   1   1 1.057614 0.075132 0.0 1.132746  2.472393 2.472393 1.400184  534.824219  524.761719   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 17   2   2   2 1.298054 0.102130 0.0 1.400184  3.872578 1.400184 1.149313  541.722656  532.347656  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 17   2   3   3 1.058859 0.090453 0.0 1.149313  5.021891 1.149313 0.269759  541.960938  531.679688   9  11 0.818182   11       21     29     2         3        5       6 4.500000 3.666667 4.949747 2.828427 1.099944 0.942809 -1.572828 -0.936752            0            1
 17   2   4   4 0.243957 0.025802 0.0 0.269759  5.291650 0.269759 0.621346  542.734375  532.582031   2   4 0.500000    4       30     31     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 17   2   5   5 0.563058 0.058288 0.0 0.621346  5.912996 0.621346 0.850245  544.496094  534.335938   5   8 0.625000    8       32     36     3         5        9      11 1.666667 1.600000 0.577350 0.577350 0.346410 0.346410  0.585162  0.585162            0            1
 17   2   6   6 0.795302 0.054943 0.0 0.850245  6.763241 0.850245 0.000000  546.156250  535.906250   7   9 0.777778    9       37     43     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 17   1   1   1 0.405172 0.020947 0.0 0.426118  2.898512 2.898512 1.687922  533.320312  523.117188   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   1   2   2 0.269976 0.017762 0.0 0.287738  4.586434 1.687922 2.096115  533.320312  523.117188   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   1   3   3 0.906602 0.040200 0.0 0.946802  6.682549 2.096115 0.691721  533.484375  523.117188   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   1   4   4 0.397490 0.024472 0.0 0.421962  7.374270 0.691721 1.044493  534.421875  524.121094   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   1   5   5 0.398086 0.025061 0.0 0.423147  8.418763 1.044493 1.664070  534.796875  524.371094   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   1   6   6 0.774395 0.039430 0.0 0.813825 10.082833 1.664070 0.286711  534.796875  524.371094   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 17   1   7   7 0.269162 0.017549 0.0 0.286711 10.369545 0.286711 0.616525  536.875000  526.863281   1   2 0.500000    0       17     17     1         2       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   1   8   8 0.587996 0.028529 0.0 0.616525 10.986070 0.616525 1.405607  537.093750  526.863281   3   3 1.000000    0       18     20     2         2       11      12 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 17   1   9   9 1.330165 0.075442 0.0 1.405607 12.391677 1.405607 0.416848  539.734375  529.964844   7   7 1.000000    0       21     27     2         2       13      14 3.500000 3.500000 2.121320 2.121320 0.606092 0.606092 -0.642156 -0.642156            0            0
 17   1  10  10 0.394966 0.021882 0.0 0.416848 12.808525 0.416848 0.791997  538.277344  528.125000   2   2 1.000000    0       28     29     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   1  11  11 0.395142 0.396855 0.0 0.791997 13.600523 0.791997 0.621199  538.277344  528.125000   2   2 1.000000    0       30     31     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   1  12  12 0.583770 0.037430 0.0 0.621199 14.221722 0.621199 0.287779  539.140625  528.875000   3   3 1.000000    0       32     34     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 17   1  13  13 0.270746 0.017032 0.0 0.287779 14.509501 0.287779 0.286411  540.238281  530.078125   1   1 1.000000    0       35     35     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   1  14  14 0.270076 0.016335 0.0 0.286411 14.795912 0.286411 0.420168  540.300781  530.078125   1   1 1.000000    0       36     36     1         1       22      22 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   1  15  15 0.400689 0.019480 0.0 0.420168 15.216081 0.420168 0.611039  540.363281  530.078125   2   2 1.000000    0       37     38     1         1       23      23 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   1  16  16 0.581715 0.029325 0.0 0.611039 15.827120 0.611039 0.416800  540.734375  530.578125   3   3 1.000000    0       39     41     2         2       24      25 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 17   1  17  17 0.394640 0.022160 0.0 0.416800 16.243920 0.416800 0.803390  541.113281  531.078125   2   2 1.000000    0       42     43     2         2       26      27 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   1  18  18 0.766418 0.036972 0.0 0.803390 17.047310 0.803390 0.286533  541.609375  531.328125   4   6 0.666667    0       44     47     2         4       28      29 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
 17   1  19  19 0.267482 0.019051 0.0 0.286533 17.333843 0.286533 0.417849  543.109375  532.832031   1   2 0.500000    0       48     48     1         2       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 17   1  20  20 0.397061 0.020788 0.0 0.417849 17.751692 0.417849 0.416408  543.109375  532.832031   2   3 0.666667    0       49     50     1         2       31      31 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   1  21  21 0.395353 0.021055 0.0 0.416408 18.168101 0.416408 0.286600  543.996094  533.835938   2   3 0.666667    0       51     52     1         2       32      32 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 17   1  22  22 0.267296 0.019304 0.0 0.286600 18.454701 0.286600 0.284224  544.187500  533.835938   1   1 1.000000    0       53     53     1         1       33      33 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   1  23  23 0.267757 0.016467 0.0 0.284224 18.738925 0.284224 0.422235  544.191406  533.835938   1   3 0.333333    0       54     54     1         3       34      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   1  24  24 0.401363 0.020872 0.0 0.422235 19.161159 0.422235 0.613234  544.191406  533.835938   2   2 1.000000    0       55     56     1         1       35      35 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   1  25  25 0.587309 0.025925 0.0 0.613234 19.774394 0.613234 0.289360  544.378906  534.085938   3   3 1.000000    0       57     59     1         1       36      36 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   1  26  26 0.272535 0.016825 0.0 0.289360 20.063754 0.289360 0.953947  546.804688  536.660156   1   1 1.000000    0       60     60     1         1       37      37 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   1  27  27 0.904736 0.049211 0.0 0.953947 21.017701 0.953947 0.288551  547.660156  537.410156   5   5 1.000000    0       61     65     1         1       38      38 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   1  28  28 0.271737 0.016814 0.0 0.288551 21.306252 0.288551 0.422052  547.722656  537.410156   1   1 1.000000    0       66     66     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   1  29  29 0.401936 0.020116 0.0 0.422052 21.728303 0.422052 0.611818  547.785156  537.410156   2   2 1.000000    0       67     68     1         1       40      40 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   1  30  30 0.586193 0.025625 0.0 0.611818 22.340121 0.611818 0.623553  547.835938  537.660156   3   3 1.000000    0       69     71     1         1       41      41 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   1  31  31 0.594297 0.029256 0.0 0.623553 22.963674 0.623553 0.000000  548.660156  538.410156   3   5 0.600000    0       72     74     2         4       42      43 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 18   3   1   1 1.204377 0.526478 0.0 1.730856  1.730856 1.730856 0.000000  552.359375  542.250000  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 18   2   1   1 1.062824 0.075524 0.0 1.138348  2.869204 2.869204 1.400712  553.136719  543.230469   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 18   2   2   2 1.288277 0.112436 0.0 1.400712  4.269916 1.400712 1.464053  561.039062  551.968750  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 18   2   3   3 1.311125 0.152928 0.0 1.464053  5.733969 1.464053 0.276968  566.117188  556.542969  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 18   2   4   4 0.249908 0.027060 0.0 0.276968  6.010937 0.276968 0.610922  562.859375  552.781250   2   4 0.500000    4       32     33     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 18   2   5   5 0.561388 0.049534 0.0 0.610922  6.621859 0.610922 0.858430  563.679688  553.531250   5   8 0.625000    8       34     38     3         5        9      11 1.666667 1.600000 0.577350 0.288675 0.346410 0.173205  0.585162  0.769150            0            1
 18   2   6   6 0.798255 0.060175 0.0 0.858430  7.480289 0.858430 0.000000  566.765625  556.605469   7   9 0.777778    9       39     45     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 18   1   1   1 0.400396 0.021505 0.0 0.421902  3.291106 3.291106 1.688385  551.617188  541.238281   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 18   1   2   2 0.269965 0.017707 0.0 0.287672  4.979490 1.688385 2.409505  551.617188  541.238281   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 18   1   3   3 0.902987 0.042465 0.0 0.945453  7.388996 2.409505 0.697177  551.617188  541.238281   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 18   1   4   4 0.396077 0.024132 0.0 0.420209  8.086172 0.697177 1.033521  552.613281  542.238281   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 18   1   5   5 0.397843 0.024756 0.0 0.422599  9.119694 1.033521 1.667242  552.875000  542.738281   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 18   1   6   6 0.770208 0.038605 0.0 0.808813 10.786936 1.667242 0.288565  553.050781  542.738281   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 18   1   7   7 0.268083 0.020482 0.0 0.288565 11.075501 0.288565 0.564351  555.406250  545.460938   1   1 1.000000    0       17     17     1         1       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 18   1   8   8 0.535078 0.029272 0.0 0.564351 11.639852 0.564351 1.032421  555.457031  545.460938   3   4 0.750000    0       18     20     2         3       11      12 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 18   1   9   9 0.977524 0.054897 0.0 1.032421 12.672272 1.032421 0.423663  555.699219  545.710938   5   5 1.000000    0       21     25     2         2       13      14 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 18   1  10  10 0.397331 0.026332 0.0 0.423663 13.095936 0.423663 0.422630  556.398438  546.210938   2   2 1.000000    0       26     27     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 18   1  11  11 0.397877 0.024753 0.0 0.422630 13.518566 0.422630 0.624193  556.402344  546.210938   2   2 1.000000    0       28     29     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 18   1  12  12 0.586784 0.037409 0.0 0.624193 14.142759 0.624193 0.675646  557.277344  547.214844   3   3 1.000000    0       30     32     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 18   1  13  13 0.268338 0.407308 0.0 0.675646 14.818405 0.675646 0.558708  559.242188  549.121094   1   1 1.000000    0       33     33     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 18   1  14  14 0.530724 0.027984 0.0 0.558708 15.377113 0.558708 0.802012  559.304688  549.121094   3   3 1.000000    0       34     36     2         2       22      23 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 18   1  15  15 0.766033 0.035979 0.0 0.802012 16.179125 0.802012 1.180879  559.320312  549.121094   4   4 1.000000    0       37     40     2         2       24      25 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 18   1  16  16 1.118989 0.061890 0.0 1.180879 17.360004 1.180879 1.013935  561.332031  551.238281   6   6 1.000000    0       41     46     2         2       26      27 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            0
 18   1  17  17 0.967653 0.046282 0.0 1.013935 18.373939 1.013935 0.828762  561.156250  551.277344   5   5 1.000000    0       47     51     2         2       28      29 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 18   1  18  18 0.786831 0.041931 0.0 0.828762 19.202701 0.828762 0.292974  561.734375  551.527344   4   6 0.666667    0       52     55     2         4       30      31 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
 18   1  19  19 0.273658 0.019316 0.0 0.292974 19.495676 0.292974 0.422537  563.109375  553.031250   1   2 0.500000    0       56     56     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 18   1  20  20 0.400426 0.022110 0.0 0.422537 19.918212 0.422537 0.286840  563.109375  553.031250   2   3 0.666667    0       57     58     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 18   1  21  21 0.269621 0.017219 0.0 0.286840 20.205053 0.286840 0.418192  564.179688  554.035156   1   1 1.000000    0       59     59     1         1       34      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 18   1  22  22 0.397356 0.020836 0.0 0.418192 20.623245 0.418192 0.289465  564.242188  554.035156   2   3 0.666667    0       60     61     1         2       35      35 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 18   1  23  23 0.272683 0.016782 0.0 0.289465 20.912710 0.289465 0.422682  564.242188  554.035156   1   3 0.333333    0       62     62     1         3       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 18   1  24  24 0.402481 0.020200 0.0 0.422682 21.335392 0.422682 0.610817  564.242188  554.035156   2   2 1.000000    0       63     64     1         1       37      37 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 18   1  25  25 0.584752 0.026064 0.0 0.610817 21.946208 0.610817 0.282653  564.429688  554.285156   3   3 1.000000    0       65     67     1         1       38      38 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 18   1  26  26 0.266313 0.016340 0.0 0.282653 22.228862 0.282653 0.950462  565.847656  555.785156   1   1 1.000000    0       68     68     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 18   1  27  27 0.906596 0.043866 0.0 0.950462 23.179323 0.950462 0.282613  566.070312  555.785156   5   5 1.000000    0       69     73     1         1       40      40 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 18   1  28  28 0.266741 0.015872 0.0 0.282613 23.461936 0.282613 0.419316  566.570312  556.285156   1   1 1.000000    0       74     74     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 18   1  29  29 0.399430 0.019886 0.0 0.419316 23.881252 0.419316 0.617307  566.570312  556.285156   2   2 1.000000    0       75     76     1         1       42      42 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 18   1  30  30 0.591569 0.025738 0.0 0.617307 24.498558 0.617307 0.619657  566.597656  556.535156   3   3 1.000000    0       77     79     1         1       43      43 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 18   1  31  31 0.590876 0.028780 0.0 0.619657 25.118215 0.619657 0.000000  567.445312  557.285156   3   5 0.600000    0       80     82     2         4       44      45 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 19   3   1   1 1.205078 0.146801 0.0 1.351879  1.351879 1.351879 0.000000  572.074219  561.859375  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   2   1   1 1.059826 0.075468 0.0 1.135294  2.487173 2.487173 1.402462  572.652344  562.683594   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 19   2   2   2 1.284806 0.117657 0.0 1.402462  3.889636 1.402462 1.432469  581.218750  572.414062  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 19   2   3   3 1.312988 0.119481 0.0 1.432469  5.322105 1.432469 0.271814  583.050781  573.511719  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 19   2   4   4 0.245705 0.026109 0.0 0.271814  5.593919 0.271814 0.615387  582.496094  572.402344   2   4 0.500000    4       32     33     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 19   2   5   5 0.561785 0.053602 0.0 0.615387  6.209306 0.615387 0.857335  583.359375  573.156250   5   8 0.625000    8       34     38     3         5        9      11 1.666667 1.600000 0.577350 0.288675 0.346410 0.173205  0.585162  0.769150            0            1
 19   2   6   6 0.797550 0.059785 0.0 0.857335  7.066640 0.857335 0.000000  585.339844  575.160156   7   9 0.777778    9       39     45     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 19   1   1   1 0.402466 0.021510 0.0 0.423976  2.911150 2.911150 1.689370  571.382812  561.136719   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   1   2   2 0.269153 0.017754 0.0 0.286908  4.600520 1.689370 2.384795  571.382812  561.136719   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   1   3   3 0.906902 0.045425 0.0 0.952326  6.985315 2.384795 1.098927  571.652344  561.386719   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   1   4   4 0.397707 0.429406 0.0 0.827113  8.084242 1.098927 1.036845  572.152344  561.886719   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   1   5   5 0.396739 0.024720 0.0 0.421459  9.121088 1.036845 1.666704  572.406250  562.136719   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   1   6   6 0.770591 0.038778 0.0 0.809369 10.787791 1.666704 0.290854  572.546875  562.386719   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 19   1   7   7 0.270631 0.020223 0.0 0.290854 11.078645 0.290854 0.562241  574.582031  564.460938   1   1 1.000000    0       17     17     1         1       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   1   8   8 0.532472 0.029769 0.0 0.562241 11.640886 0.562241 1.031591  574.773438  564.460938   3   4 0.750000    0       18     20     2         3       11      12 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 19   1   9   9 0.978431 0.053160 0.0 1.031591 12.672477 1.031591 0.421353  575.070312  564.960938   5   5 1.000000    0       21     25     2         2       13      14 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 19   1  10  10 0.396206 0.025147 0.0 0.421353 13.093830 0.421353 0.420235  575.773438  565.460938   2   2 1.000000    0       26     27     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   1  11  11 0.396317 0.023918 0.0 0.420235 13.514066 0.420235 0.623322  575.773438  565.460938   2   2 1.000000    0       28     29     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   1  12  12 0.585423 0.037899 0.0 0.623322 14.137388 0.623322 0.287011  576.644531  566.460938   3   3 1.000000    0       30     32     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 19   1  13  13 0.269514 0.017497 0.0 0.287011 14.424399 0.287011 0.560665  578.394531  568.285156   1   1 1.000000    0       33     33     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   1  14  14 0.532899 0.027766 0.0 0.560665 14.985064 0.560665 0.800267  578.601562  568.285156   3   3 1.000000    0       34     36     2         2       22      23 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 19   1  15  15 0.763640 0.036627 0.0 0.800267 15.785331 0.800267 1.170160  578.601562  568.285156   4   4 1.000000    0       37     40     2         2       24      25 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 19   1  16  16 1.109821 0.060339 0.0 1.170160 16.955490 1.170160 1.013478  580.480469  570.398438   6   6 1.000000    0       41     46     2         2       26      27 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            0
 19   1  17  17 0.966931 0.046547 0.0 1.013478 17.968968 1.013478 0.804134  581.222656  570.898438   5   5 1.000000    0       47     51     2         2       28      29 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 19   1  18  18 0.766944 0.037191 0.0 0.804134 18.773103 0.804134 0.696426  581.343750  571.152344   4   6 0.666667    0       52     55     2         4       30      31 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
 19   1  19  19 0.269726 0.426700 0.0 0.696426 19.469529 0.696426 0.418325  582.757812  572.652344   1   2 0.500000    0       56     56     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 19   1  20  20 0.396951 0.021373 0.0 0.418325 19.887854 0.418325 0.286872  582.757812  572.652344   2   3 0.666667    0       57     58     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   1  21  21 0.269261 0.017610 0.0 0.286872 20.174726 0.286872 0.419584  583.906250  573.656250   1   1 1.000000    0       59     59     1         1       34      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 19   1  22  22 0.395561 0.024023 0.0 0.419584 20.594310 0.419584 0.289666  583.968750  573.656250   2   3 0.666667    0       60     61     1         2       35      35 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   1  23  23 0.272532 0.017134 0.0 0.289666 20.883976 0.289666 0.422553  583.968750  573.656250   1   3 0.333333    0       62     62     1         3       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   1  24  24 0.401646 0.020907 0.0 0.422553 21.306529 0.422553 0.610832  583.968750  573.656250   2   2 1.000000    0       63     64     1         1       37      37 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   1  25  25 0.585286 0.025547 0.0 0.610832 21.917361 0.610832 0.284458  583.968750  573.656250   3   3 1.000000    0       65     67     1         1       38      38 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   1  26  26 0.267588 0.016870 0.0 0.284458 22.201820 0.284458 0.954250  585.472656  575.410156   1   1 1.000000    0       68     68     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   1  27  27 0.905941 0.048309 0.0 0.954250 23.156070 0.954250 0.290336  586.402344  576.667969   5   5 1.000000    0       69     73     1         1       40      40 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   1  28  28 0.272737 0.017599 0.0 0.290336 23.446405 0.290336 0.420345  585.464844  575.285156   1   1 1.000000    0       74     74     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   1  29  29 0.400225 0.020121 0.0 0.420345 23.866751 0.420345 0.625473  585.589844  575.285156   2   2 1.000000    0       75     76     1         1       42      42 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   1  30  30 0.599410 0.026063 0.0 0.625473 24.492224 0.625473 0.620533  585.609375  575.535156   3   3 1.000000    0       77     79     1         1       43      43 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   1  31  31 0.592072 0.028461 0.0 0.620533 25.112757 0.620533 0.000000  586.464844  576.289062   3   5 0.600000    0       80     82     2         4       44      45 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 20   3   1   1 1.204623 0.135313 0.0 1.339936  1.339936 1.339936 0.000000  590.250000  580.375000  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   2   1   1 1.060365 0.080323 0.0 1.140688  2.480624 2.480624 1.400547  592.007812  581.964844   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 20   2   2   2 1.293518 0.107029 0.0 1.400547  3.881171 1.400547 1.161008  599.093750  589.761719  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 20   2   3   3 1.058107 0.102901 0.0 1.161008  5.042179 1.161008 0.270999  600.625000  590.511719   9  11 0.818182   11       21     29     2         3        5       6 4.500000 3.666667 4.949747 2.828427 1.099944 0.942809 -1.572828 -0.936752            0            1
 20   2   4   4 0.244897 0.026102 0.0 0.270999  5.313178 0.270999 0.620965  598.808594  588.617188   2   4 0.500000    4       30     31     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 20   2   5   5 0.564777 0.056188 0.0 0.620965  5.934142 0.620965 0.854718  601.433594  591.265625   5   8 0.625000    8       32     36     3         5        9      11 1.666667 1.600000 0.577350 0.577350 0.346410 0.346410  0.585162  0.585162            0            1
 20   2   6   6 0.799875 0.054843 0.0 0.854718  6.788861 0.854718 0.000000  602.890625  593.101562   7   9 0.777778    9       37     43     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 20   1   1   1 0.400985 0.021612 0.0 0.422598  2.903222 2.903222 1.687378  589.917969  579.773438   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   1   2   2 0.269023 0.017808 0.0 0.286831  4.590600 1.687378 2.113458  590.042969  579.773438   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   1   3   3 0.906581 0.045870 0.0 0.952451  6.704058 2.113458 0.689213  590.484375  580.277344   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   1   4   4 0.397252 0.020962 0.0 0.418214  7.393272 0.689213 1.042386  591.046875  580.777344   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   1   5   5 0.397386 0.024035 0.0 0.421421  8.435657 1.042386 1.668653  591.296875  581.027344   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   1   6   6 0.774025 0.039910 0.0 0.813935 10.104310 1.668653 0.284692  591.671875  581.531250   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 20   1   7   7 0.267405 0.017287 0.0 0.284692 10.389002 0.284692 0.616157  594.175781  583.960938   1   2 0.500000    0       17     17     1         2       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   1   8   8 0.586808 0.029349 0.0 0.616157 11.005160 0.616157 1.832309  594.242188  583.960938   3   3 1.000000    0       18     20     2         2       11      12 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 20   1   9   9 1.324005 0.508304 0.0 1.832309 12.837469 1.832309 0.417882  596.296875  586.082031   7   7 1.000000    0       21     27     2         2       13      14 3.500000 3.500000 2.121320 2.121320 0.606092 0.606092 -0.642156 -0.642156            0            0
 20   1  10  10 0.392253 0.025630 0.0 0.417882 13.255351 0.417882 0.421178  596.070312  585.789062   2   2 1.000000    0       28     29     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   1  11  11 0.396610 0.024568 0.0 0.421178 13.676529 0.421178 0.613494  596.070312  585.789062   2   2 1.000000    0       30     31     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   1  12  12 0.583179 0.030315 0.0 0.613494 14.290023 0.613494 0.287367  596.070312  585.789062   3   3 1.000000    0       32     34     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 20   1  13  13 0.269925 0.017442 0.0 0.287367 14.577390 0.287367 0.285914  596.769531  586.613281   1   1 1.000000    0       35     35     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   1  14  14 0.269657 0.016258 0.0 0.285914 14.863304 0.285914 0.421726  596.769531  586.613281   1   1 1.000000    0       36     36     1         1       22      22 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   1  15  15 0.401371 0.020355 0.0 0.421726 15.285030 0.421726 0.605800  596.871094  586.613281   2   2 1.000000    0       37     38     1         1       23      23 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   1  16  16 0.577406 0.028394 0.0 0.605800 15.890831 0.605800 0.422256  596.871094  586.613281   3   3 1.000000    0       39     41     2         2       24      25 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 20   1  17  17 0.398911 0.023345 0.0 0.422256 16.313086 0.422256 0.807284  597.371094  587.113281   2   2 1.000000    0       42     43     2         2       26      27 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   1  18  18 0.768278 0.039006 0.0 0.807284 17.120370 0.807284 0.285342  597.640625  587.613281   4   6 0.666667    0       44     47     2         4       28      29 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
 20   1  19  19 0.267084 0.018258 0.0 0.285342 17.405712 0.285342 0.420981  599.121094  588.867188   1   2 0.500000    0       48     48     1         2       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 20   1  20  20 0.396295 0.024686 0.0 0.420981 17.826693 0.420981 0.422687  599.117188  588.867188   2   3 0.666667    0       49     50     1         2       31      31 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   1  21  21 0.396295 0.026392 0.0 0.422687 18.249380 0.422687 0.288093  601.746094  591.519531   2   3 0.666667    0       51     52     1         2       32      32 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 20   1  22  22 0.268443 0.019650 0.0 0.288093 18.537473 0.288093 0.283024  601.746094  591.519531   1   1 1.000000    0       53     53     1         1       33      33 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   1  23  23 0.266529 0.016495 0.0 0.283024 18.820496 0.283024 0.420077  601.746094  591.519531   1   3 0.333333    0       54     54     1         3       34      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   1  24  24 0.399252 0.020825 0.0 0.420077 19.240573 0.420077 0.609018  601.746094  591.519531   2   2 1.000000    0       55     56     1         1       35      35 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   1  25  25 0.583106 0.025912 0.0 0.609018 19.849591 0.609018 0.287560  601.761719  591.519531   3   3 1.000000    0       57     59     1         1       36      36 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   1  26  26 0.270832 0.016728 0.0 0.287560 20.137151 0.287560 0.948101  602.277344  592.152344   1   1 1.000000    0       60     60     1         1       37      37 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   1  27  27 0.903353 0.044748 0.0 0.948101 21.085252 0.948101 0.285682  603.882812  593.769531   5   5 1.000000    0       61     65     1         1       38      38 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   1  28  28 0.269502 0.016179 0.0 0.285682 21.370934 0.285682 0.422953  603.410156  593.484375   1   1 1.000000    0       66     66     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   1  29  29 0.402690 0.020263 0.0 0.422953 21.793887 0.422953 0.618703  603.437500  593.484375   2   2 1.000000    0       67     68     1         1       40      40 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   1  30  30 0.593703 0.025000 0.0 0.618703 22.412590 0.618703 0.624001  603.671875  593.484375   3   3 1.000000    0       69     71     1         1       41      41 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   1  31  31 0.595978 0.028023 0.0 0.624001 23.036591 0.624001 0.000000  604.488281  594.234375   3   5 0.600000    0       72     74     2         4       42      43 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 21   3   1   1 1.203536 0.572661 0.0 1.776197  1.776197 1.776197 0.000000  607.769531  597.617188  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 21   2   1   1 1.060688 0.074755 0.0 1.135443  2.911639 2.911639 1.391974  609.195312  599.054688   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 21   2   2   2 1.284388 0.107587 0.0 1.391974  4.303614 1.391974 1.450538  616.949219  607.914062  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 21   2   3   3 1.311818 0.138720 0.0 1.450538  5.754152 1.450538 0.721585  622.636719  613.117188  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 21   2   4   4 0.243236 0.478350 0.0 0.721585  6.475738 0.721585 0.624297  620.210938  610.203125   2   4 0.500000    4       32     33     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 21   2   5   5 0.574639 0.049658 0.0 0.624297  7.100035 0.624297 0.855788  620.960938  610.953125   5   8 0.625000    8       34     38     3         5        9      11 1.666667 1.600000 0.577350 0.577350 0.346410 0.346410  0.585162  0.585162            0            1
 21   2   6   6 0.799815 0.055973 0.0 0.855788  7.955823 0.855788 0.000000  622.742188  612.707031   7   9 0.777778    9       39     45     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 21   1   1   1 0.400390 0.021675 0.0 0.422065  3.333705 3.333705 1.677222  608.812500  598.605469   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 21   1   2   2 0.268006 0.017242 0.0 0.285248  5.010927 1.677222 2.393506  608.812500  598.605469   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 21   1   3   3 0.902375 0.040593 0.0 0.942967  7.404433 2.393506 1.142485  608.832031  598.605469   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 21   1   4   4 0.395192 0.025708 0.0 0.420900  8.546918 1.142485 1.043017  608.828125  598.804688   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 21   1   5   5 0.394551 0.024170 0.0 0.418720  9.589935 1.043017 1.663669  609.296875  599.054688   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 21   1   6   6 0.767884 0.039996 0.0 0.807880 11.253604 1.663669 0.288661  609.296875  599.054688   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 21   1   7   7 0.268361 0.020299 0.0 0.288661 11.542264 0.288661 0.562071  613.226562  603.628906   1   1 1.000000    0       17     17     1         1       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 21   1   8   8 0.532088 0.029983 0.0 0.562071 12.104336 0.562071 1.037731  613.441406  603.628906   3   4 0.750000    0       18     20     2         3       11      12 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 21   1   9   9 0.981658 0.056073 0.0 1.037731 13.142067 1.037731 0.418499  614.375000  604.628906   5   5 1.000000    0       21     25     2         2       13      14 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 21   1  10  10 0.397201 0.021299 0.0 0.418499 13.560566 0.418499 0.420392  614.535156  604.628906   2   2 1.000000    0       26     27     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 21   1  11  11 0.396268 0.024125 0.0 0.420392 13.980959 0.420392 0.625789  614.597656  604.628906   2   2 1.000000    0       28     29     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 21   1  12  12 0.587656 0.038133 0.0 0.625789 14.606748 0.625789 0.288427  615.472656  605.628906   3   3 1.000000    0       30     32     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 21   1  13  13 0.271477 0.016949 0.0 0.288427 14.895174 0.288427 0.559252  617.664062  607.699219   1   1 1.000000    0       33     33     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 21   1  14  14 0.530874 0.028377 0.0 0.559252 15.454426 0.559252 0.800646  617.789062  607.699219   3   3 1.000000    0       34     36     2         2       22      23 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 21   1  15  15 0.763063 0.037582 0.0 0.800646 16.255072 0.800646 1.163718  617.789062  607.699219   4   4 1.000000    0       37     40     2         2       24      25 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 21   1  16  16 1.109155 0.054563 0.0 1.163718 17.418789 1.163718 1.014540  617.914062  607.949219   6   6 1.000000    0       41     46     2         2       26      27 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            0
 21   1  17  17 0.968533 0.046007 0.0 1.014540 18.433330 1.014540 0.808310  618.644531  608.699219   5   5 1.000000    0       47     51     2         2       28      29 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 21   1  18  18 0.771174 0.037136 0.0 0.808310 19.241640 0.808310 0.284132  619.273438  609.199219   4   6 0.666667    0       52     55     2         4       30      31 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
 21   1  19  19 0.265709 0.018422 0.0 0.284132 19.525772 0.284132 0.426333  620.460938  610.453125   1   2 0.500000    0       56     56     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 21   1  20  20 0.401764 0.024568 0.0 0.426333 19.952105 0.426333 0.421510  620.460938  610.453125   2   3 0.666667    0       57     58     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 21   1  21  21 0.396428 0.025083 0.0 0.421510 20.373615 0.421510 0.285137  621.523438  611.453125   2   3 0.666667    0       59     60     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 21   1  22  22 0.269076 0.016061 0.0 0.285137 20.658752 0.285137 0.283754  621.585938  611.453125   1   2 0.500000    0       61     61     1         2       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 21   1  23  23 0.267678 0.016076 0.0 0.283754 20.942506 0.283754 0.420259  621.585938  611.453125   1   2 0.500000    0       62     62     1         2       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 21   1  24  24 0.399833 0.020426 0.0 0.420259 21.362765 0.420259 0.609395  621.585938  611.453125   2   2 1.000000    0       63     64     1         1       37      37 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 21   1  25  25 0.583973 0.025422 0.0 0.609395 21.972160 0.609395 0.287662  621.773438  611.703125   3   3 1.000000    0       65     67     1         1       38      38 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 21   1  26  26 0.270671 0.016991 0.0 0.287662 22.259821 0.287662 0.951024  623.128906  613.207031   1   1 1.000000    0       68     68     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 21   1  27  27 0.906794 0.044229 0.0 0.951024 23.210845 0.951024 0.285561  623.804688  613.707031   5   5 1.000000    0       69     73     1         1       40      40 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 21   1  28  28 0.269023 0.016539 0.0 0.285561 23.496407 0.285561 0.424723  624.367188  614.210938   1   1 1.000000    0       74     74     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 21   1  29  29 0.403746 0.020978 0.0 0.424723 23.921130 0.424723 0.617250  624.367188  614.210938   2   2 1.000000    0       75     76     1         1       42      42 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 21   1  30  30 0.592106 0.025145 0.0 0.617250 24.538380 0.617250 0.623576  624.402344  614.460938   3   3 1.000000    0       77     79     1         1       43      43 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 21   1  31  31 0.594302 0.029274 0.0 0.623576 25.161957 0.623576 0.000000  625.242188  615.210938   3   5 0.600000    0       80     82     2         4       44      45 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 22   3   1   1 1.206027 0.168247 0.0 1.374274  1.374274 1.374274 0.000000  629.886719  619.925781  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   2   1   1 1.062812 0.072117 0.0 1.134929  2.509203 2.509203 1.403073  628.484375  618.488281   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 22   2   2   2 1.283586 0.119487 0.0 1.403073  3.912276 1.403073 1.451110  638.894531  629.746094  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 22   2   3   3 1.309116 0.141994 0.0 1.451110  5.363386 1.451110 0.273520  641.046875  631.886719  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 22   2   4   4 0.245864 0.027656 0.0 0.273520  5.636906 0.273520 0.617043  638.191406  629.304688   2   4 0.500000    4       32     33     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 22   2   5   5 0.562350 0.054693 0.0 0.617043  6.253949 0.617043 0.853372  640.414062  631.019531   5   8 0.625000    8       34     38     3         5        9      11 1.666667 1.600000 0.577350 0.577350 0.346410 0.346410  0.585162  0.585162            0            1
 22   2   6   6 0.798509 0.054864 0.0 0.853372  7.107321 0.853372 0.000000  641.878906  632.296875   7   9 0.777778    9       39     45     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 22   1   1   1 0.402792 0.021115 0.0 0.423907  2.933109 2.933109 1.687192  626.750000  616.558594   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   1   2   2 0.266442 0.017677 0.0 0.284119  4.620301 1.687192 2.399344  626.750000  616.558594   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   1   3   3 0.903930 0.044304 0.0 0.948234  7.019645 2.399344 0.693016  627.500000  617.308594   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   1   4   4 0.394135 0.025362 0.0 0.419496  7.712661 0.693016 1.036409  628.187500  618.058594   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   1   5   5 0.395390 0.023975 0.0 0.419365  8.749070 1.036409 1.663163  628.500000  618.308594   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   1   6   6 0.770418 0.039372 0.0 0.809790 10.412233 1.663163 0.755340  628.628906  618.558594   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 22   1   7   7 0.268850 0.486491 0.0 0.755340 11.167573 0.755340 0.561935  630.902344  620.960938   1   1 1.000000    0       17     17     1         1       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   1   8   8 0.531897 0.030038 0.0 0.561935 11.729508 0.561935 1.031928  630.902344  620.960938   3   4 0.750000    0       18     20     2         3       11      12 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 22   1   9   9 0.978697 0.053232 0.0 1.031928 12.761436 1.031928 0.420365  632.128906  621.964844   5   5 1.000000    0       21     25     2         2       13      14 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 22   1  10  10 0.397544 0.022821 0.0 0.420365 13.181801 0.420365 0.420602  632.683594  622.714844   2   2 1.000000    0       26     27     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   1  11  11 0.395706 0.024896 0.0 0.420602 13.602404 0.420602 0.627513  632.878906  622.714844   2   2 1.000000    0       28     29     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   1  12  12 0.586164 0.041349 0.0 0.627513 14.229916 0.627513 0.288761  634.066406  623.964844   3   3 1.000000    0       30     32     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 22   1  13  13 0.271018 0.017744 0.0 0.288761 14.518678 0.288761 0.558886  623.402344  613.878906   1   1 1.000000    0       33     33     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   1  14  14 0.531175 0.027711 0.0 0.558886 15.077563 0.558886 0.797089  626.308594  617.265625   3   3 1.000000    0       34     36     2         2       22      23 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 22   1  15  15 0.761720 0.035369 0.0 0.797089 15.874652 0.797089 1.170739  629.351562  621.339844   4   4 1.000000    0       37     40     2         2       24      25 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 22   1  16  16 1.110188 0.060551 0.0 1.170739 17.045391 1.170739 1.018563  634.457031  626.355469   6   6 1.000000    0       41     46     2         2       26      27 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            0
 22   1  17  17 0.971015 0.047548 0.0 1.018563 18.063954 1.018563 0.805882  636.441406  627.644531   5   5 1.000000    0       47     51     2         2       28      29 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 22   1  18  18 0.769003 0.036879 0.0 0.805882 18.869836 0.805882 0.288984  636.929688  627.894531   4   6 0.666667    0       52     55     2         4       30      31 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 22   1  19  19 0.269251 0.019733 0.0 0.288984 19.158820 0.288984 0.419062  638.472656  629.554688   1   2 0.500000    0       56     56     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 22   1  20  20 0.397925 0.021137 0.0 0.419062 19.577882 0.419062 0.420994  638.500000  629.554688   2   3 0.666667    0       57     58     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   1  21  21 0.396969 0.024025 0.0 0.420994 19.998876 0.420994 0.287022  640.976562  631.527344   2   3 0.666667    0       59     60     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 22   1  22  22 0.267664 0.019358 0.0 0.287022 20.285898 0.287022 0.287635  640.976562  631.527344   1   1 1.000000    0       61     61     1         1       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   1  23  23 0.270609 0.017026 0.0 0.287635 20.573533 0.287635 0.423389  640.992188  631.546875   1   3 0.333333    0       62     62     1         3       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   1  24  24 0.402018 0.021371 0.0 0.423389 20.996922 0.423389 0.611947  641.003906  631.546875   2   2 1.000000    0       63     64     1         1       37      37 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   1  25  25 0.585716 0.026231 0.0 0.611947 21.608869 0.611947 0.281519  641.003906  631.546875   3   3 1.000000    0       65     67     1         1       38      38 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   1  26  26 0.265444 0.016075 0.0 0.281519 21.890387 0.281519 0.956526  642.578125  632.796875   1   1 1.000000    0       68     68     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   1  27  27 0.906923 0.049603 0.0 0.956526 22.846913 0.956526 0.283559  643.851562  634.304688   5   5 1.000000    0       69     73     1         1       40      40 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   1  28  28 0.267251 0.016308 0.0 0.283559 23.130472 0.283559 0.423785  642.761719  632.988281   1   1 1.000000    0       74     74     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   1  29  29 0.404200 0.019585 0.0 0.423785 23.554256 0.423785 0.618139  642.886719  632.988281   2   2 1.000000    0       75     76     1         1       42      42 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   1  30  30 0.592288 0.025851 0.0 0.618139 24.172395 0.618139 1.100847  642.890625  632.988281   3   3 1.000000    0       77     79     1         1       43      43 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   1  31  31 0.592294 0.508553 0.0 1.100847 25.273243 1.100847 0.000000  643.511719  633.738281   3   5 0.600000    0       80     82     2         4       44      45 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 23   3   1   1 1.205689 0.146042 0.0 1.351731  1.351731 1.351731 0.000000  648.503906  638.949219  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   2   1   1 1.063262 0.082344 0.0 1.145606  2.497337 2.497337 1.401112  649.378906  639.273438   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 23   2   2   2 1.281986 0.119126 0.0 1.401112  3.898449 1.401112 1.159712  657.523438  648.332031  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 23   2   3   3 1.062157 0.097555 0.0 1.159712  5.058160 1.159712 0.266550  657.199219  647.296875   9  11 0.818182   11       21     29     2         3        5       6 4.500000 3.666667 4.949747 2.828427 1.099944 0.942809 -1.572828 -0.936752            0            1
 23   2   4   4 0.243431 0.023119 0.0 0.266550  5.324710 0.266550 0.613200  658.082031  648.085938   2   4 0.500000    4       30     31     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 23   2   5   5 0.563755 0.049445 0.0 0.613200  5.937910 0.613200 0.859521  658.832031  648.839844   5   8 0.625000    8       32     36     3         5        9      11 1.666667 1.600000 0.577350 0.577350 0.346410 0.346410  0.585162  0.585162            0            1
 23   2   6   6 0.799311 0.060210 0.0 0.859521  6.797431 0.859521 0.000000  661.082031  651.093750   7   9 0.777778    9       37     43     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 23   1   1   1 0.401963 0.021493 0.0 0.423456  2.920793 2.920793 1.688393  648.535156  638.550781   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   1   2   2 0.268909 0.018372 0.0 0.287281  4.609186 1.688393 2.111111  647.000000  636.890625   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   1   3   3 0.905426 0.045973 0.0 0.951399  6.720296 2.111111 0.686941  647.191406  637.140625   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   1   4   4 0.394300 0.026092 0.0 0.420391  7.407237 0.686941 1.034002  647.886719  637.890625   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   1   5   5 0.396263 0.024539 0.0 0.420803  8.441240 1.034002 1.669762  648.273438  638.152344   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   1   6   6 0.770542 0.039699 0.0 0.810241 10.111002 1.669762 0.285887  648.304688  638.402344   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 23   1   7   7 0.269014 0.016873 0.0 0.285887 10.396888 0.285887 0.617617  650.402344  640.281250   1   2 0.500000    0       17     17     1         2       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   1   8   8 0.588136 0.029481 0.0 0.617617 11.014506 0.617617 1.401566  650.402344  640.281250   3   3 1.000000    0       18     20     2         2       11      12 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 23   1   9   9 1.325620 0.075946 0.0 1.401566 12.416072 1.401566 0.419643  653.863281  644.007812   7   7 1.000000    0       21     27     2         2       13      14 3.500000 3.500000 2.121320 2.121320 0.606092 0.606092 -0.642156 -0.642156            0            0
 23   1  10  10 0.394220 0.025423 0.0 0.419643 12.835715 0.419643 0.418144  652.742188  642.625000   2   2 1.000000    0       28     29     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   1  11  11 0.393830 0.024314 0.0 0.418144 13.253859 0.418144 0.615418  652.746094  642.625000   2   2 1.000000    0       30     31     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   1  12  12 0.585239 0.030179 0.0 0.615418 13.869277 0.615418 0.285942  652.746094  642.625000   3   3 1.000000    0       32     34     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 23   1  13  13 0.268529 0.017413 0.0 0.285942 14.155219 0.285942 0.283204  655.988281  646.031250   1   1 1.000000    0       35     35     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   1  14  14 0.267163 0.016042 0.0 0.283204 14.438424 0.283204 0.419652  655.988281  646.031250   1   1 1.000000    0       36     36     1         1       22      22 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   1  15  15 0.400135 0.019518 0.0 0.419652 14.858076 0.419652 0.608206  656.156250  646.031250   2   2 1.000000    0       37     38     1         1       23      23 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   1  16  16 0.579149 0.029058 0.0 0.608206 15.466283 0.608206 0.418646  656.390625  646.335938   3   3 1.000000    0       39     41     2         2       24      25 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 23   1  17  17 0.395349 0.023297 0.0 0.418646 15.884928 0.418646 0.805390  656.722656  646.835938   2   2 1.000000    0       42     43     2         2       26      27 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   1  18  18 0.767495 0.037894 0.0 0.805390 16.690318 0.805390 0.778594  657.203125  647.085938   4   6 0.666667    0       44     47     2         4       28      29 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
 23   1  19  19 0.268901 0.509693 0.0 0.778594 17.468912 0.778594 0.417189  658.332031  648.335938   1   2 0.500000    0       48     48     1         2       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 23   1  20  20 0.395518 0.021671 0.0 0.417189 17.886101 0.417189 0.422845  658.394531  648.335938   2   3 0.666667    0       49     50     1         2       31      31 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   1  21  21 0.397449 0.025396 0.0 0.422845 18.308945 0.422845 0.283277  659.457031  649.339844   2   3 0.666667    0       51     52     1         2       32      32 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 23   1  22  22 0.267280 0.015997 0.0 0.283277 18.592222 0.283277 0.284620  659.457031  649.339844   1   2 0.500000    0       53     53     1         2       33      33 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   1  23  23 0.268128 0.016492 0.0 0.284620 18.876842 0.284620 0.420447  659.457031  649.339844   1   2 0.500000    0       54     54     1         2       34      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   1  24  24 0.399862 0.020585 0.0 0.420447 19.297289 0.420447 0.612857  659.453125  649.339844   2   2 1.000000    0       55     56     1         1       35      35 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   1  25  25 0.587341 0.025515 0.0 0.612857 19.910146 0.612857 0.286775  659.640625  649.589844   3   3 1.000000    0       57     59     1         1       36      36 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   1  26  26 0.269936 0.016839 0.0 0.286775 20.196920 0.286775 0.956620  661.507812  651.593750   1   1 1.000000    0       60     60     1         1       37      37 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   1  27  27 0.908309 0.048310 0.0 0.956620 21.153540 0.956620 0.287431  662.082031  652.093750   5   5 1.000000    0       61     65     1         1       38      38 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   1  28  28 0.270493 0.016938 0.0 0.287431 21.440971 0.287431 0.425245  662.394531  652.347656   1   1 1.000000    0       66     66     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   1  29  29 0.405344 0.019901 0.0 0.425245 21.866216 0.425245 0.615975  662.457031  652.347656   2   2 1.000000    0       67     68     1         1       40      40 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   1  30  30 0.590274 0.025700 0.0 0.615975 22.482191 0.615975 0.628084  662.457031  652.347656   3   3 1.000000    0       69     71     1         1       41      41 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   1  31  31 0.599009 0.029076 0.0 0.628084 23.110275 0.628084 0.000000  663.082031  653.097656   3   5 0.600000    0       72     74     2         4       42      43 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 24   3   1   1 1.227301 0.159885 0.0 1.387185  1.387185 1.387185 0.000000  666.324219  656.621094  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   2   1   1 1.077574 0.079399 0.0 1.156973  2.544158 2.544158 1.438281  667.640625  657.726562   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 24   2   2   2 1.317758 0.120523 0.0 1.438281  3.982439 1.438281 1.497663  676.167969  666.886719  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 24   2   3   3 1.357323 0.140340 0.0 1.497663  5.480102 1.497663 0.281764  678.832031  669.832031  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 24   2   4   4 0.258087 0.023677 0.0 0.281764  5.761866 0.281764 0.633433  678.082031  668.328125   2   4 0.500000    4       32     33     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 24   2   5   5 0.577672 0.055761 0.0 0.633433  6.395299 0.633433 0.877810  679.769531  669.832031   5   8 0.625000    8       34     38     3         5        9      11 1.666667 1.600000 1.154701 1.732051 0.692820 0.866025  0.301253  0.085162            0            1
 24   2   6   6 0.817735 0.060075 0.0 0.877810  7.273109 0.877810 0.000000  681.429688  671.585938   7   9 0.777778    9       39     45     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 24   1   1   1 0.418064 0.021466 0.0 0.439530  2.983688 2.983688 1.745271  667.093750  657.039062   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   1   2   2 0.288788 0.018202 0.0 0.306990  4.728959 1.745271 2.461065  667.156250  657.039062   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   1   3   3 0.922043 0.041359 0.0 0.963402  7.190025 2.461065 0.704969  665.707031  655.585938   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   1   4   4 0.402474 0.020731 0.0 0.423205  7.894994 0.704969 1.058305  666.039062  656.089844   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   1   5   5 0.399645 0.025227 0.0 0.424872  8.953299 1.058305 1.709153  666.453125  656.339844   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   1   6   6 0.792719 0.038623 0.0 0.831342 10.662451 1.709153 0.292049  666.824219  656.839844   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 24   1   7   7 0.271484 0.020565 0.0 0.292049 10.954501 0.292049 0.573629  670.765625  660.890625   1   1 1.000000    0       17     17     1         1       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   1   8   8 0.544197 0.029433 0.0 0.573629 11.528130 0.573629 1.048091  670.992188  660.890625   3   4 0.750000    0       18     20     2         3       11      12 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 24   1   9   9 0.991291 0.056800 0.0 1.048091 12.576222 1.048091 0.934207  671.992188  661.890625   5   5 1.000000    0       21     25     2         2       13      14 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 24   1  10  10 0.401390 0.532817 0.0 0.934207 13.510428 0.934207 0.431438  672.242188  662.140625   2   2 1.000000    0       26     27     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   1  11  11 0.406381 0.025056 0.0 0.431438 13.941866 0.431438 0.639232  672.242188  662.140625   2   2 1.000000    0       28     29     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   1  12  12 0.602268 0.036964 0.0 0.639232 14.581099 0.639232 0.290094  672.742188  662.640625   3   3 1.000000    0       30     32     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 24   1  13  13 0.272880 0.017214 0.0 0.290094 14.871192 0.290094 0.561431  675.019531  665.574219   1   1 1.000000    0       33     33     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   1  14  14 0.532668 0.028763 0.0 0.561431 15.432623 0.561431 0.818784  675.160156  665.574219   3   3 1.000000    0       34     36     2         2       22      23 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 24   1  15  15 0.777363 0.041421 0.0 0.818784 16.251408 0.818784 1.207749  675.253906  665.824219   4   4 1.000000    0       37     40     2         2       24      25 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 24   1  16  16 1.146518 0.061231 0.0 1.207749 17.459156 1.207749 1.036291  676.136719  666.574219   6   6 1.000000    0       41     46     2         2       26      27 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            0
 24   1  17  17 0.988573 0.047718 0.0 1.036291 18.495447 1.036291 0.811998  676.953125  667.078125   5   5 1.000000    0       47     51     2         2       28      29 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 24   1  18  18 0.774504 0.037494 0.0 0.811998 19.307445 0.811998 0.299192  677.203125  667.328125   4   6 0.666667    0       52     55     2         4       30      31 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
 24   1  19  19 0.280165 0.019027 0.0 0.299192 19.606636 0.299192 0.427641  678.347656  668.578125   1   2 0.500000    0       56     56     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 24   1  20  20 0.402526 0.025114 0.0 0.427641 20.034277 0.427641 0.429739  678.449219  668.578125   2   3 0.666667    0       57     58     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   1  21  21 0.407438 0.022301 0.0 0.429739 20.464016 0.429739 0.284644  680.335938  670.332031   2   3 0.666667    0       59     60     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 24   1  22  22 0.268948 0.015696 0.0 0.284644 20.748660 0.284644 0.286420  680.335938  670.332031   1   2 0.500000    0       61     61     1         2       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   1  23  23 0.269889 0.016531 0.0 0.286420 21.035080 0.286420 0.429030  680.375000  670.332031   1   2 0.500000    0       62     62     1         2       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   1  24  24 0.407797 0.021233 0.0 0.429030 21.464110 0.429030 0.612715  680.375000  670.332031   2   2 1.000000    0       63     64     1         1       37      37 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   1  25  25 0.586305 0.026410 0.0 0.612715 22.076825 0.612715 0.289748  680.375000  670.332031   3   3 1.000000    0       65     67     1         1       38      38 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   1  26  26 0.273314 0.016435 0.0 0.289748 22.366573 0.289748 0.956730  681.875000  671.835938   1   1 1.000000    0       68     68     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   1  27  27 0.912842 0.043888 0.0 0.956730 23.323303 0.956730 0.290851  681.933594  672.085938   5   5 1.000000    0       69     73     1         1       40      40 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   1  28  28 0.274099 0.016752 0.0 0.290851 23.614153 0.290851 0.436440  682.500000  672.585938   1   1 1.000000    0       74     74     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   1  29  29 0.415355 0.021085 0.0 0.436440 24.050593 0.436440 0.626920  682.625000  672.585938   2   2 1.000000    0       75     76     1         1       42      42 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   1  30  30 0.601007 0.025912 0.0 0.626920 24.677513 0.626920 0.631067  682.625000  672.585938   3   3 1.000000    0       77     79     1         1       43      43 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   1  31  31 0.602199 0.028868 0.0 0.631067 25.308580 0.631067 0.000000  683.421875  673.589844   3   5 0.600000    0       80     82     2         4       44      45 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 25   3   1   1 1.252511 0.147592 0.0 1.400103  1.400103 1.400103 0.000000  686.417969  676.578125  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 25   2   1   1 1.068380 0.087095 0.0 1.155475  2.555578 2.555578 1.421030  689.457031  679.445312   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 25   2   2   2 1.308850 0.112180 0.0 1.421030  3.976608 1.421030 1.456047  694.406250  685.367188  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 25   2   3   3 1.312203 0.143844 0.0 1.456047  5.432655 1.456047 0.267909  696.890625  687.230469  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 25   2   4   4 0.244665 0.023245 0.0 0.267909  5.700565 0.267909 0.613259  696.210938  686.242188   2   4 0.500000    4       32     33     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 25   2   5   5 0.561704 0.051555 0.0 0.613259  6.313824 0.613259 1.383409  697.535156  687.746094   5   8 0.625000    8       34     38     3         5        9      11 1.666667 1.600000 1.154701 1.040833 0.692820 0.567727  0.301253  0.350674            0            1
 25   2   6   6 0.794464 0.588945 0.0 1.383409  7.697233 1.383409 0.000000  699.714844  689.753906   7   9 0.777778    9       39     45     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 25   1   1   1 0.404285 0.021904 0.0 0.426189  2.981767 2.981767 1.718676  687.507812  677.492188   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 25   1   2   2 0.279570 0.018075 0.0 0.297645  4.700442 1.718676 2.426612  687.507812  677.492188   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 25   1   3   3 0.929217 0.041348 0.0 0.970565  7.127054 2.426612 0.687423  687.511719  677.492188   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 25   1   4   4 0.397921 0.021592 0.0 0.419513  7.814477 0.687423 1.036492  687.535156  677.742188   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 25   1   5   5 0.399093 0.024140 0.0 0.423233  8.850969 1.036492 2.202532  688.011719  677.992188   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 25   1   6   6 0.779980 0.039143 0.0 0.819123 11.053501 2.202532 0.300492  686.835938  677.039062   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 25   1   7   7 0.278729 0.021763 0.0 0.300492 11.353992 0.300492 0.584862  690.167969  680.132812   1   1 1.000000    0       17     17     1         1       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 25   1   8   8 0.555512 0.029349 0.0 0.584862 11.938854 0.584862 1.055487  690.167969  680.132812   3   4 0.750000    0       18     20     2         3       11      12 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 25   1   9   9 0.999149 0.056338 0.0 1.055487 12.994342 1.055487 0.423349  690.359375  680.382812   5   5 1.000000    0       21     25     2         2       13      14 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 25   1  10  10 0.398484 0.024865 0.0 0.423349 13.417691 0.423349 0.416620  690.921875  680.882812   2   2 1.000000    0       26     27     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 25   1  11  11 0.392535 0.024085 0.0 0.416620 13.834311 0.416620 0.622760  691.109375  681.132812   2   2 1.000000    0       28     29     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 25   1  12  12 0.588309 0.034450 0.0 0.622760 14.457070 0.622760 0.282627  691.546875  681.632812   3   3 1.000000    0       30     32     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 25   1  13  13 0.265109 0.017518 0.0 0.282627 14.739698 0.282627 0.554904  692.351562  682.375000   1   1 1.000000    0       33     33     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 25   1  14  14 0.528099 0.026804 0.0 0.554904 15.294601 0.554904 0.794440  692.414062  682.375000   3   3 1.000000    0       34     36     2         2       22      23 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 25   1  15  15 0.758036 0.036404 0.0 0.794440 16.089041 0.794440 1.155709  692.449219  682.625000   4   4 1.000000    0       37     40     2         2       24      25 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 25   1  16  16 1.101128 0.054582 0.0 1.155709 17.244750 1.155709 1.008669  694.027344  683.988281   6   6 1.000000    0       41     46     2         2       26      27 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            0
 25   1  17  17 0.962954 0.045714 0.0 1.008669 18.253419 1.008669 0.799751  694.777344  684.742188   5   5 1.000000    0       47     51     2         2       28      29 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 25   1  18  18 0.763174 0.036578 0.0 0.799751 19.053170 0.799751 0.284240  695.277344  685.242188   4   6 0.666667    0       52     55     2         4       30      31 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
 25   1  19  19 0.266237 0.018003 0.0 0.284240 19.337410 0.284240 0.420815  696.523438  686.496094   1   2 0.500000    0       56     56     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 25   1  20  20 0.396615 0.024200 0.0 0.420815 19.758225 0.420815 0.417364  696.523438  686.496094   2   3 0.666667    0       57     58     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 25   1  21  21 0.393285 0.024079 0.0 0.417364 20.175589 0.417364 0.281548  697.789062  687.996094   2   3 0.666667    0       59     60     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 25   1  22  22 0.265944 0.015604 0.0 0.281548 20.457137 0.281548 0.285406  697.789062  687.996094   1   3 0.333333    0       61     61     1         3       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 25   1  23  23 0.268883 0.016523 0.0 0.285406 20.742543 0.285406 0.420239  697.789062  687.996094   1   1 1.000000    0       62     62     1         1       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 25   1  24  24 0.399602 0.020638 0.0 0.420239 21.162783 0.420239 0.609496  697.898438  687.996094   2   2 1.000000    0       63     64     1         1       37      37 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 25   1  25  25 0.583770 0.025726 0.0 0.609496 21.772278 0.609496 0.283105  698.023438  687.996094   3   3 1.000000    0       65     67     1         1       38      38 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 25   1  26  26 0.266636 0.016469 0.0 0.283105 22.055383 0.283105 0.954373  698.785156  688.886719   1   1 1.000000    0       68     68     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 25   1  27  27 0.905554 0.048819 0.0 0.954373 23.009757 0.954373 0.284531  699.605469  689.890625   5   5 1.000000    0       69     73     1         1       40      40 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 25   1  28  28 0.268243 0.016288 0.0 0.284531 23.294288 0.284531 0.419734  699.074219  689.117188   1   1 1.000000    0       74     74     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 25   1  29  29 0.399615 0.020118 0.0 0.419734 23.714021 0.419734 0.616440  699.136719  689.117188   2   2 1.000000    0       75     76     1         1       42      42 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 25   1  30  30 0.591178 0.025262 0.0 0.616440 24.330462 0.616440 0.625110  699.136719  689.117188   3   3 1.000000    0       77     79     1         1       43      43 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 25   1  31  31 0.595474 0.029636 0.0 0.625110 24.955572 0.625110 0.000000  699.570312  689.617188   3   5 0.600000    0       80     82     2         4       44      45 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 26   3   1   1 1.198759 0.147064 0.0 1.345823  1.345823 1.345823 0.000000  704.550781  694.800781  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   2   1   1 1.058961 0.084931 0.0 1.143892  2.489715 2.489715 1.388354  707.015625  697.488281   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 26   2   2   2 1.281357 0.106997 0.0 1.388354  3.878069 1.388354 1.452453  713.273438  703.914062  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 26   2   3   3 1.310780 0.141673 0.0 1.452453  5.330522 1.452453 0.267469  719.609375  710.453125  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 26   2   4   4 0.243928 0.023541 0.0 0.267469  5.597991 0.267469 0.611429  715.199219  705.222656   2   4 0.500000    4       32     33     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 26   2   5   5 0.562043 0.049386 0.0 0.611429  6.209420 0.611429 0.854334  716.214844  706.476562   5   8 0.625000    8       34     38     3         5        9      11 1.666667 1.600000 1.154701 1.040833 0.692820 0.567727  0.301253  0.350674            0            1
 26   2   6   6 0.794803 0.059531 0.0 0.854334  7.063754 0.854334 0.000000  719.773438  709.804688   7   9 0.777778    9       39     45     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 26   1   1   1 0.398040 0.021489 0.0 0.419528  2.909243 2.909243 1.672532  704.523438  694.601562   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   1   2   2 0.266735 0.017442 0.0 0.284177  4.581775 1.672532 2.391830  703.550781  693.542969   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   1   3   3 0.899262 0.040116 0.0 0.939378  6.973605 2.391830 0.686121  703.554688  693.542969   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   1   4   4 0.394554 0.024097 0.0 0.418652  7.659726 0.686121 1.027649  704.554688  694.542969   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   1   5   5 0.392458 0.023763 0.0 0.416221  8.687375 1.027649 1.660404  704.812500  695.042969   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   1   6   6 0.767597 0.038473 0.0 0.806070 10.347779 1.660404 0.291760  704.992188  695.042969   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 26   1   7   7 0.270374 0.021386 0.0 0.291760 10.639539 0.291760 0.572410  711.250000  701.511719   1   1 1.000000    0       17     17     1         1       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   1   8   8 0.542355 0.030055 0.0 0.572410 11.211949 0.572410 1.039182  711.250000  701.511719   3   4 0.750000    0       18     20     2         3       11      12 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 26   1   9   9 0.985159 0.054023 0.0 1.039182 12.251131 1.039182 0.419292  711.695312  702.011719   5   5 1.000000    0       21     25     2         2       13      14 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 26   1  10  10 0.394064 0.025228 0.0 0.419292 12.670423 0.419292 0.417596  712.402344  702.511719   2   2 1.000000    0       26     27     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   1  11  11 0.393239 0.024357 0.0 0.417596 13.088019 0.417596 0.613765  712.402344  702.511719   2   2 1.000000    0       28     29     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   1  12  12 0.580524 0.033242 0.0 0.613765 13.701784 0.613765 0.285296  712.839844  703.011719   3   3 1.000000    0       30     32     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 26   1  13  13 0.267753 0.017543 0.0 0.285296 13.987081 0.285296 0.554596  713.105469  703.265625   1   1 1.000000    0       33     33     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   1  14  14 0.527665 0.026931 0.0 0.554596 14.541676 0.554596 0.794543  713.230469  703.265625   3   3 1.000000    0       34     36     2         2       22      23 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 26   1  15  15 0.759216 0.035328 0.0 0.794543 15.336220 0.794543 1.155288  713.230469  703.265625   4   4 1.000000    0       37     40     2         2       24      25 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 26   1  16  16 1.099813 0.055475 0.0 1.155288 16.491508 1.155288 1.010456  714.390625  704.628906   6   6 1.000000    0       41     46     2         2       26      27 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            0
 26   1  17  17 0.962375 0.048081 0.0 1.010456 17.501964 1.010456 1.351720  715.101562  705.378906   5   5 1.000000    0       47     51     2         2       28      29 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 26   1  18  18 0.765945 0.585775 0.0 1.351720 18.853684 1.351720 0.284885  715.660156  705.878906   4   6 0.666667    0       52     55     2         4       30      31 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
 26   1  19  19 0.267163 0.017723 0.0 0.284885 19.138569 0.284885 0.417810  715.449219  705.476562   1   2 0.500000    0       56     56     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 26   1  20  20 0.396915 0.020895 0.0 0.417810 19.556379 0.417810 0.419488  715.449219  705.476562   2   3 0.666667    0       57     58     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   1  21  21 0.395263 0.024225 0.0 0.419488 19.975867 0.419488 0.280899  716.472656  706.726562   2   3 0.666667    0       59     60     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 26   1  22  22 0.265858 0.015041 0.0 0.280899 20.256766 0.280899 0.284504  716.707031  706.726562   1   3 0.333333    0       61     61     1         3       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   1  23  23 0.268507 0.015997 0.0 0.284504 20.541270 0.284504 0.421283  716.703125  706.726562   1   1 1.000000    0       62     62     1         1       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   1  24  24 0.401653 0.019630 0.0 0.421283 20.962554 0.421283 0.609857  716.703125  706.726562   2   2 1.000000    0       63     64     1         1       37      37 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   1  25  25 0.583807 0.026050 0.0 0.609857 21.572410 0.609857 0.283141  716.972656  707.226562   3   3 1.000000    0       65     67     1         1       38      38 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   1  26  26 0.266395 0.016747 0.0 0.283141 21.855551 0.283141 0.953603  718.890625  708.980469   1   1 1.000000    0       68     68     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   1  27  27 0.906004 0.047599 0.0 0.953603 22.809154 0.953603 0.283139  719.593750  709.988281   5   5 1.000000    0       69     73     1         1       40      40 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   1  28  28 0.266450 0.016689 0.0 0.283139 23.092293 0.283139 0.419514  718.601562  708.871094   1   1 1.000000    0       74     74     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   1  29  29 0.399890 0.019625 0.0 0.419514 23.511808 0.419514 0.616773  718.601562  708.871094   2   2 1.000000    0       75     76     1         1       42      42 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   1  30  30 0.591576 0.025197 0.0 0.616773 24.128581 0.616773 0.619810  718.777344  708.871094   3   3 1.000000    0       77     79     1         1       43      43 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   1  31  31 0.591505 0.028305 0.0 0.619810 24.748391 0.619810 0.000000  719.589844  709.621094   3   5 0.600000    0       80     82     2         4       44      45 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 27   3   1   1 1.198489 0.158536 0.0 1.357024  1.357024 1.357024 0.000000  724.593750  715.000000  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   2   1   1 1.056503 0.079643 0.0 1.136147  2.493171 2.493171 1.390045  725.835938  716.488281   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 27   2   2   2 1.278143 0.111902 0.0 1.390045  3.883216 1.390045 1.431639  733.148438  724.312500  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 27   2   3   3 1.307396 0.124243 0.0 1.431639  5.314855 1.431639 0.269834  735.312500  726.710938  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 27   2   4   4 0.244238 0.025596 0.0 0.269834  5.584689 0.269834 0.619295  734.675781  724.820312   2   4 0.500000    4       32     33     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 27   2   5   5 0.559512 0.059783 0.0 0.619295  6.203985 0.619295 0.856706  736.679688  726.824219   5   8 0.625000    8       34     38     3         5        9      11 1.666667 1.600000 0.577350 0.577350 0.346410 0.346410  0.585162  0.585162            0            1
 27   2   6   6 0.797028 0.059677 0.0 0.856706  7.060690 0.856706 0.000000  738.136719  728.328125   7   9 0.777778    9       39     45     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 27   1   1   1 0.399251 0.021136 0.0 0.420388  2.913559 2.913559 1.677229  723.929688  714.285156   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   1   2   2 0.269707 0.017477 0.0 0.287184  4.590788 1.677229 2.375609  723.929688  714.285156   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   1   3   3 0.899479 0.044491 0.0 0.943970  6.966397 2.375609 0.688180  724.296875  714.535156   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   1   4   4 0.393698 0.024648 0.0 0.418346  7.654577 0.688180 1.038382  725.046875  715.285156   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   1   5   5 0.394806 0.024281 0.0 0.419087  8.692959 1.038382 1.661315  725.421875  715.535156   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   1   6   6 0.766981 0.037629 0.0 0.804610 10.354274 1.661315 0.286798  725.421875  715.535156   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 27   1   7   7 0.266868 0.019930 0.0 0.286798 10.641073 0.286798 0.559655  728.527344  719.296875   1   1 1.000000    0       17     17     1         1       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   1   8   8 0.531256 0.028398 0.0 0.559655 11.200728 0.559655 1.033597  728.652344  719.296875   3   4 0.750000    0       18     20     2         3       11      12 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 27   1   9   9 0.976170 0.057427 0.0 1.033597 12.234324 1.033597 0.978830  729.957031  720.296875   5   5 1.000000    0       21     25     2         2       13      14 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 27   1  10  10 0.393929 0.584900 0.0 0.978830 13.213154 0.978830 0.419498  729.957031  720.296875   2   2 1.000000    0       26     27     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   1  11  11 0.395241 0.024257 0.0 0.419498 13.632652 0.419498 0.621615  730.019531  720.296875   2   2 1.000000    0       28     29     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   1  12  12 0.584651 0.036964 0.0 0.621615 14.254267 0.621615 0.284045  730.707031  721.046875   3   3 1.000000    0       30     32     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 27   1  13  13 0.267060 0.016985 0.0 0.284045 14.538312 0.284045 0.554321  732.609375  722.886719   1   1 1.000000    0       33     33     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   1  14  14 0.526326 0.027995 0.0 0.554321 15.092634 0.554321 0.799189  732.671875  722.886719   3   3 1.000000    0       34     36     2         2       22      23 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 27   1  15  15 0.761769 0.037420 0.0 0.799189 15.891823 0.799189 1.154721  732.945312  723.386719   4   4 1.000000    0       37     40     2         2       24      25 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 27   1  16  16 1.100442 0.054279 0.0 1.154721 17.046544 1.154721 1.010132  733.410156  723.679688   6   6 1.000000    0       41     46     2         2       26      27 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            0
 27   1  17  17 0.964934 0.045198 0.0 1.010132 18.056676 1.010132 0.806973  732.921875  723.066406   5   5 1.000000    0       47     51     2         2       28      29 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 27   1  18  18 0.770385 0.036588 0.0 0.806973 18.863649 0.806973 0.285948  733.488281  723.566406   4   6 0.666667    0       52     55     2         4       30      31 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
 27   1  19  19 0.267780 0.018169 0.0 0.285948 19.149597 0.285948 0.421302  734.988281  725.070312   1   2 0.500000    0       56     56     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 27   1  20  20 0.397297 0.024004 0.0 0.421302 19.570899 0.421302 0.418838  734.992188  725.070312   2   3 0.666667    0       57     58     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   1  21  21 0.394348 0.024490 0.0 0.418838 19.989737 0.418838 0.284405  736.742188  726.824219   2   3 0.666667    0       59     60     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 27   1  22  22 0.265760 0.018644 0.0 0.284405 20.274141 0.284405 0.284129  736.742188  726.824219   1   1 1.000000    0       61     61     1         1       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   1  23  23 0.267919 0.016210 0.0 0.284129 20.558271 0.284129 0.419931  736.742188  726.824219   1   3 0.333333    0       62     62     1         3       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   1  24  24 0.400091 0.019840 0.0 0.419931 20.978202 0.419931 0.608427  736.742188  726.824219   2   2 1.000000    0       63     64     1         1       37      37 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   1  25  25 0.583192 0.025235 0.0 0.608427 21.586629 0.608427 0.284389  736.742188  726.824219   3   3 1.000000    0       65     67     1         1       38      38 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   1  26  26 0.267568 0.016822 0.0 0.284389 21.871018 0.284389 0.946082  737.253906  727.464844   1   1 1.000000    0       68     68     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   1  27  27 0.902389 0.043693 0.0 0.946082 22.817101 0.946082 0.284997  737.378906  727.464844   5   5 1.000000    0       69     73     1         1       40      40 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   1  28  28 0.268528 0.016469 0.0 0.284997 23.102098 0.284997 0.419865  737.878906  727.964844   1   1 1.000000    0       74     74     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   1  29  29 0.399854 0.020010 0.0 0.419865 23.521962 0.419865 0.616956  737.882812  727.964844   2   2 1.000000    0       75     76     1         1       42      42 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   1  30  30 0.591861 0.025095 0.0 0.616956 24.138918 0.616956 0.617940  738.000000  728.214844   3   3 1.000000    0       77     79     1         1       43      43 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   1  31  31 0.589802 0.028137 0.0 0.617940 24.756858 0.617940 0.000000  738.812500  728.964844   3   5 0.600000    0       80     82     2         4       44      45 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 28   3   1   1 1.204851 0.143941 0.0 1.348792  1.348792 1.348792 0.000000  745.210938  735.675781  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   2   1   1 1.055461 0.079308 0.0 1.134769  2.483562 2.483562 1.422895  745.382812  736.011719   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 28   2   2   2 1.287025 0.135870 0.0 1.422895  3.906456 1.422895 1.452853  757.156250  748.039062  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 28   2   3   3 1.308227 0.144626 0.0 1.452853  5.359310 1.452853 0.270538  755.207031  746.539062  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 28   2   4   4 0.244034 0.026504 0.0 0.270538  5.629848 0.270538 0.610282  755.000000  745.296875   2   4 0.500000    4       32     33     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 28   2   5   5 0.561675 0.048606 0.0 0.610282  6.240130 0.610282 0.854877  755.808594  746.296875   5   8 0.625000    8       34     38     3         5        9      11 1.666667 1.600000 1.154701 1.040833 0.692820 0.567727  0.301253  0.350674            0            1
 28   2   6   6 0.794800 0.060076 0.0 0.854877  7.095006 0.854877 0.000000  758.078125  748.550781   7   9 0.777778    9       39     45     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 28   1   1   1 0.398368 0.021152 0.0 0.419520  2.903082 2.903082 1.707403  742.128906  732.328125   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   1   2   2 0.267190 0.017319 0.0 0.284509  4.610485 1.707403 2.397466  742.191406  732.328125   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   1   3   3 0.900398 0.044214 0.0 0.944613  7.007951 2.397466 0.688131  742.222656  732.328125   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   1   4   4 0.393092 0.024500 0.0 0.417592  7.696082 0.688131 1.604997  742.972656  733.078125   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   1   5   5 0.392684 0.602032 0.0 0.994716  9.301079 1.604997 1.660180  743.222656  733.328125   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   1   6   6 0.766894 0.038410 0.0 0.805304 10.961259 1.660180 0.289424  743.230469  733.335938   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 28   1   7   7 0.268228 0.021196 0.0 0.289424 11.250683 0.289424 0.561170  746.484375  736.597656   1   1 1.000000    0       17     17     1         1       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   1   8   8 0.531791 0.029379 0.0 0.561170 11.811853 0.561170 1.030384  746.484375  736.597656   3   4 0.750000    0       18     20     2         3       11      12 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 28   1   9   9 0.974333 0.056051 0.0 1.030384 12.842237 1.030384 0.414035  748.800781  738.992188   5   5 1.000000    0       21     25     2         2       13      14 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 28   1  10  10 0.392711 0.021324 0.0 0.414035 13.256272 0.414035 0.417454  746.859375  736.980469   2   2 1.000000    0       26     27     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   1  11  11 0.393278 0.024176 0.0 0.417454 13.673726 0.417454 0.627189  746.859375  736.980469   2   2 1.000000    0       28     29     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   1  12  12 0.586355 0.040834 0.0 0.627189 14.300915 0.627189 0.285369  748.023438  738.230469   3   3 1.000000    0       30     32     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 28   1  13  13 0.268059 0.017310 0.0 0.285369 14.586284 0.285369 0.554932  751.816406  742.433594   1   1 1.000000    0       33     33     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   1  14  14 0.527695 0.027237 0.0 0.554932 15.141216 0.554932 0.798281  751.816406  742.433594   3   3 1.000000    0       34     36     2         2       22      23 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 28   1  15  15 0.760344 0.037937 0.0 0.798281 15.939496 0.798281 1.155099  751.062500  741.425781   4   4 1.000000    0       37     40     2         2       24      25 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 28   1  16  16 1.100811 0.054288 0.0 1.155099 17.094595 1.155099 1.008597  752.449219  743.042969   6   6 1.000000    0       41     46     2         2       26      27 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            0
 28   1  17  17 0.962107 0.046490 0.0 1.008597 18.103192 1.008597 0.800760  753.242188  743.542969   5   5 1.000000    0       47     51     2         2       28      29 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 28   1  18  18 0.763777 0.036984 0.0 0.800760 18.903952 0.800760 0.285084  753.875000  744.292969   4   6 0.666667    0       52     55     2         4       30      31 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
 28   1  19  19 0.266575 0.018510 0.0 0.285084 19.189037 0.285084 0.419410  755.250000  745.546875   1   2 0.500000    0       56     56     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 28   1  20  20 0.394963 0.024447 0.0 0.419410 19.608447 0.419410 0.416892  755.285156  745.546875   2   3 0.666667    0       57     58     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   1  21  21 0.396134 0.020758 0.0 0.416892 20.025339 0.416892 0.281284  756.304688  746.800781   2   3 0.666667    0       59     60     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 28   1  22  22 0.266002 0.015283 0.0 0.281284 20.306623 0.281284 0.283234  756.304688  746.800781   1   3 0.333333    0       61     61     1         3       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   1  23  23 0.267008 0.016226 0.0 0.283234 20.589857 0.283234 0.419532  756.304688  746.800781   1   1 1.000000    0       62     62     1         1       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   1  24  24 0.399725 0.019806 0.0 0.419532 21.009389 0.419532 0.608181  756.472656  746.800781   2   2 1.000000    0       63     64     1         1       37      37 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   1  25  25 0.582928 0.025253 0.0 0.608181 21.617569 0.608181 0.284039  756.566406  747.050781   3   3 1.000000    0       65     67     1         1       38      38 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   1  26  26 0.268112 0.015927 0.0 0.284039 21.901608 0.284039 0.948874  758.511719  748.804688   1   1 1.000000    0       68     68     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   1  27  27 0.901187 0.047687 0.0 0.948874 22.850482 0.948874 0.283671  759.070312  749.304688   5   5 1.000000    0       69     73     1         1       40      40 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   1  28  28 0.267609 0.016063 0.0 0.283671 23.134153 0.283671 0.419895  759.078125  749.554688   1   1 1.000000    0       74     74     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   1  29  29 0.400026 0.019869 0.0 0.419895 23.554048 0.419895 0.612935  759.078125  749.554688   2   2 1.000000    0       75     76     1         1       42      42 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   1  30  30 0.588014 0.024921 0.0 0.612935 24.166984 0.612935 0.618730  759.257812  749.554688   3   3 1.000000    0       77     79     1         1       43      43 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   1  31  31 0.589850 0.028880 0.0 0.618730 24.785713 0.618730 0.000000  759.820312  750.054688   3   5 0.600000    0       80     82     2         4       44      45 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 29   3   1   1 1.199394 0.140534 0.0 1.339929  1.339929 1.339929 0.000000  763.421875  754.136719  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   2   1   1 1.055575 0.079709 0.0 1.135284  2.475213 2.475213 1.398928  765.335938  755.933594   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 29   2   2   2 1.277334 0.121593 0.0 1.398928  3.874140 1.398928 1.435204  773.554688  765.007812  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 29   2   3   3 1.305373 0.129831 0.0 1.435204  5.309345 1.435204 0.268751  774.234375  764.843750  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 29   2   4   4 0.244969 0.023782 0.0 0.268751  5.578096 0.268751 0.613079  773.402344  763.792969   2   4 0.500000    4       32     33     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 29   2   5   5 0.561287 0.051792 0.0 0.613079  6.191175 0.613079 0.850042  774.796875  765.042969   5   8 0.625000    8       34     38     3         5        9      11 1.666667 1.600000 0.577350 0.577350 0.346410 0.346410  0.585162  0.585162            0            1
 29   2   6   6 0.796016 0.054025 0.0 0.850042  7.041217 0.850042 0.000000  776.246094  766.710938   7   9 0.777778    9       39     45     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 29   1   1   1 0.399927 0.020856 0.0 0.420783  2.895995 2.895995 1.683710  762.375000  752.531250   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   1   2   2 0.267175 0.017608 0.0 0.284782  4.579706 1.683710 2.380706  762.375000  752.531250   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   1   3   3 0.901350 0.044152 0.0 0.945502  6.960412 2.380706 0.682953  762.687500  753.031250   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   1   4   4 0.393158 0.021044 0.0 0.414201  7.643365 0.682953 1.030629  763.378906  753.531250   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   1   5   5 0.393584 0.023966 0.0 0.417550  8.673994 1.030629 1.656516  763.386719  753.781250   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   1   6   6 0.768153 0.038322 0.0 0.806475 10.330510 1.656516 0.287571  763.878906  754.031250   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 29   1   7   7 0.267584 0.019987 0.0 0.287571 10.618081 0.287571 0.559909  766.542969  756.914062   1   1 1.000000    0       17     17     1         1       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   1   8   8 0.530723 0.029186 0.0 0.559909 11.177990 0.559909 1.030837  766.542969  756.914062   3   4 0.750000    0       18     20     2         3       11      12 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 29   1   9   9 0.974926 0.055910 0.0 1.030837 12.208827 1.030837 0.415412  767.949219  758.417969   5   5 1.000000    0       21     25     2         2       13      14 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 29   1  10  10 0.393703 0.021709 0.0 0.415412 12.624239 0.415412 0.418618  766.910156  757.140625   2   2 1.000000    0       26     27     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   1  11  11 0.394790 0.023828 0.0 0.418618 13.042857 0.418618 0.625294  766.972656  757.140625   2   2 1.000000    0       28     29     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   1  12  12 0.583889 0.041405 0.0 0.625294 13.668151 0.625294 0.288899  768.226562  758.640625   3   3 1.000000    0       30     32     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 29   1  13  13 0.271982 0.016917 0.0 0.288899 13.957051 0.288899 0.553279  769.304688  759.671875   1   1 1.000000    0       33     33     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   1  14  14 0.526000 0.027280 0.0 0.553279 14.510330 0.553279 0.794025  769.500000  759.671875   3   3 1.000000    0       34     36     2         2       22      23 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 29   1  15  15 0.757606 0.036419 0.0 0.794025 15.304355 0.794025 1.159848  769.746094  759.921875   4   4 1.000000    0       37     40     2         2       24      25 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 29   1  16  16 1.105117 0.054731 0.0 1.159848 16.464203 1.159848 1.008411  771.238281  761.539062   6   6 1.000000    0       41     46     2         2       26      27 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            0
 29   1  17  17 0.962313 0.046098 0.0 1.008411 17.472614 1.008411 0.803960  771.921875  762.289062   5   5 1.000000    0       47     51     2         2       28      29 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 29   1  18  18 0.766569 0.037392 0.0 0.803960 18.276574 0.803960 0.286338  772.613281  762.789062   4   6 0.666667    0       52     55     2         4       30      31 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
 29   1  19  19 0.267814 0.018524 0.0 0.286338 18.562912 0.286338 0.417231  773.734375  764.042969   1   2 0.500000    0       56     56     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 29   1  20  20 0.395765 0.021466 0.0 0.417231 18.980143 0.417231 0.417422  773.734375  764.042969   2   3 0.666667    0       57     58     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   1  21  21 0.396086 0.021336 0.0 0.417422 19.397565 0.417422 0.896820  775.359375  765.546875   2   3 0.666667    0       59     60     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 29   1  22  22 0.267646 0.629174 0.0 0.896820 20.294385 0.896820 0.285728  775.109375  765.296875   1   1 1.000000    0       61     61     1         1       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   1  23  23 0.268859 0.016869 0.0 0.285728 20.580113 0.285728 0.421303  775.109375  765.296875   1   3 0.333333    0       62     62     1         3       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   1  24  24 0.400990 0.020313 0.0 0.421303 21.001416 0.421303 0.609074  775.113281  765.296875   2   2 1.000000    0       63     64     1         1       37      37 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   1  25  25 0.582055 0.027019 0.0 0.609074 21.610490 0.609074 0.283160  775.113281  765.296875   3   3 1.000000    0       65     67     1         1       38      38 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   1  26  26 0.266746 0.016414 0.0 0.283160 21.893650 0.283160 0.949458  776.980469  767.210938   1   1 1.000000    0       68     68     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   1  27  27 0.901893 0.047565 0.0 0.949458 22.843108 0.949458 0.282346  777.792969  768.214844   5   5 1.000000    0       69     73     1         1       40      40 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   1  28  28 0.266293 0.016053 0.0 0.282346 23.125454 0.282346 0.420497  777.902344  768.214844   1   1 1.000000    0       74     74     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   1  29  29 0.400678 0.019818 0.0 0.420497 23.545951 0.420497 0.615689  778.027344  768.214844   2   2 1.000000    0       75     76     1         1       42      42 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   1  30  30 0.590794 0.024895 0.0 0.615689 24.161640 0.615689 0.619127  778.027344  768.214844   3   3 1.000000    0       77     79     1         1       43      43 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   1  31  31 0.590779 0.028348 0.0 0.619127 24.780766 0.619127 0.000000  778.832031  769.214844   3   5 0.600000    0       80     82     2         4       44      45 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 30   3   1   1 1.198457 0.147436 0.0 1.345894  1.345894 1.345894 0.000000  783.531250  774.152344  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   2   1   1 1.056112 0.080997 0.0 1.137109  2.483003 2.483003 1.405124  784.042969  774.703125   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 30   2   2   2 1.282118 0.123006 0.0 1.405124  3.888127 1.405124 1.146495  792.703125  784.230469  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 30   2   3   3 1.057690 0.088805 0.0 1.146495  5.034623 1.146495 0.269538  790.464844  780.886719   9  11 0.818182   11       21     29     2         3        5       6 4.500000 3.666667 4.949747 2.828427 1.099944 0.942809 -1.572828 -0.936752            0            1
 30   2   4   4 0.243919 0.025618 0.0 0.269538  5.304160 0.269538 0.608326  792.941406  783.371094   2   4 0.500000    4       30     31     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 30   2   5   5 0.559738 0.048587 0.0 0.608326  5.912486 0.608326 0.853775  793.390625  783.621094   5   8 0.625000    8       32     36     3         5        9      11 1.666667 1.600000 1.154701 1.732051 0.692820 0.866025  0.301253  0.085162            0            1
 30   2   6   6 0.794392 0.059384 0.0 0.853775  6.766261 0.853775 0.000000  796.316406  786.695312   7   9 0.777778    9       37     43     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 30   1   1   1 0.398673 0.020983 0.0 0.419656  2.902659 2.902659 1.688242  782.082031  772.476562   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   1   2   2 0.265979 0.017138 0.0 0.283117  4.590901 1.688242 2.092065  782.273438  772.476562   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   1   3   3 0.899543 0.046027 0.0 0.945570  6.682966 2.092065 0.688621  782.460938  772.726562   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   1   4   4 0.397558 0.021525 0.0 0.419083  7.371587 0.688621 1.028424  783.023438  773.226562   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   1   5   5 0.395188 0.024910 0.0 0.420099  8.400011 1.028424 1.661857  783.273438  773.476562   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   1   6   6 0.768956 0.039125 0.0 0.808081 10.061868 1.661857 0.287299  783.554688  773.976562   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 30   1   7   7 0.269909 0.017390 0.0 0.287299 10.349167 0.287299 0.610108  786.171875  776.566406   1   2 0.500000    0       17     17     1         2       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   1   8   8 0.581417 0.028691 0.0 0.610108 10.959275 0.610108 1.402857  786.171875  776.566406   3   3 1.000000    0       18     20     2         2       11      12 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 30   1   9   9 1.323256 0.079600 0.0 1.402857 12.362131 1.402857 0.418347  789.972656  780.464844   7   7 1.000000    0       21     27     2         2       13      14 3.500000 3.500000 3.535534 3.535534 1.010153 1.010153 -1.181272 -1.181272            0            0
 30   1  10  10 0.393489 0.024857 0.0 0.418347 12.780478 0.418347 0.415354  788.339844  778.570312   2   2 1.000000    0       28     29     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   1  11  11 0.391257 0.024097 0.0 0.415354 13.195831 0.415354 0.623596  788.343750  778.570312   2   2 1.000000    0       30     31     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   1  12  12 0.583171 0.040425 0.0 0.623596 13.819427 0.623596 0.288550  789.402344  779.820312   3   3 1.000000    0       32     34     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 30   1  13  13 0.271246 0.017304 0.0 0.288550 14.107977 0.288550 0.283414  790.011719  780.363281   1   1 1.000000    0       35     35     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   1  14  14 0.267618 0.015796 0.0 0.283414 14.391391 0.283414 0.419660  790.011719  780.363281   1   1 1.000000    0       36     36     1         1       22      22 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   1  15  15 0.399908 0.019752 0.0 0.419660 14.811051 0.419660 1.011391  790.136719  780.363281   2   2 1.000000    0       37     38     1         1       23      23 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   1  16  16 0.963998 0.047393 0.0 1.011391 15.822442 1.011391 0.742939  790.640625  780.867188   5   5 1.000000    0       39     43     2         2       24      25 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 30   1  17  17 0.710702 0.032237 0.0 0.742939 16.565381 0.742939 0.802637  791.390625  781.617188   4   4 1.000000    0       44     47     2         2       26      27 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 30   1  18  18 0.766759 0.035879 0.0 0.802637 17.368019 0.802637 0.913714  791.890625  782.117188   4   6 0.666667    0       48     51     2         4       28      29 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
 30   1  19  19 0.266562 0.647152 0.0 0.913714 18.281733 0.913714 0.418124  793.265625  783.621094   1   2 0.500000    0       52     52     1         2       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 30   1  20  20 0.393948 0.024176 0.0 0.418124 18.699857 0.418124 0.420477  793.265625  783.621094   2   3 0.666667    0       53     54     1         2       31      31 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   1  21  21 0.395742 0.024734 0.0 0.420477 19.120334 0.420477 0.283285  793.894531  784.371094   2   3 0.666667    0       55     56     1         2       32      32 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 30   1  22  22 0.267541 0.015744 0.0 0.283285 19.403619 0.283285 0.283235  793.894531  784.371094   1   2 0.500000    0       57     57     1         2       33      33 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   1  23  23 0.266481 0.016755 0.0 0.283235 19.686854 0.283235 0.420757  793.894531  784.371094   1   2 0.500000    0       58     58     1         2       34      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   1  24  24 0.399807 0.020949 0.0 0.420757 20.107611 0.420757 0.609562  793.894531  784.371094   2   2 1.000000    0       59     60     1         1       35      35 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   1  25  25 0.583352 0.026210 0.0 0.609562 20.717173 0.609562 0.284809  794.167969  784.625000   3   3 1.000000    0       61     63     1         1       36      36 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   1  26  26 0.268414 0.016395 0.0 0.284809 21.001983 0.284809 0.949391  795.531250  785.832031   1   1 1.000000    0       64     64     1         1       37      37 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   1  27  27 0.901218 0.048172 0.0 0.949391 21.951373 0.949391 0.285033  797.101562  787.339844   5   5 1.000000    0       65     69     1         1       38      38 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   1  28  28 0.268916 0.016117 0.0 0.285033 22.236406 0.285033 0.420931  797.125000  787.589844   1   1 1.000000    0       70     70     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   1  29  29 0.400812 0.020119 0.0 0.420931 22.657337 0.420931 0.616060  797.125000  787.589844   2   2 1.000000    0       71     72     1         1       40      40 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   1  30  30 0.591065 0.024995 0.0 0.616060 23.273397 0.616060 0.620931  797.285156  787.589844   3   3 1.000000    0       73     75     1         1       41      41 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   1  31  31 0.592170 0.028760 0.0 0.620931 23.894328 0.620931 0.000000  798.105469  788.593750   3   5 0.600000    0       76     78     2         4       42      43 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 31   3   1   1 1.200203 0.151309 0.0 1.351512  1.351512 1.351512 0.000000  802.914062  793.792969  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 31   2   1   1 1.057393 0.080037 0.0 1.137430  2.488942 2.488942 1.395535  802.906250  793.257812   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 31   2   2   2 1.280318 0.115218 0.0 1.395535  3.884477 1.395535 1.457532  811.839844  803.250000  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 31   2   3   3 1.307481 0.150050 0.0 1.457532  5.342009 1.457532 0.268271  814.687500  805.718750  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 31   2   4   4 0.244913 0.023358 0.0 0.268271  5.610280 0.268271 0.611748  811.828125  802.117188   2   4 0.500000    4       32     33     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 31   2   5   5 0.559995 0.051753 0.0 0.611748  6.222028 0.611748 0.858423  813.023438  803.367188   5   8 0.625000    8       34     38     3         5        9      11 1.666667 1.600000 1.154701 1.040833 0.692820 0.567727  0.301253  0.350674            0            1
 31   2   6   6 0.794381 0.064042 0.0 0.858423  7.080451 0.858423 0.000000  815.960938  806.378906   7   9 0.777778    9       39     45     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 31   1   1   1 0.403123 0.021052 0.0 0.424175  2.913117 2.913117 1.680306  801.691406  792.285156   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 31   1   2   2 0.267568 0.017202 0.0 0.284771  4.593423 1.680306 2.401089  801.691406  792.285156   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 31   1   3   3 0.899006 0.044551 0.0 0.943557  6.994512 2.401089 0.685861  802.320312  792.785156   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 31   1   4   4 0.393212 0.024378 0.0 0.417590  7.680373 0.685861 1.031042  803.070312  793.535156   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 31   1   5   5 0.394339 0.024956 0.0 0.419294  8.711415 1.031042 1.666115  803.445312  793.785156   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 31   1   6   6 0.769314 0.038379 0.0 0.807693 10.377531 1.666115 0.285377  802.398438  792.722656   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 31   1   7   7 0.265352 0.020025 0.0 0.285377 10.662907 0.285377 0.561109  804.445312  794.707031   1   1 1.000000    0       17     17     1         1       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 31   1   8   8 0.532277 0.028831 0.0 0.561109 11.224016 0.561109 1.030292  804.445312  794.707031   3   4 0.750000    0       18     20     2         3       11      12 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 31   1   9   9 0.974853 0.055438 0.0 1.030292 12.254308 1.030292 0.417437  806.070312  796.464844   5   5 1.000000    0       21     25     2         2       13      14 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 31   1  10  10 0.395908 0.021530 0.0 0.417437 12.671745 0.417437 0.419579  805.125000  795.457031   2   2 1.000000    0       26     27     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 31   1  11  11 0.395634 0.023944 0.0 0.419579 13.091323 0.419579 0.618516  805.187500  795.457031   2   2 1.000000    0       28     29     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 31   1  12  12 0.581484 0.037032 0.0 0.618516 13.709840 0.618516 0.284280  806.125000  796.457031   3   3 1.000000    0       30     32     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 31   1  13  13 0.266730 0.017549 0.0 0.284280 13.994119 0.284280 0.553813  809.578125  799.863281   1   1 1.000000    0       33     33     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 31   1  14  14 0.526724 0.027089 0.0 0.553813 14.547932 0.553813 0.797120  809.578125  799.863281   3   3 1.000000    0       34     36     2         2       22      23 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 31   1  15  15 0.760395 0.036725 0.0 0.797120 15.345052 0.797120 1.154904  809.574219  799.863281   4   4 1.000000    0       37     40     2         2       24      25 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 31   1  16  16 1.100156 0.054748 0.0 1.154904 16.499956 1.154904 1.009406  809.574219  799.863281   6   6 1.000000    0       41     46     2         2       26      27 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            0
 31   1  17  17 0.963909 0.045497 0.0 1.009406 17.509362 1.009406 0.805184  810.125000  800.613281   5   5 1.000000    0       47     51     2         2       28      29 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 31   1  18  18 0.763418 0.041767 0.0 0.805184 18.314546 0.805184 0.285869  811.140625  801.613281   4   6 0.666667    0       52     55     2         4       30      31 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 31   1  19  19 0.267201 0.018668 0.0 0.285869 18.600415 0.285869 0.419646  811.875000  802.367188   1   2 0.500000    0       56     56     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 31   1  20  20 0.395381 0.024265 0.0 0.419646 19.020061 0.419646 0.421973  812.015625  802.367188   2   3 0.666667    0       57     58     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 31   1  21  21 0.397514 0.024458 0.0 0.421973 19.442033 0.421973 0.284565  813.585938  803.871094   2   3 0.666667    0       59     60     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 31   1  22  22 0.269115 0.015450 0.0 0.284565 19.726598 0.284565 0.285487  813.585938  803.871094   1   3 0.333333    0       61     61     1         3       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 31   1  23  23 0.269089 0.016398 0.0 0.285487 20.012085 0.285487 0.420105  813.585938  803.871094   1   1 1.000000    0       62     62     1         1       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 31   1  24  24 0.399971 0.020135 0.0 0.420105 20.432191 0.420105 0.610107  813.582031  803.871094   2   2 1.000000    0       63     64     1         1       37      37 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 31   1  25  25 0.584735 0.025372 0.0 0.610107 21.042298 0.610107 0.282871  813.582031  803.871094   3   3 1.000000    0       65     67     1         1       38      38 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 31   1  26  26 0.266560 0.016311 0.0 0.282871 21.325169 0.282871 0.952423  815.589844  806.128906   1   1 1.000000    0       68     68     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 31   1  27  27 0.904304 0.048119 0.0 0.952423 22.277592 0.952423 0.282091  816.359375  806.878906   5   5 1.000000    0       69     73     1         1       40      40 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 31   1  28  28 0.265945 0.016146 0.0 0.282091 22.559683 0.282091 0.420520  816.460938  806.878906   1   1 1.000000    0       74     74     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 31   1  29  29 0.400844 0.019676 0.0 0.420520 22.980203 0.420520 0.611370  816.585938  806.878906   2   2 1.000000    0       75     76     1         1       42      42 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 31   1  30  30 0.586701 0.024669 0.0 0.611370 23.591573 0.611370 0.617854  816.585938  806.878906   3   3 1.000000    0       77     79     1         1       43      43 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 31   1  31  31 0.589348 0.028506 0.0 0.617854 24.209427 0.617854 0.000000  817.398438  807.878906   3   5 0.600000    0       80     82     2         4       44      45 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 32   3   1   1 1.199506 0.147081 0.0 1.346588  1.346588 1.346588 0.000000  820.796875  811.402344  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 32   2   1   1 1.059553 0.076094 0.0 1.135647  2.482235 2.482235 1.396310  822.179688  813.183594   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 32   2   2   2 1.286580 0.109730 0.0 1.396310  3.878545 1.396310 2.103501  830.054688  821.535156  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 32   2   3   3 1.306825 0.796676 0.0 2.103501  5.982046 2.103501 0.267502  833.160156  824.261719  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 32   2   4   4 0.244006 0.023496 0.0 0.267502  6.249548 0.267502 0.621081  832.308594  822.972656   2   4 0.500000    4       32     33     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 32   2   5   5 0.562199 0.058882 0.0 0.621081  6.870628 0.621081 0.849128  834.312500  824.980469   5   8 0.625000    8       34     38     3         5        9      11 1.666667 1.600000 1.154701 1.040833 0.692820 0.567727  0.301253  0.350674            0            1
 32   2   6   6 0.794799 0.054329 0.0 0.849128  7.719756 0.849128 0.000000  835.257812  825.730469   7   9 0.777778    9       39     45     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 32   1   1   1 0.399032 0.021264 0.0 0.420296  2.902531 2.902531 1.682405  820.535156  810.929688   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 32   1   2   2 0.268208 0.017887 0.0 0.286095  4.584936 1.682405 3.041442  820.597656  810.929688   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 32   1   3   3 0.897985 0.039956 0.0 0.937941  7.626378 3.041442 0.687397  820.609375  810.929688   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 32   1   4   4 0.395829 0.024065 0.0 0.419895  8.313775 0.687397 1.036453  821.796875  812.179688   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 32   1   5   5 0.391215 0.024157 0.0 0.415372  9.350227 1.036453 1.657499  822.109375  812.429688   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 32   1   6   6 0.770452 0.037919 0.0 0.808371 11.007726 1.657499 0.286667  822.179688  812.679688   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 32   1   7   7 0.266604 0.020063 0.0 0.286667 11.294393 0.286667 0.558284  825.867188  816.507812   1   1 1.000000    0       17     17     1         1       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 32   1   8   8 0.529757 0.028527 0.0 0.558284 11.852676 0.558284 1.031401  825.007812  815.484375   3   4 0.750000    0       18     20     2         3       11      12 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 32   1   9   9 0.975398 0.056003 0.0 1.031401 12.884078 1.031401 0.419695  825.527344  815.984375   5   5 1.000000    0       21     25     2         2       13      14 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 32   1  10  10 0.395283 0.024412 0.0 0.419695 13.303772 0.419695 0.421129  825.843750  816.234375   2   2 1.000000    0       26     27     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 32   1  11  11 0.397133 0.023996 0.0 0.421129 13.724901 0.421129 0.618548  825.843750  816.234375   2   2 1.000000    0       28     29     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 32   1  12  12 0.581421 0.037128 0.0 0.618548 14.343449 0.618548 0.286130  826.593750  816.988281   3   3 1.000000    0       30     32     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 32   1  13  13 0.268436 0.017695 0.0 0.286130 14.629580 0.286130 0.556937  829.503906  820.222656   1   1 1.000000    0       33     33     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 32   1  14  14 0.528741 0.028196 0.0 0.556937 15.186517 0.556937 0.801733  829.507812  820.222656   3   3 1.000000    0       34     36     2         2       22      23 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 32   1  15  15 0.764854 0.036878 0.0 0.801733 15.988249 0.801733 1.156962  829.511719  820.222656   4   4 1.000000    0       37     40     2         2       24      25 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 32   1  16  16 1.102604 0.054358 0.0 1.156962 17.145211 1.156962 1.007323  830.015625  820.722656   6   6 1.000000    0       41     46     2         2       26      27 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            0
 32   1  17  17 0.961784 0.045539 0.0 1.007323 18.152534 1.007323 0.809727  830.808594  821.472656   5   5 1.000000    0       47     51     2         2       28      29 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 32   1  18  18 0.768587 0.041140 0.0 0.809727 18.962261 0.809727 0.286720  831.726562  822.472656   4   6 0.666667    0       52     55     2         4       30      31 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
 32   1  19  19 0.268589 0.018131 0.0 0.286720 19.248981 0.286720 0.421197  832.558594  823.226562   1   2 0.500000    0       56     56     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 32   1  20  20 0.396469 0.024728 0.0 0.421197 19.670179 0.421197 0.417644  832.558594  823.226562   2   3 0.666667    0       57     58     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 32   1  21  21 0.393483 0.024161 0.0 0.417644 20.087823 0.417644 0.280723  834.375000  824.980469   2   3 0.666667    0       59     60     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 32   1  22  22 0.265414 0.015309 0.0 0.280723 20.368546 0.280723 0.283156  834.437500  824.980469   1   3 0.333333    0       61     61     1         3       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 32   1  23  23 0.266769 0.016387 0.0 0.283156 20.651702 0.283156 0.418694  834.437500  824.980469   1   1 1.000000    0       62     62     1         1       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 32   1  24  24 0.398441 0.020252 0.0 0.418694 21.070395 0.418694 0.621047  834.437500  824.980469   2   2 1.000000    0       63     64     1         1       37      37 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 32   1  25  25 0.582644 0.038403 0.0 0.621047 21.691442 0.621047 0.284083  834.437500  824.980469   3   3 1.000000    0       65     67     1         1       38      38 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 32   1  26  26 0.267712 0.016371 0.0 0.284083 21.975526 0.284083 0.946472  835.945312  826.480469   1   1 1.000000    0       68     68     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 32   1  27  27 0.902980 0.043491 0.0 0.946472 22.921997 0.946472 0.285284  836.320312  826.734375   5   5 1.000000    0       69     73     1         1       40      40 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 32   1  28  28 0.268537 0.016747 0.0 0.285284 23.207281 0.285284 0.423307  836.820312  827.234375   1   1 1.000000    0       74     74     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 32   1  29  29 0.403236 0.020071 0.0 0.423307 23.630588 0.423307 0.614995  836.820312  827.234375   2   2 1.000000    0       75     76     1         1       42      42 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 32   1  30  30 0.589653 0.025341 0.0 0.614995 24.245582 0.614995 0.621148  836.945312  827.484375   3   3 1.000000    0       77     79     1         1       43      43 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 32   1  31  31 0.592520 0.028627 0.0 0.621148 24.866730 0.621148 0.000000  837.757812  828.234375   3   5 0.600000    0       80     82     2         4       44      45 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 33   3   1   1 1.199771 0.147070 0.0 1.346841  1.346841 1.346841 0.000000  838.804688  829.238281  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   2   1   1 1.055124 0.083265 0.0 1.138389  2.485230 2.485230 1.385587  842.484375  832.984375   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 33   2   2   2 1.283838 0.101749 0.0 1.385587  3.870817 1.385587 2.119135  847.945312  839.062500  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 33   2   3   3 1.305511 0.813624 0.0 2.119135  5.989952 2.119135 0.268071  851.781250  842.906250  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 33   2   4   4 0.244347 0.023723 0.0 0.268071  6.258022 0.268071 0.615540  851.062500  841.550781   2   4 0.500000    4       32     33     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 33   2   5   5 0.563362 0.052177 0.0 0.615540  6.873562 0.615540 0.850475  852.414062  843.054688   5   8 0.625000    8       34     38     3         5        9      11 1.666667 1.600000 1.154701 1.040833 0.692820 0.567727  0.301253  0.350674            0            1
 33   2   6   6 0.794822 0.055653 0.0 0.850475  7.724037 0.850475 0.000000  853.847656  844.304688   7   9 0.777778    9       39     45     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 33   1   1   1 0.399016 0.021525 0.0 0.420541  2.905772 2.905772 1.670125  841.363281  831.800781   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   1   2   2 0.267170 0.017368 0.0 0.284538  4.575896 1.670125 3.065738  841.425781  831.800781   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   1   3   3 0.902598 0.044006 0.0 0.946603  7.641634 3.065738 0.683590  841.425781  831.800781   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   1   4   4 0.394859 0.020661 0.0 0.415519  8.325224 0.683590 1.034274  842.175781  832.550781   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   1   5   5 0.394663 0.024071 0.0 0.418734  9.359498 1.034274 1.654718  842.175781  832.550781   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   1   6   6 0.766052 0.038191 0.0 0.804243 11.014216 1.654718 0.285237  842.613281  833.050781   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 33   1   7   7 0.268731 0.016507 0.0 0.285237 11.299453 0.285237 0.558507  844.914062  835.281250   1   2 0.500000    0       17     17     1         2       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   1   8   8 0.530116 0.028392 0.0 0.558507 11.857960 0.558507 1.032495  844.914062  835.281250   3   3 1.000000    0       18     20     2         2       11      12 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 33   1   9   9 0.977000 0.055495 0.0 1.032495 12.890455 1.032495 0.418958  845.914062  836.281250   5   5 1.000000    0       21     25     2         2       13      14 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 33   1  10  10 0.397262 0.021696 0.0 0.418958 13.309413 0.418958 0.418746  845.917969  836.531250   2   2 1.000000    0       26     27     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   1  11  11 0.395046 0.023699 0.0 0.418746 13.728159 0.418746 0.620853  845.914062  836.531250   2   2 1.000000    0       28     29     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   1  12  12 0.584044 0.036809 0.0 0.620853 14.349012 0.620853 0.284716  847.035156  837.535156   3   3 1.000000    0       30     32     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 33   1  13  13 0.267304 0.017411 0.0 0.284716 14.633728 0.284716 0.560091  847.792969  838.296875   1   1 1.000000    0       33     33     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   1  14  14 0.531927 0.028164 0.0 0.560091 15.193819 0.560091 0.799336  847.789062  838.296875   3   3 1.000000    0       34     36     2         2       22      23 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 33   1  15  15 0.762801 0.036534 0.0 0.799336 15.993155 0.799336 1.154402  848.242188  838.796875   4   4 1.000000    0       37     40     2         2       24      25 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 33   1  16  16 1.099684 0.054718 0.0 1.154402 17.147556 1.154402 1.005421  848.867188  839.296875   6   6 1.000000    0       41     46     2         2       26      27 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            0
 33   1  17  17 0.960028 0.045393 0.0 1.005421 18.152977 1.005421 0.804326  849.621094  840.046875   5   5 1.000000    0       47     51     2         2       28      29 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 33   1  18  18 0.767451 0.036876 0.0 0.804326 18.957304 0.804326 0.284893  850.160156  840.796875   4   6 0.666667    0       52     55     2         4       30      31 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
 33   1  19  19 0.267056 0.017837 0.0 0.284893 19.242196 0.284893 0.416323  851.375000  841.800781   1   2 0.500000    0       56     56     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 33   1  20  20 0.394644 0.021679 0.0 0.416323 19.658520 0.416323 0.418415  851.375000  841.800781   2   3 0.666667    0       57     58     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   1  21  21 0.393711 0.024704 0.0 0.418415 20.076934 0.418415 0.283743  852.417969  843.054688   2   3 0.666667    0       59     60     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 33   1  22  22 0.268501 0.015242 0.0 0.283743 20.360678 0.283743 0.285933  852.625000  843.054688   1   3 0.333333    0       61     61     1         3       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   1  23  23 0.269655 0.016278 0.0 0.285933 20.646611 0.285933 0.420358  852.625000  843.054688   1   1 1.000000    0       62     62     1         1       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   1  24  24 0.400377 0.019981 0.0 0.420358 21.066969 0.420358 0.610842  852.625000  843.054688   2   2 1.000000    0       63     64     1         1       37      37 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   1  25  25 0.584763 0.026079 0.0 0.610842 21.677811 0.610842 0.283803  852.875000  843.304688   3   3 1.000000    0       65     67     1         1       38      38 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   1  26  26 0.266830 0.016973 0.0 0.283803 21.961614 0.283803 0.945820  854.503906  845.058594   1   1 1.000000    0       68     68     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   1  27  27 0.901234 0.044587 0.0 0.945820 22.907435 0.945820 0.284360  854.910156  845.308594   5   5 1.000000    0       69     73     1         1       40      40 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   1  28  28 0.268156 0.016205 0.0 0.284360 23.191795 0.284360 0.419486  855.425781  846.058594   1   1 1.000000    0       74     74     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   1  29  29 0.399620 0.019866 0.0 0.419486 23.611281 0.419486 0.613375  855.425781  846.058594   2   2 1.000000    0       75     76     1         1       42      42 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   1  30  30 0.588110 0.025265 0.0 0.613375 24.224656 0.613375 0.621918  855.535156  846.058594   3   3 1.000000    0       77     79     1         1       43      43 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   1  31  31 0.593065 0.028853 0.0 0.621918 24.846574 0.621918 0.000000  856.410156  846.808594   3   5 0.600000    0       80     82     2         4       44      45 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 34   3   1   1 1.198963 0.155335 0.0 1.354298  1.354298 1.354298 0.000000  859.890625  851.085938  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   2   1   1 1.056532 0.078618 0.0 1.135150  2.489448 2.489448 1.388854  861.683594  852.359375   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 34   2   2   2 1.281955 0.106899 0.0 1.388854  3.878303 1.388854 1.151139  867.527344  858.875000  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 34   2   3   3 1.055629 0.095510 0.0 1.151139  5.029442 1.151139 0.267559  869.644531  860.238281   9  11 0.818182   11       21     29     2         3        5       6 4.500000 3.666667 4.949747 2.828427 1.099944 0.942809 -1.572828 -0.936752            0            1
 34   2   4   4 0.244153 0.023407 0.0 0.267559  5.297001 0.267559 0.612696  870.691406  861.222656   2   4 0.500000    4       30     31     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 34   2   5   5 0.561197 0.051499 0.0 0.612696  5.909697 0.612696 0.857000  871.882812  862.476562   5   8 0.625000    8       32     36     3         5        9      11 1.666667 1.600000 1.154701 1.040833 0.692820 0.567727  0.301253  0.350674            0            1
 34   2   6   6 0.797772 0.059228 0.0 0.857000  6.766696 0.857000 0.000000  873.820312  864.480469   7   9 0.777778    9       37     43     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 34   1   1   1 0.399752 0.020892 0.0 0.420643  2.910092 2.910092 1.673159  861.074219  851.683594   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   1   2   2 0.267082 0.017223 0.0 0.284305  4.583251 1.673159 2.094292  861.082031  851.683594   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   1   3   3 0.899172 0.043981 0.0 0.943153  6.677543 2.094292 0.685956  861.113281  851.933594   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   1   4   4 0.397491 0.020906 0.0 0.418397  7.363499 0.685956 1.030967  861.843750  852.433594   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   1   5   5 0.394538 0.023733 0.0 0.418271  8.394466 1.030967 1.661072  861.843750  852.433594   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   1   6   6 0.766347 0.037725 0.0 0.804073 10.055539 1.661072 0.284851  862.324219  852.937500   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 34   1   7   7 0.267708 0.017143 0.0 0.284851 10.340389 0.284851 0.609009  864.992188  855.714844   1   2 0.500000    0       17     17     1         2       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   1   8   8 0.580978 0.028031 0.0 0.609009 10.949398 0.609009 1.395662  864.992188  855.714844   3   3 1.000000    0       18     20     2         2       11      12 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 34   1   9   9 1.321958 0.073705 0.0 1.395662 12.345061 1.395662 0.413852  867.066406  857.792969   7   7 1.000000    0       21     27     2         2       13      14 3.500000 3.500000 2.121320 2.121320 0.606092 0.606092 -0.642156 -0.642156            0            0
 34   1  10  10 0.391763 0.022090 0.0 0.413852 12.758913 0.413852 0.418081  866.742188  857.464844   2   2 1.000000    0       28     29     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   1  11  11 0.394463 0.023617 0.0 0.418081 13.176994 0.418081 0.611954  866.742188  857.464844   2   2 1.000000    0       30     31     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   1  12  12 0.582151 0.029803 0.0 0.611954 13.788948 0.611954 0.286163  866.773438  857.718750   3   3 1.000000    0       32     34     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 34   1  13  13 0.268508 0.017655 0.0 0.286163 14.075111 0.286163 0.284592  868.941406  859.472656   1   1 1.000000    0       35     35     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   1  14  14 0.268533 0.016059 0.0 0.284592 14.359703 0.284592 0.419043  868.941406  859.472656   1   1 1.000000    0       36     36     1         1       22      22 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   1  15  15 0.399175 0.019868 0.0 0.419043 14.778745 0.419043 1.315511  868.941406  859.472656   2   2 1.000000    0       37     38     1         1       23      23 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   1  16  16 0.576892 0.738619 0.0 1.315511 16.094256 1.315511 0.416420  869.441406  859.972656   3   3 1.000000    0       39     41     2         2       24      25 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 34   1  17  17 0.393189 0.023231 0.0 0.416420 16.510677 0.416420 0.806733  869.691406  860.222656   2   2 1.000000    0       42     43     2         2       26      27 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   1  18  18 0.764173 0.042560 0.0 0.806733 17.317410 0.806733 0.285548  870.066406  860.722656   4   6 0.666667    0       44     47     2         4       28      29 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
 34   1  19  19 0.266557 0.018990 0.0 0.285548 17.602958 0.285548 0.420976  870.816406  861.472656   1   2 0.500000    0       48     48     1         2       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 34   1  20  20 0.395983 0.024993 0.0 0.420976 18.023934 0.420976 0.418578  870.941406  861.472656   2   3 0.666667    0       49     50     1         2       31      31 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   1  21  21 0.394098 0.024480 0.0 0.418578 18.442512 0.418578 0.282459  872.445312  862.976562   2   3 0.666667    0       51     52     1         2       32      32 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 34   1  22  22 0.267122 0.015338 0.0 0.282459 18.724971 0.282459 0.282059  872.445312  862.976562   1   3 0.333333    0       53     53     1         3       33      33 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   1  23  23 0.265861 0.016198 0.0 0.282059 19.007030 0.282059 0.420651  872.445312  862.976562   1   1 1.000000    0       54     54     1         1       34      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   1  24  24 0.400952 0.019700 0.0 0.420651 19.427682 0.420651 0.610044  872.445312  862.976562   2   2 1.000000    0       55     56     1         1       35      35 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   1  25  25 0.583401 0.026643 0.0 0.610044 20.037726 0.610044 0.284383  872.445312  862.976562   3   3 1.000000    0       57     59     1         1       36      36 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   1  26  26 0.267322 0.017060 0.0 0.284383 20.322108 0.284383 0.954899  874.234375  864.980469   1   1 1.000000    0       60     60     1         1       37      37 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   1  27  27 0.904463 0.050435 0.0 0.954899 21.277007 0.954899 0.282533  874.824219  865.480469   5   5 1.000000    0       61     65     1         1       38      38 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   1  28  28 0.266396 0.016138 0.0 0.282533 21.559541 0.282533 0.420044  875.074219  865.734375   1   1 1.000000    0       66     66     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   1  29  29 0.400694 0.019350 0.0 0.420044 21.979585 0.420044 0.617636  875.199219  865.734375   2   2 1.000000    0       67     68     1         1       40      40 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   1  30  30 0.592314 0.025322 0.0 0.617636 22.597221 0.617636 0.619968  875.199219  865.734375   3   3 1.000000    0       69     71     1         1       41      41 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   1  31  31 0.591589 0.028379 0.0 0.619968 23.217190 0.619968 0.000000  875.824219  866.484375   3   5 0.600000    0       72     74     2         4       42      43 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 35   3   1   1 1.198376 0.144360 0.0 1.342735  1.342735 1.342735 0.000000  876.843750  867.484375  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   2   1   1 1.052712 0.078484 0.0 1.131196  2.473931 2.473931 1.380806  879.464844  870.175781   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 35   2   2   2 1.280652 0.100155 0.0 1.380806  3.854738 1.380806 1.445409  884.761719  875.941406  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 35   2   3   3 1.308136 0.137273 0.0 1.445409  5.300147 1.445409 0.270254  890.726562  882.636719  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 35   2   4   4 0.243530 0.026724 0.0 0.270254  5.570401 0.270254 0.612566  888.367188  878.949219   2   4 0.500000    4       32     33     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 35   2   5   5 0.559787 0.052780 0.0 0.612566  6.182967 0.612566 0.848779  889.433594  879.949219   5   8 0.625000    8       34     38     3         5        9      11 1.666667 1.600000 1.154701 1.040833 0.692820 0.567727  0.301253  0.350674            0            1
 35   2   6   6 0.793293 0.055486 0.0 0.848779  7.031746 0.848779 0.000000  890.871094  881.453125   7   9 0.777778    9       39     45     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 35   1   1   1 0.399208 0.021308 0.0 0.420517  2.894448 2.894448 1.664984  878.355469  868.992188   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   1   2   2 0.266995 0.017182 0.0 0.284178  4.559433 1.664984 2.394021  878.480469  868.992188   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   1   3   3 0.904196 0.044416 0.0 0.948612  6.953453 2.394021 0.684531  878.980469  869.492188   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   1   4   4 0.393427 0.020850 0.0 0.414276  7.637984 0.684531 1.028178  879.480469  869.992188   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   1   5   5 0.391762 0.023849 0.0 0.415611  8.666162 1.028178 1.656883  879.730469  870.242188   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   1   6   6 0.767786 0.040318 0.0 0.808104 10.323045 1.656883 0.286308  880.101562  870.742188   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 35   1   7   7 0.266594 0.019714 0.0 0.286308 10.609353 0.286308 0.558888  883.042969  873.757812   1   1 1.000000    0       17     17     1         1       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   1   8   8 0.529560 0.029328 0.0 0.558888 11.168240 0.558888 1.030608  883.042969  873.757812   3   4 0.750000    0       18     20     2         3       11      12 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 35   1   9   9 0.975001 0.055607 0.0 1.030608 12.198848 1.030608 0.418242  883.984375  874.761719   5   5 1.000000    0       21     25     2         2       13      14 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 35   1  10  10 0.393595 0.024647 0.0 0.418242 12.617090 0.418242 0.418949  884.296875  875.011719   2   2 1.000000    0       26     27     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   1  11  11 0.395000 0.023949 0.0 0.418949 13.036039 0.418949 0.619056  884.292969  875.011719   2   2 1.000000    0       28     29     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   1  12  12 0.582176 0.036880 0.0 0.619056 13.655095 0.619056 0.286428  885.070312  876.011719   3   3 1.000000    0       30     32     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 35   1  13  13 0.269129 0.017299 0.0 0.286428 13.941524 0.286428 0.555243  887.296875  878.058594   1   1 1.000000    0       33     33     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   1  14  14 0.527845 0.027398 0.0 0.555243 14.496767 0.555243 0.797395  887.425781  878.058594   3   3 1.000000    0       34     36     2         2       22      23 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 35   1  15  15 0.760360 0.037035 0.0 0.797395 15.294162 0.797395 1.882434  887.425781  878.058594   4   4 1.000000    0       37     40     2         2       24      25 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 35   1  16  16 1.105472 0.776962 0.0 1.882434 17.176596 1.882434 1.009395  887.539062  878.058594   6   6 1.000000    0       41     46     2         2       26      27 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            0
 35   1  17  17 0.962431 0.046964 0.0 1.009395 18.185991 1.009395 0.813064  886.617188  877.195312   5   5 1.000000    0       47     51     2         2       28      29 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 35   1  18  18 0.771146 0.041918 0.0 0.813064 18.999055 0.813064 0.286589  887.617188  878.195312   4   6 0.666667    0       52     55     2         4       30      31 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
 35   1  19  19 0.267244 0.019345 0.0 0.286589 19.285644 0.286589 0.415451  888.621094  879.199219   1   2 0.500000    0       56     56     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 35   1  20  20 0.394203 0.021247 0.0 0.415451 19.701095 0.415451 0.418281  888.683594  879.199219   2   3 0.666667    0       57     58     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   1  21  21 0.393520 0.024761 0.0 0.418281 20.119376 0.418281 0.283949  889.933594  880.449219   2   3 0.666667    0       59     60     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 35   1  22  22 0.268169 0.015780 0.0 0.283949 20.403325 0.283949 0.286268  889.933594  880.449219   1   3 0.333333    0       61     61     1         3       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   1  23  23 0.269401 0.016867 0.0 0.286268 20.689593 0.286268 0.419811  889.933594  880.449219   1   1 1.000000    0       62     62     1         1       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   1  24  24 0.399469 0.020343 0.0 0.419811 21.109404 0.419811 0.609556  889.933594  880.449219   2   2 1.000000    0       63     64     1         1       37      37 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   1  25  25 0.583342 0.026214 0.0 0.609556 21.718960 0.609556 0.284022  889.933594  880.449219   3   3 1.000000    0       65     67     1         1       38      38 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   1  26  26 0.267463 0.016559 0.0 0.284022 22.002982 0.284022 0.951525  891.476562  882.203125   1   1 1.000000    0       68     68     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   1  27  27 0.903507 0.048018 0.0 0.951525 22.954507 0.951525 0.282921  892.308594  882.957031   5   5 1.000000    0       69     73     1         1       40      40 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   1  28  28 0.267147 0.015775 0.0 0.282921 23.237428 0.282921 0.422731  892.371094  882.957031   1   1 1.000000    0       74     74     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   1  29  29 0.402075 0.020656 0.0 0.422731 23.660160 0.422731 0.616494  892.433594  882.957031   2   2 1.000000    0       75     76     1         1       42      42 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   1  30  30 0.590850 0.025644 0.0 0.616494 24.276653 0.616494 0.620415  892.558594  883.207031   3   3 1.000000    0       77     79     1         1       43      43 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   1  31  31 0.592145 0.028270 0.0 0.620415 24.897068 0.620415 0.000000  893.371094  883.957031   3   5 0.600000    0       80     82     2         4       44      45 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 36   3   1   1 1.197184 0.134227 0.0 1.331411  1.331411 1.331411 0.000000  895.328125  886.445312  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 36   2   1   1 1.061820 0.080505 0.0 1.142326  2.473736 2.473736 1.394191  898.128906  889.242188   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 36   2   2   2 1.283500 0.110691 0.0 1.394191  3.867927 1.394191 1.437964  905.156250  896.968750  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 36   2   3   3 1.306041 0.131923 0.0 1.437964  5.305891 1.437964 1.010894  908.238281  899.308594  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 36   2   4   4 0.243928 0.766965 0.0 1.010894  6.316785 1.010894 0.609575  906.882812  897.503906   2   4 0.500000    4       32     33     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 36   2   5   5 0.560532 0.049043 0.0 0.609575  6.926360 0.609575 0.847854  907.882812  898.507812   5   8 0.625000    8       34     38     3         5        9      11 1.666667 1.600000 0.577350 0.288675 0.346410 0.173205  0.585162  0.769150            0            1
 36   2   6   6 0.793681 0.054172 0.0 0.847854  7.774214 0.847854 0.000000  909.640625  900.261719   7   9 0.777778    9       39     45     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 36   1   1   1 0.398291 0.021446 0.0 0.419737  2.893473 2.893473 1.685040  896.210938  887.171875   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 36   1   2   2 0.272774 0.018076 0.0 0.290850  4.578514 1.685040 2.389652  896.210938  887.171875   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 36   1   3   3 0.907130 0.044558 0.0 0.951688  6.968166 2.389652 1.425064  896.460938  887.421875   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 36   1   4   4 0.393472 0.020698 0.0 0.414170  8.393229 1.425064 1.027956  896.972656  888.171875   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 36   1   5   5 0.394487 0.023895 0.0 0.418382  9.421186 1.027956 1.654641  897.210938  888.171875   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 36   1   6   6 0.768700 0.038088 0.0 0.806788 11.075827 1.654641 0.283416  897.585938  888.671875   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 36   1   7   7 0.266677 0.016739 0.0 0.283416 11.359243 0.283416 0.559801  900.660156  891.386719   1   2 0.500000    0       17     17     1         2       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 36   1   8   8 0.530660 0.029140 0.0 0.559801 11.919044 0.559801 1.031548  900.660156  891.386719   3   3 1.000000    0       18     20     2         2       11      12 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 36   1   9   9 0.976411 0.055137 0.0 1.031548 12.950592 1.031548 0.415129  901.511719  892.136719   5   5 1.000000    0       21     25     2         2       13      14 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 36   1  10  10 0.393586 0.021543 0.0 0.415129 13.365721 0.415129 0.421503  901.761719  892.386719   2   2 1.000000    0       26     27     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 36   1  11  11 0.397267 0.024236 0.0 0.421503 13.787223 0.421503 0.624842  901.761719  892.386719   2   2 1.000000    0       28     29     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 36   1  12  12 0.584178 0.040664 0.0 0.624842 14.412065 0.624842 0.284777  902.949219  893.640625   3   3 1.000000    0       30     32     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 36   1  13  13 0.267242 0.017535 0.0 0.284777 14.696842 0.284777 0.554254  903.089844  893.636719   1   1 1.000000    0       33     33     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 36   1  14  14 0.526877 0.027377 0.0 0.554254 15.251096 0.554254 0.796687  903.089844  893.636719   3   3 1.000000    0       34     36     2         2       22      23 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 36   1  15  15 0.759867 0.036820 0.0 0.796687 16.047783 0.796687 1.160843  903.519531  894.136719   4   4 1.000000    0       37     40     2         2       24      25 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 36   1  16  16 1.106172 0.054671 0.0 1.160843 17.208626 1.160843 1.007881  904.988281  895.753906   6   6 1.000000    0       41     46     2         2       26      27 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            0
 36   1  17  17 0.962479 0.045402 0.0 1.007881 18.216507 1.007881 0.806665  905.699219  896.503906   5   5 1.000000    0       47     51     2         2       28      29 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 36   1  18  18 0.770081 0.036584 0.0 0.806665 19.023172 0.806665 0.286515  906.320312  897.003906   4   6 0.666667    0       52     55     2         4       30      31 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
 36   1  19  19 0.267535 0.018980 0.0 0.286515 19.309687 0.286515 0.421295  907.070312  897.757812   1   2 0.500000    0       56     56     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 36   1  20  20 0.396607 0.024688 0.0 0.421295 19.730982 0.421295 0.285154  907.132812  897.757812   2   3 0.666667    0       57     58     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 36   1  21  21 0.268135 0.017020 0.0 0.285154 20.016136 0.285154 0.420085  908.382812  899.007812   1   1 1.000000    0       59     59     1         1       34      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 36   1  22  22 0.396038 0.024048 0.0 0.420085 20.436222 0.420085 0.284026  908.445312  899.007812   2   3 0.666667    0       60     61     1         2       35      35 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 36   1  23  23 0.267341 0.016686 0.0 0.284026 20.720248 0.284026 0.422811  908.445312  899.007812   1   3 0.333333    0       62     62     1         3       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 36   1  24  24 0.402089 0.020722 0.0 0.422811 21.143059 0.422811 0.610367  908.445312  899.007812   2   2 1.000000    0       63     64     1         1       37      37 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 36   1  25  25 0.584515 0.025852 0.0 0.610367 21.753426 0.610367 0.281453  908.632812  899.257812   3   3 1.000000    0       65     67     1         1       38      38 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 36   1  26  26 0.265244 0.016209 0.0 0.281453 22.034878 0.281453 0.951317  910.257812  901.011719   1   1 1.000000    0       68     68     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 36   1  27  27 0.903400 0.047917 0.0 0.951317 22.986195 0.951317 0.283966  911.078125  901.765625   5   5 1.000000    0       69     73     1         1       40      40 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 36   1  28  28 0.267893 0.016073 0.0 0.283966 23.270161 0.283966 0.420671  911.140625  901.765625   1   1 1.000000    0       74     74     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 36   1  29  29 0.400907 0.019764 0.0 0.420671 23.690832 0.420671 0.611150  911.207031  901.765625   2   2 1.000000    0       75     76     1         1       42      42 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 36   1  30  30 0.586143 0.025007 0.0 0.611150 24.301982 0.611150 0.617238  911.332031  902.015625   3   3 1.000000    0       77     79     1         1       43      43 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 36   1  31  31 0.589097 0.028141 0.0 0.617238 24.919220 0.617238 0.000000  912.144531  902.765625   3   5 0.600000    0       80     82     2         4       44      45 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 37   3   1   1 1.200252 0.139062 0.0 1.339314  1.339314 1.339314 0.000000  914.917969  905.792969  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   2   1   1 1.057002 0.085217 0.0 1.142219  2.481533 2.481533 1.398344  918.269531  908.968750   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 37   2   2   2 1.280510 0.117833 0.0 1.398344  3.879877 1.398344 1.438347  925.843750  916.992188  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 37   2   3   3 1.305482 0.132865 0.0 1.438347  5.318224 1.438347 0.268052  926.593750  917.636719  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 37   2   4   4 0.244244 0.023808 0.0 0.268052  5.586276 0.268052 0.614659  928.105469  918.726562   2   4 0.500000    4       32     33     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 37   2   5   5 0.559628 0.055030 0.0 0.614659  6.200935 0.614659 0.849447  929.792969  920.480469   5   8 0.625000    8       34     38     3         5        9      11 1.666667 1.600000 1.154701 1.040833 0.692820 0.567727  0.301253  0.350674            0            1
 37   2   6   6 0.795691 0.053755 0.0 0.849447  7.050381 0.849447 0.000000  930.511719  921.230469   7   9 0.777778    9       39     45     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 37   1   1   1 0.398280 0.020995 0.0 0.419275  2.900808 2.900808 1.681090  915.855469  906.488281   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   1   2   2 0.265530 0.017216 0.0 0.282746  4.581898 1.681090 2.385331  915.917969  906.488281   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   1   3   3 0.901631 0.045353 0.0 0.946984  6.967228 2.385331 0.688587  916.167969  906.738281   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   1   4   4 0.395896 0.024639 0.0 0.420535  7.655816 0.688587 1.034095  916.917969  907.488281   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   1   5   5 0.394816 0.024620 0.0 0.419436  8.689910 1.034095 1.653836  917.171875  907.988281   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   1   6   6 0.765998 0.038392 0.0 0.804390 10.343746 1.653836 0.285520  917.289062  907.988281   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 37   1   7   7 0.265655 0.019865 0.0 0.285520 10.629266 0.285520 0.557198  920.511719  911.539062   1   1 1.000000    0       17     17     1         1       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   1   8   8 0.528618 0.028580 0.0 0.557198 11.186464 0.557198 1.034202  920.718750  911.539062   3   4 0.750000    0       18     20     2         3       11      12 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 37   1   9   9 0.977615 0.056587 0.0 1.034202 12.220666 1.034202 0.416145  921.679688  912.289062   5   5 1.000000    0       21     25     2         2       13      14 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 37   1  10  10 0.394423 0.021722 0.0 0.416145 12.636812 0.416145 0.418241  921.945312  912.789062   2   2 1.000000    0       26     27     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   1  11  11 0.394405 0.023836 0.0 0.418241 13.055053 0.418241 0.619042  921.945312  912.789062   2   2 1.000000    0       28     29     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   1  12  12 0.581687 0.037355 0.0 0.619042 13.674095 0.619042 0.284655  922.804688  913.539062   3   3 1.000000    0       30     32     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 37   1  13  13 0.267582 0.017074 0.0 0.284655 13.958750 0.284655 0.556592  924.761719  915.468750   1   1 1.000000    0       33     33     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   1  14  14 0.529004 0.027588 0.0 0.556592 14.515342 0.556592 0.793494  924.761719  915.468750   3   3 1.000000    0       34     36     2         2       22      23 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 37   1  15  15 0.758293 0.035201 0.0 0.793494 15.308836 0.793494 1.159558  925.199219  915.968750   4   4 1.000000    0       37     40     2         2       24      25 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 37   1  16  16 1.104740 0.054817 0.0 1.159558 16.468394 1.159558 1.007570  925.816406  916.722656   6   6 1.000000    0       41     46     2         2       26      27 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            0
 37   1  17  17 0.961675 0.045895 0.0 1.007570 17.475964 1.007570 0.804577  926.609375  917.472656   5   5 1.000000    0       47     51     2         2       28      29 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 37   1  18  18 0.768030 0.036547 0.0 0.804577 18.280541 0.804577 0.285365  927.230469  917.972656   4   6 0.666667    0       52     55     2         4       30      31 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
 37   1  19  19 0.266794 0.018571 0.0 0.285365 18.565906 0.285365 0.419803  928.371094  919.226562   1   2 0.500000    0       56     56     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 37   1  20  20 0.397397 0.022407 0.0 0.419803 18.985709 0.419803 1.183176  928.371094  919.226562   2   3 0.666667    0       57     58     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   1  21  21 0.393043 0.790133 0.0 1.183176 20.168884 1.183176 0.282411  930.105469  920.730469   2   3 0.666667    0       59     60     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 37   1  22  22 0.267271 0.015140 0.0 0.282411 20.451295 0.282411 0.284480  930.105469  920.730469   1   3 0.333333    0       61     61     1         3       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   1  23  23 0.268161 0.016318 0.0 0.284480 20.735775 0.284480 0.419316  930.105469  920.730469   1   1 1.000000    0       62     62     1         1       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   1  24  24 0.399353 0.019964 0.0 0.419316 21.155091 0.419316 0.608691  930.105469  920.730469   2   2 1.000000    0       63     64     1         1       37      37 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   1  25  25 0.582941 0.025750 0.0 0.608691 21.763782 0.608691 0.283026  930.105469  920.730469   3   3 1.000000    0       65     67     1         1       38      38 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   1  26  26 0.266277 0.016749 0.0 0.283026 22.046808 0.283026 0.949688  931.265625  921.980469   1   1 1.000000    0       68     68     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   1  27  27 0.901663 0.048025 0.0 0.949688 22.996497 0.949688 0.283457  932.011719  922.734375   5   5 1.000000    0       69     73     1         1       40      40 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   1  28  28 0.267314 0.016143 0.0 0.283457 23.279954 0.283457 0.421367  932.386719  922.984375   1   1 1.000000    0       74     74     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   1  29  29 0.401446 0.019921 0.0 0.421367 23.701321 0.421367 0.613779  932.386719  922.984375   2   2 1.000000    0       75     76     1         1       42      42 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   1  30  30 0.589195 0.024585 0.0 0.613779 24.315100 0.613779 0.618527  932.386719  922.984375   3   3 1.000000    0       77     79     1         1       43      43 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   1  31  31 0.590372 0.028155 0.0 0.618527 24.933627 0.618527 0.000000  933.074219  923.734375   3   5 0.600000    0       80     82     2         4       44      45 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 38   3   1   1 1.196509 0.158015 0.0 1.354524  1.354524 1.354524 0.000000  936.589844  927.199219  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 38   2   1   1 1.056976 0.081554 0.0 1.138531  2.493054 2.493054 1.394578  937.234375  927.968750   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 38   2   2   2 1.281801 0.112777 0.0 1.394578  3.887632 1.394578 1.453091  943.859375  935.464844  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 38   2   3   3 1.308244 0.144847 0.0 1.453091  5.340723 1.453091 0.268793  947.453125  938.601562  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 38   2   4   4 0.245522 0.023270 0.0 0.268793  5.609516 0.268793 0.612844  947.250000  938.136719   2   4 0.500000    4       32     33     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 38   2   5   5 0.560150 0.052694 0.0 0.612844  6.222360 0.612844 1.644492  948.617188  939.386719   5   8 0.625000    8       34     38     3         5        9      11 1.666667 1.600000 1.154701 1.040833 0.692820 0.567727  0.301253  0.350674            0            1
 38   2   6   6 0.796750 0.847742 0.0 1.644492  7.866852 1.644492 0.000000  950.183594  940.890625   7   9 0.777778    9       39     45     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 38   1   1   1 0.400166 0.021881 0.0 0.422047  2.915101 2.915101 1.678875  935.605469  926.210938   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 38   1   2   2 0.266582 0.017715 0.0 0.284297  4.593976 1.678875 2.398571  935.605469  926.210938   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 38   1   3   3 0.901063 0.044417 0.0 0.945480  6.992547 2.398571 0.688845  935.605469  926.210938   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 38   1   4   4 0.395221 0.024831 0.0 0.420053  7.681392 0.688845 1.034839  936.109375  926.710938   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 38   1   5   5 0.397893 0.024102 0.0 0.421995  8.716231 1.034839 2.455121  936.359375  926.960938   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 38   1   6   6 0.771809 0.038820 0.0 0.810629 11.171352 2.455121 0.287350  936.546875  927.210938   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 38   1   7   7 0.267415 0.019934 0.0 0.287350 11.458702 0.287350 0.557951  939.378906  930.242188   1   1 1.000000    0       17     17     1         1       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 38   1   8   8 0.529068 0.028884 0.0 0.557951 12.016653 0.557951 1.030467  939.613281  930.242188   3   4 0.750000    0       18     20     2         3       11      12 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 38   1   9   9 0.974896 0.055571 0.0 1.030467 13.047120 1.030467 0.416426  940.375000  930.992188   5   5 1.000000    0       21     25     2         2       13      14 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 38   1  10  10 0.395200 0.021225 0.0 0.416426 13.463545 0.416426 0.417899  940.644531  931.492188   2   2 1.000000    0       26     27     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 38   1  11  11 0.394209 0.023691 0.0 0.417899 13.881445 0.417899 0.617525  940.644531  931.492188   2   2 1.000000    0       28     29     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 38   1  12  12 0.584193 0.033332 0.0 0.617525 14.498970 0.617525 0.287039  941.125000  931.742188   3   3 1.000000    0       30     32     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 38   1  13  13 0.268180 0.018859 0.0 0.287039 14.786009 0.287039 0.554750  943.761719  934.515625   1   1 1.000000    0       33     33     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 38   1  14  14 0.526771 0.027978 0.0 0.554750 15.340758 0.554750 0.798337  943.886719  934.515625   3   3 1.000000    0       34     36     2         2       22      23 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 38   1  15  15 0.762043 0.036294 0.0 0.798337 16.139095 0.798337 1.156013  943.886719  934.515625   4   4 1.000000    0       37     40     2         2       24      25 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 38   1  16  16 1.101545 0.054468 0.0 1.156013 17.295108 1.156013 1.006396  945.050781  935.882812   6   6 1.000000    0       41     46     2         2       26      27 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            0
 38   1  17  17 0.961330 0.045066 0.0 1.006396 18.301504 1.006396 0.807372  945.761719  936.632812   5   5 1.000000    0       47     51     2         2       28      29 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 38   1  18  18 0.769593 0.037779 0.0 0.807372 19.108876 0.807372 0.285236  946.367188  937.132812   4   6 0.666667    0       52     55     2         4       30      31 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
 38   1  19  19 0.266913 0.018323 0.0 0.285236 19.394112 0.285236 0.421261  947.527344  938.386719   1   2 0.500000    0       56     56     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 38   1  20  20 0.396556 0.024705 0.0 0.421261 19.815373 0.421261 0.419571  947.617188  938.386719   2   3 0.666667    0       57     58     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 38   1  21  21 0.395192 0.024379 0.0 0.419571 20.234944 0.419571 0.282533  948.929688  939.640625   2   3 0.666667    0       59     60     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 38   1  22  22 0.267043 0.015490 0.0 0.282533 20.517477 0.282533 0.284071  948.992188  939.640625   1   3 0.333333    0       61     61     1         3       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 38   1  23  23 0.267399 0.016672 0.0 0.284071 20.801549 0.284071 0.423331  948.992188  939.640625   1   1 1.000000    0       62     62     1         1       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 38   1  24  24 0.403089 0.020242 0.0 0.423331 21.224880 0.423331 0.610798  948.992188  939.640625   2   2 1.000000    0       63     64     1         1       37      37 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 38   1  25  25 0.584738 0.026059 0.0 0.610798 21.835678 0.610798 0.286227  949.121094  939.890625   3   3 1.000000    0       65     67     1         1       38      38 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 38   1  26  26 0.269302 0.016925 0.0 0.286227 22.121905 0.286227 0.952758  950.871094  941.644531   1   1 1.000000    0       68     68     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 38   1  27  27 0.903040 0.049718 0.0 0.952758 23.074663 0.952758 0.283051  951.121094  941.894531   5   5 1.000000    0       69     73     1         1       40      40 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 38   1  28  28 0.266568 0.016482 0.0 0.283051 23.357713 0.283051 0.424086  951.746094  942.394531   1   1 1.000000    0       74     74     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 38   1  29  29 0.403645 0.020441 0.0 0.424086 23.781800 0.424086 0.615686  951.746094  942.394531   2   2 1.000000    0       75     76     1         1       42      42 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 38   1  30  30 0.590422 0.025265 0.0 0.615686 24.397486 0.615686 0.623324  951.746094  942.394531   3   3 1.000000    0       77     79     1         1       43      43 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 38   1  31  31 0.594450 0.028874 0.0 0.623324 25.020810 0.623324 0.000000  952.183594  942.894531   3   5 0.600000    0       80     82     2         4       44      45 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 39   3   1   1 1.199846 0.138505 0.0 1.338351  1.338351 1.338351 0.000000  954.214844  945.382812  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 39   2   1   1 1.055083 0.070650 0.0 1.125733  2.464084 2.464084 1.396635  954.597656  945.285156   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 39   2   2   2 1.288063 0.108572 0.0 1.396635  3.860719 1.396635 1.457081  961.910156  952.882812  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 39   2   3   3 1.306269 0.150812 0.0 1.457081  5.317800 1.457081 0.269220  967.410156  958.558594  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 39   2   4   4 0.243536 0.025684 0.0 0.269220  5.587020 0.269220 0.622434  965.324219  956.242188   2   4 0.500000    4       32     33     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 39   2   5   5 0.561513 0.060921 0.0 0.622434  6.209454 0.622434 0.849725  967.351562  958.246094   5   8 0.625000    8       34     38     3         5        9      11 1.666667 1.600000 1.154701 1.732051 0.692820 0.866025  0.301253  0.085162            0            1
 39   2   6   6 0.795083 0.054642 0.0 0.849725  7.059179 0.849725 0.000000  967.847656  958.746094   7   9 0.777778    9       39     45     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 39   1   1   1 0.398593 0.021325 0.0 0.419918  2.884002 2.884002 1.680701  954.152344  944.835938   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 39   1   2   2 0.266376 0.017691 0.0 0.284066  4.564703 1.680701 2.404363  954.152344  944.835938   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 39   1   3   3 0.907061 0.040221 0.0 0.947282  6.969066 2.404363 0.688178  954.476562  945.339844   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 39   1   4   4 0.394958 0.024000 0.0 0.418958  7.657244 0.688178 1.041041  955.675781  946.339844   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 39   1   5   5 0.394146 0.024460 0.0 0.418606  8.698285 1.041041 1.658894  955.929688  946.839844   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 39   1   6   6 0.770414 0.038755 0.0 0.809169 10.357178 1.658894 0.286930  956.128906  946.839844   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 39   1   7   7 0.266817 0.020113 0.0 0.286930 10.644109 0.286930 0.560283  958.523438  949.339844   1   1 1.000000    0       17     17     1         1       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 39   1   8   8 0.531898 0.028385 0.0 0.560283 11.204392 0.560283 1.033711  958.523438  949.339844   3   4 0.750000    0       18     20     2         3       11      12 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 39   1   9   9 0.981671 0.052039 0.0 1.033711 12.238103 1.033711 0.417114  959.175781  950.089844   5   5 1.000000    0       21     25     2         2       13      14 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 39   1  10  10 0.395332 0.021783 0.0 0.417114 12.655217 0.417114 0.419049  959.753906  950.589844   2   2 1.000000    0       26     27     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 39   1  11  11 0.395351 0.023698 0.0 0.419049 13.074266 0.419049 0.621509  959.882812  950.589844   2   2 1.000000    0       28     29     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 39   1  12  12 0.583710 0.037800 0.0 0.621509 13.695776 0.621509 0.284631  960.804688  951.593750   3   3 1.000000    0       30     32     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 39   1  13  13 0.267226 0.017405 0.0 0.284631 13.980407 0.284631 0.554907  962.417969  953.238281   1   1 1.000000    0       33     33     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 39   1  14  14 0.527536 0.027370 0.0 0.554907 14.535313 0.554907 0.799008  962.539062  953.238281   3   3 1.000000    0       34     36     2         2       22      23 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 39   1  15  15 0.762024 0.036984 0.0 0.799008 15.334321 0.799008 1.156311  962.539062  953.238281   4   4 1.000000    0       37     40     2         2       24      25 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 39   1  16  16 1.102125 0.054187 0.0 1.156311 16.490633 1.156311 1.005042  962.847656  953.738281   6   6 1.000000    0       41     46     2         2       26      27 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            0
 39   1  17  17 0.958620 0.046421 0.0 1.005042 17.495674 1.005042 0.801163  963.550781  954.488281   5   5 1.000000    0       47     51     2         2       28      29 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 39   1  18  18 0.764113 0.037050 0.0 0.801163 18.296837 0.801163 0.285634  964.164062  954.988281   4   6 0.666667    0       52     55     2         4       30      31 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
 39   1  19  19 0.267450 0.018184 0.0 0.285634 18.582471 0.285634 0.419774  965.593750  956.492188   1   2 0.500000    0       56     56     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 39   1  20  20 0.395189 0.024585 0.0 0.419774 19.002245 0.419774 0.416328  965.664062  956.492188   2   3 0.666667    0       57     58     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 39   1  21  21 0.395361 0.020966 0.0 0.416328 19.418573 0.416328 0.283319  967.109375  957.996094   2   3 0.666667    0       59     60     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 39   1  22  22 0.267628 0.015692 0.0 0.283319 19.701892 0.283319 0.285215  967.109375  957.996094   1   2 0.500000    0       61     61     1         2       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 39   1  23  23 0.268065 0.017150 0.0 0.285215 19.987107 0.285215 0.420985  967.109375  957.996094   1   2 0.500000    0       62     62     1         2       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 39   1  24  24 0.400606 0.020379 0.0 0.420985 20.408092 0.420985 0.607023  967.304688  957.996094   2   2 1.000000    0       63     64     1         1       37      37 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 39   1  25  25 0.581063 0.025960 0.0 0.607023 21.015116 0.607023 0.284124  967.304688  957.996094   3   3 1.000000    0       65     67     1         1       38      38 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 39   1  26  26 0.267390 0.016734 0.0 0.284124 21.299240 0.284124 0.948291  968.554688  959.250000   1   1 1.000000    0       68     68     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 39   1  27  27 0.900247 0.048045 0.0 0.948291 22.247531 0.948291 0.283187  969.820312  960.753906   5   5 1.000000    0       69     73     1         1       40      40 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 39   1  28  28 0.266935 0.016251 0.0 0.283187 22.530718 0.283187 0.419840  969.933594  960.753906   1   1 1.000000    0       74     74     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 39   1  29  29 0.399873 0.019968 0.0 0.419840 22.950559 0.419840 0.606806  970.058594  960.753906   2   2 1.000000    0       75     76     1         1       42      42 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 39   1  30  30 0.582183 0.024622 0.0 0.606806 23.557364 0.606806 0.616722  970.058594  960.753906   3   3 1.000000    0       77     79     1         1       43      43 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 39   1  31  31 0.588139 0.028583 0.0 0.616722 24.174086 0.616722 0.000000  970.867188  961.757812   3   5 0.600000    0       80     82     2         4       44      45 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 40   3   1   1 1.196508 0.152903 0.0 1.349411  1.349411 1.349411 0.000000  973.621094  964.777344  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   2   1   1 1.053796 0.899013 0.0 1.952809  3.302220 3.302220 1.400598  974.425781  965.277344   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 40   2   2   2 1.280239 0.120359 0.0 1.400598  4.702818 1.400598 1.152861  983.894531  975.679688  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 40   2   3   3 1.051198 0.101662 0.0 1.152861  5.855679 1.152861 0.266582  982.832031  973.714844   9  11 0.818182   11       21     29     2         3        5       6 4.500000 3.666667 4.949747 2.828427 1.099944 0.942809 -1.572828 -0.936752            0            1
 40   2   4   4 0.243065 0.023517 0.0 0.266582  6.122261 0.266582 0.611007  981.562500  972.320312   2   4 0.500000    4       30     31     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 40   2   5   5 0.558416 0.052591 0.0 0.611007  6.733268 0.611007 0.851516  983.953125  974.964844   5   8 0.625000    8       32     36     3         5        9      11 1.666667 1.600000 1.154701 1.732051 0.692820 0.866025  0.301253  0.085162            0            1
 40   2   6   6 0.795505 0.056011 0.0 0.851516  7.584784 0.851516 0.000000  985.753906  976.636719   7   9 0.777778    9       37     43     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 40   1   1   1 0.399867 0.021208 0.0 0.421075  3.723295 3.723295 1.684961  972.761719  963.523438   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   1   2   2 0.266912 0.017451 0.0 0.284363  5.408256 1.684961 2.095449  972.824219  963.523438   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   1   3   3 0.900050 0.042539 0.0 0.942589  7.503705 2.095449 0.681375  972.824219  963.523438   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   1   4   4 0.393293 0.021500 0.0 0.414792  8.185080 0.681375 1.029191  973.191406  964.023438   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   1   5   5 0.393691 0.024493 0.0 0.418184  9.214272 1.029191 1.658129  973.566406  964.273438   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   1   6   6 0.766698 0.039915 0.0 0.806614 10.872401 1.658129 0.284123  973.941406  964.773438   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 40   1   7   7 0.266638 0.017485 0.0 0.284123 11.156524 0.284123 0.611268  976.164062  967.292969   1   2 0.500000    0       17     17     1         2       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   1   8   8 0.582398 0.028870 0.0 0.611268 11.767792 0.611268 1.393234  976.164062  967.292969   3   3 1.000000    0       18     20     2         2       11      12 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 40   1   9   9 1.318087 0.075147 0.0 1.393234 13.161025 1.393234 0.417900  979.277344  970.441406   7   7 1.000000    0       21     27     2         2       13      14 3.500000 3.500000 2.121320 2.121320 0.606092 0.606092 -0.642156 -0.642156            0            0
 40   1  10  10 0.392141 0.025759 0.0 0.417900 13.578925 0.417900 0.417243  978.085938  968.804688   2   2 1.000000    0       28     29     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   1  11  11 0.393356 0.023887 0.0 0.417243 13.996169 0.417243 0.613879  978.085938  968.804688   2   2 1.000000    0       30     31     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   1  12  12 0.583531 0.030348 0.0 0.613879 14.610047 0.613879 0.284743  978.085938  968.804688   3   3 1.000000    0       32     34     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 40   1  13  13 0.267319 0.017424 0.0 0.284743 14.894790 0.284743 0.284077  979.746094  970.566406   1   1 1.000000    0       35     35     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   1  14  14 0.268371 0.015706 0.0 0.284077 15.178867 0.284077 0.420013  979.746094  970.566406   1   1 1.000000    0       36     36     1         1       22      22 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   1  15  15 0.400288 0.019725 0.0 0.420013 15.598881 0.420013 0.608418  979.808594  970.566406   2   2 1.000000    0       37     38     1         1       23      23 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   1  16  16 0.575978 0.032439 0.0 0.608418 16.207298 0.608418 0.414886  980.175781  971.066406   3   3 1.000000    0       39     41     2         2       24      25 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 40   1  17  17 0.392468 0.022417 0.0 0.414886 16.622184 0.414886 0.811535  980.550781  971.316406   2   2 1.000000    0       42     43     2         2       26      27 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   1  18  18 0.769785 0.041750 0.0 0.811535 17.433719 0.811535 0.285591  981.000000  971.816406   4   6 0.666667    0       44     47     2         4       28      29 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
 40   1  19  19 0.267149 0.018442 0.0 0.285591 17.719309 0.285591 0.415034  981.812500  972.570312   1   2 0.500000    0       48     48     1         2       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 40   1  20  20 0.394238 0.020796 0.0 0.415034 18.134344 0.415034 0.416193  981.812500  972.570312   2   3 0.666667    0       49     50     1         2       31      31 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   1  21  21 0.391747 0.024446 0.0 0.416193 18.550536 0.416193 0.283514  983.714844  974.718750   2   3 0.666667    0       51     52     1         2       32      32 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 40   1  22  22 0.268210 0.015304 0.0 0.283514 18.834050 0.283514 0.282629  983.949219  974.718750   1   2 0.500000    0       53     53     1         2       33      33 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   1  23  23 0.266304 0.016326 0.0 0.282629 19.116680 0.282629 0.425042  983.949219  974.718750   1   2 0.500000    0       54     54     1         2       34      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   1  24  24 0.404779 0.020264 0.0 0.425042 19.541722 0.425042 0.611227  984.074219  974.968750   2   2 1.000000    0       55     56     1         1       35      35 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   1  25  25 0.584868 0.026359 0.0 0.611227 20.152949 0.611227 0.285086  984.449219  975.218750   3   3 1.000000    0       57     59     1         1       36      36 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   1  26  26 0.268458 0.016629 0.0 0.285086 20.438035 0.285086 0.944976  986.441406  977.386719   1   1 1.000000    0       60     60     1         1       37      37 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   1  27  27 0.901003 0.043974 0.0 0.944976 21.383012 0.944976 0.282231  986.871094  977.636719   5   5 1.000000    0       61     65     1         1       38      38 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   1  28  28 0.265954 0.016277 0.0 0.282231 21.665242 0.282231 0.418800  987.390625  978.390625   1   1 1.000000    0       66     66     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   1  29  29 0.398813 0.019987 0.0 0.418800 22.084042 0.418800 0.616705  987.390625  978.390625   2   2 1.000000    0       67     68     1         1       40      40 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   1  30  30 0.591637 0.025068 0.0 0.616705 22.700747 0.616705 0.618411  987.503906  978.390625   3   3 1.000000    0       69     71     1         1       41      41 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   1  31  31 0.589897 0.028514 0.0 0.618411 23.319158 0.618411 0.000000  988.316406  979.140625   3   5 0.600000    0       72     74     2         4       42      43 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 41   3   1   1 1.197268 0.137093 0.0 1.334361  1.334361 1.334361 0.000000  991.980469  983.234375  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 41   2   1   1 1.050123 0.073920 0.0 1.124043  2.458405 2.458405 1.388892  993.003906  983.859375   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 41   2   2   2 1.278380 0.110512 0.0 1.388892  3.847297 1.388892 1.438072 1000.171875  991.917969  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 41   2   3   3 1.303012 0.135059 0.0 1.438072  5.285368 1.438072 0.267046 1003.578125  995.011719  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 41   2   4   4 0.243647 0.023399 0.0 0.267046  5.552414 0.267046 0.612904 1003.117188  993.917969   2   4 0.500000    4       32     33     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 41   2   5   5 0.561108 0.051796 0.0 0.612904  6.165318 0.612904 0.847725 1004.390625  995.417969   5   8 0.625000    8       34     38     3         5        9      11 1.666667 1.600000 1.154701 1.040833 0.692820 0.567727  0.301253  0.350674            0            1
 41   2   6   6 0.792863 0.054861 0.0 0.847725  7.013042 0.847725 0.000000 1005.812500  996.671875   7   9 0.777778    9       39     45     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 41   1   1   1 0.398566 0.021829 0.0 0.420394  2.878799 2.878799 1.677368  992.632812  983.425781   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 41   1   2   2 0.270483 0.017993 0.0 0.288476  4.556167 1.677368 2.383461  992.632812  983.425781   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 41   1   3   3 0.903445 0.041945 0.0 0.945390  6.939628 2.383461 0.683293  992.660156  983.425781   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 41   1   4   4 0.394405 0.021842 0.0 0.416247  7.622922 0.683293 1.028709  993.347656  984.175781   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 41   1   5   5 0.391537 0.024268 0.0 0.415805  8.651630 1.028709 1.654481  993.660156  984.425781   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 41   1   6   6 0.766789 0.039967 0.0 0.806756 10.306111 1.654481 1.126772  994.113281  984.925781   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 41   1   7   7 0.265776 0.860996 0.0 1.126772 11.432884 1.126772 0.561207  995.218750  985.976562   1   1 1.000000    0       17     17     1         1       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 41   1   8   8 0.532151 0.029056 0.0 0.561207 11.994090 0.561207 1.030137  995.218750  985.976562   3   4 0.750000    0       18     20     2         3       11      12 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 41   1   9   9 0.974981 0.055156 0.0 1.030137 13.024227 1.030137 0.419254  995.593750  986.476562   5   5 1.000000    0       21     25     2         2       13      14 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 41   1  10  10 0.393927 0.025327 0.0 0.419254 13.443481 0.419254 0.417776  996.218750  986.976562   2   2 1.000000    0       26     27     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 41   1  11  11 0.392581 0.025194 0.0 0.417776 13.861257 0.417776 0.620915  996.347656  987.226562   2   2 1.000000    0       28     29     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 41   1  12  12 0.582570 0.038345 0.0 0.620915 14.482172 0.620915 0.289027  997.160156  987.976562   3   3 1.000000    0       30     32     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 41   1  13  13 0.271131 0.017895 0.0 0.289027 14.771199 0.289027 0.553028 1000.171875  991.152344   1   1 1.000000    0       33     33     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 41   1  14  14 0.525603 0.027425 0.0 0.553028 15.324227 0.553028 0.794910 1000.234375  991.152344   3   3 1.000000    0       34     36     2         2       22      23 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 41   1  15  15 0.758295 0.036615 0.0 0.794910 16.119137 0.794910 1.155412  999.386719  990.292969   4   4 1.000000    0       37     40     2         2       24      25 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 41   1  16  16 1.100894 0.054519 0.0 1.155412 17.274549 1.155412 1.006588 1000.863281  991.660156   6   6 1.000000    0       41     46     2         2       26      27 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            0
 41   1  17  17 0.961055 0.045533 0.0 1.006588 18.281137 1.006588 0.805889 1001.617188  992.414062   5   5 1.000000    0       47     51     2         2       28      29 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 41   1  18  18 0.764748 0.041141 0.0 0.805889 19.087026 0.805889 0.285931 1002.554688  993.414062   4   6 0.666667    0       52     55     2         4       30      31 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 41   1  19  19 0.267305 0.018626 0.0 0.285931 19.372957 0.285931 0.419533 1003.367188  994.167969   1   2 0.500000    0       56     56     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 41   1  20  20 0.395159 0.024373 0.0 0.419533 19.792489 0.419533 0.415540 1003.375000  994.167969   2   3 0.666667    0       57     58     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 41   1  21  21 0.394243 0.021297 0.0 0.415540 20.208030 0.415540 0.284594 1004.390625  995.421875   2   3 0.666667    0       59     60     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 41   1  22  22 0.268766 0.015828 0.0 0.284594 20.492624 0.284594 0.284804 1004.390625  995.421875   1   3 0.333333    0       61     61     1         3       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 41   1  23  23 0.267967 0.016837 0.0 0.284804 20.777429 0.284804 0.421992 1004.390625  995.421875   1   1 1.000000    0       62     62     1         1       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 41   1  24  24 0.401524 0.020468 0.0 0.421992 21.199421 0.421992 0.610107 1004.500000  995.421875   2   2 1.000000    0       63     64     1         1       37      37 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 41   1  25  25 0.584071 0.026036 0.0 0.610107 21.809528 0.610107 0.285725 1004.875000  995.671875   3   3 1.000000    0       65     67     1         1       38      38 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 41   1  26  26 0.269295 0.016430 0.0 0.285725 22.095252 0.285725 0.947848 1006.500000  997.421875   1   1 1.000000    0       68     68     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 41   1  27  27 0.899583 0.048264 0.0 0.947848 23.043100 0.947848 0.283560 1007.312500  998.175781   5   5 1.000000    0       69     73     1         1       40      40 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 41   1  28  28 0.267548 0.016012 0.0 0.283560 23.326660 0.283560 0.420988 1007.625000  998.425781   1   1 1.000000    0       74     74     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 41   1  29  29 0.401135 0.019853 0.0 0.420988 23.747648 0.420988 0.618304 1007.625000  998.425781   2   2 1.000000    0       75     76     1         1       42      42 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 41   1  30  30 0.593333 0.024972 0.0 0.618304 24.365952 0.618304 0.621020 1007.625000  998.425781   3   3 1.000000    0       77     79     1         1       43      43 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 41   1  31  31 0.592292 0.028728 0.0 0.621020 24.986972 0.621020 0.000000 1008.312500  999.175781   3   5 0.600000    0       80     82     2         4       44      45 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 42   3   1   1 1.198687 0.152315 0.0 1.351003  1.351003 1.351003 0.000000 1011.921875 1003.484375  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 42   2   1   1 1.052874 0.080944 0.0 1.133818  2.484821 2.484821 1.390380 1014.121094 1005.156250   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 42   2   2   2 1.274407 0.115972 0.0 1.390380  3.875200 1.390380 1.439448 1020.472656 1012.105469  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 42   2   3   3 1.302999 0.136449 0.0 1.439448  5.314648 1.439448 0.267742 1023.324219 1014.796875  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 42   2   4   4 0.243172 0.024570 0.0 0.267742  5.582390 0.267742 0.614580 1021.859375 1012.929688   2   4 0.500000    4       32     33     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 42   2   5   5 0.560847 0.053734 0.0 0.614580  6.196971 0.614580 0.855116 1023.171875 1014.179688   5   8 0.625000    8       34     38     3         5        9      11 1.666667 1.600000 1.154701 1.040833 0.692820 0.567727  0.301253  0.350674            0            1
 42   2   6   6 0.793898 0.061217 0.0 0.855116  7.052087 0.855116 0.000000 1025.980469 1017.003906   7   9 0.777778    9       39     45     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 42   1   1   1 0.398765 0.021173 0.0 0.419938  2.904759 2.904759 1.674268 1011.464844 1002.265625   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 42   1   2   2 0.266055 0.017834 0.0 0.283889  4.579027 1.674268 2.388716 1011.464844 1002.265625   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 42   1   3   3 0.903756 0.045512 0.0 0.949268  6.967744 2.388716 0.686192 1011.468750 1002.515625   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 42   1   4   4 0.393870 0.024580 0.0 0.418450  7.653935 0.686192 1.035507 1012.214844 1003.015625   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 42   1   5   5 0.396368 0.024558 0.0 0.420926  8.689442 1.035507 1.662003 1012.480469 1003.515625   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 42   1   6   6 0.767399 0.039488 0.0 0.806887 10.351445 1.662003 0.287636 1012.652344 1003.515625   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 42   1   7   7 0.266836 0.020801 0.0 0.287636 10.639081 0.287636 0.560763 1012.660156 1003.707031   1   1 1.000000    0       17     17     1         1       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 42   1   8   8 0.531584 0.029179 0.0 0.560763 11.199844 0.560763 1.032686 1012.660156 1003.707031   3   4 0.750000    0       18     20     2         3       11      12 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 42   1   9   9 0.974066 0.058620 0.0 1.032686 12.232530 1.032686 0.420343 1016.039062 1006.968750   5   5 1.000000    0       21     25     2         2       13      14 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 42   1  10  10 0.394813 0.025530 0.0 0.420343 12.652873 0.420343 0.418193 1015.296875 1006.460938   2   2 1.000000    0       26     27     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 42   1  11  11 0.394290 0.023903 0.0 0.418193 13.071066 0.418193 0.623029 1015.351562 1006.460938   2   2 1.000000    0       28     29     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 42   1  12  12 0.585559 0.037470 0.0 0.623029 13.694095 0.623029 0.285642 1016.257812 1007.214844   3   3 1.000000    0       30     32     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 42   1  13  13 0.267948 0.017694 0.0 0.285642 13.979737 0.285642 0.554683 1019.808594 1010.960938   1   1 1.000000    0       33     33     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 42   1  14  14 0.526995 0.027688 0.0 0.554683 14.534420 0.554683 0.796101 1018.628906 1009.589844   3   3 1.000000    0       34     36     2         2       22      23 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 42   1  15  15 0.758379 0.037721 0.0 0.796101 15.330520 0.796101 1.155799 1018.628906 1009.589844   4   4 1.000000    0       37     40     2         2       24      25 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 42   1  16  16 1.099737 0.056063 0.0 1.155799 16.486320 1.155799 1.012276 1019.503906 1010.675781   6   6 1.000000    0       41     46     2         2       26      27 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            0
 42   1  17  17 0.964829 0.047447 0.0 1.012276 17.498595 1.012276 0.805261 1020.343750 1011.425781   5   5 1.000000    0       47     51     2         2       28      29 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 42   1  18  18 0.767753 0.037508 0.0 0.805261 18.303856 0.805261 0.286952 1020.921875 1011.925781   4   6 0.666667    0       52     55     2         4       30      31 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
 42   1  19  19 0.267802 0.019151 0.0 0.286952 18.590808 0.286952 0.420013 1022.109375 1013.179688   1   2 0.500000    0       56     56     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 42   1  20  20 0.394820 0.025193 0.0 0.420013 19.010821 0.420013 0.420096 1022.171875 1013.179688   2   3 0.666667    0       57     58     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 42   1  21  21 0.393987 0.026109 0.0 0.420096 19.430917 0.420096 0.282602 1023.734375 1014.679688   2   3 0.666667    0       59     60     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 42   1  22  22 0.266604 0.015999 0.0 0.282602 19.713519 0.282602 0.283774 1023.734375 1014.679688   1   3 0.333333    0       61     61     1         3       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 42   1  23  23 0.267142 0.016631 0.0 0.283774 19.997293 0.283774 0.420784 1023.734375 1014.679688   1   1 1.000000    0       62     62     1         1       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 42   1  24  24 0.399560 0.021224 0.0 0.420784 20.418077 0.420784 0.610334 1023.734375 1014.679688   2   2 1.000000    0       63     64     1         1       37      37 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 42   1  25  25 0.584220 0.026114 0.0 0.610334 21.028411 0.610334 0.282890 1023.734375 1014.679688   3   3 1.000000    0       65     67     1         1       38      38 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 42   1  26  26 0.265919 0.016971 0.0 0.282890 21.311301 0.282890 0.944583 1025.132812 1016.269531   1   1 1.000000    0       68     68     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 42   1  27  27 0.900075 0.044508 0.0 0.944583 22.255883 0.944583 0.282421 1025.367188 1016.269531   5   5 1.000000    0       69     73     1         1       40      40 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 42   1  28  28 0.266273 0.016147 0.0 0.282421 22.538304 0.282421 0.420804 1025.867188 1016.769531   1   1 1.000000    0       74     74     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 42   1  29  29 0.401063 0.019741 0.0 0.420804 22.959108 0.420804 0.622609 1025.867188 1016.769531   2   2 1.000000    0       75     76     1         1       42      42 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 42   1  30  30 0.597073 0.025536 0.0 0.622609 23.581717 0.622609 0.618162 1025.890625 1017.019531   3   3 1.000000    0       77     79     1         1       43      43 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 42   1  31  31 0.588400 0.029762 0.0 0.618162 24.199879 0.618162 0.000000 1026.742188 1017.769531   3   5 0.600000    0       80     82     2         4       44      45 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 43   3   1   1 1.197899 0.141298 0.0 1.339198  1.339198 1.339198 0.000000 1031.339844 1022.898438  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 43   2   1   1 1.050676 0.075076 0.0 1.125752  2.464950 2.464950 1.389169 1031.875000 1023.027344   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 43   2   2   2 1.277832 0.111337 0.0 1.389169  3.854118 1.389169 1.442673 1039.906250 1031.796875  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 43   2   3   3 1.304541 0.138132 0.0 1.442673  5.296791 1.442673 0.267851 1043.054688 1034.902344  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 43   2   4   4 0.243808 0.024043 0.0 0.267851  5.564642 0.267851 0.613551 1040.375000 1031.261719   2   4 0.500000    4       32     33     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 43   2   5   5 0.559906 0.053645 0.0 0.613551  6.178193 0.613551 0.855058 1043.207031 1034.273438   5   8 0.625000    8       34     38     3         5        9      11 1.666667 1.600000 1.154701 1.040833 0.692820 0.567727  0.301253  0.350674            0            1
 43   2   6   6 0.794106 0.060952 0.0 0.855058  7.033251 0.855058 0.000000 1045.160156 1036.382812   7   9 0.777778    9       39     45     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 43   1   1   1 0.398678 0.021853 0.0 0.420531  2.885480 2.885480 1.674493 1031.636719 1022.589844   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 43   1   2   2 0.267532 0.017792 0.0 0.285324  4.559973 1.674493 2.385098 1031.636719 1022.589844   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 43   1   3   3 0.898115 0.044310 0.0 0.942425  6.945070 2.385098 0.689697 1031.914062 1022.839844   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 43   1   4   4 0.394305 0.027541 0.0 0.421846  7.634767 0.689697 1.031600 1032.937500 1024.089844   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 43   1   5   5 0.394069 0.023981 0.0 0.418049  8.666367 1.031600 1.662433 1033.414062 1024.339844   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 43   1   6   6 0.768352 0.039022 0.0 0.807375 10.328800 1.662433 0.288118 1033.433594 1024.339844   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 43   1   7   7 0.267615 0.020503 0.0 0.288118 10.616918 0.288118 0.558793 1036.257812 1027.335938   1   1 1.000000    0       17     17     1         1       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 43   1   8   8 0.529746 0.029046 0.0 0.558793 11.175711 0.558793 1.028340 1036.253906 1027.335938   3   4 0.750000    0       18     20     2         3       11      12 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 43   1   9   9 0.974319 0.054021 0.0 1.028340 12.204050 1.028340 0.418765 1036.710938 1027.585938   5   5 1.000000    0       21     25     2         2       13      14 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 43   1  10  10 0.393565 0.025200 0.0 0.418765 12.622816 0.418765 0.417806 1036.390625 1027.265625   2   2 1.000000    0       26     27     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 43   1  11  11 0.393658 0.024147 0.0 0.417806 13.040621 0.417806 0.618252 1036.390625 1027.265625   2   2 1.000000    0       28     29     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 43   1  12  12 0.584482 0.033770 0.0 0.618252 13.658873 0.618252 0.284951 1036.828125 1027.765625   3   3 1.000000    0       30     32     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 43   1  13  13 0.267245 0.017706 0.0 0.284951 13.943824 0.284951 0.553929 1039.285156 1030.296875   1   1 1.000000    0       33     33     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 43   1  14  14 0.526669 0.027260 0.0 0.553929 14.497752 0.553929 0.798544 1038.089844 1028.976562   3   3 1.000000    0       34     36     2         2       22      23 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 43   1  15  15 0.761166 0.037377 0.0 0.798544 15.296296 0.798544 1.153779 1038.085938 1028.976562   4   4 1.000000    0       37     40     2         2       24      25 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 43   1  16  16 1.097746 0.056033 0.0 1.153779 16.450075 1.153779 1.008775 1039.343750 1030.578125   6   6 1.000000    0       41     46     2         2       26      27 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            0
 43   1  17  17 0.962763 0.046012 0.0 1.008775 17.458850 1.008775 0.801901 1039.886719 1030.980469   5   5 1.000000    0       47     51     2         2       28      29 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 43   1  18  18 0.764821 0.037080 0.0 0.801901 18.260751 0.801901 0.284942 1039.437500 1030.507812   4   6 0.666667    0       52     55     2         4       30      31 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
 43   1  19  19 0.266561 0.018380 0.0 0.284942 18.545693 0.284942 0.420936 1040.625000 1031.511719   1   2 0.500000    0       56     56     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 43   1  20  20 0.396961 0.023974 0.0 0.420936 18.966628 0.420936 0.420673 1040.625000 1031.511719   2   3 0.666667    0       57     58     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 43   1  21  21 0.395848 0.024825 0.0 0.420673 19.387301 0.420673 0.283421 1041.816406 1032.769531   2   3 0.666667    0       59     60     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 43   1  22  22 0.267767 0.015654 0.0 0.283421 19.670722 0.283421 0.285736 1041.878906 1032.769531   1   3 0.333333    0       61     61     1         3       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 43   1  23  23 0.268671 0.017066 0.0 0.285736 19.956458 0.285736 0.419627 1041.878906 1032.769531   1   1 1.000000    0       62     62     1         1       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 43   1  24  24 0.399181 0.020446 0.0 0.419627 20.376086 0.419627 0.610352 1041.878906 1032.769531   2   2 1.000000    0       63     64     1         1       37      37 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 43   1  25  25 0.584104 0.026248 0.0 0.610352 20.986438 0.610352 0.284551 1041.878906 1032.769531   3   3 1.000000    0       65     67     1         1       38      38 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 43   1  26  26 0.267179 0.017372 0.0 0.284551 21.270989 0.284551 0.950090 1043.410156 1034.300781   1   1 1.000000    0       68     68     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 43   1  27  27 0.900083 0.050008 0.0 0.950090 22.221080 0.950090 0.282635 1045.449219 1036.566406   5   5 1.000000    0       69     73     1         1       40      40 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 43   1  28  28 0.265923 0.016712 0.0 0.282635 22.503714 0.282635 0.419580 1044.539062 1035.558594   1   1 1.000000    0       74     74     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 43   1  29  29 0.399325 0.020255 0.0 0.419580 22.923294 0.419580 0.618455 1044.664062 1035.558594   2   2 1.000000    0       75     76     1         1       42      42 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 43   1  30  30 0.592983 0.025472 0.0 0.618455 23.541749 0.618455 0.619754 1044.664062 1035.558594   3   3 1.000000    0       77     79     1         1       43      43 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 43   1  31  31 0.590126 0.029629 0.0 0.619754 24.161503 0.619754 0.000000 1045.542969 1036.558594   3   5 0.600000    0       80     82     2         4       44      45 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 44   3   1   1 1.196803 0.134097 0.0 1.330900  1.330900 1.330900 0.000000 1050.195312 1041.656250  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   2   1   1 1.055851 0.074911 0.0 1.130762  2.461662 2.461662 1.408292 1051.527344 1042.687500   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 44   2   2   2 1.280812 0.127480 0.0 1.408292  3.869954 1.408292 1.440299 1060.593750 1052.246094  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 44   2   3   3 1.299041 0.141258 0.0 1.440299  5.310253 1.440299 0.267029 1062.335938 1054.140625  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 44   2   4   4 0.243305 0.023724 0.0 0.267029  5.577282 0.267029 0.612654 1061.121094 1052.152344   2   4 0.500000    4       32     33     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 44   2   5   5 0.560330 0.052324 0.0 0.612654  6.189936 0.612654 0.856721 1062.468750 1053.656250   5   8 0.625000    8       34     38     3         5        9      11 1.666667 1.600000 1.154701 1.040833 0.692820 0.567727  0.301253  0.350674            0            1
 44   2   6   6 0.797145 0.059575 0.0 0.856721  7.046657 0.856721 0.000000 1064.417969 1055.410156   7   9 0.777778    9       39     45     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 44   1   1   1 0.398030 0.021605 0.0 0.419634  2.881296 2.881296 1.693369 1048.917969 1039.945312   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   1   2   2 0.267398 0.017679 0.0 0.285077  4.574666 1.693369 2.386397 1049.042969 1039.945312   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   1   3   3 0.898917 0.047180 0.0 0.946098  6.961062 2.386397 0.681735 1049.480469 1040.445312   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   1   4   4 0.393283 0.021423 0.0 0.414706  7.642797 0.681735 1.029338 1050.042969 1040.945312   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   1   5   5 0.392748 0.023935 0.0 0.416684  8.672134 1.029338 1.662374 1050.292969 1041.195312   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   1   6   6 0.766391 0.039262 0.0 0.805653 10.334508 1.662374 0.288602 1050.585938 1041.695312   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 44   1   7   7 0.268332 0.020270 0.0 0.288602 10.623110 0.288602 0.562780 1051.917969 1042.824219   1   1 1.000000    0       17     17     1         1       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   1   8   8 0.533221 0.029559 0.0 0.562780 11.185890 0.562780 1.036974 1051.917969 1042.824219   3   4 0.750000    0       18     20     2         3       11      12 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 44   1   9   9 0.978841 0.058133 0.0 1.036974 12.222864 1.036974 0.422894 1054.000000 1045.082031   5   5 1.000000    0       21     25     2         2       13      14 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 44   1  10  10 0.397201 0.025692 0.0 0.422894 12.645758 0.422894 0.419104 1053.554688 1044.574219   2   2 1.000000    0       26     27     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   1  11  11 0.394507 0.024598 0.0 0.419104 13.064862 0.419104 0.616908 1053.613281 1044.574219   2   2 1.000000    0       28     29     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   1  12  12 0.582245 0.034663 0.0 0.616908 13.681771 0.616908 0.285782 1053.738281 1044.824219   3   3 1.000000    0       30     32     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 44   1  13  13 0.268704 0.017078 0.0 0.285782 13.967553 0.285782 0.555636 1058.207031 1049.289062   1   1 1.000000    0       33     33     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   1  14  14 0.527750 0.027886 0.0 0.555636 14.523189 0.555636 0.795144 1058.210938 1049.289062   3   3 1.000000    0       34     36     2         2       22      23 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 44   1  15  15 0.758594 0.036550 0.0 0.795144 15.318333 0.795144 1.151555 1057.347656 1048.535156   4   4 1.000000    0       37     40     2         2       24      25 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 44   1  16  16 1.097863 0.053692 0.0 1.151555 16.469887 1.151555 1.010517 1058.839844 1049.898438   6   6 1.000000    0       41     46     2         2       26      27 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            0
 44   1  17  17 0.964975 0.045542 0.0 1.010517 17.480404 1.010517 0.805287 1059.671875 1050.648438   5   5 1.000000    0       47     51     2         2       28      29 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 44   1  18  18 0.768396 0.036891 0.0 0.805287 18.285691 0.805287 0.285130 1060.199219 1051.402344   4   6 0.666667    0       52     55     2         4       30      31 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
 44   1  19  19 0.267241 0.017888 0.0 0.285130 18.570821 0.285130 0.419073 1061.433594 1052.402344   1   2 0.500000    0       56     56     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 44   1  20  20 0.394524 0.024549 0.0 0.419073 18.989894 0.419073 0.418673 1061.433594 1052.402344   2   3 0.666667    0       57     58     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   1  21  21 0.393894 0.024779 0.0 0.418673 19.408567 0.418673 0.281785 1062.730469 1053.906250   2   3 0.666667    0       59     60     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 44   1  22  22 0.266128 0.015657 0.0 0.281785 19.690351 0.281785 0.283326 1062.730469 1053.906250   1   3 0.333333    0       61     61     1         3       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   1  23  23 0.266464 0.016862 0.0 0.283326 19.973677 0.283326 0.421639 1062.730469 1053.906250   1   1 1.000000    0       62     62     1         1       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   1  24  24 0.401231 0.020407 0.0 0.421639 20.395315 0.421639 0.609228 1062.816406 1053.906250   2   2 1.000000    0       63     64     1         1       37      37 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   1  25  25 0.583393 0.025835 0.0 0.609228 21.004543 0.609228 0.283120 1062.941406 1053.906250   3   3 1.000000    0       65     67     1         1       38      38 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   1  26  26 0.266574 0.016546 0.0 0.283120 21.287664 0.283120 0.953326 1064.824219 1055.910156   1   1 1.000000    0       68     68     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   1  27  27 0.904931 0.048394 0.0 0.953326 22.240989 0.953326 0.284837 1065.386719 1056.410156   5   5 1.000000    0       69     73     1         1       40      40 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   1  28  28 0.268251 0.016586 0.0 0.284837 22.525826 0.284837 0.421129 1065.699219 1056.660156   1   1 1.000000    0       74     74     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   1  29  29 0.401433 0.019696 0.0 0.421129 22.946955 0.421129 0.616410 1065.699219 1056.660156   2   2 1.000000    0       75     76     1         1       42      42 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   1  30  30 0.591085 0.025325 0.0 0.616410 23.563365 0.616410 0.619295 1065.699219 1056.660156   3   3 1.000000    0       77     79     1         1       43      43 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   1  31  31 0.590160 0.029135 0.0 0.619295 24.182660 0.619295 0.000000 1066.406250 1057.414062   3   5 0.600000    0       80     82     2         4       44      45 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 45   3   1   1 1.194522 1.071434 0.0 2.265956  2.265956 2.265956 0.000000 1069.414062 1060.683594  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   2   1   1 1.053216 0.075849 0.0 1.129065  3.395022 3.395022 1.402514 1069.800781 1060.832031   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 45   2   2   2 1.279633 0.122881 0.0 1.402514  4.797536 1.402514 1.146958 1080.183594 1072.199219  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 45   2   3   3 1.056749 0.090209 0.0 1.146958  5.944493 1.146958 0.269421 1077.695312 1068.687500   9  11 0.818182   11       21     29     2         3        5       6 4.500000 3.666667 4.949747 2.828427 1.099944 0.942809 -1.572828 -0.936752            0            1
 45   2   4   4 0.243268 0.026153 0.0 0.269421  6.213914 0.269421 0.610434 1079.125000 1070.128906   2   4 0.500000    4       30     31     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 45   2   5   5 0.558011 0.052423 0.0 0.610434  6.824348 0.610434 0.854715 1080.277344 1071.378906   5   8 0.625000    8       32     36     3         5        9      11 1.666667 1.600000 1.154701 1.040833 0.692820 0.567727  0.301253  0.350674            0            1
 45   2   6   6 0.794940 0.059775 0.0 0.854715  7.679063 0.854715 0.000000 1082.992188 1074.203125   7   9 0.777778    9       37     43     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 45   1   1   1 0.397528 0.021216 0.0 0.418744  3.813766 3.813766 1.687994 1068.101562 1059.273438   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   1   2   2 0.268324 0.017155 0.0 0.285480  5.501759 1.687994 2.086937 1068.101562 1059.273438   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   1   3   3 0.899746 0.040233 0.0 0.939979  7.588696 2.086937 0.693404 1068.101562 1059.273438   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   1   4   4 0.395895 0.028088 0.0 0.423983  8.282100 0.693404 1.029631 1069.511719 1060.523438   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   1   5   5 0.395062 0.024135 0.0 0.419197  9.311731 1.029631 1.658296 1069.578125 1060.527344   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   1   6   6 0.765314 0.038268 0.0 0.803582 10.970027 1.658296 0.283942 1069.578125 1060.527344   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 45   1   7   7 0.266820 0.017122 0.0 0.283942 11.253969 0.283942 0.611069 1073.027344 1064.300781   1   2 0.500000    0       17     17     1         2       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   1   8   8 0.582489 0.028581 0.0 0.611069 11.865039 0.611069 1.392791 1071.812500 1063.023438   3   3 1.000000    0       18     20     2         2       11      12 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 45   1   9   9 1.317073 0.075718 0.0 1.392791 13.257830 1.392791 0.419764 1074.777344 1066.140625   7   7 1.000000    0       21     27     2         2       13      14 3.500000 3.500000 3.535534 3.535534 1.010153 1.010153 -1.181272 -1.181272            0            0
 45   1  10  10 0.393296 0.026468 0.0 0.419764 13.677594 0.419764 0.418397 1073.300781 1064.527344   2   2 1.000000    0       28     29     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   1  11  11 0.394661 0.023736 0.0 0.418397 14.095991 0.418397 0.619249 1073.792969 1064.777344   2   2 1.000000    0       30     31     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   1  12  12 0.581870 0.037379 0.0 0.619249 14.715240 0.619249 0.284756 1074.417969 1065.527344   3   3 1.000000    0       32     34     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 45   1  13  13 0.267153 0.017603 0.0 0.284756 14.999997 0.284756 0.283625 1074.859375 1066.023438   1   1 1.000000    0       35     35     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   1  14  14 0.267677 0.015948 0.0 0.283625 15.283621 0.283625 0.418039 1074.937500 1066.023438   1   1 1.000000    0       36     36     1         1       22      22 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   1  15  15 0.397983 0.020056 0.0 0.418039 15.701660 0.418039 1.012616 1075.062500 1066.023438   2   2 1.000000    0       37     38     1         1       23      23 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   1  16  16 0.963369 0.049247 0.0 1.012616 16.714276 1.012616 0.742724 1076.664062 1067.875000   5   5 1.000000    0       39     43     2         2       24      25 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 45   1  17  17 0.710380 0.032345 0.0 0.742724 17.457000 0.742724 0.803367 1077.269531 1068.625000   4   4 1.000000    0       44     47     2         2       26      27 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 45   1  18  18 0.765835 0.037532 0.0 0.803367 18.260367 0.803367 0.284139 1078.000000 1069.125000   4   6 0.666667    0       48     51     2         4       28      29 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
 45   1  19  19 0.265326 0.018812 0.0 0.284139 18.544506 0.284139 0.413221 1079.132812 1070.378906   1   2 0.500000    0       52     52     1         2       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 45   1  20  20 0.391847 0.021374 0.0 0.413221 18.957727 0.413221 0.417973 1079.132812 1070.378906   2   3 0.666667    0       53     54     1         2       31      31 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   1  21  21 0.393657 0.024316 0.0 0.417973 19.375700 0.417973 0.283510 1080.402344 1071.382812   2   3 0.666667    0       55     56     1         2       32      32 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 45   1  22  22 0.267715 0.015795 0.0 0.283510 19.659210 0.283510 0.286581 1080.402344 1071.382812   1   3 0.333333    0       57     57     1         3       33      33 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   1  23  23 0.269240 0.017341 0.0 0.286581 19.945791 0.286581 0.417160 1080.402344 1071.382812   1   1 1.000000    0       58     58     1         1       34      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   1  24  24 0.396597 0.020563 0.0 0.417160 20.362951 0.417160 0.607240 1080.402344 1071.382812   2   2 1.000000    0       59     60     1         1       35      35 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   1  25  25 0.581114 0.026126 0.0 0.607240 20.970191 0.607240 0.284591 1080.710938 1071.882812   3   3 1.000000    0       61     63     1         1       36      36 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   1  26  26 0.267926 0.016665 0.0 0.284591 21.254782 0.284591 0.946262 1081.835938 1072.882812   1   1 1.000000    0       64     64     1         1       37      37 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   1  27  27 0.902285 0.043977 0.0 0.946262 22.201044 0.946262 0.284700 1082.199219 1073.382812   5   5 1.000000    0       65     69     1         1       38      38 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   1  28  28 0.268170 0.016530 0.0 0.284700 22.485744 0.284700 0.420845 1082.777344 1073.882812   1   1 1.000000    0       70     70     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   1  29  29 0.400754 0.020091 0.0 0.420845 22.906589 0.420845 0.615157 1082.902344 1073.882812   2   2 1.000000    0       71     72     1         1       40      40 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   1  30  30 0.590133 0.025024 0.0 0.615157 23.521746 0.615157 0.616480 1082.902344 1073.882812   3   3 1.000000    0       73     75     1         1       41      41 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   1  31  31 0.587788 0.028692 0.0 0.616480 24.138226 0.616480 0.000000 1083.675781 1074.882812   3   5 0.600000    0       76     78     2         4       42      43 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 46   3   1   1 1.197524 0.133290 0.0 1.330814  1.330814 1.330814 0.000000 1086.902344 1078.246094  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   2   1   1 1.054440 0.075434 0.0 1.129874  2.460689 2.460689 1.398296 1088.339844 1079.328125   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 46   2   2   2 1.281005 0.117291 0.0 1.398296  3.858985 1.398296 1.462795 1097.675781 1089.898438  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 46   2   3   3 1.305430 0.157365 0.0 1.462795  5.321780 1.462795 0.267981 1099.828125 1091.488281  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 46   2   4   4 0.243870 0.024111 0.0 0.267981  5.589761 0.267981 0.613413 1098.273438 1089.359375   2   4 0.500000    4       32     33     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 46   2   5   5 0.560392 0.053021 0.0 0.613413  6.203174 0.613413 0.852567 1099.625000 1090.859375   5   8 0.625000    8       34     38     3         5        9      11 1.666667 1.600000 1.154701 1.732051 0.692820 0.866025  0.301253  0.085162            0            1
 46   2   6   6 0.792773 0.059794 0.0 0.852567  7.055741 0.852567 0.000000 1102.394531 1093.433594   7   9 0.777778    9       39     45     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 46   1   1   1 0.397330 0.021264 0.0 0.418594  2.879282 2.879282 1.684924 1087.894531 1079.105469   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   1   2   2 0.268797 0.017831 0.0 0.286628  4.564206 1.684924 2.401911 1087.894531 1079.105469   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   1   3   3 0.897955 0.041161 0.0 0.939116  6.966117 2.401911 0.681007 1088.117188 1079.105469   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   1   4   4 0.391949 0.021078 0.0 0.413026  7.647125 0.681007 1.030533 1088.617188 1079.605469   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   1   5   5 0.393344 0.023776 0.0 0.417119  8.677657 1.030533 1.655479 1088.921875 1080.105469   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   1   6   6 0.764385 0.038526 0.0 0.802912 10.333136 1.655479 0.285763 1089.367188 1080.355469   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 46   1   7   7 0.268391 0.017372 0.0 0.285763 10.618899 0.285763 0.560020 1090.335938 1081.406250   1   2 0.500000    0       17     17     1         2       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   1   8   8 0.531810 0.028210 0.0 0.560020 11.178919 0.560020 1.029670 1090.398438 1081.406250   3   3 1.000000    0       18     20     2         2       11      12 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 46   1   9   9 0.975208 0.054462 0.0 1.029670 12.208588 1.029670 1.354036 1090.773438 1081.906250   5   5 1.000000    0       21     25     2         2       13      14 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 46   1  10  10 0.393980 0.960055 0.0 1.354036 13.562624 1.354036 0.417270 1091.335938 1082.406250   2   2 1.000000    0       26     27     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   1  11  11 0.393445 0.023825 0.0 0.417270 13.979894 0.417270 0.626141 1091.398438 1082.406250   2   2 1.000000    0       28     29     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   1  12  12 0.588422 0.037719 0.0 0.626141 14.606035 0.626141 0.286979 1091.808594 1082.906250   3   3 1.000000    0       30     32     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 46   1  13  13 0.268790 0.018188 0.0 0.286979 14.893014 0.286979 0.555338 1095.988281 1087.363281   1   1 1.000000    0       33     33     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   1  14  14 0.527261 0.028077 0.0 0.555338 15.448352 0.555338 0.793493 1094.617188 1085.992188   3   3 1.000000    0       34     36     2         2       22      23 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 46   1  15  15 0.757636 0.035857 0.0 0.793493 16.241845 0.793493 1.152407 1094.617188 1085.992188   4   4 1.000000    0       37     40     2         2       24      25 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 46   1  16  16 1.097911 0.054495 0.0 1.152407 17.394252 1.152407 1.005804 1096.085938 1087.105469   6   6 1.000000    0       41     46     2         2       26      27 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            0
 46   1  17  17 0.960186 0.045617 0.0 1.005804 18.400055 1.005804 0.807485 1096.835938 1087.855469   5   5 1.000000    0       47     51     2         2       28      29 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 46   1  18  18 0.770502 0.036983 0.0 0.807485 19.207541 0.807485 0.285611 1097.367188 1088.605469   4   6 0.666667    0       52     55     2         4       30      31 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
 46   1  19  19 0.267293 0.018319 0.0 0.285611 19.493152 0.285611 0.419502 1098.585938 1089.609375   1   2 0.500000    0       56     56     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 46   1  20  20 0.394435 0.025067 0.0 0.419502 19.912654 0.419502 0.418554 1098.585938 1089.609375   2   3 0.666667    0       57     58     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   1  21  21 0.393771 0.024783 0.0 0.418554 20.331207 0.418554 0.282543 1099.871094 1091.113281   2   3 0.666667    0       59     60     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 46   1  22  22 0.266859 0.015684 0.0 0.282543 20.613751 0.282543 0.286576 1099.871094 1091.113281   1   2 0.500000    0       61     61     1         2       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   1  23  23 0.269262 0.017314 0.0 0.286576 20.900327 0.286576 0.418632 1099.871094 1091.113281   1   2 0.500000    0       62     62     1         2       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   1  24  24 0.398274 0.020358 0.0 0.418632 21.318959 0.418632 0.609208 1100.023438 1091.113281   2   2 1.000000    0       63     64     1         1       37      37 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   1  25  25 0.583218 0.025990 0.0 0.609208 21.928166 0.609208 0.282854 1100.085938 1091.113281   3   3 1.000000    0       65     67     1         1       38      38 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   1  26  26 0.265661 0.017193 0.0 0.282854 22.211021 0.282854 0.944556 1102.769531 1093.937500   1   1 1.000000    0       68     68     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   1  27  27 0.900757 0.043799 0.0 0.944556 23.155576 0.944556 0.283171 1102.894531 1093.937500   5   5 1.000000    0       69     73     1         1       40      40 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   1  28  28 0.266797 0.016373 0.0 0.283171 23.438747 0.283171 0.420131 1103.421875 1094.687500   1   1 1.000000    0       74     74     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   1  29  29 0.400634 0.019497 0.0 0.420131 23.858878 0.420131 0.616757 1103.421875 1094.687500   2   2 1.000000    0       75     76     1         1       42      42 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   1  30  30 0.591554 0.025203 0.0 0.616757 24.475635 0.616757 0.618734 1103.519531 1094.687500   3   3 1.000000    0       77     79     1         1       43      43 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   1  31  31 0.589565 0.029169 0.0 0.618734 25.094369 0.618734 0.000000 1104.394531 1095.437500   3   5 0.600000    0       80     82     2         4       44      45 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 47   3   1   1 1.199248 0.152709 0.0 1.351956  1.351956 1.351956 0.000000 1106.621094 1098.460938  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   2   1   1 1.051868 0.075845 0.0 1.127713  2.479669 2.479669 1.396414 1107.128906 1098.625000   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 47   2   2   2 1.278937 0.117477 0.0 1.396414  3.876083 1.396414 1.448822 1117.898438 1110.023438  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 47   2   3   3 1.302962 0.145861 0.0 1.448822  5.324905 1.448822 0.268685 1120.777344 1112.644531  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 47   2   4   4 0.244649 0.024035 0.0 0.268685  5.593590 0.268685 0.610887 1117.152344 1108.507812   2   4 0.500000    4       32     33     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 47   2   5   5 0.561623 0.049264 0.0 0.610887  6.204477 0.610887 0.858317 1118.558594 1109.792969   5   8 0.625000    8       34     38     3         5        9      11 1.666667 1.600000 0.577350 0.577350 0.346410 0.346410  0.585162  0.585162            0            1
 47   2   6   6 0.794022 0.064295 0.0 0.858317  7.062794 0.858317 0.000000 1122.320312 1113.960938   7   9 0.777778    9       39     45     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 47   1   1   1 0.397823 0.021370 0.0 0.419193  2.898862 2.898862 1.681681 1105.710938 1096.792969   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   1   2   2 0.267163 0.018103 0.0 0.285267  4.580543 1.681681 2.392871 1105.714844 1096.792969   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   1   3   3 0.899301 0.044748 0.0 0.944049  6.973414 2.392871 0.686735 1106.015625 1097.292969   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   1   4   4 0.393538 0.024512 0.0 0.418050  7.660149 0.686735 1.028674 1106.746094 1098.042969   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   1   5   5 0.393676 0.024111 0.0 0.417787  8.688823 1.028674 1.661472 1107.238281 1098.292969   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   1   6   6 0.764490 0.038664 0.0 0.803155 10.350295 1.661472 0.284226 1107.238281 1098.292969   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 47   1   7   7 0.267682 0.016545 0.0 0.284226 10.634522 0.284226 0.556874 1110.339844 1102.019531   1   2 0.500000    0       17     17     1         2       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   1   8   8 0.528302 0.028572 0.0 0.556874 11.191396 0.556874 1.029230 1110.527344 1102.019531   3   3 1.000000    0       18     20     2         2       11      12 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 47   1   9   9 0.973366 0.055864 0.0 1.029230 12.220626 1.029230 0.418854 1112.078125 1103.273438   5   5 1.000000    0       21     25     2         2       13      14 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 47   1  10  10 0.394279 0.024576 0.0 0.418854 12.639481 0.418854 0.418900 1112.578125 1103.773438   2   2 1.000000    0       26     27     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   1  11  11 0.394943 0.023957 0.0 0.418900 13.058381 0.418900 0.622541 1112.578125 1103.773438   2   2 1.000000    0       28     29     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   1  12  12 0.585351 0.037190 0.0 0.622541 13.680922 0.622541 0.283213 1113.203125 1104.523438   3   3 1.000000    0       30     32     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 47   1  13  13 0.266340 0.016873 0.0 0.283213 13.964134 0.283213 0.555080 1114.351562 1105.542969   1   1 1.000000    0       33     33     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   1  14  14 0.527376 0.027704 0.0 0.555080 14.519214 0.555080 0.795715 1114.476562 1105.542969   3   3 1.000000    0       34     36     2         2       22      23 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 47   1  15  15 0.760017 0.035697 0.0 0.795715 15.314929 0.795715 1.158293 1114.476562 1105.542969   4   4 1.000000    0       37     40     2         2       24      25 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 47   1  16  16 1.103846 0.054447 0.0 1.158293 16.473221 1.158293 1.007280 1115.351562 1107.046875   6   6 1.000000    0       41     46     2         2       26      27 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            0
 47   1  17  17 0.961146 0.046134 0.0 1.007280 17.480502 1.007280 0.805778 1115.605469 1107.003906   5   5 1.000000    0       47     51     2         2       28      29 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 47   1  18  18 0.768146 0.037632 0.0 0.805778 18.286280 0.805778 1.258528 1116.273438 1107.507812   4   6 0.666667    0       52     55     2         4       30      31 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
 47   1  19  19 0.267407 0.991121 0.0 1.258528 19.544808 1.258528 0.432457 1117.417969 1108.757812   1   2 0.500000    0       56     56     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 47   1  20  20 0.396635 0.035822 0.0 0.432457 19.977265 0.432457 0.413968 1117.417969 1108.757812   2   3 0.666667    0       57     58     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   1  21  21 0.392822 0.021146 0.0 0.413968 20.391232 0.413968 0.283930 1119.058594 1110.296875   2   3 0.666667    0       59     60     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 47   1  22  22 0.264822 0.019108 0.0 0.283930 20.675163 0.283930 0.284115 1119.183594 1110.296875   1   2 0.500000    0       61     61     1         2       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   1  23  23 0.267123 0.016992 0.0 0.284115 20.959278 0.284115 0.420539 1119.187500 1110.296875   1   2 0.500000    0       62     62     1         2       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   1  24  24 0.399769 0.020770 0.0 0.420539 21.379817 0.420539 0.610372 1119.187500 1110.296875   2   2 1.000000    0       63     64     1         1       37      37 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   1  25  25 0.584374 0.025998 0.0 0.610372 21.990189 0.610372 0.284777 1119.312500 1110.546875   3   3 1.000000    0       65     67     1         1       38      38 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   1  26  26 0.267747 0.017029 0.0 0.284777 22.274966 0.284777 0.951006 1121.683594 1113.023438   1   1 1.000000    0       68     68     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   1  27  27 0.902415 0.048591 0.0 0.951006 23.225972 0.951006 0.284709 1122.488281 1113.777344   5   5 1.000000    0       69     73     1         1       40      40 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   1  28  28 0.268216 0.016493 0.0 0.284709 23.510681 0.284709 0.420810 1123.054688 1114.277344   1   1 1.000000    0       74     74     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   1  29  29 0.400744 0.020066 0.0 0.420810 23.931491 0.420810 0.613788 1123.179688 1114.277344   2   2 1.000000    0       75     76     1         1       42      42 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   1  30  30 0.588673 0.025115 0.0 0.613788 24.545278 0.613788 0.619855 1123.179688 1114.277344   3   3 1.000000    0       77     79     1         1       43      43 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   1  31  31 0.591124 0.028732 0.0 0.619855 25.165134 0.619855 0.000000 1123.554688 1114.777344   3   5 0.600000    0       80     82     2         4       44      45 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 48   3   1   1 1.200155 0.146154 0.0 1.346309  1.346309 1.346309 0.000000 1126.851562 1118.339844  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 48   2   1   1 1.052848 0.080933 0.0 1.133780  2.480090 2.480090 1.409192 1128.175781 1119.500000   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 48   2   2   2 1.279641 0.129551 0.0 1.409192  3.889282 1.409192 1.450645 1138.484375 1130.804688  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 48   2   3   3 1.304030 0.146615 0.0 1.450645  5.339927 1.450645 0.270976 1139.605469 1131.789062  11  13 0.846154   13       21     31     2         3        5       6 5.500000 4.333333 6.363961 3.535534 1.157084 1.010153 -1.880482 -1.181272            0            1
 48   2   4   4 0.244706 0.026270 0.0 0.270976  5.610903 0.270976 0.613380 1138.269531 1129.449219   2   4 0.500000    4       32     33     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 48   2   5   5 0.561513 0.051868 0.0 0.613380  6.224283 0.613380 0.847684 1139.398438 1130.703125   5   8 0.625000    8       34     38     3         5        9      11 1.666667 1.600000 0.577350 0.577350 0.346410 0.346410  0.585162  0.585162            0            1
 48   2   6   6 0.793242 0.054442 0.0 0.847684  7.071967 0.847684 0.000000 1141.394531 1132.773438   7   9 0.777778    9       39     45     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 48   1   1   1 0.398750 0.021149 0.0 0.419899  2.899989 2.899989 1.694070 1125.824219 1117.042969   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 48   1   2   2 0.267722 0.017155 0.0 0.284878  4.594059 1.694070 2.395821 1125.949219 1117.042969   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 48   1   3   3 0.900959 0.044217 0.0 0.945176  6.989879 2.395821 0.688997 1126.136719 1117.292969   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 48   1   4   4 0.393873 0.024148 0.0 0.418021  7.678876 0.688997 1.032720 1126.886719 1118.042969   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 48   1   5   5 0.395352 0.023987 0.0 0.419339  8.711596 1.032720 1.652856 1127.199219 1118.292969   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 48   1   6   6 0.766760 0.038411 0.0 0.805171 10.364452 1.652856 0.285829 1127.324219 1118.546875   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 48   1   7   7 0.265650 0.020179 0.0 0.285829 10.650281 0.285829 0.558888 1130.601562 1122.039062   1   1 1.000000    0       17     17     1         1       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 48   1   8   8 0.529433 0.029456 0.0 0.558888 11.209169 0.558888 1.028455 1130.726562 1122.039062   3   4 0.750000    0       18     20     2         3       11      12 1.500000 1.333333 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 48   1   9   9 0.976979 0.051476 0.0 1.028455 12.237624 1.028455 0.414950 1130.875000 1122.039062   5   5 1.000000    0       21     25     2         2       13      14 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 48   1  10  10 0.393663 0.021287 0.0 0.414950 12.652574 0.414950 0.416290 1131.406250 1122.789062   2   2 1.000000    0       26     27     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 48   1  11  11 0.392767 0.023523 0.0 0.416290 13.068864 0.416290 0.622186 1131.500000 1122.789062   2   2 1.000000    0       28     29     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 48   1  12  12 0.584953 0.037233 0.0 0.622186 13.691050 0.622186 0.285453 1132.402344 1123.789062   3   3 1.000000    0       30     32     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 48   1  13  13 0.268173 0.017280 0.0 0.285453 13.976503 0.285453 0.554245 1134.429688 1125.828125   1   1 1.000000    0       33     33     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 48   1  14  14 0.527086 0.027159 0.0 0.554245 14.530747 0.554245 0.796955 1134.656250 1125.828125   3   3 1.000000    0       34     36     2         2       22      23 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 48   1  15  15 0.761721 0.035234 0.0 0.796955 15.327702 0.796955 1.154764 1134.656250 1125.828125   4   4 1.000000    0       37     40     2         2       24      25 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 48   1  16  16 1.100101 0.054663 0.0 1.154764 16.482466 1.154764 1.008600 1135.773438 1127.195312   6   6 1.000000    0       41     46     2         2       26      27 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            0
 48   1  17  17 0.963485 0.045115 0.0 1.008600 17.491066 1.008600 0.798717 1136.519531 1127.695312   5   5 1.000000    0       47     51     2         2       28      29 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 48   1  18  18 0.762027 0.036690 0.0 0.798717 18.289783 0.798717 0.286936 1137.082031 1128.449219   4   6 0.666667    0       52     55     2         4       30      31 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 48   1  19  19 0.268945 0.017991 0.0 0.286936 18.576719 0.286936 0.419865 1138.523438 1129.949219   1   2 0.500000    0       56     56     1         2       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 48   1  20  20 0.395798 0.024067 0.0 0.419865 18.996584 0.419865 0.412573 1138.523438 1129.949219   2   3 0.666667    0       57     58     1         2       33      33 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 48   1  21  21 0.391886 0.020687 0.0 0.412573 19.409157 0.412573 0.284730 1139.648438 1130.953125   2   3 0.666667    0       59     60     1         2       34      34 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 48   1  22  22 0.265894 0.018837 0.0 0.284730 19.693887 0.284730 0.286212 1139.648438 1130.953125   1   2 0.500000    0       61     61     1         2       35      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 48   1  23  23 0.269458 0.016755 0.0 0.286212 19.980099 0.286212 0.420083 1139.773438 1130.953125   1   2 0.500000    0       62     62     1         2       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 48   1  24  24 0.400016 0.020067 0.0 0.420083 20.400182 0.420083 0.612434 1139.773438 1130.953125   2   2 1.000000    0       63     64     1         1       37      37 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 48   1  25  25 0.587002 0.025431 0.0 0.612434 21.012616 0.612434 0.285342 1139.808594 1131.203125   3   3 1.000000    0       65     67     1         1       38      38 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 48   1  26  26 0.268525 0.016817 0.0 0.285342 21.297958 0.285342 0.951936 1140.597656 1131.839844   1   1 1.000000    0       68     68     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 48   1  27  27 0.902822 0.049114 0.0 0.951936 22.249894 0.951936 0.292953 1141.667969 1133.093750   5   5 1.000000    0       69     73     1         1       40      40 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 48   1  28  28 0.276877 0.016076 0.0 0.292953 22.542847 0.292953 0.420382 1141.679688 1133.347656   1   1 1.000000    0       74     74     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 48   1  29  29 0.400666 0.019716 0.0 0.420382 22.963229 0.420382 0.614524 1141.679688 1133.347656   2   2 1.000000    0       75     76     1         1       42      42 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 48   1  30  30 0.589865 0.024659 0.0 0.614524 23.577753 0.614524 0.617756 1141.855469 1133.347656   3   3 1.000000    0       77     79     1         1       43      43 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 48   1  31  31 0.589498 0.028258 0.0 0.617756 24.195508 0.617756 0.000000 1142.667969 1134.097656   3   5 0.600000    0       80     82     2         4       44      45 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2
 49   3   1   1 1.197131 0.151283 0.0 1.348415  1.348415 1.348415 0.000000 1146.078125 1137.656250  14  21 0.666667   21        1     14     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   2   1   1 1.054270 1.074007 0.0 2.128277  3.476692 3.476692 1.398992 1147.289062 1138.566406   9  11 0.818182   11        1      9     2         3        1       2 4.500000 3.666667 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 49   2   2   2 1.281476 0.117516 0.0 1.398992  4.875683 1.398992 1.151644 1156.437500 1148.625000  11  12 0.916667   12       10     20     2         2        3       4 5.500000 6.000000 4.949747 5.656854 0.899954 0.942809 -1.572828 -1.734841            0            1
 49   2   3   3 1.052005 0.099639 0.0 1.151644  6.027327 1.151644 0.268491 1155.984375 1147.179688   9  11 0.818182   11       21     29     2         3        5       6 4.500000 3.666667 4.949747 2.828427 1.099944 0.942809 -1.572828 -0.936752            0            1
 49   2   4   4 0.244101 0.024390 0.0 0.268491  6.295818 0.268491 0.613471 1155.699219 1147.074219   2   4 0.500000    4       30     31     2         4        7       8 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 49   2   5   5 0.560970 0.052501 0.0 0.613471  6.909289 0.613471 0.859259 1157.101562 1148.324219   5   8 0.625000    8       32     36     3         5        9      11 1.666667 1.600000 1.154701 1.040833 0.692820 0.567727  0.301253  0.350674            0            1
 49   2   6   6 0.803478 0.055782 0.0 0.859259  7.768548 0.859259 0.000000 1159.359375 1150.648438   7   9 0.777778    9       37     43     3         4       12      14 2.333333 2.250000 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            2
 49   1   1   1 0.398477 0.022409 0.0 0.420886  3.897578 3.897578 1.684086 1146.613281 1138.101562   2   2 1.000000    0        1      2     1         1        1       1 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   1   2   2 0.266571 0.018523 0.0 0.285094  5.581663 1.684086 2.094659 1146.613281 1138.101562   1   1 1.000000    0        3      3     1         1        2       2 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   1   3   3 0.897091 0.045924 0.0 0.943015  7.676322 2.094659 0.685956 1146.953125 1138.351562   5   5 1.000000    0        4      8     1         1        3       3 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   1   4   4 0.392125 0.025339 0.0 0.417465  8.362278 0.685956 1.033413 1147.703125 1139.101562   2   2 1.000000    0        9     10     2         2        4       5 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   1   5   5 0.394715 0.025227 0.0 0.419943  9.395691 1.033413 1.664590 1148.078125 1139.355469   2   2 1.000000    0       11     12     2         2        6       7 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   1   6   6 0.767203 0.038127 0.0 0.805331 11.060281 1.664590 0.282751 1148.179688 1139.355469   4   7 0.571429    0       13     16     2         4        8       9 2.000000 1.750000 0.000000 0.353553 0.000000 0.202031  1.000000  0.563248            0            0
 49   1   7   7 0.265872 0.016879 0.0 0.282751 11.343032 0.282751 0.611701 1151.035156 1142.613281   1   2 0.500000    0       17     17     1         2       10      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   1   8   8 0.582933 0.028768 0.0 0.611701 11.954733 0.611701 1.392245 1151.097656 1142.613281   3   3 1.000000    0       18     20     2         2       11      12 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 49   1   9   9 1.318265 0.073980 0.0 1.392245 13.346978 1.392245 0.415841 1153.093750 1144.695312   7   7 1.000000    0       21     27     2         2       13      14 3.500000 3.500000 2.121320 2.121320 0.606092 0.606092 -0.642156 -0.642156            0            0
 49   1  10  10 0.393814 0.022027 0.0 0.415841 13.762820 0.415841 0.419827 1152.730469 1144.367188   2   2 1.000000    0       28     29     2         2       15      16 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   1  11  11 0.395754 0.024072 0.0 0.419827 14.182646 0.419827 0.614683 1151.601562 1143.066406   2   2 1.000000    0       30     31     2         2       17      18 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   1  12  12 0.584746 0.029937 0.0 0.614683 14.797329 0.614683 0.283346 1151.835938 1143.066406   3   3 1.000000    0       32     34     2         2       19      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 49   1  13  13 0.266181 0.017164 0.0 0.283346 15.080675 0.283346 0.283967 1154.179688 1145.570312   1   1 1.000000    0       35     35     1         1       21      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   1  14  14 0.267936 0.016031 0.0 0.283967 15.364642 0.283967 0.418601 1154.269531 1145.570312   1   1 1.000000    0       36     36     1         1       22      22 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   1  15  15 0.399054 0.019547 0.0 0.418601 15.783243 0.418601 0.605784 1154.394531 1145.570312   2   2 1.000000    0       37     38     1         1       23      23 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   1  16  16 0.576700 0.029084 0.0 0.605784 16.389027 0.605784 0.416370 1154.394531 1145.570312   3   3 1.000000    0       39     41     2         2       24      25 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 49   1  17  17 0.393535 0.022835 0.0 0.416370 16.805396 0.416370 0.807674 1154.386719 1145.570312   2   2 1.000000    0       42     43     2         2       26      27 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   1  18  18 0.770742 0.036933 0.0 0.807674 17.613071 0.807674 0.284926 1154.847656 1146.070312   4   6 0.666667    0       44     47     2         4       28      29 2.000000 1.500000 1.414214 0.707107 0.707107 0.471405 -0.271553  0.228447            0            1
 49   1  19  19 0.266807 0.018119 0.0 0.284926 17.897996 0.284926 0.417578 1155.960938 1147.324219   1   2 0.500000    0       48     48     1         2       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 49   1  20  20 0.393253 0.024325 0.0 0.417578 18.315575 0.417578 0.422244 1156.097656 1147.324219   2   3 0.666667    0       49     50     1         2       31      31 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   1  21  21 0.400609 0.021635 0.0 0.422244 18.737818 0.422244 0.288167 1157.601562 1148.824219   2   3 0.666667    0       51     52     1         2       32      32 2.000000 1.500000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 49   1  22  22 0.272268 0.015899 0.0 0.288167 19.025986 0.288167 0.285859 1157.664062 1148.824219   1   3 0.333333    0       53     53     1         3       33      33 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   1  23  23 0.269313 0.016547 0.0 0.285859 19.311845 0.285859 0.423229 1157.664062 1148.824219   1   1 1.000000    0       54     54     1         1       34      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   1  24  24 0.402519 0.020710 0.0 0.423229 19.735074 0.423229 0.617800 1157.664062 1148.824219   2   2 1.000000    0       55     56     1         1       35      35 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   1  25  25 0.591210 0.026590 0.0 0.617800 20.352874 0.617800 0.286344 1157.664062 1148.824219   3   3 1.000000    0       57     59     1         1       36      36 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   1  26  26 0.269221 0.017123 0.0 0.286344 20.639218 0.286344 0.976819 1159.984375 1151.148438   1   1 1.000000    0       60     60     1         1       37      37 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   1  27  27 0.919980 0.056839 0.0 0.976819 21.616037 0.976819 0.310635 1160.777344 1152.152344   5   5 1.000000    0       61     65     1         1       38      38 5.000000 5.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   1  28  28 0.291090 0.019545 0.0 0.310635 21.926672 0.310635 0.431706 1160.859375 1152.152344   1   1 1.000000    0       66     66     1         1       39      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   1  29  29 0.409959 0.021748 0.0 0.431706 22.358379 0.431706 0.631308 1160.984375 1152.152344   2   2 1.000000    0       67     68     1         1       40      40 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   1  30  30 0.604949 0.026359 0.0 0.631308 22.989687 0.631308 0.638702 1161.000000 1152.402344   3   3 1.000000    0       69     71     1         1       41      41 3.000000 3.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   1  31  31 0.608640 0.030062 0.0 0.638702 23.628389 0.638702 0.000000 1161.867188 1153.152344   3   5 0.600000    0       72     74     2         4       42      43 1.500000 1.250000 0.707107 0.353553 0.471405 0.282843  0.228447  0.563248            0            2

[09-02-2022_23-55-55] INFO :: __main__ >> Saving results to excel file: ./experiments/results/ASH_Excel_2022-02-09_23-27-53_PS3_hcr_online_6_6_min_bound_conc_preach_opt.xlsx

[09-02-2022_23-56-01] INFO :: __main__ >> Saving results to data file: ./experiments/results/ASH_Data_2022-02-09_23-27-53_PS3_hcr_online_6_6_min_bound_conc_preach_opt.dat

[09-02-2022_23-56-02] INFO :: __main__ >> Saving results to figure file: ./experiments/results/ASH_Figure_2022-02-09_23-27-53_PS3_hcr_online_6_6_min_bound_conc_preach_opt.png

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=5.789999999999999.

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[09-02-2022_23-56-02] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=5.789999999999999 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[09-02-2022_23-56-05] INFO :: __main__ >> Overall time: Real = 1691.8155092, Process = 1729.34375

[09-02-2022_23-56-05] INFO :: __main__ >> Exiting with code 0

