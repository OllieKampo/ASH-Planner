[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=51, end_step=53, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.11945109999987835, solving_time=0.014339399999926172, total_time=0.13379049999980452, memory=Memory(rss=1042.578125, vms=1034.671875), step_range=range(52, 54), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.11945109999987835, solving_time=0.014339399999926172, total_time=0.13379049999980452, memory=Memory(rss=1042.578125, vms=1034.671875), step_range=range(52, 54), clingo_stats={'problem': {'lp': {'atoms': 12187.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28146.0, 'bodies_tr': 28146.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 262.0, 'count_bodies_tr': 262.0, 'sccs': 44.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 550.0, 'rules': 56671.0, 'rules_normal': 56126.0, 'rules_choice': 543.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 56671.0, 'rules_tr_normal': 56126.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 24806.0, 'eqs_atom': 7023.0, 'eqs_body': 1917.0, 'eqs_other': 15866.0}, 'lpStep': {'atoms': 5669.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25527.0, 'bodies_tr': 25527.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 262.0, 'count_bodies_tr': 262.0, 'sccs': 44.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 550.0, 'rules': 49243.0, 'rules_normal': 48698.0, 'rules_choice': 543.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 49243.0, 'rules_tr_normal': 48698.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 11750.0, 'eqs_atom': 2113.0, 'eqs_body': 392.0, 'eqs_other': 9245.0}, 'generator': {'vars': 2592.0, 'vars_eliminated': 0.0, 'vars_frozen': 1591.0, 'constraints': 13.0, 'constraints_binary': 1059.0, 'constraints_ternary': 154.0, 'acyc_edges': 0.0, 'complexity': 1236.0}}, 'solving': {'solvers': {'choices': 12.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 23.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 66.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [0.0, 0.0], 'lower': [0.0, 0.0], 'concurrency': 6.0, 'winner': 0.0, 'times': {'total': 0.13376998901367188, 'cpu': 0.140625, 'solve': 0.005741119384765625, 'unsat': 0.004009246826171875, 'sat': 0.00173187255859375}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.17277908325195312, 'cpu': 0.1875, 'solve': 0.0077419281005859375, 'unsat': 0.004009246826171875, 'sat': 0.00173187255859375}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 12.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 24.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 72.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{31: 53}

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 32 achieved :: Progression >> total requested sgoals = 3, current total achieved sgoals = 2 ( 66.67% solved)

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(32, 53)', truth=True, inc_range=None)

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 32, step = 53]:
sub_goal(2, talos, move(hallway), in(talos), hallway, 32)

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Reaction at search length 53:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     53 : Current =     54
Incrementor step ends | Minimum  =     55 : Maximum =    200

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(54)]), ('state_module', [Number(54), Number(52)]), ('plan_module', [Number(54), Number(52), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(54), Number(52), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(54)]), ('action_preconditions', [Number(54)]), ('variable_relations', [Number(54)]), ('abstraction_mappings', [Number(54)]), ('conformance_module', [Number(54), Number(52), Number(31), Number(33), Function('sequential', [], True), Function('true', [], True)])]

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.083452s.

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 54: original = External(symbol='current_last_sgoals(32, 53)', truth=True, inc_range=None), conversion = current_last_sgoals(32,53).

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005075s with result Unsatisfiable.

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.08852699999988545, Incremental time limit = None
Running cumulative time = 0.22231749999968997, Cumulative time limit = 1800
Used memory = (RSS = 1042.582031Mb, VMS = 1034.671875Mb), Total system virtual memory = 16324.0078125Mb

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=53, end_step=54, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.20290289999979905, solving_time=0.019414599999890925, total_time=0.22231749999968997, memory=Memory(rss=1042.58203125, vms=1034.671875), step_range=range(52, 55), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.0834517999999207, solving_time=0.005075199999964752, total_time=0.08852699999988545, memory=Memory(rss=1042.58203125, vms=1034.671875), step_range=range(54, 55), clingo_stats={'problem': {'lp': {'atoms': 13916.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 49720.0, 'bodies_tr': 49720.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 464.0, 'count_bodies_tr': 464.0, 'sccs': 46.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 587.0, 'rules': 97725.0, 'rules_normal': 96983.0, 'rules_choice': 738.0, 'rules_minimize': 4.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 97725.0, 'rules_tr_normal': 96983.0, 'rules_tr_choice': 738.0, 'rules_tr_minimize': 4.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 27876.0, 'eqs_atom': 7603.0, 'eqs_body': 2348.0, 'eqs_other': 17925.0}, 'lpStep': {'atoms': 1729.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21574.0, 'bodies_tr': 21574.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 2.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 37.0, 'rules': 41054.0, 'rules_normal': 40857.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 41054.0, 'rules_tr_normal': 40857.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3070.0, 'eqs_atom': 580.0, 'eqs_body': 431.0, 'eqs_other': 2059.0}, 'generator': {'vars': 2786.0, 'vars_eliminated': 0.0, 'vars_frozen': 1736.0, 'constraints': 39.0, 'constraints_binary': 2328.0, 'constraints_ternary': 236.0, 'acyc_edges': 0.0, 'complexity': 2619.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 3.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 64.0, 'guiding_paths': 4.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 6.0, 'winner': 1.0, 'times': {'total': 0.08901405334472656, 'cpu': 0.09375, 'solve': 0.0009918212890625, 'unsat': 0.0009918212890625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.2617931365966797, 'cpu': 0.28125, 'solve': 0.008733749389648438, 'unsat': 0.005001068115234375, 'sat': 0.00173187255859375}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 12.0, 'conflicts': 3.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 24.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 136.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Reaction at search length 54:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     54 : Current =     55
Incrementor step ends | Minimum  =     55 : Maximum =    200

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(55)]), ('state_module', [Number(55), Number(52)]), ('plan_module', [Number(55), Number(52), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(55), Number(52), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(55)]), ('action_preconditions', [Number(55)]), ('variable_relations', [Number(55)]), ('abstraction_mappings', [Number(55)]), ('conformance_module', [Number(55), Number(52), Number(31), Number(33), Function('sequential', [], True), Function('true', [], True)])]

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.084316s.

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009051s with result Satisfiable.

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.0933661999999913, Incremental time limit = None
Running cumulative time = 0.31568369999968127, Cumulative time limit = 1800
Used memory = (RSS = 1042.582031Mb, VMS = 1034.671875Mb), Total system virtual memory = 16324.0078125Mb

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.287219s, Solving = 0.028465s, Total = 0.315684s, Memory = (RSS = 1042.582031Mb, VMS = 1034.671875Mb), Step range = [52-55]), Calls = 3
Final Model :: Total atoms = 4898, Cost = (0, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=54, end_step=55, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.28721859999973276, solving_time=0.028465099999948507, total_time=0.31568369999968127, memory=Memory(rss=1042.58203125, vms=1034.671875), step_range=range(52, 56), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.08431569999993371, solving_time=0.009050500000057582, total_time=0.0933661999999913, memory=Memory(rss=1042.58203125, vms=1034.671875), step_range=range(55, 56), clingo_stats={'problem': {'lp': {'atoms': 15794.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 71458.0, 'bodies_tr': 71458.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 666.0, 'count_bodies_tr': 666.0, 'sccs': 59.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 763.0, 'rules': 139052.0, 'rules_normal': 138113.0, 'rules_choice': 933.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 139052.0, 'rules_tr_normal': 138113.0, 'rules_tr_choice': 933.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 31988.0, 'eqs_atom': 8374.0, 'eqs_body': 2788.0, 'eqs_other': 20826.0}, 'lpStep': {'atoms': 1878.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21738.0, 'bodies_tr': 21738.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 176.0, 'rules': 41327.0, 'rules_normal': 41130.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 41327.0, 'rules_tr_normal': 41130.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4112.0, 'eqs_atom': 771.0, 'eqs_body': 440.0, 'eqs_other': 2901.0}, 'generator': {'vars': 3184.0, 'vars_eliminated': 0.0, 'vars_frozen': 2020.0, 'constraints': 151.0, 'constraints_binary': 4730.0, 'constraints_ternary': 504.0, 'acyc_edges': 0.0, 'complexity': 5443.0}}, 'solving': {'solvers': {'choices': 200.0, 'conflicts': 6.0, 'conflicts_analyzed': 5.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 48.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 11.0, 'distributed_sum_lbd': 23.0, 'integrated': 33.0, 'lemmas': 52.0, 'lits_learnt': 148.0, 'lemmas_binary': 40.0, 'lemmas_ternary': 4.0, 'cpu_time': 0.0, 'integrated_imps': 3.0, 'integrated_jumps': 45.0, 'guiding_paths_lits': 126.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 3.0, 'lemmas_loop': 16.0, 'lemmas_other': 33.0, 'lits_conflict': 7.0, 'lits_loop': 72.0, 'lits_other': 69.0, 'jumps': {'jumps': 5.0, 'jumps_bounded': 0.0, 'levels': 51.0, 'levels_bounded': 0.0, 'max': 18.0, 'max_executed': 18.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 3.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [0.0, 0.0], 'lower': [0.0, 0.0], 'concurrency': 6.0, 'winner': 1.0, 'times': {'total': 0.09415435791015625, 'cpu': 0.09375, 'solve': 0.00513458251953125, 'unsat': 0.00414276123046875, 'sat': 0.0009918212890625}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.35594749450683594, 'cpu': 0.375, 'solve': 0.013868331909179688, 'unsat': 0.009143829345703125, 'sat': 0.00272369384765625}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 212.0, 'conflicts': 9.0, 'conflicts_analyzed': 5.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 72.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 11.0, 'distributed_sum_lbd': 23.0, 'integrated': 33.0, 'lemmas': 52.0, 'lits_learnt': 148.0, 'lemmas_binary': 40.0, 'lemmas_ternary': 4.0, 'cpu_time': 0.015625, 'integrated_imps': 3.0, 'integrated_jumps': 45.0, 'guiding_paths_lits': 262.0, 'guiding_paths': 22.0, 'splits': 0.0, 'lemmas_conflict': 3.0, 'lemmas_loop': 16.0, 'lemmas_other': 33.0, 'lits_conflict': 7.0, 'lits_loop': 72.0, 'lits_other': 69.0, 'jumps': {'jumps': 5.0, 'jumps_bounded': 0.0, 'levels': 51.0, 'levels_bounded': 0.0, 'max': 18.0, 'max_executed': 18.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{31: 53, 32: 55}

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 33 achieved :: Progression >> total requested sgoals = 3, current total achieved sgoals = 3 (100.00% solved)

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(33, 55)', truth=True, inc_range=None)

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 33, step = 55]:
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 33)

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Reaction at search length 55:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     55 : Current =     56
Incrementor step ends | Minimum  =     55 : Maximum =    200

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(56)]), ('state_module', [Number(56), Number(52)]), ('plan_module', [Number(56), Number(52), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(56), Number(52), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(56)]), ('action_preconditions', [Number(56)]), ('variable_relations', [Number(56)]), ('abstraction_mappings', [Number(56)]), ('conformance_module', [Number(56), Number(52), Number(31), Number(33), Function('sequential', [], True), Function('true', [], True)])]

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.090544s.

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 56: original = External(symbol='current_last_sgoals(33, 55)', truth=True, inc_range=None), conversion = current_last_sgoals(33,55).

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007842s with result Unsatisfiable.

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.09838689999992312, Incremental time limit = None
Running cumulative time = 0.4140705999996044, Cumulative time limit = 1800
Used memory = (RSS = 1042.582031Mb, VMS = 1034.671875Mb), Total system virtual memory = 16324.0078125Mb

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=55, end_step=56, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.3777630999995836, solving_time=0.03630750000002081, total_time=0.4140705999996044, memory=Memory(rss=1042.58203125, vms=1034.671875), step_range=range(52, 57), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09054449999985081, solving_time=0.007842400000072303, total_time=0.09838689999992312, memory=Memory(rss=1042.58203125, vms=1034.671875), step_range=range(56, 57), clingo_stats={'problem': {'lp': {'atoms': 18510.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 93638.0, 'bodies_tr': 93638.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 868.0, 'count_bodies_tr': 868.0, 'sccs': 72.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 997.0, 'rules': 181567.0, 'rules_normal': 180431.0, 'rules_choice': 1128.0, 'rules_minimize': 8.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 181567.0, 'rules_tr_normal': 180431.0, 'rules_tr_choice': 1128.0, 'rules_tr_minimize': 8.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 39478.0, 'eqs_atom': 9943.0, 'eqs_body': 3357.0, 'eqs_other': 26178.0}, 'lpStep': {'atoms': 2716.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22180.0, 'bodies_tr': 22180.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 234.0, 'rules': 42515.0, 'rules_normal': 42318.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 42515.0, 'rules_tr_normal': 42318.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7490.0, 'eqs_atom': 1569.0, 'eqs_body': 569.0, 'eqs_other': 5352.0}, 'generator': {'vars': 3867.0, 'vars_eliminated': 0.0, 'vars_frozen': 2467.0, 'constraints': 310.0, 'constraints_binary': 10091.0, 'constraints_ternary': 911.0, 'acyc_edges': 0.0, 'complexity': 11416.0}}, 'solving': {'solvers': {'choices': 25.0, 'conflicts': 10.0, 'conflicts_analyzed': 4.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4.0, 'distributed_sum_lbd': 10.0, 'integrated': 20.0, 'lemmas': 29.0, 'lits_learnt': 172.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 9.0, 'integrated_jumps': 9.0, 'guiding_paths_lits': 156.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 4.0, 'lemmas_loop': 5.0, 'lemmas_other': 20.0, 'lits_conflict': 21.0, 'lits_loop': 46.0, 'lits_other': 105.0, 'jumps': {'jumps': 4.0, 'jumps_bounded': 1.0, 'levels': 18.0, 'levels_bounded': 2.0, 'max': 9.0, 'max_executed': 7.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 4.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 6.0, 'winner': 5.0, 'times': {'total': 0.09901237487792969, 'cpu': 0.109375, 'solve': 0.0009918212890625, 'unsat': 0.0009918212890625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.4549598693847656, 'cpu': 0.484375, 'solve': 0.014860153198242188, 'unsat': 0.010135650634765625, 'sat': 0.00272369384765625}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 237.0, 'conflicts': 19.0, 'conflicts_analyzed': 9.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 72.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 15.0, 'distributed_sum_lbd': 33.0, 'integrated': 53.0, 'lemmas': 81.0, 'lits_learnt': 320.0, 'lemmas_binary': 40.0, 'lemmas_ternary': 4.0, 'cpu_time': 0.015625, 'integrated_imps': 12.0, 'integrated_jumps': 54.0, 'guiding_paths_lits': 418.0, 'guiding_paths': 30.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 21.0, 'lemmas_other': 53.0, 'lits_conflict': 28.0, 'lits_loop': 118.0, 'lits_other': 174.0, 'jumps': {'jumps': 9.0, 'jumps_bounded': 1.0, 'levels': 69.0, 'levels_bounded': 2.0, 'max': 18.0, 'max_executed': 18.0, 'max_bounded': 2.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Reaction at search length 56:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     56 : Current =     57
Incrementor step ends | Minimum  =     55 : Maximum =    200

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(57)]), ('state_module', [Number(57), Number(52)]), ('plan_module', [Number(57), Number(52), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(57), Number(52), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(57)]), ('action_preconditions', [Number(57)]), ('variable_relations', [Number(57)]), ('abstraction_mappings', [Number(57)]), ('conformance_module', [Number(57), Number(52), Number(31), Number(33), Function('sequential', [], True), Function('true', [], True)])]

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.092320s.

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010342s with result Unsatisfiable.

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.10266200000000936, Incremental time limit = None
Running cumulative time = 0.5167325999996137, Cumulative time limit = 1800
Used memory = (RSS = 1042.582031Mb, VMS = 1034.671875Mb), Total system virtual memory = 16324.0078125Mb

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=56, end_step=57, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.4700827999995454, solving_time=0.04664980000006835, total_time=0.5167325999996137, memory=Memory(rss=1042.58203125, vms=1034.671875), step_range=range(52, 58), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09231969999996181, solving_time=0.010342300000047544, total_time=0.10266200000000936, memory=Memory(rss=1042.58203125, vms=1034.671875), step_range=range(57, 58), clingo_stats={'problem': {'lp': {'atoms': 21286.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 116421.0, 'bodies_tr': 116421.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1070.0, 'count_bodies_tr': 1070.0, 'sccs': 97.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1395.0, 'rules': 224688.0, 'rules_normal': 223355.0, 'rules_choice': 1323.0, 'rules_minimize': 10.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 224688.0, 'rules_tr_normal': 223355.0, 'rules_tr_choice': 1323.0, 'rules_tr_minimize': 10.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 46099.0, 'eqs_atom': 11274.0, 'eqs_body': 3540.0, 'eqs_other': 31285.0}, 'lpStep': {'atoms': 2776.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22783.0, 'bodies_tr': 22783.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 398.0, 'rules': 43121.0, 'rules_normal': 42924.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 43121.0, 'rules_tr_normal': 42924.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 6621.0, 'eqs_atom': 1331.0, 'eqs_body': 183.0, 'eqs_other': 5107.0}, 'generator': {'vars': 5354.0, 'vars_eliminated': 0.0, 'vars_frozen': 3386.0, 'constraints': 673.0, 'constraints_binary': 23916.0, 'constraints_ternary': 2309.0, 'acyc_edges': 0.0, 'complexity': 27072.0}}, 'solving': {'solvers': {'choices': 75.0, 'conflicts': 38.0, 'conflicts_analyzed': 25.0, 'restarts': 0.0, 'restarts_last': 8.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 23.0, 'distributed_sum_lbd': 52.0, 'integrated': 77.0, 'lemmas': 154.0, 'lits_learnt': 1327.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 33.0, 'integrated_jumps': 30.0, 'guiding_paths_lits': 186.0, 'guiding_paths': 13.0, 'splits': 0.0, 'lemmas_conflict': 25.0, 'lemmas_loop': 60.0, 'lemmas_other': 69.0, 'lits_conflict': 224.0, 'lits_loop': 561.0, 'lits_other': 542.0, 'jumps': {'jumps': 25.0, 'jumps_bounded': 7.0, 'levels': 148.0, 'levels_bounded': 103.0, 'max': 33.0, 'max_executed': 10.0, 'max_bounded': 32.0}}}}, 'summary': {'call': 5.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, -3.0], 'concurrency': 6.0, 'winner': 5.0, 'times': {'total': 0.10401535034179688, 'cpu': 0.109375, 'solve': 0.0019931793212890625, 'unsat': 0.0019931793212890625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.5589752197265625, 'cpu': 0.59375, 'solve': 0.01685333251953125, 'unsat': 0.012128829956054688, 'sat': 0.00272369384765625}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 312.0, 'conflicts': 57.0, 'conflicts_analyzed': 34.0, 'restarts': 0.0, 'restarts_last': 8.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 72.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 38.0, 'distributed_sum_lbd': 85.0, 'integrated': 130.0, 'lemmas': 235.0, 'lits_learnt': 1647.0, 'lemmas_binary': 40.0, 'lemmas_ternary': 4.0, 'cpu_time': 0.015625, 'integrated_imps': 45.0, 'integrated_jumps': 84.0, 'guiding_paths_lits': 604.0, 'guiding_paths': 43.0, 'splits': 0.0, 'lemmas_conflict': 32.0, 'lemmas_loop': 81.0, 'lemmas_other': 122.0, 'lits_conflict': 252.0, 'lits_loop': 679.0, 'lits_other': 716.0, 'jumps': {'jumps': 34.0, 'jumps_bounded': 8.0, 'levels': 217.0, 'levels_bounded': 105.0, 'max': 33.0, 'max_executed': 18.0, 'max_bounded': 32.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Reaction at search length 57:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     57 : Current =     58
Incrementor step ends | Minimum  =     55 : Maximum =    200

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(58)]), ('state_module', [Number(58), Number(52)]), ('plan_module', [Number(58), Number(52), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(58), Number(52), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(58)]), ('action_preconditions', [Number(58)]), ('variable_relations', [Number(58)]), ('abstraction_mappings', [Number(58)]), ('conformance_module', [Number(58), Number(52), Number(31), Number(33), Function('sequential', [], True), Function('true', [], True)])]

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.097248s.

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.020568s with result Satisfiable.

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.11781570000016472, Incremental time limit = None
Running cumulative time = 0.6345482999997785, Cumulative time limit = 1800
Used memory = (RSS = 1042.582031Mb, VMS = 1034.671875Mb), Total system virtual memory = 16324.0078125Mb

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.567331s, Solving = 0.067217s, Total = 0.634548s, Memory = (RSS = 1042.582031Mb, VMS = 1034.671875Mb), Step range = [52-58]), Calls = 6
Final Model :: Total atoms = 6016, Cost = (0, 0), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=6, start_step=57, end_step=58, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.5673308999996607, solving_time=0.06721740000011778, total_time=0.6345482999997785, memory=Memory(rss=1042.58203125, vms=1034.671875), step_range=range(52, 59), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.0972481000001153, solving_time=0.020567600000049424, total_time=0.11781570000016472, memory=Memory(rss=1042.58203125, vms=1034.671875), step_range=range(58, 59), clingo_stats={'problem': {'lp': {'atoms': 24417.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 139898.0, 'bodies_tr': 139898.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1272.0, 'count_bodies_tr': 1272.0, 'sccs': 122.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1799.0, 'rules': 268767.0, 'rules_normal': 267237.0, 'rules_choice': 1518.0, 'rules_minimize': 12.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 268767.0, 'rules_tr_normal': 267237.0, 'rules_tr_choice': 1518.0, 'rules_tr_minimize': 12.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 56662.0, 'eqs_atom': 12936.0, 'eqs_body': 3823.0, 'eqs_other': 39903.0}, 'lpStep': {'atoms': 3131.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 23477.0, 'bodies_tr': 23477.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 404.0, 'rules': 44079.0, 'rules_normal': 43882.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 44079.0, 'rules_tr_normal': 43882.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 10563.0, 'eqs_atom': 1662.0, 'eqs_body': 283.0, 'eqs_other': 8618.0}, 'generator': {'vars': 7033.0, 'vars_eliminated': 0.0, 'vars_frozen': 4365.0, 'constraints': 1027.0, 'constraints_binary': 39126.0, 'constraints_ternary': 4239.0, 'acyc_edges': 0.0, 'complexity': 44636.0}}, 'solving': {'solvers': {'choices': 310.0, 'conflicts': 46.0, 'conflicts_analyzed': 32.0, 'restarts': 0.0, 'restarts_last': 12.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 79.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 30.0, 'distributed_sum_lbd': 70.0, 'integrated': 149.0, 'lemmas': 268.0, 'lits_learnt': 2389.0, 'lemmas_binary': 30.0, 'lemmas_ternary': 6.0, 'cpu_time': 0.015625, 'integrated_imps': 42.0, 'integrated_jumps': 70.0, 'guiding_paths_lits': 216.0, 'guiding_paths': 20.0, 'splits': 0.0, 'lemmas_conflict': 32.0, 'lemmas_loop': 97.0, 'lemmas_other': 139.0, 'lits_conflict': 362.0, 'lits_loop': 642.0, 'lits_other': 1385.0, 'jumps': {'jumps': 32.0, 'jumps_bounded': 3.0, 'levels': 160.0, 'levels_bounded': 75.0, 'max': 42.0, 'max_executed': 42.0, 'max_bounded': 37.0}}}}, 'summary': {'call': 6.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [0.0, 0.0], 'lower': [0.0, 0.0], 'concurrency': 6.0, 'winner': 5.0, 'times': {'total': 0.11902618408203125, 'cpu': 0.125, 'solve': 0.008001327514648438, 'unsat': 0.0060100555419921875, 'sat': 0.00199127197265625}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.6780014038085938, 'cpu': 0.71875, 'solve': 0.024854660034179688, 'unsat': 0.018138885498046875, 'sat': 0.0047149658203125}, 'models': {'enumerated': 4.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 622.0, 'conflicts': 103.0, 'conflicts_analyzed': 66.0, 'restarts': 0.0, 'restarts_last': 12.0, 'extra': {'domain_choices': 0.0, 'models': 4.0, 'models_level': 151.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 68.0, 'distributed_sum_lbd': 155.0, 'integrated': 279.0, 'lemmas': 503.0, 'lits_learnt': 4036.0, 'lemmas_binary': 70.0, 'lemmas_ternary': 10.0, 'cpu_time': 0.03125, 'integrated_imps': 87.0, 'integrated_jumps': 154.0, 'guiding_paths_lits': 820.0, 'guiding_paths': 63.0, 'splits': 0.0, 'lemmas_conflict': 64.0, 'lemmas_loop': 178.0, 'lemmas_other': 261.0, 'lits_conflict': 614.0, 'lits_loop': 1321.0, 'lits_other': 2101.0, 'jumps': {'jumps': 66.0, 'jumps_bounded': 11.0, 'levels': 377.0, 'levels_bounded': 180.0, 'max': 42.0, 'max_executed': 42.0, 'max_bounded': 37.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{31: 53, 32: 55, 33: 58}

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 34 achieved :: Progression >> total requested sgoals = 3, current total achieved sgoals = 4 (133.33% solved)

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 33 was achieved successfully.

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.119451s, Solving = 0.014339s, Total = 0.133790s, Memory = (RSS = 1042.578125Mb, VMS = 1034.671875Mb), Step range = [52-53]
2 : Statistics :: Grounding = 0.083452s, Solving = 0.005075s, Total = 0.088527s, Memory = (RSS = 1042.582031Mb, VMS = 1034.671875Mb), Step range = [54-54]
3 : Statistics :: Grounding = 0.084316s, Solving = 0.009051s, Total = 0.093366s, Memory = (RSS = 1042.582031Mb, VMS = 1034.671875Mb), Step range = [55-55]
4 : Statistics :: Grounding = 0.090544s, Solving = 0.007842s, Total = 0.098387s, Memory = (RSS = 1042.582031Mb, VMS = 1034.671875Mb), Step range = [56-56]
5 : Statistics :: Grounding = 0.092320s, Solving = 0.010342s, Total = 0.102662s, Memory = (RSS = 1042.582031Mb, VMS = 1034.671875Mb), Step range = [57-57]
6 : Statistics :: Grounding = 0.097248s, Solving = 0.020568s, Total = 0.117816s, Memory = (RSS = 1042.582031Mb, VMS = 1034.671875Mb), Step range = [58-58]

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.634548s due to: External generator exit.

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 11, 24: 11, 25: 12, 26: 13, 27: 14, 28: 15, 29: 16, 30: 17, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 23, 41: 24, 42: 25, 43: 26, 44: 27, 45: 27, 46: 28, 47: 28, 48: 28, 49: 29, 50: 29, 51: 30, 52: 30}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 24, 12: 25, 13: 26, 14: 27, 15: 28, 16: 29, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 39, 23: 40, 24: 41, 25: 42, 26: 43, 27: 45, 28: 48, 29: 50, 30: 52}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 5, 22: 6, 23: 7, 24: 8, 25: 9, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10, 31: 11, 32: 11, 33: 11, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 13, 3: 14, 4: 18, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 33, 12: 35, 13: 37, 14: 38, 15: 39, 16: 40, 17: 41, 18: 42, 19: 43, 20: 44}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 11, 24: 11, 25: 12, 26: 13, 27: 14, 28: 15, 29: 16, 30: 17, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 23, 41: 24, 42: 25, 43: 26, 44: 27, 45: 27, 46: 28, 47: 28, 48: 28, 49: 29, 50: 29, 51: 30, 52: 30, 53: 31, 54: 32, 55: 32, 56: 33, 57: 33, 58: 33}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 24, 12: 25, 13: 26, 14: 27, 15: 28, 16: 29, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 39, 23: 40, 24: 41, 25: 42, 26: 43, 27: 45, 28: 48, 29: 50, 30: 52, 31: 53, 32: 55, 33: 58}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 5, 22: 6, 23: 7, 24: 8, 25: 9, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10, 31: 11, 32: 11, 33: 11, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 13, 3: 14, 4: 18, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 33, 12: 35, 13: 37, 14: 38, 15: 39, 16: 40, 17: 41, 18: 42, 19: 43, 20: 44}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 33, Last requested goal index = 33, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.567331s, Solving = 0.067217s, Total = 0.634548s, Memory = (RSS = 1042.582031Mb, VMS = 1034.671875Mb), Step range = [52-58]), Calls = 6
Model :: Total atoms = 6016, Cost = (0, 0), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 6 :: Actions = 6                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 21:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 23:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 24:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 25:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 26:
    Current Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 27:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,6))
Step 28:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 29:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 30:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 31:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 37:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 38:
    Current Sub-goals:
        [Index = 21] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 21] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,6),puzzle_room_table_right)
Step 39:
    Current Sub-goals:
        [Index = 22] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 22] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,6))
Step 40:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_1,(block,5),(block,6))
Step 41:
    Current Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,5))
Step 42:
    Current Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 43:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 44:
    Current Sub-goals:
        [Index = 27] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 45:
    Current Sub-goals:
        [Index = 27] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 27] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 46:
    Current Sub-goals:
        [Index = 28] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 47:
    Current Sub-goals:
        [Index = 28] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 48:
    Current Sub-goals:
        [Index = 28] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 28] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 49:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 50:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 51:
    Current Sub-goals:
        [Index = 30] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
Step 52:
    Current Sub-goals:
        [Index = 30] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
        [Index = 30] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))
Step 53:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 54:
    Current Sub-goals:
        [Index = 32] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 55:
    Current Sub-goals:
        [Index = 32] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 32] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 56:
    Current Sub-goals:
        [Index = 33] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 57:
    Current Sub-goals:
        [Index = 33] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 58:
    Current Sub-goals:
        [Index = 33] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 33] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Monolevel problem 5 at level 1 solved.

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Online planning increment 5 finished.

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 2 : Total constraining sub-goal stages = 20 : Goals achieved = 20 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 5 : Total constraining sub-goal stages = 44 : Goals achieved = 33 : Goals unachieved = 11 : Complete = False

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 6 by method ground-first is [1-1].

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 6 at level 1:
Total Templated Partial Problems = 4, Problem Range = [5-8], Size = 14, Sub-goal Stage Range = [31-44]
Division points [total=3] : [(Index = 33, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 36, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 40, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [34-36]

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [34-36], problem number = 6, increment number = 6

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 34)
	('last_sgoals', 36)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x00000225876B9A00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [34-36] : Concurrency disabled : Minimum search length bound disabled with value 60

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 34
last_sgoals = 36
start_step = 58
is_initial = False
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 60

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[04-02-2022_01-49-28] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[04-02-2022_01-49-28] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 58 as problem start state.

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,4))', 'S': 58})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 58})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 58})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 58})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 58})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 58})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 58})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'S': 58})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 58})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,4)', 'S': 58})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 58})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 58})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 58})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 58})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,0)', 'S': 58})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 58})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 58})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,0)', 'S': 58})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,0)', 'S': 58})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,0)', 'S': 58})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,0)', 'S': 58})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,0)', 'S': 58})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,0)', 'S': 58})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 58})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 58})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 58})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,0)', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 58})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 58})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 58})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 58})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 58})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 58})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 58})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 58})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 58})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 58})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 58})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 58})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 58})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 58})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 58})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 58})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'S': 58})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 58})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 58})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 58})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 58})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 58})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 58})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 58})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 58})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 58})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 58})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 58})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 58})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 58})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 58})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 58})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 58})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 58})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 58})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 58})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 58})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 58})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 58})

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 58).
holds(1, complete_tower(red,puzzle_room_table), false, 58).
holds(1, configuration(manipulator_end_1), aligned_with((block,4)), 58).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 58).
holds(1, configuration(manipulator_limb_1), retracted, 58).
holds(1, configuration(manipulator_limb_2), retracted, 58).
holds(1, configuration(puzzle_room_door), open, 58).
holds(1, configuration(starting_room_door), closed, 58).
holds(1, configuration(store_room_door), open, 58).
holds(1, grasping(manipulator_arm_1), (block,4), 58).
holds(1, grasping(manipulator_arm_2), nothing, 58).
holds(1, grasping(manipulator_end_1), (block,4), 58).
holds(1, grasping(manipulator_end_2), nothing, 58).
holds(1, in((block,1)), (puzzle_room,1), 58).
holds(1, in((block,2)), (puzzle_room,1), 58).
holds(1, in((block,3)), (puzzle_room,1), 58).
holds(1, in((block,4)), (puzzle_room,0), 58).
holds(1, in((block,5)), (puzzle_room,1), 58).
holds(1, in((block,6)), (puzzle_room,1), 58).
holds(1, in(manipulator_arm_1), (puzzle_room,0), 58).
holds(1, in(manipulator_arm_2), (puzzle_room,0), 58).
holds(1, in(manipulator_end_1), (puzzle_room,0), 58).
holds(1, in(manipulator_end_2), (puzzle_room,0), 58).
holds(1, in(manipulator_limb_1), (puzzle_room,0), 58).
holds(1, in(manipulator_limb_2), (puzzle_room,0), 58).
holds(1, in(puzzle_room_table), (puzzle_room,1), 58).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 58).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 58).
holds(1, in(talos), (puzzle_room,0), 58).
holds(1, in_tower((block,1),(block,1)), true, 58).
holds(1, in_tower((block,1),(block,2)), false, 58).
holds(1, in_tower((block,1),(block,3)), true, 58).
holds(1, in_tower((block,1),(block,4)), false, 58).
holds(1, in_tower((block,1),(block,5)), false, 58).
holds(1, in_tower((block,1),(block,6)), false, 58).
holds(1, in_tower((block,2),(block,1)), false, 58).
holds(1, in_tower((block,2),(block,2)), true, 58).
holds(1, in_tower((block,2),(block,3)), false, 58).
holds(1, in_tower((block,2),(block,4)), false, 58).
holds(1, in_tower((block,2),(block,5)), false, 58).
holds(1, in_tower((block,2),(block,6)), false, 58).
holds(1, in_tower((block,3),(block,1)), false, 58).
holds(1, in_tower((block,3),(block,2)), false, 58).
holds(1, in_tower((block,3),(block,3)), false, 58).
holds(1, in_tower((block,3),(block,4)), false, 58).
holds(1, in_tower((block,3),(block,5)), false, 58).
holds(1, in_tower((block,3),(block,6)), false, 58).
holds(1, in_tower((block,4),(block,1)), false, 58).
holds(1, in_tower((block,4),(block,2)), false, 58).
holds(1, in_tower((block,4),(block,3)), false, 58).
holds(1, in_tower((block,4),(block,4)), false, 58).
holds(1, in_tower((block,4),(block,5)), false, 58).
holds(1, in_tower((block,4),(block,6)), false, 58).
holds(1, in_tower((block,5),(block,1)), false, 58).
holds(1, in_tower((block,5),(block,2)), false, 58).
holds(1, in_tower((block,5),(block,3)), false, 58).
holds(1, in_tower((block,5),(block,4)), false, 58).
holds(1, in_tower((block,5),(block,5)), false, 58).
holds(1, in_tower((block,5),(block,6)), false, 58).
holds(1, in_tower((block,6),(block,1)), false, 58).
holds(1, in_tower((block,6),(block,2)), false, 58).
holds(1, in_tower((block,6),(block,3)), false, 58).
holds(1, in_tower((block,6),(block,4)), false, 58).
holds(1, in_tower((block,6),(block,5)), true, 58).
holds(1, in_tower((block,6),(block,6)), true, 58).
holds(1, on((block,1)), puzzle_room_table_left, 58).
holds(1, on((block,2)), puzzle_room_table_right, 58).
holds(1, on((block,3)), (block,1), 58).
holds(1, on((block,4)), nothing, 58).
holds(1, on((block,5)), (block,6), 58).
holds(1, on((block,6)), puzzle_room_table_right, 58).
holds(1, tower_base((block,1),puzzle_room_table), true, 58).
holds(1, tower_base((block,2),puzzle_room_table), true, 58).
holds(1, tower_base((block,3),puzzle_room_table), false, 58).
holds(1, tower_base((block,4),puzzle_room_table), false, 58).
holds(1, tower_base((block,5),puzzle_room_table), false, 58).
holds(1, tower_base((block,6),puzzle_room_table), true, 58).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 58).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 58).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 58).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 58).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 58).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 58).
holds(2, complete_tower(blue,puzzle_room_table), false, 58).
holds(2, complete_tower(red,puzzle_room_table), false, 58).
holds(2, configuration(manipulator_arm_1), retracted, 58).
holds(2, configuration(manipulator_arm_2), retracted, 58).
holds(2, configuration(puzzle_room_door), open, 58).
holds(2, configuration(starting_room_door), closed, 58).
holds(2, configuration(store_room_door), open, 58).
holds(2, grasping(manipulator_arm_1), (block,4), 58).
holds(2, grasping(manipulator_arm_2), nothing, 58).
holds(2, in((block,1)), puzzle_room, 58).
holds(2, in((block,2)), puzzle_room, 58).
holds(2, in((block,3)), puzzle_room, 58).
holds(2, in((block,4)), puzzle_room, 58).
holds(2, in((block,5)), puzzle_room, 58).
holds(2, in((block,6)), puzzle_room, 58).
holds(2, in(manipulator_arm_1), puzzle_room, 58).
holds(2, in(manipulator_arm_2), puzzle_room, 58).
holds(2, in(puzzle_room_table), puzzle_room, 58).
holds(2, in(talos), puzzle_room, 58).
holds(2, in_tower((block,1),(block,1)), true, 58).
holds(2, in_tower((block,1),(block,2)), false, 58).
holds(2, in_tower((block,1),(block,3)), true, 58).
holds(2, in_tower((block,1),(block,4)), false, 58).
holds(2, in_tower((block,1),(block,5)), false, 58).
holds(2, in_tower((block,1),(block,6)), false, 58).
holds(2, in_tower((block,2),(block,1)), false, 58).
holds(2, in_tower((block,2),(block,2)), true, 58).
holds(2, in_tower((block,2),(block,3)), false, 58).
holds(2, in_tower((block,2),(block,4)), false, 58).
holds(2, in_tower((block,2),(block,5)), false, 58).
holds(2, in_tower((block,2),(block,6)), false, 58).
holds(2, in_tower((block,3),(block,1)), false, 58).
holds(2, in_tower((block,3),(block,2)), false, 58).
holds(2, in_tower((block,3),(block,3)), false, 58).
holds(2, in_tower((block,3),(block,4)), false, 58).
holds(2, in_tower((block,3),(block,5)), false, 58).
holds(2, in_tower((block,3),(block,6)), false, 58).
holds(2, in_tower((block,4),(block,1)), false, 58).
holds(2, in_tower((block,4),(block,2)), false, 58).
holds(2, in_tower((block,4),(block,3)), false, 58).
holds(2, in_tower((block,4),(block,4)), false, 58).
holds(2, in_tower((block,4),(block,5)), false, 58).
holds(2, in_tower((block,4),(block,6)), false, 58).
holds(2, in_tower((block,5),(block,1)), false, 58).
holds(2, in_tower((block,5),(block,2)), false, 58).
holds(2, in_tower((block,5),(block,3)), false, 58).
holds(2, in_tower((block,5),(block,4)), false, 58).
holds(2, in_tower((block,5),(block,5)), false, 58).
holds(2, in_tower((block,5),(block,6)), false, 58).
holds(2, in_tower((block,6),(block,1)), false, 58).
holds(2, in_tower((block,6),(block,2)), false, 58).
holds(2, in_tower((block,6),(block,3)), false, 58).
holds(2, in_tower((block,6),(block,4)), false, 58).
holds(2, in_tower((block,6),(block,5)), true, 58).
holds(2, in_tower((block,6),(block,6)), true, 58).
holds(2, on((block,1)), puzzle_room_table, 58).
holds(2, on((block,2)), puzzle_room_table, 58).
holds(2, on((block,3)), (block,1), 58).
holds(2, on((block,4)), nothing, 58).
holds(2, on((block,5)), (block,6), 58).
holds(2, on((block,6)), puzzle_room_table, 58).
holds(2, tower_base((block,1),puzzle_room_table), true, 58).
holds(2, tower_base((block,2),puzzle_room_table), true, 58).
holds(2, tower_base((block,3),puzzle_room_table), false, 58).
holds(2, tower_base((block,4),puzzle_room_table), false, 58).
holds(2, tower_base((block,5),puzzle_room_table), false, 58).
holds(2, tower_base((block,6),puzzle_room_table), true, 58).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 58).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 58).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 58).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 58).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 58).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 58).

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 34})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 35})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 36})

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 3 rules into program part base:

sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 34).
sub_goal(2, talos, put(manipulator_arm_1,(block,4),(block,5)), on((block,4)), (block,5), 35).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 36).

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000002258666FE50>]
	incrementor = SolveIncrementor(step_start=58, step_increase=1, step_increase_initial=2, step_end_min=61, step_end_max=200, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 58), range_=None), IncPart(name='plan_module', args=('#inc', 58, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 58, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 58, 34, 36, 'sequential', 'true'), range_=None)]

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 811 rules

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0045637999999144085s

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.029217s.

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005365s with result Satisfiable.

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x00000225C2E5A770>

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 58)
	('last_sgoals', 36)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x00000225876B9A00>)
	('first_sgoals', 34)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x00000225C2E5A770>)

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(34, 59)', truth=True, inc_range=None)

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 58). %* None *%
#program plan_module(#inc, 58, false, false). %* None *%
#program optimisation_module(#inc, 58, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 58, 34, 36, sequential, true). %* None *%

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     57 : Current =     59
Incrementor step ends | Minimum  =     61 : Maximum =    200

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(59)]), ('state_module', [Number(58), Number(58)]), ('plan_module', [Number(58), Number(58), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(58), Number(58), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(58)]), ('action_preconditions', [Number(58)]), ('variable_relations', [Number(58)]), ('abstraction_mappings', [Number(58)]), ('conformance_module', [Number(58), Number(58), Number(34), Number(36), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(59), Number(58)]), ('plan_module', [Number(59), Number(58), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(59), Number(58), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(59)]), ('action_preconditions', [Number(59)]), ('variable_relations', [Number(59)]), ('abstraction_mappings', [Number(59)]), ('conformance_module', [Number(59), Number(58), Number(34), Number(36), Function('sequential', [], True), Function('true', [], True)])]

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.122227s.

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 58: original = External(symbol='current_last_sgoals(34, 59)', truth=True, inc_range=None), conversion = current_last_sgoals(34,59).

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 59: original = External(symbol='current_last_sgoals(34, 59)', truth=True, inc_range=None), conversion = current_last_sgoals(34,59).

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.014888s with result Satisfiable.

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.13711490000014237, Incremental time limit = None
Running cumulative time = 0.13711490000014237, Cumulative time limit = 1800
Used memory = (RSS = 1042.644531Mb, VMS = 1034.671875Mb), Total system virtual memory = 16324.0078125Mb

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.122227s, Solving = 0.014888s, Total = 0.137115s, Memory = (RSS = 1042.644531Mb, VMS = 1034.671875Mb), Step range = [58-59]), Calls = 1
Final Model :: Total atoms = 4155, Cost = (0, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=57, end_step=59, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.12222680000013497, solving_time=0.014888100000007398, total_time=0.13711490000014237, memory=Memory(rss=1042.64453125, vms=1034.671875), step_range=range(58, 60), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.12222680000013497, solving_time=0.014888100000007398, total_time=0.13711490000014237, memory=Memory(rss=1042.64453125, vms=1034.671875), step_range=range(58, 60), clingo_stats={'problem': {'lp': {'atoms': 12187.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28145.0, 'bodies_tr': 28145.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 262.0, 'count_bodies_tr': 262.0, 'sccs': 44.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 553.0, 'rules': 56656.0, 'rules_normal': 56111.0, 'rules_choice': 543.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 56656.0, 'rules_tr_normal': 56111.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 24864.0, 'eqs_atom': 7018.0, 'eqs_body': 1913.0, 'eqs_other': 15933.0}, 'lpStep': {'atoms': 5669.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25526.0, 'bodies_tr': 25526.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 262.0, 'count_bodies_tr': 262.0, 'sccs': 44.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 553.0, 'rules': 49228.0, 'rules_normal': 48683.0, 'rules_choice': 543.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 49228.0, 'rules_tr_normal': 48683.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 11808.0, 'eqs_atom': 2108.0, 'eqs_body': 388.0, 'eqs_other': 9312.0}, 'generator': {'vars': 2611.0, 'vars_eliminated': 0.0, 'vars_frozen': 1598.0, 'constraints': 30.0, 'constraints_binary': 1177.0, 'constraints_ternary': 171.0, 'acyc_edges': 0.0, 'complexity': 1404.0}}, 'solving': {'solvers': {'choices': 24.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 24.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2.0, 'distributed_sum_lbd': 4.0, 'integrated': 4.0, 'lemmas': 4.0, 'lits_learnt': 6.0, 'lemmas_binary': 2.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 66.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 4.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 6.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [0.0, 0.0], 'lower': [0.0, 0.0], 'concurrency': 6.0, 'winner': 2.0, 'times': {'total': 0.13703155517578125, 'cpu': 0.125, 'solve': 0.0050029754638671875, 'unsat': 0.0040111541748046875, 'sat': 0.0009918212890625}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.1760387420654297, 'cpu': 0.15625, 'solve': 0.00800323486328125, 'unsat': 0.0040111541748046875, 'sat': 0.001983642578125}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 24.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 25.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2.0, 'distributed_sum_lbd': 4.0, 'integrated': 4.0, 'lemmas': 4.0, 'lits_learnt': 6.0, 'lemmas_binary': 2.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 72.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 4.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 6.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{34: 59}

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 35 achieved :: Progression >> total requested sgoals = 3, current total achieved sgoals = 2 ( 66.67% solved)

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(35, 59)', truth=True, inc_range=None)

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 35, step = 59]:
sub_goal(2, talos, put(manipulator_arm_1,(block,4),(block,5)), on((block,4)), (block,5), 35)

[04-02-2022_01-49-28] DEBUG :: ASH Planner Main #1 >> Reaction at search length 59:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     59 : Current =     60
Incrementor step ends | Minimum  =     61 : Maximum =    200

[04-02-2022_01-49-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(60)]), ('state_module', [Number(60), Number(58)]), ('plan_module', [Number(60), Number(58), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(60), Number(58), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(60)]), ('action_preconditions', [Number(60)]), ('variable_relations', [Number(60)]), ('abstraction_mappings', [Number(60)]), ('conformance_module', [Number(60), Number(58), Number(34), Number(36), Function('sequential', [], True), Function('true', [], True)])]

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.084100s.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 60: original = External(symbol='current_last_sgoals(35, 59)', truth=True, inc_range=None), conversion = current_last_sgoals(35,59).

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005838s with result Unsatisfiable.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.08993800000007468, Incremental time limit = None
Running cumulative time = 0.22705290000021705, Cumulative time limit = 1800
Used memory = (RSS = 1042.644531Mb, VMS = 1034.671875Mb), Total system virtual memory = 16324.0078125Mb

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=59, end_step=60, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.20632690000024922, solving_time=0.020725999999967826, total_time=0.22705290000021705, memory=Memory(rss=1042.64453125, vms=1034.671875), step_range=range(58, 61), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.08410010000011425, solving_time=0.0058378999999604275, total_time=0.08993800000007468, memory=Memory(rss=1042.64453125, vms=1034.671875), step_range=range(60, 61), clingo_stats={'problem': {'lp': {'atoms': 14149.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 49762.0, 'bodies_tr': 49762.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 464.0, 'count_bodies_tr': 464.0, 'sccs': 57.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 739.0, 'rules': 97965.0, 'rules_normal': 97223.0, 'rules_choice': 738.0, 'rules_minimize': 4.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 97965.0, 'rules_tr_normal': 97223.0, 'rules_tr_choice': 738.0, 'rules_tr_minimize': 4.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 29054.0, 'eqs_atom': 7907.0, 'eqs_body': 2332.0, 'eqs_other': 18815.0}, 'lpStep': {'atoms': 1962.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21617.0, 'bodies_tr': 21617.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 186.0, 'rules': 41309.0, 'rules_normal': 41112.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 41309.0, 'rules_tr_normal': 41112.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4190.0, 'eqs_atom': 889.0, 'eqs_body': 419.0, 'eqs_other': 2882.0}, 'generator': {'vars': 2973.0, 'vars_eliminated': 0.0, 'vars_frozen': 1879.0, 'constraints': 140.0, 'constraints_binary': 2890.0, 'constraints_ternary': 372.0, 'acyc_edges': 0.0, 'complexity': 3460.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 3.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 80.0, 'guiding_paths': 5.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, -1.0], 'concurrency': 6.0, 'winner': 0.0, 'times': {'total': 0.09101104736328125, 'cpu': 0.09375, 'solve': 0.00199127197265625, 'unsat': 0.00199127197265625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.26704978942871094, 'cpu': 0.25, 'solve': 0.0099945068359375, 'unsat': 0.0060024261474609375, 'sat': 0.001983642578125}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 24.0, 'conflicts': 3.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 25.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2.0, 'distributed_sum_lbd': 4.0, 'integrated': 4.0, 'lemmas': 4.0, 'lits_learnt': 6.0, 'lemmas_binary': 2.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 152.0, 'guiding_paths': 17.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 4.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 6.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Reaction at search length 60:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     60 : Current =     61
Incrementor step ends | Minimum  =     61 : Maximum =    200

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(61)]), ('state_module', [Number(61), Number(58)]), ('plan_module', [Number(61), Number(58), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(61), Number(58), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(61)]), ('action_preconditions', [Number(61)]), ('variable_relations', [Number(61)]), ('abstraction_mappings', [Number(61)]), ('conformance_module', [Number(61), Number(58), Number(34), Number(36), Function('sequential', [], True), Function('true', [], True)])]

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.091188s.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011800s with result Satisfiable.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.10298820000002706, Incremental time limit = None
Running cumulative time = 0.3300411000002441, Cumulative time limit = 1800
Used memory = (RSS = 1042.644531Mb, VMS = 1034.671875Mb), Total system virtual memory = 16324.0078125Mb

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.297515s, Solving = 0.032526s, Total = 0.330041s, Memory = (RSS = 1042.644531Mb, VMS = 1034.671875Mb), Step range = [58-61]), Calls = 3
Final Model :: Total atoms = 4898, Cost = (0, -1), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=60, end_step=61, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.29751480000027186, solving_time=0.03252629999997225, total_time=0.3300411000002441, memory=Memory(rss=1042.64453125, vms=1034.671875), step_range=range(58, 62), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09118790000002264, solving_time=0.011800300000004427, total_time=0.10298820000002706, memory=Memory(rss=1042.64453125, vms=1034.671875), step_range=range(61, 62), clingo_stats={'problem': {'lp': {'atoms': 16851.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 71805.0, 'bodies_tr': 71805.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 666.0, 'count_bodies_tr': 666.0, 'sccs': 70.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 973.0, 'rules': 140342.0, 'rules_normal': 139403.0, 'rules_choice': 933.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 140342.0, 'rules_tr_normal': 139403.0, 'rules_tr_choice': 933.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 36255.0, 'eqs_atom': 9463.0, 'eqs_body': 2834.0, 'eqs_other': 23958.0}, 'lpStep': {'atoms': 2702.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22043.0, 'bodies_tr': 22043.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 234.0, 'rules': 42377.0, 'rules_normal': 42180.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 42377.0, 'rules_tr_normal': 42180.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7201.0, 'eqs_atom': 1556.0, 'eqs_body': 502.0, 'eqs_other': 5143.0}, 'generator': {'vars': 3536.0, 'vars_eliminated': 0.0, 'vars_frozen': 2296.0, 'constraints': 289.0, 'constraints_binary': 6541.0, 'constraints_ternary': 732.0, 'acyc_edges': 0.0, 'complexity': 7660.0}}, 'solving': {'solvers': {'choices': 148.0, 'conflicts': 8.0, 'conflicts_analyzed': 6.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 47.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 12.0, 'distributed_sum_lbd': 24.0, 'integrated': 60.0, 'lemmas': 95.0, 'lits_learnt': 488.0, 'lemmas_binary': 33.0, 'lemmas_ternary': 4.0, 'cpu_time': 0.0, 'integrated_imps': 19.0, 'integrated_jumps': 26.0, 'guiding_paths_lits': 126.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 6.0, 'lemmas_loop': 41.0, 'lemmas_other': 48.0, 'lits_conflict': 21.0, 'lits_loop': 335.0, 'lits_other': 132.0, 'jumps': {'jumps': 6.0, 'jumps_bounded': 2.0, 'levels': 76.0, 'levels_bounded': 45.0, 'max': 32.0, 'max_executed': 24.0, 'max_bounded': 23.0}}}}, 'summary': {'call': 3.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [0.0, -1.0], 'lower': [0.0, -1.0], 'concurrency': 6.0, 'winner': 0.0, 'times': {'total': 0.10401535034179688, 'cpu': 0.09375, 'solve': 0.0060024261474609375, 'unsat': 0.005001068115234375, 'sat': 0.0010013580322265625}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.3710651397705078, 'cpu': 0.34375, 'solve': 0.015996932983398438, 'unsat': 0.011003494262695312, 'sat': 0.0029850006103515625}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 172.0, 'conflicts': 11.0, 'conflicts_analyzed': 6.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 72.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 14.0, 'distributed_sum_lbd': 28.0, 'integrated': 64.0, 'lemmas': 99.0, 'lits_learnt': 494.0, 'lemmas_binary': 35.0, 'lemmas_ternary': 4.0, 'cpu_time': 0.0, 'integrated_imps': 19.0, 'integrated_jumps': 26.0, 'guiding_paths_lits': 278.0, 'guiding_paths': 24.0, 'splits': 0.0, 'lemmas_conflict': 6.0, 'lemmas_loop': 45.0, 'lemmas_other': 48.0, 'lits_conflict': 21.0, 'lits_loop': 341.0, 'lits_other': 132.0, 'jumps': {'jumps': 6.0, 'jumps_bounded': 2.0, 'levels': 76.0, 'levels_bounded': 45.0, 'max': 32.0, 'max_executed': 24.0, 'max_bounded': 23.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{34: 59, 35: 61}

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 36 achieved :: Progression >> total requested sgoals = 3, current total achieved sgoals = 3 (100.00% solved)

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(36, 61)', truth=True, inc_range=None)

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 36, step = 61]:
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 36)

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Reaction at search length 61:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     61 : Current =     62
Incrementor step ends | Minimum  =     61 : Maximum =    200

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(62)]), ('state_module', [Number(62), Number(58)]), ('plan_module', [Number(62), Number(58), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(62), Number(58), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(62)]), ('action_preconditions', [Number(62)]), ('variable_relations', [Number(62)]), ('abstraction_mappings', [Number(62)]), ('conformance_module', [Number(62), Number(58), Number(34), Number(36), Function('sequential', [], True), Function('true', [], True)])]

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.094335s.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 62: original = External(symbol='current_last_sgoals(36, 61)', truth=True, inc_range=None), conversion = current_last_sgoals(36,61).

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013710s with result Satisfiable.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.10804480000001604, Incremental time limit = None
Running cumulative time = 0.43808590000026015, Cumulative time limit = 1800
Used memory = (RSS = 1042.644531Mb, VMS = 1034.671875Mb), Total system virtual memory = 16324.0078125Mb

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.391849s, Solving = 0.046237s, Total = 0.438086s, Memory = (RSS = 1042.644531Mb, VMS = 1034.671875Mb), Step range = [58-62]), Calls = 4
Final Model :: Total atoms = 5272, Cost = (0, -1), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=61, end_step=62, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.3918493000003309, solving_time=0.04623659999992924, total_time=0.43808590000026015, memory=Memory(rss=1042.64453125, vms=1034.671875), step_range=range(58, 63), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09433450000005905, solving_time=0.013710299999956987, total_time=0.10804480000001604, memory=Memory(rss=1042.64453125, vms=1034.671875), step_range=range(62, 63), clingo_stats={'problem': {'lp': {'atoms': 19597.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 94303.0, 'bodies_tr': 94303.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 868.0, 'count_bodies_tr': 868.0, 'sccs': 95.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1371.0, 'rules': 183175.0, 'rules_normal': 182039.0, 'rules_choice': 1128.0, 'rules_minimize': 8.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 183175.0, 'rules_tr_normal': 182039.0, 'rules_tr_choice': 1128.0, 'rules_tr_minimize': 8.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 42726.0, 'eqs_atom': 10835.0, 'eqs_body': 3130.0, 'eqs_other': 28761.0}, 'lpStep': {'atoms': 2746.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22498.0, 'bodies_tr': 22498.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 398.0, 'rules': 42833.0, 'rules_normal': 42636.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 42833.0, 'rules_tr_normal': 42636.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 6471.0, 'eqs_atom': 1372.0, 'eqs_body': 296.0, 'eqs_other': 4803.0}, 'generator': {'vars': 4869.0, 'vars_eliminated': 0.0, 'vars_frozen': 3142.0, 'constraints': 642.0, 'constraints_binary': 16175.0, 'constraints_ternary': 1944.0, 'acyc_edges': 0.0, 'complexity': 18929.0}}, 'solving': {'solvers': {'choices': 150.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 56.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.078125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 156.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 4.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [0.0, -1.0], 'lower': [0.0, -1.0], 'concurrency': 6.0, 'winner': 0.0, 'times': {'total': 0.1090240478515625, 'cpu': 0.171875, 'solve': 0.0060024261474609375, 'unsat': 0.004001617431640625, 'sat': 0.0020008087158203125}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.4800891876220703, 'cpu': 0.515625, 'solve': 0.021999359130859375, 'unsat': 0.015005111694335938, 'sat': 0.004985809326171875}, 'models': {'enumerated': 4.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 322.0, 'conflicts': 11.0, 'conflicts_analyzed': 6.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 0.0, 'models': 4.0, 'models_level': 128.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 14.0, 'distributed_sum_lbd': 28.0, 'integrated': 64.0, 'lemmas': 99.0, 'lits_learnt': 494.0, 'lemmas_binary': 35.0, 'lemmas_ternary': 4.0, 'cpu_time': 0.078125, 'integrated_imps': 19.0, 'integrated_jumps': 26.0, 'guiding_paths_lits': 434.0, 'guiding_paths': 30.0, 'splits': 0.0, 'lemmas_conflict': 6.0, 'lemmas_loop': 45.0, 'lemmas_other': 48.0, 'lits_conflict': 21.0, 'lits_loop': 341.0, 'lits_other': 132.0, 'jumps': {'jumps': 6.0, 'jumps_bounded': 2.0, 'levels': 76.0, 'levels_bounded': 45.0, 'max': 32.0, 'max_executed': 24.0, 'max_bounded': 23.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{34: 59, 35: 61, 36: 62}

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 37 achieved :: Progression >> total requested sgoals = 3, current total achieved sgoals = 4 (133.33% solved)

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 36 was achieved successfully.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.122227s, Solving = 0.014888s, Total = 0.137115s, Memory = (RSS = 1042.644531Mb, VMS = 1034.671875Mb), Step range = [58-59]
2 : Statistics :: Grounding = 0.084100s, Solving = 0.005838s, Total = 0.089938s, Memory = (RSS = 1042.644531Mb, VMS = 1034.671875Mb), Step range = [60-60]
3 : Statistics :: Grounding = 0.091188s, Solving = 0.011800s, Total = 0.102988s, Memory = (RSS = 1042.644531Mb, VMS = 1034.671875Mb), Step range = [61-61]
4 : Statistics :: Grounding = 0.094335s, Solving = 0.013710s, Total = 0.108045s, Memory = (RSS = 1042.644531Mb, VMS = 1034.671875Mb), Step range = [62-62]

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.438086s due to: External generator exit.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 11, 24: 11, 25: 12, 26: 13, 27: 14, 28: 15, 29: 16, 30: 17, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 23, 41: 24, 42: 25, 43: 26, 44: 27, 45: 27, 46: 28, 47: 28, 48: 28, 49: 29, 50: 29, 51: 30, 52: 30, 53: 31, 54: 32, 55: 32, 56: 33, 57: 33, 58: 33}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 24, 12: 25, 13: 26, 14: 27, 15: 28, 16: 29, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 39, 23: 40, 24: 41, 25: 42, 26: 43, 27: 45, 28: 48, 29: 50, 30: 52, 31: 53, 32: 55, 33: 58}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 5, 22: 6, 23: 7, 24: 8, 25: 9, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10, 31: 11, 32: 11, 33: 11, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 13, 3: 14, 4: 18, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 33, 12: 35, 13: 37, 14: 38, 15: 39, 16: 40, 17: 41, 18: 42, 19: 43, 20: 44}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 11, 24: 11, 25: 12, 26: 13, 27: 14, 28: 15, 29: 16, 30: 17, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 23, 41: 24, 42: 25, 43: 26, 44: 27, 45: 27, 46: 28, 47: 28, 48: 28, 49: 29, 50: 29, 51: 30, 52: 30, 53: 31, 54: 32, 55: 32, 56: 33, 57: 33, 58: 33, 59: 34, 60: 34, 61: 35, 62: 36}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 24, 12: 25, 13: 26, 14: 27, 15: 28, 16: 29, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 39, 23: 40, 24: 41, 25: 42, 26: 43, 27: 45, 28: 48, 29: 50, 30: 52, 31: 53, 32: 55, 33: 58, 34: 60, 35: 61, 36: 62}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 5, 22: 6, 23: 7, 24: 8, 25: 9, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10, 31: 11, 32: 11, 33: 11, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 13, 3: 14, 4: 18, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 33, 12: 35, 13: 37, 14: 38, 15: 39, 16: 40, 17: 41, 18: 42, 19: 43, 20: 44}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 36, Last requested goal index = 36, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.391849s, Solving = 0.046237s, Total = 0.438086s, Memory = (RSS = 1042.644531Mb, VMS = 1034.671875Mb), Step range = [58-62]), Calls = 4
Model :: Total atoms = 5272, Cost = (0, -1), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 4 :: Actions = 4                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 21:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 23:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 24:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 25:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 26:
    Current Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 27:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,6))
Step 28:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 29:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 30:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 31:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 37:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 38:
    Current Sub-goals:
        [Index = 21] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 21] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,6),puzzle_room_table_right)
Step 39:
    Current Sub-goals:
        [Index = 22] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 22] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,6))
Step 40:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_1,(block,5),(block,6))
Step 41:
    Current Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,5))
Step 42:
    Current Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 43:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 44:
    Current Sub-goals:
        [Index = 27] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 45:
    Current Sub-goals:
        [Index = 27] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 27] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 46:
    Current Sub-goals:
        [Index = 28] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 47:
    Current Sub-goals:
        [Index = 28] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 48:
    Current Sub-goals:
        [Index = 28] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 28] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 49:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 50:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 51:
    Current Sub-goals:
        [Index = 30] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
Step 52:
    Current Sub-goals:
        [Index = 30] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
        [Index = 30] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))
Step 53:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 54:
    Current Sub-goals:
        [Index = 32] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 55:
    Current Sub-goals:
        [Index = 32] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 32] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 56:
    Current Sub-goals:
        [Index = 33] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 57:
    Current Sub-goals:
        [Index = 33] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 58:
    Current Sub-goals:
        [Index = 33] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 33] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 59:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 60:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 61:
    Current Sub-goals:
        [Index = 35] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 35] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_end_1,(block,4),(block,5))
Step 62:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 36] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Monolevel problem 6 at level 1 solved.

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Online planning increment 6 finished.

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 2 : Total constraining sub-goal stages = 20 : Goals achieved = 20 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 6 : Total constraining sub-goal stages = 44 : Goals achieved = 36 : Goals unachieved = 8 : Complete = False

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 7 by method ground-first is [1-1].

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 7 at level 1:
Total Templated Partial Problems = 4, Problem Range = [5-8], Size = 14, Sub-goal Stage Range = [31-44]
Division points [total=3] : [(Index = 33, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 36, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 40, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [37-40]

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [37-40], problem number = 7, increment number = 7

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 37)
	('last_sgoals', 40)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x00000225876B9A00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [37-40] : Concurrency disabled : Minimum search length bound disabled with value 65

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 37
last_sgoals = 40
start_step = 62
is_initial = False
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 65

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[04-02-2022_01-49-29] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[04-02-2022_01-49-29] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 62 as problem start state.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'S': 62})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 62})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,4))', 'S': 62})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 62})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 62})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 62})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 62})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 62})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 62})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'S': 62})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 62})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,4)', 'S': 62})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 62})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 62})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 62})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 62})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,1)', 'S': 62})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 62})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 62})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 62})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 62})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 62})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 62})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 62})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 62})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 62})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 62})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 62})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 62})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 62})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 62})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 62})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 62})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 62})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 62})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 62})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 62})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 62})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 62})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 62})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 62})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 62})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 62})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 62})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 62})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 62})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 62})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 62})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 62})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 62})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 62})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 62})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 62})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 62})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 62})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 62})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 62})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 62})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 62})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 62})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 62})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 62})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'S': 62})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 62})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 62})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 62})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 62})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 62})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'S': 62})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 62})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 62})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 62})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 62})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 62})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 62})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 62})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 62})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 62})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 62})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 62})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 62})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 62})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'S': 62})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 62})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 62})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 62})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 62})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 62})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'S': 62})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 62})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 62})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 62})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 62})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 62})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 62})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 62})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 62})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 62})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 62})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 62})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 62})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 62})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 62})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'S': 62})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 62})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 62})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 62})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 62})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 62})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'S': 62})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 62})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 62})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 62})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 62})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 62})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 62})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 62})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 62})

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), true, 62).
holds(1, complete_tower(red,puzzle_room_table), false, 62).
holds(1, configuration(manipulator_end_1), aligned_with((block,4)), 62).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 62).
holds(1, configuration(manipulator_limb_1), extended, 62).
holds(1, configuration(manipulator_limb_2), extended, 62).
holds(1, configuration(puzzle_room_door), open, 62).
holds(1, configuration(starting_room_door), closed, 62).
holds(1, configuration(store_room_door), open, 62).
holds(1, grasping(manipulator_arm_1), (block,4), 62).
holds(1, grasping(manipulator_arm_2), nothing, 62).
holds(1, grasping(manipulator_end_1), (block,4), 62).
holds(1, grasping(manipulator_end_2), nothing, 62).
holds(1, in((block,1)), (puzzle_room,1), 62).
holds(1, in((block,2)), (puzzle_room,1), 62).
holds(1, in((block,3)), (puzzle_room,1), 62).
holds(1, in((block,4)), (puzzle_room,1), 62).
holds(1, in((block,5)), (puzzle_room,1), 62).
holds(1, in((block,6)), (puzzle_room,1), 62).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 62).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 62).
holds(1, in(manipulator_end_1), (puzzle_room,1), 62).
holds(1, in(manipulator_end_2), (puzzle_room,1), 62).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 62).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 62).
holds(1, in(puzzle_room_table), (puzzle_room,1), 62).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 62).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 62).
holds(1, in(talos), (puzzle_room,1), 62).
holds(1, in_tower((block,1),(block,1)), true, 62).
holds(1, in_tower((block,1),(block,2)), false, 62).
holds(1, in_tower((block,1),(block,3)), true, 62).
holds(1, in_tower((block,1),(block,4)), false, 62).
holds(1, in_tower((block,1),(block,5)), false, 62).
holds(1, in_tower((block,1),(block,6)), false, 62).
holds(1, in_tower((block,2),(block,1)), false, 62).
holds(1, in_tower((block,2),(block,2)), true, 62).
holds(1, in_tower((block,2),(block,3)), false, 62).
holds(1, in_tower((block,2),(block,4)), false, 62).
holds(1, in_tower((block,2),(block,5)), false, 62).
holds(1, in_tower((block,2),(block,6)), false, 62).
holds(1, in_tower((block,3),(block,1)), false, 62).
holds(1, in_tower((block,3),(block,2)), false, 62).
holds(1, in_tower((block,3),(block,3)), false, 62).
holds(1, in_tower((block,3),(block,4)), false, 62).
holds(1, in_tower((block,3),(block,5)), false, 62).
holds(1, in_tower((block,3),(block,6)), false, 62).
holds(1, in_tower((block,4),(block,1)), false, 62).
holds(1, in_tower((block,4),(block,2)), false, 62).
holds(1, in_tower((block,4),(block,3)), false, 62).
holds(1, in_tower((block,4),(block,4)), false, 62).
holds(1, in_tower((block,4),(block,5)), false, 62).
holds(1, in_tower((block,4),(block,6)), false, 62).
holds(1, in_tower((block,5),(block,1)), false, 62).
holds(1, in_tower((block,5),(block,2)), false, 62).
holds(1, in_tower((block,5),(block,3)), false, 62).
holds(1, in_tower((block,5),(block,4)), false, 62).
holds(1, in_tower((block,5),(block,5)), false, 62).
holds(1, in_tower((block,5),(block,6)), false, 62).
holds(1, in_tower((block,6),(block,1)), false, 62).
holds(1, in_tower((block,6),(block,2)), false, 62).
holds(1, in_tower((block,6),(block,3)), false, 62).
holds(1, in_tower((block,6),(block,4)), true, 62).
holds(1, in_tower((block,6),(block,5)), true, 62).
holds(1, in_tower((block,6),(block,6)), true, 62).
holds(1, on((block,1)), puzzle_room_table_left, 62).
holds(1, on((block,2)), puzzle_room_table_right, 62).
holds(1, on((block,3)), (block,1), 62).
holds(1, on((block,4)), (block,5), 62).
holds(1, on((block,5)), (block,6), 62).
holds(1, on((block,6)), puzzle_room_table_right, 62).
holds(1, tower_base((block,1),puzzle_room_table), true, 62).
holds(1, tower_base((block,2),puzzle_room_table), true, 62).
holds(1, tower_base((block,3),puzzle_room_table), false, 62).
holds(1, tower_base((block,4),puzzle_room_table), false, 62).
holds(1, tower_base((block,5),puzzle_room_table), false, 62).
holds(1, tower_base((block,6),puzzle_room_table), true, 62).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 62).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 62).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 62).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 62).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 62).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 62).
holds(2, complete_tower(blue,puzzle_room_table), true, 62).
holds(2, complete_tower(red,puzzle_room_table), false, 62).
holds(2, configuration(manipulator_arm_1), extended, 62).
holds(2, configuration(manipulator_arm_2), extended, 62).
holds(2, configuration(puzzle_room_door), open, 62).
holds(2, configuration(starting_room_door), closed, 62).
holds(2, configuration(store_room_door), open, 62).
holds(2, grasping(manipulator_arm_1), (block,4), 62).
holds(2, grasping(manipulator_arm_2), nothing, 62).
holds(2, in((block,1)), puzzle_room, 62).
holds(2, in((block,2)), puzzle_room, 62).
holds(2, in((block,3)), puzzle_room, 62).
holds(2, in((block,4)), puzzle_room, 62).
holds(2, in((block,5)), puzzle_room, 62).
holds(2, in((block,6)), puzzle_room, 62).
holds(2, in(manipulator_arm_1), puzzle_room, 62).
holds(2, in(manipulator_arm_2), puzzle_room, 62).
holds(2, in(puzzle_room_table), puzzle_room, 62).
holds(2, in(talos), puzzle_room, 62).
holds(2, in_tower((block,1),(block,1)), true, 62).
holds(2, in_tower((block,1),(block,2)), false, 62).
holds(2, in_tower((block,1),(block,3)), true, 62).
holds(2, in_tower((block,1),(block,4)), false, 62).
holds(2, in_tower((block,1),(block,5)), false, 62).
holds(2, in_tower((block,1),(block,6)), false, 62).
holds(2, in_tower((block,2),(block,1)), false, 62).
holds(2, in_tower((block,2),(block,2)), true, 62).
holds(2, in_tower((block,2),(block,3)), false, 62).
holds(2, in_tower((block,2),(block,4)), false, 62).
holds(2, in_tower((block,2),(block,5)), false, 62).
holds(2, in_tower((block,2),(block,6)), false, 62).
holds(2, in_tower((block,3),(block,1)), false, 62).
holds(2, in_tower((block,3),(block,2)), false, 62).
holds(2, in_tower((block,3),(block,3)), false, 62).
holds(2, in_tower((block,3),(block,4)), false, 62).
holds(2, in_tower((block,3),(block,5)), false, 62).
holds(2, in_tower((block,3),(block,6)), false, 62).
holds(2, in_tower((block,4),(block,1)), false, 62).
holds(2, in_tower((block,4),(block,2)), false, 62).
holds(2, in_tower((block,4),(block,3)), false, 62).
holds(2, in_tower((block,4),(block,4)), false, 62).
holds(2, in_tower((block,4),(block,5)), false, 62).
holds(2, in_tower((block,4),(block,6)), false, 62).
holds(2, in_tower((block,5),(block,1)), false, 62).
holds(2, in_tower((block,5),(block,2)), false, 62).
holds(2, in_tower((block,5),(block,3)), false, 62).
holds(2, in_tower((block,5),(block,4)), false, 62).
holds(2, in_tower((block,5),(block,5)), false, 62).
holds(2, in_tower((block,5),(block,6)), false, 62).
holds(2, in_tower((block,6),(block,1)), false, 62).
holds(2, in_tower((block,6),(block,2)), false, 62).
holds(2, in_tower((block,6),(block,3)), false, 62).
holds(2, in_tower((block,6),(block,4)), true, 62).
holds(2, in_tower((block,6),(block,5)), true, 62).
holds(2, in_tower((block,6),(block,6)), true, 62).
holds(2, on((block,1)), puzzle_room_table, 62).
holds(2, on((block,2)), puzzle_room_table, 62).
holds(2, on((block,3)), (block,1), 62).
holds(2, on((block,4)), (block,5), 62).
holds(2, on((block,5)), (block,6), 62).
holds(2, on((block,6)), puzzle_room_table, 62).
holds(2, tower_base((block,1),puzzle_room_table), true, 62).
holds(2, tower_base((block,2),puzzle_room_table), true, 62).
holds(2, tower_base((block,3),puzzle_room_table), false, 62).
holds(2, tower_base((block,4),puzzle_room_table), false, 62).
holds(2, tower_base((block,5),puzzle_room_table), false, 62).
holds(2, tower_base((block,6),puzzle_room_table), true, 62).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 62).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 62).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 62).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 62).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 62).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 62).

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,3))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,3)', 'I': 37})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 38})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,3))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 39})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,2)', 'I': 40})

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 4 rules into program part base:

sub_goal(2, talos, grasp(manipulator_arm_2,(block,3)), grasping(manipulator_arm_2), (block,3), 37).
sub_goal(2, talos, put(manipulator_arm_2,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 38).
sub_goal(2, talos, release(manipulator_arm_2,(block,3)), grasping(manipulator_arm_2), nothing, 39).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), (block,2), 40).

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x00000225C1F4ECA0>]
	incrementor = SolveIncrementor(step_start=62, step_increase=1, step_increase_initial=2, step_end_min=66, step_end_max=200, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 62), range_=None), IncPart(name='plan_module', args=('#inc', 62, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 62, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 62, 37, 40, 'sequential', 'true'), range_=None)]

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 812 rules

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0044860000000426226s

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.029539s.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004867s with result Satisfiable.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x00000225C27FB9F0>

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 62)
	('last_sgoals', 40)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x00000225876B9A00>)
	('first_sgoals', 37)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x00000225C27FB9F0>)

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(37, 63)', truth=True, inc_range=None)

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 62). %* None *%
#program plan_module(#inc, 62, false, false). %* None *%
#program optimisation_module(#inc, 62, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 62, 37, 40, sequential, true). %* None *%

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     61 : Current =     63
Incrementor step ends | Minimum  =     66 : Maximum =    200

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(63)]), ('state_module', [Number(62), Number(62)]), ('plan_module', [Number(62), Number(62), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(62), Number(62), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(62)]), ('action_preconditions', [Number(62)]), ('variable_relations', [Number(62)]), ('abstraction_mappings', [Number(62)]), ('conformance_module', [Number(62), Number(62), Number(37), Number(40), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(63), Number(62)]), ('plan_module', [Number(63), Number(62), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(63), Number(62), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(63)]), ('action_preconditions', [Number(63)]), ('variable_relations', [Number(63)]), ('abstraction_mappings', [Number(63)]), ('conformance_module', [Number(63), Number(62), Number(37), Number(40), Function('sequential', [], True), Function('true', [], True)])]

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.120330s.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 62: original = External(symbol='current_last_sgoals(37, 63)', truth=True, inc_range=None), conversion = current_last_sgoals(37,63).

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 63: original = External(symbol='current_last_sgoals(37, 63)', truth=True, inc_range=None), conversion = current_last_sgoals(37,63).

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009862s with result Unsatisfiable.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.13019150000013724, Incremental time limit = None
Running cumulative time = 0.13019150000013724, Cumulative time limit = 1800
Used memory = (RSS = 1042.644531Mb, VMS = 1034.671875Mb), Total system virtual memory = 16324.0078125Mb

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=61, end_step=63, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.1203298000000359, solving_time=0.009861700000101337, total_time=0.13019150000013724, memory=Memory(rss=1042.64453125, vms=1034.671875), step_range=range(62, 64), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1203298000000359, solving_time=0.009861700000101337, total_time=0.13019150000013724, memory=Memory(rss=1042.64453125, vms=1034.671875), step_range=range(62, 64), clingo_stats={'problem': {'lp': {'atoms': 12172.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 27521.0, 'bodies_tr': 27521.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 262.0, 'count_bodies_tr': 262.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 490.0, 'rules': 56026.0, 'rules_normal': 55481.0, 'rules_choice': 543.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 56026.0, 'rules_tr_normal': 55481.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 25875.0, 'eqs_atom': 7070.0, 'eqs_body': 1973.0, 'eqs_other': 16832.0}, 'lpStep': {'atoms': 5653.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24902.0, 'bodies_tr': 24902.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 262.0, 'count_bodies_tr': 262.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 490.0, 'rules': 48597.0, 'rules_normal': 48052.0, 'rules_choice': 543.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 48597.0, 'rules_tr_normal': 48052.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 12819.0, 'eqs_atom': 2160.0, 'eqs_body': 448.0, 'eqs_other': 10211.0}, 'generator': {'vars': 2142.0, 'vars_eliminated': 0.0, 'vars_frozen': 1442.0, 'constraints': 20.0, 'constraints_binary': 1169.0, 'constraints_ternary': 158.0, 'acyc_edges': 0.0, 'complexity': 1363.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 78.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, -1.0], 'concurrency': 6.0, 'winner': 5.0, 'times': {'total': 0.13002777099609375, 'cpu': 0.125, 'solve': 0.00099945068359375, 'unsat': 0.00099945068359375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.169036865234375, 'cpu': 0.171875, 'solve': 0.0039997100830078125, 'unsat': 0.00099945068359375, 'sat': 0.0010013580322265625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 84.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     63 : Current =     64
Incrementor step ends | Minimum  =     66 : Maximum =    200

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(64)]), ('state_module', [Number(64), Number(62)]), ('plan_module', [Number(64), Number(62), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(64), Number(62), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(64)]), ('action_preconditions', [Number(64)]), ('variable_relations', [Number(64)]), ('abstraction_mappings', [Number(64)]), ('conformance_module', [Number(64), Number(62), Number(37), Number(40), Function('sequential', [], True), Function('true', [], True)])]

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.082559s.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009097s with result Satisfiable.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.09165550000011535, Incremental time limit = None
Running cumulative time = 0.2218470000002526, Cumulative time limit = 1800
Used memory = (RSS = 1042.644531Mb, VMS = 1034.671875Mb), Total system virtual memory = 16324.0078125Mb

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.202888s, Solving = 0.018959s, Total = 0.221847s, Memory = (RSS = 1042.644531Mb, VMS = 1034.671875Mb), Step range = [62-64]), Calls = 2
Final Model :: Total atoms = 4525, Cost = (0, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=63, end_step=64, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.20288849999997183, solving_time=0.018958500000280765, total_time=0.2218470000002526, memory=Memory(rss=1042.64453125, vms=1034.671875), step_range=range(62, 65), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.08255869999993593, solving_time=0.009096800000179428, total_time=0.09165550000011535, memory=Memory(rss=1042.64453125, vms=1034.671875), step_range=range(64, 65), clingo_stats={'problem': {'lp': {'atoms': 13919.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 49172.0, 'bodies_tr': 49172.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 464.0, 'count_bodies_tr': 464.0, 'sccs': 36.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 527.0, 'rules': 97166.0, 'rules_normal': 96424.0, 'rules_choice': 738.0, 'rules_minimize': 4.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 97166.0, 'rules_tr_normal': 96424.0, 'rules_tr_choice': 738.0, 'rules_tr_minimize': 4.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 29606.0, 'eqs_atom': 7645.0, 'eqs_body': 2424.0, 'eqs_other': 19537.0}, 'lpStep': {'atoms': 1747.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21651.0, 'bodies_tr': 21651.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 2.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 37.0, 'rules': 41140.0, 'rules_normal': 40943.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 41140.0, 'rules_tr_normal': 40943.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3731.0, 'eqs_atom': 575.0, 'eqs_body': 451.0, 'eqs_other': 2705.0}, 'generator': {'vars': 2424.0, 'vars_eliminated': 0.0, 'vars_frozen': 1646.0, 'constraints': 59.0, 'constraints_binary': 3023.0, 'constraints_ternary': 298.0, 'acyc_edges': 0.0, 'complexity': 3412.0}}, 'solving': {'solvers': {'choices': 108.0, 'conflicts': 1.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 38.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 114.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [0.0, 0.0], 'lower': [0.0, 0.0], 'concurrency': 6.0, 'winner': 0.0, 'times': {'total': 0.09202003479003906, 'cpu': 0.09375, 'solve': 0.005001068115234375, 'unsat': 0.0039997100830078125, 'sat': 0.0010013580322265625}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.26105690002441406, 'cpu': 0.265625, 'solve': 0.009000778198242188, 'unsat': 0.0049991607666015625, 'sat': 0.002002716064453125}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 108.0, 'conflicts': 1.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 39.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 198.0, 'guiding_paths': 18.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{37: 64}

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 38 achieved :: Progression >> total requested sgoals = 4, current total achieved sgoals = 2 ( 50.00% solved)

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(38, 64)', truth=True, inc_range=None)

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 38, step = 64]:
sub_goal(2, talos, put(manipulator_arm_2,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 38)

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Reaction at search length 64:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     64 : Current =     65
Incrementor step ends | Minimum  =     66 : Maximum =    200

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(65)]), ('state_module', [Number(65), Number(62)]), ('plan_module', [Number(65), Number(62), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(65), Number(62), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(65)]), ('action_preconditions', [Number(65)]), ('variable_relations', [Number(65)]), ('abstraction_mappings', [Number(65)]), ('conformance_module', [Number(65), Number(62), Number(37), Number(40), Function('sequential', [], True), Function('true', [], True)])]

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.084904s.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 65: original = External(symbol='current_last_sgoals(38, 64)', truth=True, inc_range=None), conversion = current_last_sgoals(38,64).

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.015333s with result Satisfiable.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.10023749999982101, Incremental time limit = None
Running cumulative time = 0.3220845000000736, Cumulative time limit = 1800
Used memory = (RSS = 1042.644531Mb, VMS = 1034.671875Mb), Total system virtual memory = 16324.0078125Mb

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.287793s, Solving = 0.034292s, Total = 0.322085s, Memory = (RSS = 1042.644531Mb, VMS = 1034.671875Mb), Step range = [62-65]), Calls = 3
Final Model :: Total atoms = 4897, Cost = (0, -1), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=64, end_step=65, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.2877928999998858, solving_time=0.03429160000018783, total_time=0.3220845000000736, memory=Memory(rss=1042.64453125, vms=1034.671875), step_range=range(62, 66), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.08490439999991395, solving_time=0.015333099999907063, total_time=0.10023749999982101, memory=Memory(rss=1042.64453125, vms=1034.671875), step_range=range(65, 66), clingo_stats={'problem': {'lp': {'atoms': 15811.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 71129.0, 'bodies_tr': 71129.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 666.0, 'count_bodies_tr': 666.0, 'sccs': 61.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 867.0, 'rules': 138721.0, 'rules_normal': 137782.0, 'rules_choice': 933.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 138721.0, 'rules_tr_normal': 137782.0, 'rules_tr_choice': 933.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 33900.0, 'eqs_atom': 8240.0, 'eqs_body': 2714.0, 'eqs_other': 22946.0}, 'lpStep': {'atoms': 1892.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21957.0, 'bodies_tr': 21957.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 340.0, 'rules': 41555.0, 'rules_normal': 41358.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 41555.0, 'rules_tr_normal': 41358.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4294.0, 'eqs_atom': 595.0, 'eqs_body': 290.0, 'eqs_other': 3409.0}, 'generator': {'vars': 3626.0, 'vars_eliminated': 0.0, 'vars_frozen': 2394.0, 'constraints': 373.0, 'constraints_binary': 10357.0, 'constraints_ternary': 1361.0, 'acyc_edges': 0.0, 'complexity': 12193.0}}, 'solving': {'solvers': {'choices': 236.0, 'conflicts': 4.0, 'conflicts_analyzed': 2.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 1.0, 'models': 2.0, 'models_level': 113.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 16.0, 'integrated': 36.0, 'lemmas': 16.0, 'lits_learnt': 93.0, 'lemmas_binary': 7.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 1.0, 'integrated_jumps': 1.0, 'guiding_paths_lits': 150.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 2.0, 'lemmas_loop': 13.0, 'lemmas_other': 1.0, 'lits_conflict': 17.0, 'lits_loop': 68.0, 'lits_other': 8.0, 'jumps': {'jumps': 2.0, 'jumps_bounded': 0.0, 'levels': 14.0, 'levels_bounded': 0.0, 'max': 7.0, 'max_executed': 7.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 3.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [0.0, -1.0], 'lower': [0.0, -1.0], 'concurrency': 6.0, 'winner': 1.0, 'times': {'total': 0.10102272033691406, 'cpu': 0.09375, 'solve': 0.009002685546875, 'unsat': 0.004001617431640625, 'sat': 0.00099945068359375}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.3620796203613281, 'cpu': 0.359375, 'solve': 0.018003463745117188, 'unsat': 0.009000778198242188, 'sat': 0.003002166748046875}, 'models': {'enumerated': 4.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 344.0, 'conflicts': 5.0, 'conflicts_analyzed': 2.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 1.0, 'models': 4.0, 'models_level': 152.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 16.0, 'integrated': 36.0, 'lemmas': 16.0, 'lits_learnt': 93.0, 'lemmas_binary': 7.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 1.0, 'integrated_jumps': 1.0, 'guiding_paths_lits': 348.0, 'guiding_paths': 25.0, 'splits': 0.0, 'lemmas_conflict': 2.0, 'lemmas_loop': 13.0, 'lemmas_other': 1.0, 'lits_conflict': 17.0, 'lits_loop': 68.0, 'lits_other': 8.0, 'jumps': {'jumps': 2.0, 'jumps_bounded': 0.0, 'levels': 14.0, 'levels_bounded': 0.0, 'max': 7.0, 'max_executed': 7.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{37: 64, 38: 65}

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 39 achieved :: Progression >> total requested sgoals = 4, current total achieved sgoals = 3 ( 75.00% solved)

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(39, 65)', truth=True, inc_range=None)

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 39, step = 65]:
sub_goal(2, talos, release(manipulator_arm_2,(block,3)), grasping(manipulator_arm_2), nothing, 39)

[04-02-2022_01-49-29] DEBUG :: ASH Planner Main #1 >> Reaction at search length 65:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     65 : Current =     66
Incrementor step ends | Minimum  =     66 : Maximum =    200

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(66)]), ('state_module', [Number(66), Number(62)]), ('plan_module', [Number(66), Number(62), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(66), Number(62), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(66)]), ('action_preconditions', [Number(66)]), ('variable_relations', [Number(66)]), ('abstraction_mappings', [Number(66)]), ('conformance_module', [Number(66), Number(62), Number(37), Number(40), Function('sequential', [], True), Function('true', [], True)])]

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.094331s.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 66: original = External(symbol='current_last_sgoals(39, 65)', truth=True, inc_range=None), conversion = current_last_sgoals(39,65).

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.020454s with result Satisfiable.

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.11478549999992538, Incremental time limit = None
Running cumulative time = 0.436869999999999, Cumulative time limit = 1800
Used memory = (RSS = 1042.644531Mb, VMS = 1034.671875Mb), Total system virtual memory = 16324.0078125Mb

[04-02-2022_01-49-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 6
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.382124s, Solving = 0.054746s, Total = 0.436870s, Memory = (RSS = 1042.644531Mb, VMS = 1034.671875Mb), Step range = [62-66]), Calls = 4
Final Model :: Total atoms = 5270, Cost = (0, -1), Optimality proven = False, Number = 2, Thread ID = 4, Model type = ModelType.StableModel

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=65, end_step=66, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.3821243999998387, solving_time=0.054745600000160266, total_time=0.436869999999999, memory=Memory(rss=1042.64453125, vms=1034.671875), step_range=range(62, 67), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09433149999995294, solving_time=0.02045399999997244, total_time=0.11478549999992538, memory=Memory(rss=1042.64453125, vms=1034.671875), step_range=range(66, 67), clingo_stats={'problem': {'lp': {'atoms': 18905.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 94524.0, 'bodies_tr': 94524.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 868.0, 'count_bodies_tr': 868.0, 'sccs': 86.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1271.0, 'rules': 182727.0, 'rules_normal': 181591.0, 'rules_choice': 1128.0, 'rules_minimize': 8.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 182727.0, 'rules_tr_normal': 181591.0, 'rules_tr_choice': 1128.0, 'rules_tr_minimize': 8.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 44066.0, 'eqs_atom': 9923.0, 'eqs_body': 3027.0, 'eqs_other': 31116.0}, 'lpStep': {'atoms': 3094.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 23395.0, 'bodies_tr': 23395.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 404.0, 'rules': 44006.0, 'rules_normal': 43809.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 44006.0, 'rules_tr_normal': 43809.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 10166.0, 'eqs_atom': 1683.0, 'eqs_body': 313.0, 'eqs_other': 8170.0}, 'generator': {'vars': 5236.0, 'vars_eliminated': 0.0, 'vars_frozen': 3335.0, 'constraints': 756.0, 'constraints_binary': 25385.0, 'constraints_ternary': 3225.0, 'acyc_edges': 0.0, 'complexity': 29538.0}}, 'solving': {'solvers': {'choices': 363.0, 'conflicts': 6.0, 'conflicts_analyzed': 3.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 1.0, 'models': 2.0, 'models_level': 146.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 3.0, 'distributed_sum_lbd': 7.0, 'integrated': 12.0, 'lemmas': 88.0, 'lits_learnt': 902.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 7.0, 'integrated_jumps': 54.0, 'guiding_paths_lits': 186.0, 'guiding_paths': 9.0, 'splits': 0.0, 'lemmas_conflict': 3.0, 'lemmas_loop': 73.0, 'lemmas_other': 12.0, 'lits_conflict': 55.0, 'lits_loop': 641.0, 'lits_other': 206.0, 'jumps': {'jumps': 3.0, 'jumps_bounded': 1.0, 'levels': 25.0, 'levels_bounded': 1.0, 'max': 20.0, 'max_executed': 20.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 4.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [0.0, -1.0], 'lower': [0.0, -1.0], 'concurrency': 6.0, 'winner': 4.0, 'times': {'total': 0.11602401733398438, 'cpu': 0.109375, 'solve': 0.01000213623046875, 'unsat': 0.004001617431640625, 'sat': 0.0019989013671875}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.4781036376953125, 'cpu': 0.46875, 'solve': 0.028005599975585938, 'unsat': 0.013002395629882812, 'sat': 0.005001068115234375}, 'models': {'enumerated': 6.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 707.0, 'conflicts': 11.0, 'conflicts_analyzed': 5.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 2.0, 'models': 6.0, 'models_level': 298.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 11.0, 'distributed_sum_lbd': 23.0, 'integrated': 48.0, 'lemmas': 104.0, 'lits_learnt': 995.0, 'lemmas_binary': 7.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 8.0, 'integrated_jumps': 55.0, 'guiding_paths_lits': 534.0, 'guiding_paths': 34.0, 'splits': 0.0, 'lemmas_conflict': 5.0, 'lemmas_loop': 86.0, 'lemmas_other': 13.0, 'lits_conflict': 72.0, 'lits_loop': 709.0, 'lits_other': 214.0, 'jumps': {'jumps': 5.0, 'jumps_bounded': 1.0, 'levels': 39.0, 'levels_bounded': 1.0, 'max': 20.0, 'max_executed': 20.0, 'max_bounded': 1.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{37: 64, 38: 65, 39: 66}

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 40 achieved :: Progression >> total requested sgoals = 4, current total achieved sgoals = 4 (100.00% solved)

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(40, 66)', truth=True, inc_range=None)

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 40, step = 66]:
sub_goal(2, talos, grasp(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), (block,2), 40)

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Reaction at search length 66:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     66 : Current =     67
Incrementor step ends | Minimum  =     66 : Maximum =    200

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(67)]), ('state_module', [Number(67), Number(62)]), ('plan_module', [Number(67), Number(62), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(67), Number(62), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(67)]), ('action_preconditions', [Number(67)]), ('variable_relations', [Number(67)]), ('abstraction_mappings', [Number(67)]), ('conformance_module', [Number(67), Number(62), Number(37), Number(40), Function('sequential', [], True), Function('true', [], True)])]

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.096969s.

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 67: original = External(symbol='current_last_sgoals(40, 66)', truth=True, inc_range=None), conversion = current_last_sgoals(40,66).

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013319s with result Unsatisfiable.

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.11028849999979684, Incremental time limit = None
Running cumulative time = 0.5471584999997958, Cumulative time limit = 1800
Used memory = (RSS = 1042.648438Mb, VMS = 1034.671875Mb), Total system virtual memory = 16324.0078125Mb

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=66, end_step=67, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.4790933999997833, solving_time=0.06806510000001254, total_time=0.5471584999997958, memory=Memory(rss=1042.6484375, vms=1034.671875), step_range=range(62, 68), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09696899999994457, solving_time=0.013319499999852269, total_time=0.11028849999979684, memory=Memory(rss=1042.6484375, vms=1034.671875), step_range=range(67, 68), clingo_stats={'problem': {'lp': {'atoms': 22062.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 118576.0, 'bodies_tr': 118576.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1070.0, 'count_bodies_tr': 1070.0, 'sccs': 111.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1865.0, 'rules': 227397.0, 'rules_normal': 226064.0, 'rules_choice': 1323.0, 'rules_minimize': 10.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 227397.0, 'rules_tr_normal': 226064.0, 'rules_tr_choice': 1323.0, 'rules_tr_minimize': 10.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 50678.0, 'eqs_atom': 11492.0, 'eqs_body': 3102.0, 'eqs_other': 36084.0}, 'lpStep': {'atoms': 3157.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24052.0, 'bodies_tr': 24052.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 44670.0, 'rules_normal': 44473.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 44670.0, 'rules_tr_normal': 44473.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 6612.0, 'eqs_atom': 1569.0, 'eqs_body': 75.0, 'eqs_other': 4968.0}, 'generator': {'vars': 7538.0, 'vars_eliminated': 0.0, 'vars_frozen': 4680.0, 'constraints': 1354.0, 'constraints_binary': 50468.0, 'constraints_ternary': 6180.0, 'acyc_edges': 0.0, 'complexity': 58260.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 7.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 222.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 5.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, -27.0], 'concurrency': 6.0, 'winner': 5.0, 'times': {'total': 0.11102294921875, 'cpu': 0.109375, 'solve': 0.0020008087158203125, 'unsat': 0.0020008087158203125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.5891265869140625, 'cpu': 0.578125, 'solve': 0.03000640869140625, 'unsat': 0.015003204345703125, 'sat': 0.005001068115234375}, 'models': {'enumerated': 6.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 707.0, 'conflicts': 18.0, 'conflicts_analyzed': 5.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 2.0, 'models': 6.0, 'models_level': 298.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 11.0, 'distributed_sum_lbd': 23.0, 'integrated': 48.0, 'lemmas': 104.0, 'lits_learnt': 995.0, 'lemmas_binary': 7.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 8.0, 'integrated_jumps': 55.0, 'guiding_paths_lits': 756.0, 'guiding_paths': 40.0, 'splits': 0.0, 'lemmas_conflict': 5.0, 'lemmas_loop': 86.0, 'lemmas_other': 13.0, 'lits_conflict': 72.0, 'lits_loop': 709.0, 'lits_other': 214.0, 'jumps': {'jumps': 5.0, 'jumps_bounded': 1.0, 'levels': 39.0, 'levels_bounded': 1.0, 'max': 20.0, 'max_executed': 20.0, 'max_bounded': 1.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Reaction at search length 67:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     67 : Current =     68
Incrementor step ends | Minimum  =     66 : Maximum =    200

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(68)]), ('state_module', [Number(68), Number(62)]), ('plan_module', [Number(68), Number(62), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(68), Number(62), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(68)]), ('action_preconditions', [Number(68)]), ('variable_relations', [Number(68)]), ('abstraction_mappings', [Number(68)]), ('conformance_module', [Number(68), Number(62), Number(37), Number(40), Function('sequential', [], True), Function('true', [], True)])]

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.100820s.

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.020068s with result Satisfiable.

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.12088779999999133, Incremental time limit = None
Running cumulative time = 0.6680462999997872, Cumulative time limit = 1800
Used memory = (RSS = 1043.710938Mb, VMS = 1035.734375Mb), Total system virtual memory = 16324.0078125Mb

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.579913s, Solving = 0.088133s, Total = 0.668046s, Memory = (RSS = 1043.710938Mb, VMS = 1035.734375Mb), Step range = [62-68]), Calls = 6
Final Model :: Total atoms = 6017, Cost = (0, -1), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=6, start_step=67, end_step=68, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.5799134999997477, solving_time=0.08813280000003942, total_time=0.6680462999997872, memory=Memory(rss=1043.7109375, vms=1035.734375), step_range=range(62, 69), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10082009999996444, solving_time=0.02006770000002689, total_time=0.12088779999999133, memory=Memory(rss=1043.7109375, vms=1035.734375), step_range=range(68, 69), clingo_stats={'problem': {'lp': {'atoms': 25463.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 143088.0, 'bodies_tr': 143088.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1272.0, 'count_bodies_tr': 1272.0, 'sccs': 136.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2459.0, 'rules': 272707.0, 'rules_normal': 271177.0, 'rules_choice': 1518.0, 'rules_minimize': 12.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 272707.0, 'rules_tr_normal': 271177.0, 'rules_tr_choice': 1518.0, 'rules_tr_minimize': 12.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 57918.0, 'eqs_atom': 13269.0, 'eqs_body': 3171.0, 'eqs_other': 41478.0}, 'lpStep': {'atoms': 3401.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24512.0, 'bodies_tr': 24512.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 45310.0, 'rules_normal': 45113.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 45310.0, 'rules_tr_normal': 45113.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7240.0, 'eqs_atom': 1777.0, 'eqs_body': 69.0, 'eqs_other': 5394.0}, 'generator': {'vars': 9910.0, 'vars_eliminated': 0.0, 'vars_frozen': 6037.0, 'constraints': 1974.0, 'constraints_binary': 75656.0, 'constraints_ternary': 9623.0, 'acyc_edges': 0.0, 'complexity': 87597.0}}, 'solving': {'solvers': {'choices': 198.0, 'conflicts': 21.0, 'conflicts_analyzed': 14.0, 'restarts': 0.0, 'restarts_last': 6.0, 'extra': {'domain_choices': 2.0, 'models': 1.0, 'models_level': 87.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 13.0, 'distributed_sum_lbd': 28.0, 'integrated': 32.0, 'lemmas': 146.0, 'lits_learnt': 1382.0, 'lemmas_binary': 19.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.078125, 'integrated_imps': 21.0, 'integrated_jumps': 51.0, 'guiding_paths_lits': 258.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 14.0, 'lemmas_loop': 105.0, 'lemmas_other': 27.0, 'lits_conflict': 252.0, 'lits_loop': 958.0, 'lits_other': 172.0, 'jumps': {'jumps': 14.0, 'jumps_bounded': 5.0, 'levels': 28.0, 'levels_bounded': 10.0, 'max': 4.0, 'max_executed': 4.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 6.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [0.0, -1.0], 'lower': [0.0, -1.0], 'concurrency': 6.0, 'winner': 2.0, 'times': {'total': 0.12202835083007812, 'cpu': 0.1875, 'solve': 0.00800323486328125, 'unsat': 0.0060024261474609375, 'sat': 0.0020008087158203125}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.7111549377441406, 'cpu': 0.765625, 'solve': 0.0380096435546875, 'unsat': 0.021005630493164062, 'sat': 0.0070018768310546875}, 'models': {'enumerated': 7.0, 'optimal': 4.0}, 'solving': {'solvers': {'choices': 905.0, 'conflicts': 39.0, 'conflicts_analyzed': 19.0, 'restarts': 0.0, 'restarts_last': 6.0, 'extra': {'domain_choices': 4.0, 'models': 7.0, 'models_level': 385.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 24.0, 'distributed_sum_lbd': 51.0, 'integrated': 80.0, 'lemmas': 250.0, 'lits_learnt': 2377.0, 'lemmas_binary': 26.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.09375, 'integrated_imps': 29.0, 'integrated_jumps': 106.0, 'guiding_paths_lits': 1014.0, 'guiding_paths': 51.0, 'splits': 0.0, 'lemmas_conflict': 19.0, 'lemmas_loop': 191.0, 'lemmas_other': 40.0, 'lits_conflict': 324.0, 'lits_loop': 1667.0, 'lits_other': 386.0, 'jumps': {'jumps': 19.0, 'jumps_bounded': 6.0, 'levels': 67.0, 'levels_bounded': 11.0, 'max': 20.0, 'max_executed': 20.0, 'max_bounded': 2.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{37: 64, 38: 65, 39: 66, 40: 68}

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 41 achieved :: Progression >> total requested sgoals = 4, current total achieved sgoals = 5 (125.00% solved)

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 40 was achieved successfully.

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.120330s, Solving = 0.009862s, Total = 0.130192s, Memory = (RSS = 1042.644531Mb, VMS = 1034.671875Mb), Step range = [62-63]
2 : Statistics :: Grounding = 0.082559s, Solving = 0.009097s, Total = 0.091656s, Memory = (RSS = 1042.644531Mb, VMS = 1034.671875Mb), Step range = [64-64]
3 : Statistics :: Grounding = 0.084904s, Solving = 0.015333s, Total = 0.100237s, Memory = (RSS = 1042.644531Mb, VMS = 1034.671875Mb), Step range = [65-65]
4 : Statistics :: Grounding = 0.094331s, Solving = 0.020454s, Total = 0.114785s, Memory = (RSS = 1042.644531Mb, VMS = 1034.671875Mb), Step range = [66-66]
5 : Statistics :: Grounding = 0.096969s, Solving = 0.013319s, Total = 0.110288s, Memory = (RSS = 1042.648438Mb, VMS = 1034.671875Mb), Step range = [67-67]
6 : Statistics :: Grounding = 0.100820s, Solving = 0.020068s, Total = 0.120888s, Memory = (RSS = 1043.710938Mb, VMS = 1035.734375Mb), Step range = [68-68]

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.668046s due to: External generator exit.

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 11, 24: 11, 25: 12, 26: 13, 27: 14, 28: 15, 29: 16, 30: 17, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 23, 41: 24, 42: 25, 43: 26, 44: 27, 45: 27, 46: 28, 47: 28, 48: 28, 49: 29, 50: 29, 51: 30, 52: 30, 53: 31, 54: 32, 55: 32, 56: 33, 57: 33, 58: 33, 59: 34, 60: 34, 61: 35, 62: 36}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 24, 12: 25, 13: 26, 14: 27, 15: 28, 16: 29, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 39, 23: 40, 24: 41, 25: 42, 26: 43, 27: 45, 28: 48, 29: 50, 30: 52, 31: 53, 32: 55, 33: 58, 34: 60, 35: 61, 36: 62}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 5, 22: 6, 23: 7, 24: 8, 25: 9, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10, 31: 11, 32: 11, 33: 11, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 13, 3: 14, 4: 18, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 33, 12: 35, 13: 37, 14: 38, 15: 39, 16: 40, 17: 41, 18: 42, 19: 43, 20: 44}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 11, 24: 11, 25: 12, 26: 13, 27: 14, 28: 15, 29: 16, 30: 17, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 23, 41: 24, 42: 25, 43: 26, 44: 27, 45: 27, 46: 28, 47: 28, 48: 28, 49: 29, 50: 29, 51: 30, 52: 30, 53: 31, 54: 32, 55: 32, 56: 33, 57: 33, 58: 33, 59: 34, 60: 34, 61: 35, 62: 36, 63: 37, 64: 37, 65: 38, 66: 39, 67: 40, 68: 40}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 24, 12: 25, 13: 26, 14: 27, 15: 28, 16: 29, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 39, 23: 40, 24: 41, 25: 42, 26: 43, 27: 45, 28: 48, 29: 50, 30: 52, 31: 53, 32: 55, 33: 58, 34: 60, 35: 61, 36: 62, 37: 64, 38: 65, 39: 66, 40: 68}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 5, 22: 6, 23: 7, 24: 8, 25: 9, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10, 31: 11, 32: 11, 33: 11, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 13, 3: 14, 4: 18, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 33, 12: 35, 13: 37, 14: 38, 15: 39, 16: 40, 17: 41, 18: 42, 19: 43, 20: 44}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 40, Last requested goal index = 40, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.579913s, Solving = 0.088133s, Total = 0.668046s, Memory = (RSS = 1043.710938Mb, VMS = 1035.734375Mb), Step range = [62-68]), Calls = 6
Model :: Total atoms = 6017, Cost = (0, -1), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 6 :: Actions = 6                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 21:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 23:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 24:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 25:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 26:
    Current Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 27:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,6))
Step 28:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 29:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 30:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 31:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 37:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 38:
    Current Sub-goals:
        [Index = 21] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 21] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,6),puzzle_room_table_right)
Step 39:
    Current Sub-goals:
        [Index = 22] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 22] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,6))
Step 40:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_1,(block,5),(block,6))
Step 41:
    Current Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,5))
Step 42:
    Current Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 43:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 44:
    Current Sub-goals:
        [Index = 27] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 45:
    Current Sub-goals:
        [Index = 27] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 27] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 46:
    Current Sub-goals:
        [Index = 28] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 47:
    Current Sub-goals:
        [Index = 28] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 48:
    Current Sub-goals:
        [Index = 28] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 28] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 49:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 50:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 51:
    Current Sub-goals:
        [Index = 30] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
Step 52:
    Current Sub-goals:
        [Index = 30] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
        [Index = 30] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))
Step 53:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 54:
    Current Sub-goals:
        [Index = 32] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 55:
    Current Sub-goals:
        [Index = 32] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 32] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 56:
    Current Sub-goals:
        [Index = 33] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 57:
    Current Sub-goals:
        [Index = 33] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 58:
    Current Sub-goals:
        [Index = 33] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 33] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 59:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 60:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 61:
    Current Sub-goals:
        [Index = 35] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 35] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_end_1,(block,4),(block,5))
Step 62:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 36] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 63:
    Current Sub-goals:
        [Index = 37] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,3)))
Step 64:
    Current Sub-goals:
        [Index = 37] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
        [Index = 37] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,3))
Step 65:
    Current Sub-goals:
        [Index = 38] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 38] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,3),puzzle_room_table_left)
Step 66:
    Current Sub-goals:
        [Index = 39] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 39] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,3))
Step 67:
    Current Sub-goals:
        [Index = 40] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,2)))
Step 68:
    Current Sub-goals:
        [Index = 40] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
        [Index = 40] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,2))

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Monolevel problem 7 at level 1 solved.

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Online planning increment 7 finished.

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 2 : Total constraining sub-goal stages = 20 : Goals achieved = 20 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 7 : Total constraining sub-goal stages = 44 : Goals achieved = 40 : Goals unachieved = 4 : Complete = False

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 8 by method ground-first is [1-1].

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 8 at level 1:
Total Templated Partial Problems = 4, Problem Range = [5-8], Size = 14, Sub-goal Stage Range = [31-44]
Division points [total=3] : [(Index = 33, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 36, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 40, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [41-44]

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [41-44], problem number = 8, increment number = 8

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 41)
	('last_sgoals', 44)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x00000225876B9A00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 200)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [41-44] : Concurrency disabled : Minimum search length bound disabled with value 71

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 41
last_sgoals = 44
start_step = 68
is_initial = False
is_final = True
complete_planning = False
sequential_yield = True
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 71

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[04-02-2022_01-49-30] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[04-02-2022_01-49-30] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 68 as problem start state.

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,4))', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,2))', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 68})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'S': 68})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,2)', 'S': 68})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,4)', 'S': 68})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,2)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 68})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'S': 68})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,2)', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 68})

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), true, 68).
holds(1, complete_tower(red,puzzle_room_table), false, 68).
holds(1, configuration(manipulator_end_1), aligned_with((block,4)), 68).
holds(1, configuration(manipulator_end_2), aligned_with((block,2)), 68).
holds(1, configuration(manipulator_limb_1), extended, 68).
holds(1, configuration(manipulator_limb_2), extended, 68).
holds(1, configuration(puzzle_room_door), open, 68).
holds(1, configuration(starting_room_door), closed, 68).
holds(1, configuration(store_room_door), open, 68).
holds(1, grasping(manipulator_arm_1), (block,4), 68).
holds(1, grasping(manipulator_arm_2), (block,2), 68).
holds(1, grasping(manipulator_end_1), (block,4), 68).
holds(1, grasping(manipulator_end_2), (block,2), 68).
holds(1, in((block,1)), (puzzle_room,1), 68).
holds(1, in((block,2)), (puzzle_room,1), 68).
holds(1, in((block,3)), (puzzle_room,1), 68).
holds(1, in((block,4)), (puzzle_room,1), 68).
holds(1, in((block,5)), (puzzle_room,1), 68).
holds(1, in((block,6)), (puzzle_room,1), 68).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 68).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 68).
holds(1, in(manipulator_end_1), (puzzle_room,1), 68).
holds(1, in(manipulator_end_2), (puzzle_room,1), 68).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 68).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 68).
holds(1, in(puzzle_room_table), (puzzle_room,1), 68).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 68).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 68).
holds(1, in(talos), (puzzle_room,1), 68).
holds(1, in_tower((block,1),(block,1)), true, 68).
holds(1, in_tower((block,1),(block,2)), false, 68).
holds(1, in_tower((block,1),(block,3)), false, 68).
holds(1, in_tower((block,1),(block,4)), false, 68).
holds(1, in_tower((block,1),(block,5)), false, 68).
holds(1, in_tower((block,1),(block,6)), false, 68).
holds(1, in_tower((block,2),(block,1)), false, 68).
holds(1, in_tower((block,2),(block,2)), true, 68).
holds(1, in_tower((block,2),(block,3)), false, 68).
holds(1, in_tower((block,2),(block,4)), false, 68).
holds(1, in_tower((block,2),(block,5)), false, 68).
holds(1, in_tower((block,2),(block,6)), false, 68).
holds(1, in_tower((block,3),(block,1)), false, 68).
holds(1, in_tower((block,3),(block,2)), false, 68).
holds(1, in_tower((block,3),(block,3)), true, 68).
holds(1, in_tower((block,3),(block,4)), false, 68).
holds(1, in_tower((block,3),(block,5)), false, 68).
holds(1, in_tower((block,3),(block,6)), false, 68).
holds(1, in_tower((block,4),(block,1)), false, 68).
holds(1, in_tower((block,4),(block,2)), false, 68).
holds(1, in_tower((block,4),(block,3)), false, 68).
holds(1, in_tower((block,4),(block,4)), false, 68).
holds(1, in_tower((block,4),(block,5)), false, 68).
holds(1, in_tower((block,4),(block,6)), false, 68).
holds(1, in_tower((block,5),(block,1)), false, 68).
holds(1, in_tower((block,5),(block,2)), false, 68).
holds(1, in_tower((block,5),(block,3)), false, 68).
holds(1, in_tower((block,5),(block,4)), false, 68).
holds(1, in_tower((block,5),(block,5)), false, 68).
holds(1, in_tower((block,5),(block,6)), false, 68).
holds(1, in_tower((block,6),(block,1)), false, 68).
holds(1, in_tower((block,6),(block,2)), false, 68).
holds(1, in_tower((block,6),(block,3)), false, 68).
holds(1, in_tower((block,6),(block,4)), true, 68).
holds(1, in_tower((block,6),(block,5)), true, 68).
holds(1, in_tower((block,6),(block,6)), true, 68).
holds(1, on((block,1)), puzzle_room_table_left, 68).
holds(1, on((block,2)), puzzle_room_table_right, 68).
holds(1, on((block,3)), puzzle_room_table_left, 68).
holds(1, on((block,4)), (block,5), 68).
holds(1, on((block,5)), (block,6), 68).
holds(1, on((block,6)), puzzle_room_table_right, 68).
holds(1, tower_base((block,1),puzzle_room_table), true, 68).
holds(1, tower_base((block,2),puzzle_room_table), true, 68).
holds(1, tower_base((block,3),puzzle_room_table), true, 68).
holds(1, tower_base((block,4),puzzle_room_table), false, 68).
holds(1, tower_base((block,5),puzzle_room_table), false, 68).
holds(1, tower_base((block,6),puzzle_room_table), true, 68).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 68).
holds(2, complete_tower(blue,puzzle_room_table), true, 68).
holds(2, complete_tower(red,puzzle_room_table), false, 68).
holds(2, configuration(manipulator_arm_1), extended, 68).
holds(2, configuration(manipulator_arm_2), extended, 68).
holds(2, configuration(puzzle_room_door), open, 68).
holds(2, configuration(starting_room_door), closed, 68).
holds(2, configuration(store_room_door), open, 68).
holds(2, grasping(manipulator_arm_1), (block,4), 68).
holds(2, grasping(manipulator_arm_2), (block,2), 68).
holds(2, in((block,1)), puzzle_room, 68).
holds(2, in((block,2)), puzzle_room, 68).
holds(2, in((block,3)), puzzle_room, 68).
holds(2, in((block,4)), puzzle_room, 68).
holds(2, in((block,5)), puzzle_room, 68).
holds(2, in((block,6)), puzzle_room, 68).
holds(2, in(manipulator_arm_1), puzzle_room, 68).
holds(2, in(manipulator_arm_2), puzzle_room, 68).
holds(2, in(puzzle_room_table), puzzle_room, 68).
holds(2, in(talos), puzzle_room, 68).
holds(2, in_tower((block,1),(block,1)), true, 68).
holds(2, in_tower((block,1),(block,2)), false, 68).
holds(2, in_tower((block,1),(block,3)), false, 68).
holds(2, in_tower((block,1),(block,4)), false, 68).
holds(2, in_tower((block,1),(block,5)), false, 68).
holds(2, in_tower((block,1),(block,6)), false, 68).
holds(2, in_tower((block,2),(block,1)), false, 68).
holds(2, in_tower((block,2),(block,2)), true, 68).
holds(2, in_tower((block,2),(block,3)), false, 68).
holds(2, in_tower((block,2),(block,4)), false, 68).
holds(2, in_tower((block,2),(block,5)), false, 68).
holds(2, in_tower((block,2),(block,6)), false, 68).
holds(2, in_tower((block,3),(block,1)), false, 68).
holds(2, in_tower((block,3),(block,2)), false, 68).
holds(2, in_tower((block,3),(block,3)), true, 68).
holds(2, in_tower((block,3),(block,4)), false, 68).
holds(2, in_tower((block,3),(block,5)), false, 68).
holds(2, in_tower((block,3),(block,6)), false, 68).
holds(2, in_tower((block,4),(block,1)), false, 68).
holds(2, in_tower((block,4),(block,2)), false, 68).
holds(2, in_tower((block,4),(block,3)), false, 68).
holds(2, in_tower((block,4),(block,4)), false, 68).
holds(2, in_tower((block,4),(block,5)), false, 68).
holds(2, in_tower((block,4),(block,6)), false, 68).
holds(2, in_tower((block,5),(block,1)), false, 68).
holds(2, in_tower((block,5),(block,2)), false, 68).
holds(2, in_tower((block,5),(block,3)), false, 68).
holds(2, in_tower((block,5),(block,4)), false, 68).
holds(2, in_tower((block,5),(block,5)), false, 68).
holds(2, in_tower((block,5),(block,6)), false, 68).
holds(2, in_tower((block,6),(block,1)), false, 68).
holds(2, in_tower((block,6),(block,2)), false, 68).
holds(2, in_tower((block,6),(block,3)), false, 68).
holds(2, in_tower((block,6),(block,4)), true, 68).
holds(2, in_tower((block,6),(block,5)), true, 68).
holds(2, in_tower((block,6),(block,6)), true, 68).
holds(2, on((block,1)), puzzle_room_table, 68).
holds(2, on((block,2)), puzzle_room_table, 68).
holds(2, on((block,3)), puzzle_room_table, 68).
holds(2, on((block,4)), (block,5), 68).
holds(2, on((block,5)), (block,6), 68).
holds(2, on((block,6)), puzzle_room_table, 68).
holds(2, tower_base((block,1),puzzle_room_table), true, 68).
holds(2, tower_base((block,2),puzzle_room_table), true, 68).
holds(2, tower_base((block,3),puzzle_room_table), true, 68).
holds(2, tower_base((block,4),puzzle_room_table), false, 68).
holds(2, tower_base((block,5),puzzle_room_table), false, 68).
holds(2, tower_base((block,6),puzzle_room_table), true, 68).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 68).

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 41})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 42})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,1))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'I': 43})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 44})

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 4 rules into program part base:

sub_goal(2, talos, put(manipulator_arm_2,(block,2),(block,3)), on((block,2)), (block,3), 41).
sub_goal(2, talos, release(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), nothing, 42).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 43).
sub_goal(2, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 44).

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x00000225C3176430>]
	incrementor = SolveIncrementor(step_start=68, step_increase=1, step_increase_initial=2, step_end_min=72, step_end_max=200, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 68), range_=None), IncPart(name='plan_module', args=('#inc', 68, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 68, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 68, 41, 44, 'sequential', 'true'), range_=None)]

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 812 rules

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004556200000024546s

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.029257s.

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004845s with result Satisfiable.

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x00000225C3812A90>

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 68)
	('last_sgoals', 44)
	('finalise', True)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x00000225876B9A00>)
	('first_sgoals', 41)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x00000225C3812A90>)

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(41, 69)', truth=True, inc_range=None)

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 68). %* None *%
#program plan_module(#inc, 68, false, false). %* None *%
#program optimisation_module(#inc, 68, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 68, 41, 44, sequential, true). %* None *%

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     67 : Current =     69
Incrementor step ends | Minimum  =     72 : Maximum =    200

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(69)]), ('state_module', [Number(68), Number(68)]), ('plan_module', [Number(68), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(68), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(68)]), ('action_preconditions', [Number(68)]), ('variable_relations', [Number(68)]), ('abstraction_mappings', [Number(68)]), ('conformance_module', [Number(68), Number(68), Number(41), Number(44), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(69), Number(68)]), ('plan_module', [Number(69), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(69), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(69)]), ('action_preconditions', [Number(69)]), ('variable_relations', [Number(69)]), ('abstraction_mappings', [Number(69)]), ('conformance_module', [Number(69), Number(68), Number(41), Number(44), Function('sequential', [], True), Function('true', [], True)])]

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.120049s.

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 68: original = External(symbol='current_last_sgoals(41, 69)', truth=True, inc_range=None), conversion = current_last_sgoals(41,69).

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 69: original = External(symbol='current_last_sgoals(41, 69)', truth=True, inc_range=None), conversion = current_last_sgoals(41,69).

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011452s with result Satisfiable.

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.13150060000020858, Incremental time limit = None
Running cumulative time = 0.13150060000020858, Cumulative time limit = 1800
Used memory = (RSS = 1042.898438Mb, VMS = 1034.921875Mb), Total system virtual memory = 16324.0078125Mb

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.120049s, Solving = 0.011452s, Total = 0.131501s, Memory = (RSS = 1042.898438Mb, VMS = 1034.921875Mb), Step range = [68-69]), Calls = 1
Final Model :: Total atoms = 4155, Cost = (0, -1), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=67, end_step=69, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.12004860000001827, solving_time=0.01145200000019031, total_time=0.13150060000020858, memory=Memory(rss=1042.8984375, vms=1034.921875), step_range=range(68, 70), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.12004860000001827, solving_time=0.01145200000019031, total_time=0.13150060000020858, memory=Memory(rss=1042.8984375, vms=1034.921875), step_range=range(68, 70), clingo_stats={'problem': {'lp': {'atoms': 12183.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 27731.0, 'bodies_tr': 27731.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 262.0, 'count_bodies_tr': 262.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 506.0, 'rules': 56285.0, 'rules_normal': 55740.0, 'rules_choice': 543.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 56285.0, 'rules_tr_normal': 55740.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 21347.0, 'eqs_atom': 7072.0, 'eqs_body': 1968.0, 'eqs_other': 12307.0}, 'lpStep': {'atoms': 5664.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25112.0, 'bodies_tr': 25112.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 262.0, 'count_bodies_tr': 262.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 506.0, 'rules': 48856.0, 'rules_normal': 48311.0, 'rules_choice': 543.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 48856.0, 'rules_tr_normal': 48311.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 8291.0, 'eqs_atom': 2162.0, 'eqs_body': 443.0, 'eqs_other': 5686.0}, 'generator': {'vars': 2237.0, 'vars_eliminated': 0.0, 'vars_frozen': 1447.0, 'constraints': 27.0, 'constraints_binary': 1382.0, 'constraints_ternary': 197.0, 'acyc_edges': 0.0, 'complexity': 1632.0}}, 'solving': {'solvers': {'choices': 24.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 26.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 78.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [0.0, -1.0], 'lower': [0.0, -1.0], 'concurrency': 6.0, 'winner': 2.0, 'times': {'total': 0.13202857971191406, 'cpu': 0.125, 'solve': 0.004001617431640625, 'unsat': 0.004001617431640625, 'sat': 0.0}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.1710357666015625, 'cpu': 0.15625, 'solve': 0.0070018768310546875, 'unsat': 0.004001617431640625, 'sat': 0.00099945068359375}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 24.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 27.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 84.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{41: 69}

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 42 achieved :: Progression >> total requested sgoals = 4, current total achieved sgoals = 2 ( 50.00% solved)

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(42, 69)', truth=True, inc_range=None)

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 42, step = 69]:
sub_goal(2, talos, release(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), nothing, 42)

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Reaction at search length 69:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     69 : Current =     70
Incrementor step ends | Minimum  =     72 : Maximum =    200

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(70)]), ('state_module', [Number(70), Number(68)]), ('plan_module', [Number(70), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(70), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(70)]), ('action_preconditions', [Number(70)]), ('variable_relations', [Number(70)]), ('abstraction_mappings', [Number(70)]), ('conformance_module', [Number(70), Number(68), Number(41), Number(44), Function('sequential', [], True), Function('true', [], True)])]

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.085445s.

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 70: original = External(symbol='current_last_sgoals(42, 69)', truth=True, inc_range=None), conversion = current_last_sgoals(42,69).

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009212s with result Satisfiable.

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.09465690000001814, Incremental time limit = None
Running cumulative time = 0.22615750000022672, Cumulative time limit = 1800
Used memory = (RSS = 1042.898438Mb, VMS = 1034.921875Mb), Total system virtual memory = 16324.0078125Mb

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.205494s, Solving = 0.020664s, Total = 0.226158s, Memory = (RSS = 1042.898438Mb, VMS = 1034.921875Mb), Step range = [68-70]), Calls = 2
Final Model :: Total atoms = 4527, Cost = (0, -1), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=69, end_step=70, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.20549350000010236, solving_time=0.02066400000012436, total_time=0.22615750000022672, memory=Memory(rss=1042.8984375, vms=1034.921875), step_range=range(68, 71), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.08544490000008409, solving_time=0.00921199999993405, total_time=0.09465690000001814, memory=Memory(rss=1042.8984375, vms=1034.921875), step_range=range(70, 71), clingo_stats={'problem': {'lp': {'atoms': 13934.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 49447.0, 'bodies_tr': 49447.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 464.0, 'count_bodies_tr': 464.0, 'sccs': 42.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 578.0, 'rules': 97488.0, 'rules_normal': 96746.0, 'rules_choice': 738.0, 'rules_minimize': 4.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 97488.0, 'rules_tr_normal': 96746.0, 'rules_tr_choice': 738.0, 'rules_tr_minimize': 4.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 24494.0, 'eqs_atom': 7564.0, 'eqs_body': 2285.0, 'eqs_other': 14645.0}, 'lpStep': {'atoms': 1751.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21716.0, 'bodies_tr': 21716.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 8.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 72.0, 'rules': 41203.0, 'rules_normal': 41006.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 41203.0, 'rules_tr_normal': 41006.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3147.0, 'eqs_atom': 492.0, 'eqs_body': 317.0, 'eqs_other': 2338.0}, 'generator': {'vars': 2701.0, 'vars_eliminated': 0.0, 'vars_frozen': 1771.0, 'constraints': 80.0, 'constraints_binary': 3956.0, 'constraints_ternary': 482.0, 'acyc_edges': 0.0, 'complexity': 4558.0}}, 'solving': {'solvers': {'choices': 92.0, 'conflicts': 1.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 38.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 114.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [0.0, -1.0], 'lower': [0.0, -1.0], 'concurrency': 6.0, 'winner': 1.0, 'times': {'total': 0.09602165222167969, 'cpu': 0.109375, 'solve': 0.005001068115234375, 'unsat': 0.005001068115234375, 'sat': 0.0}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.2670574188232422, 'cpu': 0.265625, 'solve': 0.012002944946289062, 'unsat': 0.009002685546875, 'sat': 0.00099945068359375}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 116.0, 'conflicts': 1.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 65.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 198.0, 'guiding_paths': 18.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{41: 69, 42: 70}

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 43 achieved :: Progression >> total requested sgoals = 4, current total achieved sgoals = 3 ( 75.00% solved)

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(43, 70)', truth=True, inc_range=None)

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 43, step = 70]:
sub_goal(2, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 43)

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Reaction at search length 70:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     70 : Current =     71
Incrementor step ends | Minimum  =     72 : Maximum =    200

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(71)]), ('state_module', [Number(71), Number(68)]), ('plan_module', [Number(71), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(71), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(71)]), ('action_preconditions', [Number(71)]), ('variable_relations', [Number(71)]), ('abstraction_mappings', [Number(71)]), ('conformance_module', [Number(71), Number(68), Number(41), Number(44), Function('sequential', [], True), Function('true', [], True)])]

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.085994s.

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 71: original = External(symbol='current_last_sgoals(43, 70)', truth=True, inc_range=None), conversion = current_last_sgoals(43,70).

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007272s with result Unsatisfiable.

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.0932657000000745, Incremental time limit = None
Running cumulative time = 0.3194232000003012, Cumulative time limit = 1800
Used memory = (RSS = 1042.898438Mb, VMS = 1034.921875Mb), Total system virtual memory = 16324.0078125Mb

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=70, end_step=71, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.29148750000013024, solving_time=0.027935700000170982, total_time=0.3194232000003012, memory=Memory(rss=1042.8984375, vms=1034.921875), step_range=range(68, 72), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.08599400000002788, solving_time=0.007271700000046621, total_time=0.0932657000000745, memory=Memory(rss=1042.8984375, vms=1034.921875), step_range=range(71, 72), clingo_stats={'problem': {'lp': {'atoms': 15851.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 71440.0, 'bodies_tr': 71440.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 666.0, 'count_bodies_tr': 666.0, 'sccs': 61.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 790.0, 'rules': 139090.0, 'rules_normal': 138151.0, 'rules_choice': 933.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 139090.0, 'rules_tr_normal': 138151.0, 'rules_tr_choice': 933.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 30258.0, 'eqs_atom': 8292.0, 'eqs_body': 2765.0, 'eqs_other': 19201.0}, 'lpStep': {'atoms': 1917.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21993.0, 'bodies_tr': 21993.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 19.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 212.0, 'rules': 41602.0, 'rules_normal': 41405.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 41602.0, 'rules_tr_normal': 41405.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5764.0, 'eqs_atom': 728.0, 'eqs_body': 480.0, 'eqs_other': 4556.0}, 'generator': {'vars': 3527.0, 'vars_eliminated': 0.0, 'vars_frozen': 2280.0, 'constraints': 238.0, 'constraints_binary': 8682.0, 'constraints_ternary': 1070.0, 'acyc_edges': 0.0, 'complexity': 10084.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 5.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 125.0, 'guiding_paths': 5.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 3.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, -6.0], 'concurrency': 6.0, 'winner': 3.0, 'times': {'total': 0.09401893615722656, 'cpu': 0.09375, 'solve': 0.00099945068359375, 'unsat': 0.00099945068359375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.36107635498046875, 'cpu': 0.359375, 'solve': 0.013002395629882812, 'unsat': 0.01000213623046875, 'sat': 0.00099945068359375}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 116.0, 'conflicts': 6.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 65.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 323.0, 'guiding_paths': 23.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Reaction at search length 71:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     71 : Current =     72
Incrementor step ends | Minimum  =     72 : Maximum =    200

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(72)]), ('state_module', [Number(72), Number(68)]), ('plan_module', [Number(72), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(72), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(72)]), ('action_preconditions', [Number(72)]), ('variable_relations', [Number(72)]), ('abstraction_mappings', [Number(72)]), ('conformance_module', [Number(72), Number(68), Number(41), Number(44), Function('sequential', [], True), Function('true', [], True)])]

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.092937s.

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.016463s with result Satisfiable.

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.10939970000003996, Incremental time limit = None
Running cumulative time = 0.4288229000003412, Cumulative time limit = 1800
Used memory = (RSS = 1042.898438Mb, VMS = 1034.921875Mb), Total system virtual memory = 16324.0078125Mb

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.384425s, Solving = 0.044398s, Total = 0.428823s, Memory = (RSS = 1042.898438Mb, VMS = 1034.921875Mb), Step range = [68-72]), Calls = 4
Final Model :: Total atoms = 5272, Cost = (0, -1), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=71, end_step=72, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.3844245000000228, solving_time=0.04439840000031836, total_time=0.4288229000003412, memory=Memory(rss=1042.8984375, vms=1034.921875), step_range=range(68, 73), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09293699999989258, solving_time=0.01646270000014738, total_time=0.10939970000003996, memory=Memory(rss=1042.8984375, vms=1034.921875), step_range=range(72, 73), clingo_stats={'problem': {'lp': {'atoms': 18728.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 94621.0, 'bodies_tr': 94621.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 868.0, 'count_bodies_tr': 868.0, 'sccs': 86.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1276.0, 'rules': 182709.0, 'rules_normal': 181573.0, 'rules_choice': 1128.0, 'rules_minimize': 8.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 182709.0, 'rules_tr_normal': 181573.0, 'rules_tr_choice': 1128.0, 'rules_tr_minimize': 8.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 37290.0, 'eqs_atom': 9725.0, 'eqs_body': 2931.0, 'eqs_other': 24634.0}, 'lpStep': {'atoms': 2877.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 23181.0, 'bodies_tr': 23181.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 486.0, 'rules': 43619.0, 'rules_normal': 43422.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 43619.0, 'rules_tr_normal': 43422.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7032.0, 'eqs_atom': 1433.0, 'eqs_body': 166.0, 'eqs_other': 5433.0}, 'generator': {'vars': 5313.0, 'vars_eliminated': 0.0, 'vars_frozen': 3357.0, 'constraints': 697.0, 'constraints_binary': 25589.0, 'constraints_ternary': 3002.0, 'acyc_edges': 0.0, 'complexity': 29460.0}}, 'solving': {'solvers': {'choices': 518.0, 'conflicts': 30.0, 'conflicts_analyzed': 16.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 63.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 22.0, 'distributed_sum_lbd': 50.0, 'integrated': 85.0, 'lemmas': 133.0, 'lits_learnt': 712.0, 'lemmas_binary': 36.0, 'lemmas_ternary': 17.0, 'cpu_time': 0.0, 'integrated_imps': 26.0, 'integrated_jumps': 62.0, 'guiding_paths_lits': 186.0, 'guiding_paths': 20.0, 'splits': 0.0, 'lemmas_conflict': 16.0, 'lemmas_loop': 50.0, 'lemmas_other': 67.0, 'lits_conflict': 110.0, 'lits_loop': 341.0, 'lits_other': 261.0, 'jumps': {'jumps': 16.0, 'jumps_bounded': 3.0, 'levels': 275.0, 'levels_bounded': 4.0, 'max': 48.0, 'max_executed': 46.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 4.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [0.0, -1.0], 'lower': [0.0, -1.0], 'concurrency': 6.0, 'winner': 1.0, 'times': {'total': 0.11002349853515625, 'cpu': 0.109375, 'solve': 0.0060024261474609375, 'unsat': 0.005001068115234375, 'sat': 0.0010013580322265625}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.471099853515625, 'cpu': 0.46875, 'solve': 0.01900482177734375, 'unsat': 0.015003204345703125, 'sat': 0.0020008087158203125}, 'models': {'enumerated': 4.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 634.0, 'conflicts': 36.0, 'conflicts_analyzed': 16.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 0.0, 'models': 4.0, 'models_level': 128.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 22.0, 'distributed_sum_lbd': 50.0, 'integrated': 85.0, 'lemmas': 133.0, 'lits_learnt': 712.0, 'lemmas_binary': 36.0, 'lemmas_ternary': 17.0, 'cpu_time': 0.015625, 'integrated_imps': 26.0, 'integrated_jumps': 62.0, 'guiding_paths_lits': 509.0, 'guiding_paths': 43.0, 'splits': 0.0, 'lemmas_conflict': 16.0, 'lemmas_loop': 50.0, 'lemmas_other': 67.0, 'lits_conflict': 110.0, 'lits_loop': 341.0, 'lits_other': 261.0, 'jumps': {'jumps': 16.0, 'jumps_bounded': 3.0, 'levels': 275.0, 'levels_bounded': 4.0, 'max': 48.0, 'max_executed': 46.0, 'max_bounded': 2.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{41: 69, 42: 70, 43: 72}

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 44 achieved :: Progression >> total requested sgoals = 4, current total achieved sgoals = 4 (100.00% solved)

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(44, 72)', truth=True, inc_range=None)

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 44, step = 72]:
sub_goal(2, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 44)

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='seq_achieve_fgoals(72)', truth=True, inc_range=IncRange(start=None, end=None, step=1))

[04-02-2022_01-49-30] DEBUG :: ASH Planner Main #1 >> Enforcing achievement of final-goal:
final_goal(1, complete_tower(blue,puzzle_room_table), false, false)
final_goal(1, complete_tower(blue,puzzle_room_table), true, true)
final_goal(1, complete_tower(red,puzzle_room_table), false, false)
final_goal(1, complete_tower(red,puzzle_room_table), true, true)
final_goal(1, in_tower((block,1),(block,1)), false, true)
final_goal(1, in_tower((block,1),(block,1)), true, false)
final_goal(1, in_tower((block,1),(block,2)), false, true)
final_goal(1, in_tower((block,1),(block,2)), true, false)
final_goal(1, in_tower((block,1),(block,3)), false, true)
final_goal(1, in_tower((block,1),(block,3)), true, false)
final_goal(1, in_tower((block,1),(block,4)), false, true)
final_goal(1, in_tower((block,1),(block,4)), true, false)
final_goal(1, in_tower((block,1),(block,5)), false, true)
final_goal(1, in_tower((block,1),(block,5)), true, false)
final_goal(1, in_tower((block,1),(block,6)), false, true)
final_goal(1, in_tower((block,1),(block,6)), true, false)
final_goal(1, in_tower((block,2),(block,1)), false, true)
final_goal(1, in_tower((block,2),(block,1)), true, false)
final_goal(1, in_tower((block,2),(block,2)), false, true)
final_goal(1, in_tower((block,2),(block,2)), true, false)
final_goal(1, in_tower((block,2),(block,3)), false, true)
final_goal(1, in_tower((block,2),(block,3)), true, false)
final_goal(1, in_tower((block,2),(block,4)), false, true)
final_goal(1, in_tower((block,2),(block,4)), true, false)
final_goal(1, in_tower((block,2),(block,5)), false, true)
final_goal(1, in_tower((block,2),(block,5)), true, false)
final_goal(1, in_tower((block,2),(block,6)), false, true)
final_goal(1, in_tower((block,2),(block,6)), true, false)
final_goal(1, in_tower((block,3),(block,1)), false, false)
final_goal(1, in_tower((block,3),(block,1)), true, true)
final_goal(1, in_tower((block,3),(block,2)), false, false)
final_goal(1, in_tower((block,3),(block,2)), true, true)
final_goal(1, in_tower((block,3),(block,3)), false, false)
final_goal(1, in_tower((block,3),(block,3)), true, true)
final_goal(1, in_tower((block,3),(block,4)), false, true)
final_goal(1, in_tower((block,3),(block,4)), true, false)
final_goal(1, in_tower((block,3),(block,5)), false, true)
final_goal(1, in_tower((block,3),(block,5)), true, false)
final_goal(1, in_tower((block,3),(block,6)), false, true)
final_goal(1, in_tower((block,3),(block,6)), true, false)
final_goal(1, in_tower((block,4),(block,1)), false, true)
final_goal(1, in_tower((block,4),(block,1)), true, false)
final_goal(1, in_tower((block,4),(block,2)), false, true)
final_goal(1, in_tower((block,4),(block,2)), true, false)
final_goal(1, in_tower((block,4),(block,3)), false, true)
final_goal(1, in_tower((block,4),(block,3)), true, false)
final_goal(1, in_tower((block,4),(block,4)), false, true)
final_goal(1, in_tower((block,4),(block,4)), true, false)
final_goal(1, in_tower((block,4),(block,5)), false, true)
final_goal(1, in_tower((block,4),(block,5)), true, false)
final_goal(1, in_tower((block,4),(block,6)), false, true)
final_goal(1, in_tower((block,4),(block,6)), true, false)
final_goal(1, in_tower((block,5),(block,1)), false, true)
final_goal(1, in_tower((block,5),(block,1)), true, false)
final_goal(1, in_tower((block,5),(block,2)), false, true)
final_goal(1, in_tower((block,5),(block,2)), true, false)
final_goal(1, in_tower((block,5),(block,3)), false, true)
final_goal(1, in_tower((block,5),(block,3)), true, false)
final_goal(1, in_tower((block,5),(block,4)), false, true)
final_goal(1, in_tower((block,5),(block,4)), true, false)
final_goal(1, in_tower((block,5),(block,5)), false, true)
final_goal(1, in_tower((block,5),(block,5)), true, false)
final_goal(1, in_tower((block,5),(block,6)), false, true)
final_goal(1, in_tower((block,5),(block,6)), true, false)
final_goal(1, in_tower((block,6),(block,1)), false, true)
final_goal(1, in_tower((block,6),(block,1)), true, false)
final_goal(1, in_tower((block,6),(block,2)), false, true)
final_goal(1, in_tower((block,6),(block,2)), true, false)
final_goal(1, in_tower((block,6),(block,3)), false, true)
final_goal(1, in_tower((block,6),(block,3)), true, false)
final_goal(1, in_tower((block,6),(block,4)), false, false)
final_goal(1, in_tower((block,6),(block,4)), true, true)
final_goal(1, in_tower((block,6),(block,5)), false, false)
final_goal(1, in_tower((block,6),(block,5)), true, true)
final_goal(1, in_tower((block,6),(block,6)), false, false)
final_goal(1, in_tower((block,6),(block,6)), true, true)
final_goal(1, on((block,1)), (block,2), true)
final_goal(1, on((block,1)), (block,3), false)
final_goal(1, on((block,1)), (block,4), false)
final_goal(1, on((block,1)), (block,5), false)
final_goal(1, on((block,1)), (block,6), false)
final_goal(1, on((block,1)), nothing, false)
final_goal(1, on((block,1)), puzzle_room_table_left, false)
final_goal(1, on((block,1)), puzzle_room_table_right, false)
final_goal(1, on((block,2)), (block,1), false)
final_goal(1, on((block,2)), (block,3), true)
final_goal(1, on((block,2)), (block,4), false)
final_goal(1, on((block,2)), (block,5), false)
final_goal(1, on((block,2)), (block,6), false)
final_goal(1, on((block,2)), nothing, false)
final_goal(1, on((block,2)), puzzle_room_table_left, false)
final_goal(1, on((block,2)), puzzle_room_table_right, false)
final_goal(1, on((block,3)), (block,1), false)
final_goal(1, on((block,3)), (block,2), false)
final_goal(1, on((block,3)), (block,4), false)
final_goal(1, on((block,3)), (block,5), false)
final_goal(1, on((block,3)), (block,6), false)
final_goal(1, on((block,3)), nothing, false)
final_goal(1, on((block,3)), puzzle_room_table_left, true)
final_goal(1, on((block,3)), puzzle_room_table_right, false)
final_goal(1, on((block,4)), (block,1), false)
final_goal(1, on((block,4)), (block,2), false)
final_goal(1, on((block,4)), (block,3), false)
final_goal(1, on((block,4)), (block,5), true)
final_goal(1, on((block,4)), (block,6), false)
final_goal(1, on((block,4)), nothing, false)
final_goal(1, on((block,4)), puzzle_room_table_left, false)
final_goal(1, on((block,4)), puzzle_room_table_right, false)
final_goal(1, on((block,5)), (block,1), false)
final_goal(1, on((block,5)), (block,2), false)
final_goal(1, on((block,5)), (block,3), false)
final_goal(1, on((block,5)), (block,4), false)
final_goal(1, on((block,5)), (block,6), true)
final_goal(1, on((block,5)), nothing, false)
final_goal(1, on((block,5)), puzzle_room_table_left, false)
final_goal(1, on((block,5)), puzzle_room_table_right, false)
final_goal(1, on((block,6)), (block,1), false)
final_goal(1, on((block,6)), (block,2), false)
final_goal(1, on((block,6)), (block,3), false)
final_goal(1, on((block,6)), (block,4), false)
final_goal(1, on((block,6)), (block,5), false)
final_goal(1, on((block,6)), nothing, false)
final_goal(1, on((block,6)), puzzle_room_table_left, false)
final_goal(1, on((block,6)), puzzle_room_table_right, true)
final_goal(1, tower_base((block,1),puzzle_room_table), false, true)
final_goal(1, tower_base((block,1),puzzle_room_table), true, false)
final_goal(1, tower_base((block,2),puzzle_room_table), false, true)
final_goal(1, tower_base((block,2),puzzle_room_table), true, false)
final_goal(1, tower_base((block,3),puzzle_room_table), false, false)
final_goal(1, tower_base((block,3),puzzle_room_table), true, true)
final_goal(1, tower_base((block,4),puzzle_room_table), false, true)
final_goal(1, tower_base((block,4),puzzle_room_table), true, false)
final_goal(1, tower_base((block,5),puzzle_room_table), false, true)
final_goal(1, tower_base((block,5),puzzle_room_table), true, false)
final_goal(1, tower_base((block,6),puzzle_room_table), false, false)
final_goal(1, tower_base((block,6),puzzle_room_table), true, true)
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false)

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     72 : Current =     73
Incrementor step ends | Minimum  =     72 : Maximum =    200

[04-02-2022_01-49-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(73)]), ('state_module', [Number(73), Number(68)]), ('plan_module', [Number(73), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(73), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(73)]), ('action_preconditions', [Number(73)]), ('variable_relations', [Number(73)]), ('abstraction_mappings', [Number(73)]), ('conformance_module', [Number(73), Number(68), Number(41), Number(44), Function('sequential', [], True), Function('true', [], True)])]

[04-02-2022_01-49-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.099086s.

[04-02-2022_01-49-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 73: original = External(symbol='current_last_sgoals(44, 72)', truth=True, inc_range=None), conversion = current_last_sgoals(44,72).

[04-02-2022_01-49-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 73: original = External(symbol='seq_achieve_fgoals(72)', truth=True, inc_range=IncRange(start=None, end=None, step=1)), conversion = seq_achieve_fgoals(72).

[04-02-2022_01-49-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[04-02-2022_01-49-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.020381s with result Satisfiable.

[04-02-2022_01-49-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.11946669999974802, Incremental time limit = None
Running cumulative time = 0.5482896000000892, Cumulative time limit = 1800
Used memory = (RSS = 1042.898438Mb, VMS = 1034.921875Mb), Total system virtual memory = 16324.0078125Mb

[04-02-2022_01-49-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.483510s, Solving = 0.064779s, Total = 0.548290s, Memory = (RSS = 1042.898438Mb, VMS = 1034.921875Mb), Step range = [68-73]), Calls = 5
Final Model :: Total atoms = 5935, Cost = (0, -2), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[04-02-2022_01-49-31] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=72, end_step=73, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.48351049999996576, solving_time=0.06477910000012344, total_time=0.5482896000000892, memory=Memory(rss=1042.8984375, vms=1034.921875), step_range=range(68, 74), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09908599999994294, solving_time=0.020380699999805074, total_time=0.11946669999974802, memory=Memory(rss=1042.8984375, vms=1034.921875), step_range=range(73, 74), clingo_stats={'problem': {'lp': {'atoms': 21995.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 118583.0, 'bodies_tr': 118583.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1070.0, 'count_bodies_tr': 1070.0, 'sccs': 111.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1766.0, 'rules': 227376.0, 'rules_normal': 226043.0, 'rules_choice': 1323.0, 'rules_minimize': 10.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 227376.0, 'rules_tr_normal': 226043.0, 'rules_tr_choice': 1323.0, 'rules_tr_minimize': 10.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 48696.0, 'eqs_atom': 11449.0, 'eqs_body': 3113.0, 'eqs_other': 34134.0}, 'lpStep': {'atoms': 3267.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 23962.0, 'bodies_tr': 23962.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 490.0, 'rules': 44667.0, 'rules_normal': 44470.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 44667.0, 'rules_tr_normal': 44470.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 11406.0, 'eqs_atom': 1724.0, 'eqs_body': 182.0, 'eqs_other': 9500.0}, 'generator': {'vars': 7320.0, 'vars_eliminated': 0.0, 'vars_frozen': 4517.0, 'constraints': 1197.0, 'constraints_binary': 46269.0, 'constraints_ternary': 5624.0, 'acyc_edges': 0.0, 'complexity': 53340.0}}, 'solving': {'solvers': {'choices': 211.0, 'conflicts': 1.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 74.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 222.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 5.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [0.0, -2.0], 'lower': [0.0, -2.0], 'concurrency': 6.0, 'winner': 1.0, 'times': {'total': 0.12102699279785156, 'cpu': 0.109375, 'solve': 0.0060024261474609375, 'unsat': 0.005001068115234375, 'sat': 0.0010013580322265625}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.5921268463134766, 'cpu': 0.578125, 'solve': 0.025007247924804688, 'unsat': 0.0200042724609375, 'sat': 0.003002166748046875}, 'models': {'enumerated': 5.0, 'optimal': 4.0}, 'solving': {'solvers': {'choices': 845.0, 'conflicts': 37.0, 'conflicts_analyzed': 16.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 0.0, 'models': 5.0, 'models_level': 202.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 22.0, 'distributed_sum_lbd': 50.0, 'integrated': 85.0, 'lemmas': 133.0, 'lits_learnt': 712.0, 'lemmas_binary': 36.0, 'lemmas_ternary': 17.0, 'cpu_time': 0.015625, 'integrated_imps': 26.0, 'integrated_jumps': 62.0, 'guiding_paths_lits': 731.0, 'guiding_paths': 49.0, 'splits': 0.0, 'lemmas_conflict': 16.0, 'lemmas_loop': 50.0, 'lemmas_other': 67.0, 'lits_conflict': 110.0, 'lits_loop': 341.0, 'lits_other': 261.0, 'jumps': {'jumps': 16.0, 'jumps_bounded': 3.0, 'levels': 275.0, 'levels_bounded': 4.0, 'max': 48.0, 'max_executed': 46.0, 'max_bounded': 2.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[04-02-2022_01-49-31] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{41: 69, 42: 70, 43: 72, 44: 73}

[04-02-2022_01-49-31] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 45 achieved :: Progression >> total requested sgoals = 4, current total achieved sgoals = 5 (125.00% solved)

[04-02-2022_01-49-31] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 44 was achieved successfully.

[04-02-2022_01-49-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[04-02-2022_01-49-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.120049s, Solving = 0.011452s, Total = 0.131501s, Memory = (RSS = 1042.898438Mb, VMS = 1034.921875Mb), Step range = [68-69]
2 : Statistics :: Grounding = 0.085445s, Solving = 0.009212s, Total = 0.094657s, Memory = (RSS = 1042.898438Mb, VMS = 1034.921875Mb), Step range = [70-70]
3 : Statistics :: Grounding = 0.085994s, Solving = 0.007272s, Total = 0.093266s, Memory = (RSS = 1042.898438Mb, VMS = 1034.921875Mb), Step range = [71-71]
4 : Statistics :: Grounding = 0.092937s, Solving = 0.016463s, Total = 0.109400s, Memory = (RSS = 1042.898438Mb, VMS = 1034.921875Mb), Step range = [72-72]
5 : Statistics :: Grounding = 0.099086s, Solving = 0.020381s, Total = 0.119467s, Memory = (RSS = 1042.898438Mb, VMS = 1034.921875Mb), Step range = [73-73]

[04-02-2022_01-49-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.548290s due to: External generator exit.

[04-02-2022_01-49-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[04-02-2022_01-49-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[04-02-2022_01-49-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[04-02-2022_01-49-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[04-02-2022_01-49-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[04-02-2022_01-49-31] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 11, 24: 11, 25: 12, 26: 13, 27: 14, 28: 15, 29: 16, 30: 17, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 23, 41: 24, 42: 25, 43: 26, 44: 27, 45: 27, 46: 28, 47: 28, 48: 28, 49: 29, 50: 29, 51: 30, 52: 30, 53: 31, 54: 32, 55: 32, 56: 33, 57: 33, 58: 33, 59: 34, 60: 34, 61: 35, 62: 36, 63: 37, 64: 37, 65: 38, 66: 39, 67: 40, 68: 40}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 24, 12: 25, 13: 26, 14: 27, 15: 28, 16: 29, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 39, 23: 40, 24: 41, 25: 42, 26: 43, 27: 45, 28: 48, 29: 50, 30: 52, 31: 53, 32: 55, 33: 58, 34: 60, 35: 61, 36: 62, 37: 64, 38: 65, 39: 66, 40: 68}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 5, 22: 6, 23: 7, 24: 8, 25: 9, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10, 31: 11, 32: 11, 33: 11, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 13, 3: 14, 4: 18, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 33, 12: 35, 13: 37, 14: 38, 15: 39, 16: 40, 17: 41, 18: 42, 19: 43, 20: 44}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[04-02-2022_01-49-31] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 11, 24: 11, 25: 12, 26: 13, 27: 14, 28: 15, 29: 16, 30: 17, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 23, 41: 24, 42: 25, 43: 26, 44: 27, 45: 27, 46: 28, 47: 28, 48: 28, 49: 29, 50: 29, 51: 30, 52: 30, 53: 31, 54: 32, 55: 32, 56: 33, 57: 33, 58: 33, 59: 34, 60: 34, 61: 35, 62: 36, 63: 37, 64: 37, 65: 38, 66: 39, 67: 40, 68: 40, 69: 41, 70: 42, 71: 43, 72: 43, 73: 44}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 24, 12: 25, 13: 26, 14: 27, 15: 28, 16: 29, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 39, 23: 40, 24: 41, 25: 42, 26: 43, 27: 45, 28: 48, 29: 50, 30: 52, 31: 53, 32: 55, 33: 58, 34: 60, 35: 61, 36: 62, 37: 64, 38: 65, 39: 66, 40: 68, 41: 69, 42: 70, 43: 72, 44: 73}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 5, 22: 6, 23: 7, 24: 8, 25: 9, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10, 31: 11, 32: 11, 33: 11, 34: 12, 35: 12, 36: 13, 37: 13, 38: 14, 39: 15, 40: 16, 41: 17, 42: 18, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 13, 3: 14, 4: 18, 5: 21, 6: 22, 7: 23, 8: 24, 9: 28, 10: 30, 11: 33, 12: 35, 13: 37, 14: 38, 15: 39, 16: 40, 17: 41, 18: 42, 19: 43, 20: 44}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[04-02-2022_01-49-31] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 44, Last requested goal index = 44, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[04-02-2022_01-49-31] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.483510s, Solving = 0.064779s, Total = 0.548290s, Memory = (RSS = 1042.898438Mb, VMS = 1034.921875Mb), Step range = [68-73]), Calls = 5
Model :: Total atoms = 5935, Cost = (0, -2), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[04-02-2022_01-49-31] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 5 :: Actions = 5                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 21:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 23:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 24:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 25:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 26:
    Current Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 27:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,6))
Step 28:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 29:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 30:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 31:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 37:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 38:
    Current Sub-goals:
        [Index = 21] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 21] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,6),puzzle_room_table_right)
Step 39:
    Current Sub-goals:
        [Index = 22] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 22] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,6))
Step 40:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_1,(block,5),(block,6))
Step 41:
    Current Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,5))
Step 42:
    Current Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 43:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 44:
    Current Sub-goals:
        [Index = 27] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 45:
    Current Sub-goals:
        [Index = 27] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 27] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 46:
    Current Sub-goals:
        [Index = 28] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 47:
    Current Sub-goals:
        [Index = 28] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 48:
    Current Sub-goals:
        [Index = 28] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 28] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 49:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 50:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 51:
    Current Sub-goals:
        [Index = 30] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
Step 52:
    Current Sub-goals:
        [Index = 30] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
        [Index = 30] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))
Step 53:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 54:
    Current Sub-goals:
        [Index = 32] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 55:
    Current Sub-goals:
        [Index = 32] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 32] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 56:
    Current Sub-goals:
        [Index = 33] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 57:
    Current Sub-goals:
        [Index = 33] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 58:
    Current Sub-goals:
        [Index = 33] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 33] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 59:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 60:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 61:
    Current Sub-goals:
        [Index = 35] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 35] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_end_1,(block,4),(block,5))
Step 62:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 36] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 63:
    Current Sub-goals:
        [Index = 37] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,3)))
Step 64:
    Current Sub-goals:
        [Index = 37] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
        [Index = 37] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,3))
Step 65:
    Current Sub-goals:
        [Index = 38] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 38] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,3),puzzle_room_table_left)
Step 66:
    Current Sub-goals:
        [Index = 39] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 39] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,3))
Step 67:
    Current Sub-goals:
        [Index = 40] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,2)))
Step 68:
    Current Sub-goals:
        [Index = 40] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
        [Index = 40] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,2))
Step 69:
    Current Sub-goals:
        [Index = 41] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 41] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_2,(block,2),(block,3))
Step 70:
    Current Sub-goals:
        [Index = 42] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 42] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,2))
Step 71:
    Current Sub-goals:
        [Index = 43] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,1)))
Step 72:
    Current Sub-goals:
        [Index = 43] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Achieved Sub-goals:
        [Index = 43] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,1))
Step 73:
    Current Sub-goals:
        [Index = 44] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 44] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_end_2,(block,1),(block,2))

[04-02-2022_01-49-31] DEBUG :: ASH Planner Main #1 >> Monolevel problem 8 at level 1 solved.

[04-02-2022_01-49-31] DEBUG :: ASH Planner Main #1 >> Online planning increment 8 finished.

[04-02-2022_01-49-31] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=73, step_range=range(0, 74)

[04-02-2022_01-49-31] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 73, Total actions = 73, Produced sub-goal stages = 0

[04-02-2022_01-49-31] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=44, step_range=range(0, 45)

[04-02-2022_01-49-31] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 73, Total actions = 73, Produced sub-goal stages = 0

[04-02-2022_01-49-31] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=20, step_range=range(0, 21)

[04-02-2022_01-49-31] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 73, Total actions = 73, Produced sub-goal stages = 0

[04-02-2022_01-49-31] DEBUG :: ASH Planner Main #1 >> Hierarchical plan generated successfully :: Ground Plan Quality >> Length = 73, Actions = 73

[04-02-2022_01-49-31] DEBUG :: ASH Planner Main #1 >> Hierarchical planning summary: (Execution latency = 7.203881700000011, Average ground wait time = 1.9178287875000706, Absolution time = 15.074891100000741)

     ========================================================================================================================================================================================================     
     |        Lvl = 3 (classic), LE =  20, AC =  20, CF = 1.0, GT =   1.14s, ST =   0.65s, OT = 0.00s, TT =   1.79s, EF = (LE = 1.0, AC = 1.0), ED = (LE = 0.0, AC = 0.0), EB = (LE = 0.0, AC = 0.0)        |     
     |        Lvl = 2 (com-ref), LE =  44, AC =  44, CF = 1.0, GT =   3.60s, ST =   1.11s, OT = 0.02s, TT =   4.73s, EF = (LE = 2.2, AC = 2.2), ED = (LE = 2.1, AC = 2.1), EB = (LE = 1.0, AC = 1.0)        |     
     |        Lvl = 1 (com-ref), LE =  73, AC =  73, CF = 1.0, GT =   7.32s, ST =   1.21s, OT = 0.03s, TT =   8.56s, EF = (LE = 1.7, AC = 1.7), ED = (LE = 1.0, AC = 1.0), EB = (LE = 0.6, AC = 0.6)        |     
     ========================================================================================================================================================================================================     

[04-02-2022_01-49-31] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=73, step_range=range(0, 74)

[04-02-2022_01-49-31] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 73, Total actions = 73, Produced sub-goal stages = 0

[04-02-2022_01-49-31] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=44, step_range=range(0, 45)

[04-02-2022_01-49-31] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 73, Total actions = 73, Produced sub-goal stages = 0

[04-02-2022_01-49-31] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=20, step_range=range(0, 21)

[04-02-2022_01-49-31] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 73, Total actions = 73, Produced sub-goal stages = 0

[04-02-2022_01-49-31] DEBUG :: Experiment >> 

      ================================================      
           Experimental run 50 : Time 19.943172s            
      ================================================      

[04-02-2022_01-49-31] INFO :: Experiment >> 

  ################################################################################################  
        Completed 50 experimental runs : Real time 1029.959089s, Proccess time 1335.375000s         
  ################################################################################################  

[04-02-2022_01-49-31] DEBUG :: Experiment >> Refinement spread at run=0, level=2:
Root Mean Squared Errors: rmse_mchild=5.466260147486578, rmse_div_indices=0.0, rmse_div_steps=1.7320508075688772
Mean Absolute Errors: mae_mchild=4.599999999999997, mae_div_indices=0.0, mae_div_steps=1.0

[04-02-2022_01-49-31] DEBUG :: Experiment >> Refinement spread at run=0, level=1:
Root Mean Squared Errors: rmse_mchild=2.6357268039620423, rmse_div_indices=1.3333333333333333, rmse_div_steps=4.329325069286846
Mean Absolute Errors: mae_mchild=2.0960743801652884, mae_div_indices=1.0, mae_div_steps=3.388888888888889

[04-02-2022_01-49-31] DEBUG :: Experiment >> Refinement spread at run=1, level=2:
Root Mean Squared Errors: rmse_mchild=5.129327441292863, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515
Mean Absolute Errors: mae_mchild=4.349999999999997, mae_div_indices=0.0, mae_div_steps=0.6666666666666666

[04-02-2022_01-49-31] DEBUG :: Experiment >> Refinement spread at run=1, level=1:
Root Mean Squared Errors: rmse_mchild=1.6851165445140708, rmse_div_indices=1.1055415967851334, rmse_div_steps=2.520747243709029
Mean Absolute Errors: mae_mchild=1.4121900826446283, mae_div_indices=0.8888888888888888, mae_div_steps=1.9166666666666667

[04-02-2022_01-49-31] DEBUG :: Experiment >> Refinement spread at run=2, level=2:
Root Mean Squared Errors: rmse_mchild=7.727548123434753, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258
Mean Absolute Errors: mae_mchild=7.049999999999999, mae_div_indices=0.0, mae_div_steps=3.3333333333333335

[04-02-2022_01-49-31] DEBUG :: Experiment >> Refinement spread at run=2, level=1:
Root Mean Squared Errors: rmse_mchild=2.8972548061816306, rmse_div_indices=5.236092690801669, rmse_div_steps=11.42335570467608
Mean Absolute Errors: mae_mchild=2.5572562358276643, mae_div_indices=4.111111111111111, mae_div_steps=9.166666666666666

[04-02-2022_01-49-31] DEBUG :: Experiment >> Refinement spread at run=3, level=2:
Root Mean Squared Errors: rmse_mchild=5.006995106848017, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515
Mean Absolute Errors: mae_mchild=4.249999999999997, mae_div_indices=0.0, mae_div_steps=0.6666666666666666

[04-02-2022_01-49-31] DEBUG :: Experiment >> Refinement spread at run=3, level=1:
Root Mean Squared Errors: rmse_mchild=2.8804969010040966, rmse_div_indices=1.1055415967851334, rmse_div_steps=4.529992641642294
Mean Absolute Errors: mae_mchild=2.4566115702479325, mae_div_indices=0.8888888888888888, mae_div_steps=3.8333333333333335

[04-02-2022_01-49-31] DEBUG :: Experiment >> Refinement spread at run=4, level=2:
Root Mean Squared Errors: rmse_mchild=7.511657606680431, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258
Mean Absolute Errors: mae_mchild=6.849999999999999, mae_div_indices=0.0, mae_div_steps=3.3333333333333335

[04-02-2022_01-49-31] DEBUG :: Experiment >> Refinement spread at run=4, level=1:
Root Mean Squared Errors: rmse_mchild=3.40860311680033, rmse_div_indices=5.236092690801669, rmse_div_steps=12.086206554948864
Mean Absolute Errors: mae_mchild=3.009637188208617, mae_div_indices=4.111111111111111, mae_div_steps=9.722222222222221

[04-02-2022_01-49-31] DEBUG :: Experiment >> Refinement spread at run=5, level=2:
Root Mean Squared Errors: rmse_mchild=7.611504450501227, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258
Mean Absolute Errors: mae_mchild=6.849999999999999, mae_div_indices=0.0, mae_div_steps=3.3333333333333335

[04-02-2022_01-49-31] DEBUG :: Experiment >> Refinement spread at run=5, level=1:
Root Mean Squared Errors: rmse_mchild=2.9347753361408366, rmse_div_indices=5.236092690801669, rmse_div_steps=11.522622675994096
Mean Absolute Errors: mae_mchild=2.6048752834467117, mae_div_indices=4.111111111111111, mae_div_steps=9.277777777777779

[04-02-2022_01-49-32] DEBUG :: Experiment >> Refinement spread at run=6, level=2:
Root Mean Squared Errors: rmse_mchild=7.247068372797374, rmse_div_indices=0.0, rmse_div_steps=4.618802153517006
Mean Absolute Errors: mae_mchild=6.699999999999998, mae_div_indices=0.0, mae_div_steps=2.6666666666666665

[04-02-2022_01-49-32] DEBUG :: Experiment >> Refinement spread at run=6, level=1:
Root Mean Squared Errors: rmse_mchild=2.589862228697958, rmse_div_indices=4.041451884327381, rmse_div_steps=8.870597499605086
Mean Absolute Errors: mae_mchild=2.2128099173553704, mae_div_indices=3.111111111111111, mae_div_steps=7.277777777777778

[04-02-2022_01-49-32] DEBUG :: Experiment >> Refinement spread at run=7, level=2:
Root Mean Squared Errors: rmse_mchild=5.701754116059372, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503
Mean Absolute Errors: mae_mchild=4.4499999999999975, mae_div_indices=0.0, mae_div_steps=1.3333333333333333

[04-02-2022_01-49-32] DEBUG :: Experiment >> Refinement spread at run=7, level=1:
Root Mean Squared Errors: rmse_mchild=2.107824365007437, rmse_div_indices=1.855921454276674, rmse_div_steps=4.645039169790594
Mean Absolute Errors: mae_mchild=1.7551652892561973, mae_div_indices=1.3333333333333333, mae_div_steps=3.7222222222222223

[04-02-2022_01-49-32] DEBUG :: Experiment >> Refinement spread at run=8, level=2:
Root Mean Squared Errors: rmse_mchild=5.23259018078045, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515
Mean Absolute Errors: mae_mchild=4.499999999999997, mae_div_indices=0.0, mae_div_steps=0.6666666666666666

[04-02-2022_01-49-32] DEBUG :: Experiment >> Refinement spread at run=8, level=1:
Root Mean Squared Errors: rmse_mchild=2.870977243131422, rmse_div_indices=1.1055415967851334, rmse_div_steps=4.529992641642294
Mean Absolute Errors: mae_mchild=2.3884297520661146, mae_div_indices=0.8888888888888888, mae_div_steps=3.8333333333333335

[04-02-2022_01-49-32] DEBUG :: Experiment >> Refinement spread at run=9, level=2:
Root Mean Squared Errors: rmse_mchild=7.586501169841073, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258
Mean Absolute Errors: mae_mchild=6.949999999999998, mae_div_indices=0.0, mae_div_steps=3.3333333333333335

[04-02-2022_01-49-32] DEBUG :: Experiment >> Refinement spread at run=9, level=1:
Root Mean Squared Errors: rmse_mchild=2.3802975289930917, rmse_div_indices=5.236092690801669, rmse_div_steps=10.739012472703852
Mean Absolute Errors: mae_mchild=2.0459183673469403, mae_div_indices=4.111111111111111, mae_div_steps=8.61111111111111

[04-02-2022_01-49-32] DEBUG :: Experiment >> Refinement spread at run=10, level=2:
Root Mean Squared Errors: rmse_mchild=5.057667446560716, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515
Mean Absolute Errors: mae_mchild=4.1999999999999975, mae_div_indices=0.0, mae_div_steps=0.6666666666666666

[04-02-2022_01-49-32] DEBUG :: Experiment >> Refinement spread at run=10, level=1:
Root Mean Squared Errors: rmse_mchild=2.8442253371691613, rmse_div_indices=1.1055415967851334, rmse_div_steps=4.351723796382303
Mean Absolute Errors: mae_mchild=2.4793388429752055, mae_div_indices=0.8888888888888888, mae_div_steps=3.7222222222222223

[04-02-2022_01-49-32] DEBUG :: Experiment >> Refinement spread at run=11, level=2:
Root Mean Squared Errors: rmse_mchild=5.478138369920933, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503
Mean Absolute Errors: mae_mchild=4.329999999999998, mae_div_indices=0.0, mae_div_steps=1.3333333333333333

[04-02-2022_01-49-32] DEBUG :: Experiment >> Refinement spread at run=11, level=1:
Root Mean Squared Errors: rmse_mchild=3.086351921252368, rmse_div_indices=1.855921454276674, rmse_div_steps=4.8498281756504875
Mean Absolute Errors: mae_mchild=2.3181818181818183, mae_div_indices=1.3333333333333333, mae_div_steps=3.611111111111111

[04-02-2022_01-49-32] DEBUG :: Experiment >> Refinement spread at run=12, level=2:
Root Mean Squared Errors: rmse_mchild=5.444263035526478, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503
Mean Absolute Errors: mae_mchild=4.499999999999997, mae_div_indices=0.0, mae_div_steps=1.3333333333333333

[04-02-2022_01-49-32] DEBUG :: Experiment >> Refinement spread at run=12, level=1:
Root Mean Squared Errors: rmse_mchild=3.209900425839041, rmse_div_indices=1.855921454276674, rmse_div_steps=5.453719423985392
Mean Absolute Errors: mae_mchild=2.459710743801654, mae_div_indices=1.3333333333333333, mae_div_steps=4.166666666666667

[04-02-2022_01-49-32] DEBUG :: Experiment >> Refinement spread at run=13, level=2:
Root Mean Squared Errors: rmse_mchild=5.387021440462251, rmse_div_indices=0.0, rmse_div_steps=1.7320508075688772
Mean Absolute Errors: mae_mchild=4.299999999999997, mae_div_indices=0.0, mae_div_steps=1.0

[04-02-2022_01-49-32] DEBUG :: Experiment >> Refinement spread at run=13, level=1:
Root Mean Squared Errors: rmse_mchild=3.770775782249589, rmse_div_indices=1.3333333333333333, rmse_div_steps=5.024246764994287
Mean Absolute Errors: mae_mchild=2.772727272727273, mae_div_indices=1.0, mae_div_steps=3.8333333333333335

[04-02-2022_01-49-32] DEBUG :: Experiment >> Refinement spread at run=14, level=2:
Root Mean Squared Errors: rmse_mchild=7.357988855658861, rmse_div_indices=0.0, rmse_div_steps=4.618802153517006
Mean Absolute Errors: mae_mchild=6.799999999999997, mae_div_indices=0.0, mae_div_steps=2.6666666666666665

[04-02-2022_01-49-32] DEBUG :: Experiment >> Refinement spread at run=14, level=1:
Root Mean Squared Errors: rmse_mchild=2.9681069877801036, rmse_div_indices=4.041451884327381, rmse_div_steps=8.876858177931599
Mean Absolute Errors: mae_mchild=2.592975206611569, mae_div_indices=3.111111111111111, mae_div_steps=7.277777777777778

[04-02-2022_01-49-33] DEBUG :: Experiment >> Refinement spread at run=15, level=2:
Root Mean Squared Errors: rmse_mchild=5.666127425323223, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503
Mean Absolute Errors: mae_mchild=4.749999999999998, mae_div_indices=0.0, mae_div_steps=1.3333333333333333

[04-02-2022_01-49-33] DEBUG :: Experiment >> Refinement spread at run=15, level=1:
Root Mean Squared Errors: rmse_mchild=3.221288667640964, rmse_div_indices=1.9364916731037085, rmse_div_steps=5.880169120772709
Mean Absolute Errors: mae_mchild=2.7057823129251686, mae_div_indices=1.4444444444444444, mae_div_steps=4.722222222222222

[04-02-2022_01-49-33] DEBUG :: Experiment >> Refinement spread at run=16, level=2:
Root Mean Squared Errors: rmse_mchild=6.596211033616191, rmse_div_indices=0.0, rmse_div_steps=3.4641016151377544
Mean Absolute Errors: mae_mchild=5.9499999999999975, mae_div_indices=0.0, mae_div_steps=2.0

[04-02-2022_01-49-33] DEBUG :: Experiment >> Refinement spread at run=16, level=1:
Root Mean Squared Errors: rmse_mchild=3.083505504834894, rmse_div_indices=3.3166247903554, rmse_div_steps=8.022104877565905
Mean Absolute Errors: mae_mchild=2.774793388429751, mae_div_indices=2.6666666666666665, mae_div_steps=6.722222222222222

[04-02-2022_01-49-33] DEBUG :: Experiment >> Refinement spread at run=17, level=2:
Root Mean Squared Errors: rmse_mchild=7.236021006050217, rmse_div_indices=0.0, rmse_div_steps=4.618802153517006
Mean Absolute Errors: mae_mchild=6.699999999999998, mae_div_indices=0.0, mae_div_steps=2.6666666666666665

[04-02-2022_01-49-33] DEBUG :: Experiment >> Refinement spread at run=17, level=1:
Root Mean Squared Errors: rmse_mchild=2.595639620849224, rmse_div_indices=4.041451884327381, rmse_div_steps=8.870597499605086
Mean Absolute Errors: mae_mchild=2.235537190082643, mae_div_indices=3.111111111111111, mae_div_steps=7.277777777777778

[04-02-2022_01-49-33] DEBUG :: Experiment >> Refinement spread at run=18, level=2:
Root Mean Squared Errors: rmse_mchild=5.448853090330109, rmse_div_indices=0.0, rmse_div_steps=1.7320508075688772
Mean Absolute Errors: mae_mchild=4.549999999999997, mae_div_indices=0.0, mae_div_steps=1.0

[04-02-2022_01-49-33] DEBUG :: Experiment >> Refinement spread at run=18, level=1:
Root Mean Squared Errors: rmse_mchild=2.453229866290458, rmse_div_indices=1.3333333333333333, rmse_div_steps=4.329325069286846
Mean Absolute Errors: mae_mchild=2.0051652892561975, mae_div_indices=1.0, mae_div_steps=3.388888888888889

[04-02-2022_01-49-33] DEBUG :: Experiment >> Refinement spread at run=19, level=2:
Root Mean Squared Errors: rmse_mchild=5.215361924162117, rmse_div_indices=0.0, rmse_div_steps=1.7320508075688772
Mean Absolute Errors: mae_mchild=4.1999999999999975, mae_div_indices=0.0, mae_div_steps=1.0

[04-02-2022_01-49-33] DEBUG :: Experiment >> Refinement spread at run=19, level=1:
Root Mean Squared Errors: rmse_mchild=1.8530045960703532, rmse_div_indices=1.3333333333333333, rmse_div_steps=3.6846151615723572
Mean Absolute Errors: mae_mchild=1.525826446280992, mae_div_indices=1.0, mae_div_steps=2.8333333333333335

[04-02-2022_01-49-33] DEBUG :: Experiment >> Refinement spread at run=20, level=2:
Root Mean Squared Errors: rmse_mchild=5.050742519669756, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515
Mean Absolute Errors: mae_mchild=4.249999999999997, mae_div_indices=0.0, mae_div_steps=0.6666666666666666

[04-02-2022_01-49-33] DEBUG :: Experiment >> Refinement spread at run=20, level=1:
Root Mean Squared Errors: rmse_mchild=2.8797795341465364, rmse_div_indices=1.1055415967851334, rmse_div_steps=4.529992641642294
Mean Absolute Errors: mae_mchild=2.4566115702479325, mae_div_indices=0.8888888888888888, mae_div_steps=3.8333333333333335

[04-02-2022_01-49-33] DEBUG :: Experiment >> Refinement spread at run=21, level=2:
Root Mean Squared Errors: rmse_mchild=7.499333303701069, rmse_div_indices=0.0, rmse_div_steps=4.618802153517006
Mean Absolute Errors: mae_mchild=6.899999999999997, mae_div_indices=0.0, mae_div_steps=2.6666666666666665

[04-02-2022_01-49-33] DEBUG :: Experiment >> Refinement spread at run=21, level=1:
Root Mean Squared Errors: rmse_mchild=2.6719289933406793, rmse_div_indices=4.041451884327381, rmse_div_steps=8.870597499605086
Mean Absolute Errors: mae_mchild=2.320247933884296, mae_div_indices=3.111111111111111, mae_div_steps=7.277777777777778

[04-02-2022_01-49-33] DEBUG :: Experiment >> Refinement spread at run=22, level=2:
Root Mean Squared Errors: rmse_mchild=6.684683986547157, rmse_div_indices=0.0, rmse_div_steps=3.4641016151377544
Mean Absolute Errors: mae_mchild=6.049999999999999, mae_div_indices=0.0, mae_div_steps=2.0

[04-02-2022_01-49-33] DEBUG :: Experiment >> Refinement spread at run=22, level=1:
Root Mean Squared Errors: rmse_mchild=2.219080829508281, rmse_div_indices=3.032234233110042, rmse_div_steps=6.7097565778002215
Mean Absolute Errors: mae_mchild=1.9064625850340147, mae_div_indices=2.3333333333333335, mae_div_steps=5.611111111111111

[04-02-2022_01-49-34] DEBUG :: Experiment >> Refinement spread at run=23, level=2:
Root Mean Squared Errors: rmse_mchild=7.247413331665304, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258
Mean Absolute Errors: mae_mchild=6.649999999999999, mae_div_indices=0.0, mae_div_steps=3.3333333333333335

[04-02-2022_01-49-34] DEBUG :: Experiment >> Refinement spread at run=23, level=1:
Root Mean Squared Errors: rmse_mchild=3.4801428933052616, rmse_div_indices=5.236092690801669, rmse_div_steps=12.205133255224123
Mean Absolute Errors: mae_mchild=2.801020408163264, mae_div_indices=4.111111111111111, mae_div_steps=9.722222222222221

[04-02-2022_01-49-34] DEBUG :: Experiment >> Refinement spread at run=24, level=2:
Root Mean Squared Errors: rmse_mchild=6.043177971895249, rmse_div_indices=0.0, rmse_div_steps=3.4641016151377544
Mean Absolute Errors: mae_mchild=5.599999999999997, mae_div_indices=0.0, mae_div_steps=2.0

[04-02-2022_01-49-34] DEBUG :: Experiment >> Refinement spread at run=24, level=1:
Root Mean Squared Errors: rmse_mchild=3.0630006758888997, rmse_div_indices=3.3166247903554, rmse_div_steps=8.022104877565905
Mean Absolute Errors: mae_mchild=2.68388429752066, mae_div_indices=2.6666666666666665, mae_div_steps=6.722222222222222

[04-02-2022_01-49-34] DEBUG :: Experiment >> Refinement spread at run=25, level=2:
Root Mean Squared Errors: rmse_mchild=5.131276644266999, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515
Mean Absolute Errors: mae_mchild=4.349999999999997, mae_div_indices=0.0, mae_div_steps=0.6666666666666666

[04-02-2022_01-49-34] DEBUG :: Experiment >> Refinement spread at run=25, level=1:
Root Mean Squared Errors: rmse_mchild=3.032494472752212, rmse_div_indices=1.1055415967851334, rmse_div_steps=4.529992641642294
Mean Absolute Errors: mae_mchild=2.5702479338842963, mae_div_indices=0.8888888888888888, mae_div_steps=3.8333333333333335

[04-02-2022_01-49-34] DEBUG :: Experiment >> Refinement spread at run=26, level=2:
Root Mean Squared Errors: rmse_mchild=5.1730068625510235, rmse_div_indices=0.0, rmse_div_steps=1.7320508075688772
Mean Absolute Errors: mae_mchild=4.1999999999999975, mae_div_indices=0.0, mae_div_steps=1.0

[04-02-2022_01-49-34] DEBUG :: Experiment >> Refinement spread at run=26, level=1:
Root Mean Squared Errors: rmse_mchild=1.8538406637603926, rmse_div_indices=1.3333333333333333, rmse_div_steps=3.6846151615723572
Mean Absolute Errors: mae_mchild=1.5072314049586781, mae_div_indices=1.0, mae_div_steps=2.8333333333333335

[04-02-2022_01-49-34] DEBUG :: Experiment >> Refinement spread at run=27, level=2:
Root Mean Squared Errors: rmse_mchild=5.302829433425139, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515
Mean Absolute Errors: mae_mchild=4.599999999999997, mae_div_indices=0.0, mae_div_steps=0.6666666666666666

[04-02-2022_01-49-34] DEBUG :: Experiment >> Refinement spread at run=27, level=1:
Root Mean Squared Errors: rmse_mchild=1.7674016741210672, rmse_div_indices=1.1055415967851334, rmse_div_steps=2.706730294818619
Mean Absolute Errors: mae_mchild=1.4421487603305785, mae_div_indices=0.8888888888888888, mae_div_steps=2.0277777777777777

[04-02-2022_01-49-34] DEBUG :: Experiment >> Refinement spread at run=28, level=2:
Root Mean Squared Errors: rmse_mchild=7.538899123877436, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258
Mean Absolute Errors: mae_mchild=6.899999999999999, mae_div_indices=0.0, mae_div_steps=3.3333333333333335

[04-02-2022_01-49-34] DEBUG :: Experiment >> Refinement spread at run=28, level=1:
Root Mean Squared Errors: rmse_mchild=2.3551578943847904, rmse_div_indices=5.236092690801669, rmse_div_steps=10.739012472703852
Mean Absolute Errors: mae_mchild=1.9982993197278929, mae_div_indices=4.111111111111111, mae_div_steps=8.61111111111111

[04-02-2022_01-49-34] DEBUG :: Experiment >> Refinement spread at run=29, level=2:
Root Mean Squared Errors: rmse_mchild=5.056678751908212, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515
Mean Absolute Errors: mae_mchild=4.349999999999997, mae_div_indices=0.0, mae_div_steps=0.6666666666666666

[04-02-2022_01-49-34] DEBUG :: Experiment >> Refinement spread at run=29, level=1:
Root Mean Squared Errors: rmse_mchild=1.614996225976196, rmse_div_indices=1.1055415967851334, rmse_div_steps=2.706730294818619
Mean Absolute Errors: mae_mchild=1.3388429752066116, mae_div_indices=0.8888888888888888, mae_div_steps=2.0277777777777777

[04-02-2022_01-49-34] DEBUG :: Experiment >> Refinement spread at run=30, level=2:
Root Mean Squared Errors: rmse_mchild=5.648893696999439, rmse_div_indices=0.0, rmse_div_steps=1.7320508075688772
Mean Absolute Errors: mae_mchild=4.549999999999997, mae_div_indices=0.0, mae_div_steps=1.0

[04-02-2022_01-49-34] DEBUG :: Experiment >> Refinement spread at run=30, level=1:
Root Mean Squared Errors: rmse_mchild=2.9691509624834715, rmse_div_indices=1.3333333333333333, rmse_div_steps=4.418238713937187
Mean Absolute Errors: mae_mchild=2.2076446280991724, mae_div_indices=1.0, mae_div_steps=3.2777777777777777

[04-02-2022_01-49-35] DEBUG :: Experiment >> Refinement spread at run=31, level=2:
Root Mean Squared Errors: rmse_mchild=5.934644049983115, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503
Mean Absolute Errors: mae_mchild=5.399999999999997, mae_div_indices=0.0, mae_div_steps=1.3333333333333333

[04-02-2022_01-49-35] DEBUG :: Experiment >> Refinement spread at run=31, level=1:
Root Mean Squared Errors: rmse_mchild=2.4233603982558405, rmse_div_indices=1.855921454276674, rmse_div_steps=4.766054739276268
Mean Absolute Errors: mae_mchild=2.038223140495867, mae_div_indices=1.3333333333333333, mae_div_steps=3.9444444444444446

[04-02-2022_01-49-35] DEBUG :: Experiment >> Refinement spread at run=32, level=2:
Root Mean Squared Errors: rmse_mchild=5.099019513592784, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515
Mean Absolute Errors: mae_mchild=4.499999999999997, mae_div_indices=0.0, mae_div_steps=0.6666666666666666

[04-02-2022_01-49-35] DEBUG :: Experiment >> Refinement spread at run=32, level=1:
Root Mean Squared Errors: rmse_mchild=2.100459906349516, rmse_div_indices=1.1055415967851334, rmse_div_steps=3.2818947779192027
Mean Absolute Errors: mae_mchild=1.75, mae_div_indices=0.8888888888888888, mae_div_steps=2.4722222222222223

[04-02-2022_01-49-35] DEBUG :: Experiment >> Refinement spread at run=33, level=2:
Root Mean Squared Errors: rmse_mchild=7.411477585475112, rmse_div_indices=0.0, rmse_div_steps=4.618802153517006
Mean Absolute Errors: mae_mchild=6.849999999999997, mae_div_indices=0.0, mae_div_steps=2.6666666666666665

[04-02-2022_01-49-35] DEBUG :: Experiment >> Refinement spread at run=33, level=1:
Root Mean Squared Errors: rmse_mchild=2.858174806260192, rmse_div_indices=4.041451884327381, rmse_div_steps=8.876858177931599
Mean Absolute Errors: mae_mchild=2.524793388429751, mae_div_indices=3.111111111111111, mae_div_steps=7.277777777777778

[04-02-2022_01-49-35] DEBUG :: Experiment >> Refinement spread at run=34, level=2:
Root Mean Squared Errors: rmse_mchild=7.887014644337867, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258
Mean Absolute Errors: mae_mchild=7.199999999999998, mae_div_indices=0.0, mae_div_steps=3.3333333333333335

[04-02-2022_01-49-35] DEBUG :: Experiment >> Refinement spread at run=34, level=1:
Root Mean Squared Errors: rmse_mchild=2.86656844740244, rmse_div_indices=5.236092690801669, rmse_div_steps=11.275280237956148
Mean Absolute Errors: mae_mchild=2.5334467120181405, mae_div_indices=4.111111111111111, mae_div_steps=9.055555555555555

[04-02-2022_01-49-35] DEBUG :: Experiment >> Refinement spread at run=35, level=2:
Root Mean Squared Errors: rmse_mchild=6.774215821775977, rmse_div_indices=0.0, rmse_div_steps=3.4641016151377544
Mean Absolute Errors: mae_mchild=6.249999999999997, mae_div_indices=0.0, mae_div_steps=2.0

[04-02-2022_01-49-35] DEBUG :: Experiment >> Refinement spread at run=35, level=1:
Root Mean Squared Errors: rmse_mchild=1.52247284170162, rmse_div_indices=3.3166247903554, rmse_div_steps=5.903741751352837
Mean Absolute Errors: mae_mchild=1.1849173553719003, mae_div_indices=2.6666666666666665, mae_div_steps=4.944444444444445

[04-02-2022_01-49-35] DEBUG :: Experiment >> Refinement spread at run=36, level=2:
Root Mean Squared Errors: rmse_mchild=5.518151864528556, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503
Mean Absolute Errors: mae_mchild=4.329999999999998, mae_div_indices=0.0, mae_div_steps=1.3333333333333333

[04-02-2022_01-49-35] DEBUG :: Experiment >> Refinement spread at run=36, level=1:
Root Mean Squared Errors: rmse_mchild=2.9489019528076423, rmse_div_indices=1.855921454276674, rmse_div_steps=4.8498281756504875
Mean Absolute Errors: mae_mchild=2.2386363636363638, mae_div_indices=1.3333333333333333, mae_div_steps=3.611111111111111

[04-02-2022_01-49-35] DEBUG :: Experiment >> Refinement spread at run=37, level=2:
Root Mean Squared Errors: rmse_mchild=5.781003373117851, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503
Mean Absolute Errors: mae_mchild=4.499999999999997, mae_div_indices=0.0, mae_div_steps=1.3333333333333333

[04-02-2022_01-49-35] DEBUG :: Experiment >> Refinement spread at run=37, level=1:
Root Mean Squared Errors: rmse_mchild=1.7577308578377515, rmse_div_indices=1.855921454276674, rmse_div_steps=3.9886993145914396
Mean Absolute Errors: mae_mchild=1.4142561983471065, mae_div_indices=1.3333333333333333, mae_div_steps=3.1666666666666665

[04-02-2022_01-49-35] DEBUG :: Experiment >> Refinement spread at run=38, level=2:
Root Mean Squared Errors: rmse_mchild=8.406247676579603, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258
Mean Absolute Errors: mae_mchild=7.599999999999999, mae_div_indices=0.0, mae_div_steps=3.3333333333333335

[04-02-2022_01-49-35] DEBUG :: Experiment >> Refinement spread at run=38, level=1:
Root Mean Squared Errors: rmse_mchild=3.09918856568684, rmse_div_indices=5.236092690801669, rmse_div_steps=11.42335570467608
Mean Absolute Errors: mae_mchild=2.7477324263038545, mae_div_indices=4.111111111111111, mae_div_steps=9.166666666666666

[04-02-2022_01-49-35] DEBUG :: Experiment >> Refinement spread at run=39, level=2:
Root Mean Squared Errors: rmse_mchild=6.543317201542348, rmse_div_indices=0.0, rmse_div_steps=3.4641016151377544
Mean Absolute Errors: mae_mchild=5.999999999999998, mae_div_indices=0.0, mae_div_steps=2.0

[04-02-2022_01-49-36] DEBUG :: Experiment >> Refinement spread at run=39, level=1:
Root Mean Squared Errors: rmse_mchild=1.3486576848928, rmse_div_indices=3.032234233110042, rmse_div_steps=5.891967224771178
Mean Absolute Errors: mae_mchild=1.0663265306122447, mae_div_indices=2.3333333333333335, mae_div_steps=4.833333333333333

[04-02-2022_01-49-36] DEBUG :: Experiment >> Refinement spread at run=40, level=2:
Root Mean Squared Errors: rmse_mchild=6.423783931609156, rmse_div_indices=0.0, rmse_div_steps=3.4641016151377544
Mean Absolute Errors: mae_mchild=5.899999999999999, mae_div_indices=0.0, mae_div_steps=2.0

[04-02-2022_01-49-36] DEBUG :: Experiment >> Refinement spread at run=40, level=1:
Root Mean Squared Errors: rmse_mchild=2.0501783562697686, rmse_div_indices=3.032234233110042, rmse_div_steps=6.7097565778002215
Mean Absolute Errors: mae_mchild=1.739795918367348, mae_div_indices=2.3333333333333335, mae_div_steps=5.611111111111111

[04-02-2022_01-49-36] DEBUG :: Experiment >> Refinement spread at run=41, level=2:
Root Mean Squared Errors: rmse_mchild=5.315072906367324, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515
Mean Absolute Errors: mae_mchild=4.649999999999997, mae_div_indices=0.0, mae_div_steps=0.6666666666666666

[04-02-2022_01-49-36] DEBUG :: Experiment >> Refinement spread at run=41, level=1:
Root Mean Squared Errors: rmse_mchild=1.759199550321464, rmse_div_indices=1.1055415967851334, rmse_div_steps=2.706730294818619
Mean Absolute Errors: mae_mchild=1.5030991735537191, mae_div_indices=0.8888888888888888, mae_div_steps=2.0277777777777777

[04-02-2022_01-49-36] DEBUG :: Experiment >> Refinement spread at run=42, level=2:
Root Mean Squared Errors: rmse_mchild=8.302108166002174, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258
Mean Absolute Errors: mae_mchild=7.499999999999998, mae_div_indices=0.0, mae_div_steps=3.3333333333333335

[04-02-2022_01-49-36] DEBUG :: Experiment >> Refinement spread at run=42, level=1:
Root Mean Squared Errors: rmse_mchild=2.3551578943847904, rmse_div_indices=5.236092690801669, rmse_div_steps=10.739012472703852
Mean Absolute Errors: mae_mchild=1.9982993197278929, mae_div_indices=4.111111111111111, mae_div_steps=8.61111111111111

[04-02-2022_01-49-36] DEBUG :: Experiment >> Refinement spread at run=43, level=2:
Root Mean Squared Errors: rmse_mchild=4.950757517794624, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515
Mean Absolute Errors: mae_mchild=4.149999999999997, mae_div_indices=0.0, mae_div_steps=0.6666666666666666

[04-02-2022_01-49-36] DEBUG :: Experiment >> Refinement spread at run=43, level=1:
Root Mean Squared Errors: rmse_mchild=2.8783442640655976, rmse_div_indices=1.1055415967851334, rmse_div_steps=4.529992641642294
Mean Absolute Errors: mae_mchild=2.43388429752066, mae_div_indices=0.8888888888888888, mae_div_steps=3.8333333333333335

[04-02-2022_01-49-36] DEBUG :: Experiment >> Refinement spread at run=44, level=2:
Root Mean Squared Errors: rmse_mchild=5.962382074305536, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503
Mean Absolute Errors: mae_mchild=5.349999999999997, mae_div_indices=0.0, mae_div_steps=1.3333333333333333

[04-02-2022_01-49-36] DEBUG :: Experiment >> Refinement spread at run=44, level=1:
Root Mean Squared Errors: rmse_mchild=2.751549150437391, rmse_div_indices=1.855921454276674, rmse_div_steps=4.912427551063165
Mean Absolute Errors: mae_mchild=2.2386363636363638, mae_div_indices=1.3333333333333333, mae_div_steps=3.7222222222222223

[04-02-2022_01-49-36] DEBUG :: Experiment >> Refinement spread at run=45, level=2:
Root Mean Squared Errors: rmse_mchild=6.675702210254737, rmse_div_indices=0.0, rmse_div_steps=3.4641016151377544
Mean Absolute Errors: mae_mchild=6.099999999999999, mae_div_indices=0.0, mae_div_steps=2.0

[04-02-2022_01-49-36] DEBUG :: Experiment >> Refinement spread at run=45, level=1:
Root Mean Squared Errors: rmse_mchild=1.507069508483719, rmse_div_indices=3.032234233110042, rmse_div_steps=5.964594612284131
Mean Absolute Errors: mae_mchild=1.198979591836734, mae_div_indices=2.3333333333333335, mae_div_steps=4.944444444444445

[04-02-2022_01-49-36] DEBUG :: Experiment >> Refinement spread at run=46, level=2:
Root Mean Squared Errors: rmse_mchild=5.707889277132134, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503
Mean Absolute Errors: mae_mchild=4.499999999999997, mae_div_indices=0.0, mae_div_steps=1.3333333333333333

[04-02-2022_01-49-36] DEBUG :: Experiment >> Refinement spread at run=46, level=1:
Root Mean Squared Errors: rmse_mchild=2.7308215547040717, rmse_div_indices=1.855921454276674, rmse_div_steps=4.8498281756504875
Mean Absolute Errors: mae_mchild=2.0795454545454546, mae_div_indices=1.3333333333333333, mae_div_steps=3.611111111111111

[04-02-2022_01-49-36] DEBUG :: Experiment >> Refinement spread at run=47, level=2:
Root Mean Squared Errors: rmse_mchild=5.621387729022077, rmse_div_indices=0.0, rmse_div_steps=1.7320508075688772
Mean Absolute Errors: mae_mchild=4.6999999999999975, mae_div_indices=0.0, mae_div_steps=1.0

[04-02-2022_01-49-36] DEBUG :: Experiment >> Refinement spread at run=47, level=1:
Root Mean Squared Errors: rmse_mchild=3.383197116230848, rmse_div_indices=1.3333333333333333, rmse_div_steps=5.024246764994287
Mean Absolute Errors: mae_mchild=2.590909090909091, mae_div_indices=1.0, mae_div_steps=3.8333333333333335

[04-02-2022_01-49-37] DEBUG :: Experiment >> Refinement spread at run=48, level=2:
Root Mean Squared Errors: rmse_mchild=4.797916214358061, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515
Mean Absolute Errors: mae_mchild=4.099999999999997, mae_div_indices=0.0, mae_div_steps=0.6666666666666666

[04-02-2022_01-49-37] DEBUG :: Experiment >> Refinement spread at run=48, level=1:
Root Mean Squared Errors: rmse_mchild=1.97498561559779, rmse_div_indices=1.1055415967851334, rmse_div_steps=3.2818947779192027
Mean Absolute Errors: mae_mchild=1.5681818181818181, mae_div_indices=0.8888888888888888, mae_div_steps=2.4722222222222223

[04-02-2022_01-49-37] DEBUG :: Experiment >> Refinement spread at run=49, level=2:
Root Mean Squared Errors: rmse_mchild=7.1923570545406035, rmse_div_indices=0.0, rmse_div_steps=4.618802153517006
Mean Absolute Errors: mae_mchild=6.649999999999999, mae_div_indices=0.0, mae_div_steps=2.6666666666666665

[04-02-2022_01-49-37] DEBUG :: Experiment >> Refinement spread at run=49, level=1:
Root Mean Squared Errors: rmse_mchild=2.6680598547314758, rmse_div_indices=4.041451884327381, rmse_div_steps=8.876858177931599
Mean Absolute Errors: mae_mchild=2.2355371900826437, mae_div_indices=3.111111111111111, mae_div_steps=7.277777777777778

[04-02-2022_01-49-37] INFO :: Experiment >> 

          ========================================          
                    Experimental Results                    
          ========================================          

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
                     Concatenated Plans                     

 RU  AL  LE  AC  CF       GT       ST       OT        TT       LT        CT       WT         RSS         VMS  QL_SCORE  LT_SCORE  CT_SCORE  AW_SCORE  AME_SCORE  LT_GRADE  CT_GRADE  AW_GRADE  AME_GRADE    GRADE
  0   3  20  20 1.0 1.144111 0.708233 0.000000  1.852345 1.852345  1.852345 1.852345  243.996094  232.277344  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
  0   2  44  44 1.0 3.538977 1.057785 0.015585  4.612347 4.427501  6.464691 3.246544  266.226562  258.453125  0.954545  1.000000  0.879653       1.0        1.0  0.954545  0.839669  0.954545   0.954545 0.954545
  0   1  73  73 1.0 7.297154 1.400352 0.030179  8.727685 6.226732 15.192376 1.932259  257.492188  246.171875  0.917808  0.893199  0.677777       1.0        1.0  0.819785  0.622070  0.917808   0.917808 0.885134
  1   3  20  20 1.0 1.140063 0.708578 0.000000  1.848641 1.848641  1.848641 1.848641  248.773438  237.808594  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
  1   2  44  44 1.0 3.517657 0.869672 0.017012  4.404341 4.244863  6.252982 3.140641  268.152344  260.707031  0.954545  1.000000  0.891635       1.0        1.0  0.954545  0.851106  0.954545   0.954545 0.954545
  1   1  75  75 1.0 7.478045 1.404714 0.031908  8.914667 6.042236 15.167649 1.929230  262.046875  253.175781  0.893333  0.904737  0.678072       1.0        1.0  0.808232  0.605745  0.893333   0.893333 0.864966
  2   3  20  20 1.0 1.134274 0.802848 0.000000  1.937122 1.937122  1.937122 1.937122  256.332031  244.695312  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
  2   2  42  42 1.0 3.499034 1.185134 0.016178  4.700346 5.615499  6.637469 3.332754  304.621094  302.207031  1.000000  0.936009  0.870614       1.0        1.0  0.936009  0.870614  1.000000   1.000000 0.978670
  2   1  71  71 1.0 7.268264 1.383832 0.030150  8.682246 7.522109 15.319714 1.948811  295.953125  288.878906  0.943662  0.832025  0.676268       1.0        1.0  0.785151  0.638169  0.943662   0.943662 0.890825
  3   3  20  20 1.0 1.144992 0.831939 0.000000  1.976930 1.976930  1.976930 1.976930  284.285156  272.769531  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
  3   2  44  44 1.0 3.554467 0.902453 0.016869  4.473790 4.437033  6.450720 3.239566  311.257812  304.046875  0.954545  1.000000  0.880411       1.0        1.0  0.954545  0.840393  0.954545   0.954545 0.954545
  3   1  73  73 1.0 7.332345 1.520053 0.031666  8.884064 6.264330 15.334784 1.950158  307.316406  296.855469  0.917808  0.890965  0.676091       1.0        1.0  0.817735  0.620522  0.917808   0.917808 0.884450
  4   3  20  20 1.0 1.141363 0.692998 0.000000  1.834362 1.834362  1.834362 1.834362  308.578125  297.761719  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
  4   2  42  42 1.0 3.518030 1.738759 0.015208  5.271997 6.038099  7.106358 3.567507  352.042969  350.121094  1.000000  0.905008  0.848783       1.0        1.0  0.905008  0.848783  1.000000   1.000000 0.968336
  4   1  71  71 1.0 7.245359 1.345434 0.029321  8.620114 7.938148 15.726472 1.999445  339.828125  329.339844  0.943662  0.817130  0.671558       1.0        1.0  0.771094  0.633724  0.943662   0.943662 0.886139
  5   3  20  20 1.0 1.136424 0.915469 0.000000  2.051893 2.051893  2.051893 2.051893  332.503906  321.625000  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
  5   2  42  42 1.0 3.530099 1.298385 0.015922  4.844405 5.819215  6.896299 3.462357  369.589844  367.761719  1.000000  0.920165  0.858125       1.0        1.0  0.920165  0.858125  1.000000   1.000000 0.973388
  5   1  71  71 1.0 7.244782 1.626898 0.029795  8.901476 7.726987 15.797774 2.008699  363.394531  356.175781  0.943662  0.824482  0.670750       1.0        1.0  0.778033  0.632961  0.943662   0.943662 0.888452
  6   3  20  20 1.0 1.141857 0.767578 0.000000  1.909435 1.909435  1.909435 1.909435  354.355469  343.175781  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
  6   2  44  44 1.0 3.641749 1.480207 0.016269  5.138225 5.686368  7.047660 3.538069  385.421875  382.886719  0.954545  0.930282  0.851328       1.0        1.0  0.887996  0.812632  0.954545   0.954545 0.932362
  6   1  73  73 1.0 7.321445 1.319654 0.030944  8.672043 7.587463 15.719703 2.015779  375.585938  365.480469  0.917808  0.829573  0.671635       1.0        1.0  0.761389  0.616432  0.917808   0.917808 0.865668
  7   3  20  20 1.0 1.140589 0.877164 0.000000  2.017753 2.017753  2.017753 2.017753  368.742188  357.644531  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
  7   2  44  44 1.0 3.571131 1.053169 0.015848  4.640148 4.736084  6.657901 3.343050  390.667969  381.488281  0.954545  1.000000  0.869584       1.0        1.0  0.954545  0.830058  0.954545   0.954545 0.954545
  7   1  75  75 1.0 7.501068 1.194695 0.031380  8.727144 6.486631 15.385044 1.956886  384.507812  375.234375  0.893333  0.878471  0.675500       1.0        1.0  0.784767  0.603447  0.893333   0.893333 0.857145
  8   3  20  20 1.0 1.139442 0.877951 0.000000  2.017393 2.017393  2.017393 2.017393  382.878906  371.988281  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
  8   2  44  44 1.0 3.517793 0.798052 0.016952  4.332796 4.370798  6.350189 3.189328  408.035156  400.644531  0.954545  1.000000  0.885999       1.0        1.0  0.954545  0.845727  0.954545   0.954545 0.954545
  8   1  73  73 1.0 7.258245 1.659497 0.031549  8.949290 6.286005 15.299479 1.967604  402.375000  393.042969  0.917808  0.889694  0.676507       1.0        1.0  0.816568  0.620904  0.917808   0.917808 0.884062
  9   3  20  20 1.0 1.142328 0.791329 0.000000  1.933658 1.933658  1.933658 1.933658  398.945312  387.859375  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
  9   2  42  42 1.0 3.529792 1.321037 0.014487  4.865316 5.652822  6.798974 3.413792  432.808594  429.601562  1.000000  0.932962  0.862685       1.0        1.0  0.932962  0.862685  1.000000   1.000000 0.977654
  9   1  69  69 1.0 7.033943 1.631551 0.029792  8.695286 7.739246 15.494260 1.970313  426.687500  420.359375  0.971014  0.824044  0.674227       1.0        1.0  0.800159  0.654684  0.971014   0.971014 0.914063
 10   3  20  20 1.0 1.144924 0.748168 0.000000  1.893092 1.893092  1.893092 1.893092  415.527344  404.773438  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 10   2  44  44 1.0 3.539608 1.244775 0.016087  4.800470 4.493198  6.693562 3.360939  440.496094  433.378906  0.954545  1.000000  0.867806       1.0        1.0  0.954545  0.828360  0.954545   0.954545 0.954545
 10   1  73  73 1.0 7.248782 1.134697 0.032273  8.415752 6.249471 15.109314 1.922292  433.277344  424.109375  0.917808  0.891843  0.678771       1.0        1.0  0.818541  0.622982  0.917808   0.917808 0.884719
 11   3  20  20 1.0 1.141510 0.843215 0.000000  1.984724 1.984724  1.984724 1.984724  431.910156  421.554688  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 11   2  44  44 1.0 3.576229 1.173320 0.016157  4.765706 4.927090  6.750430 3.389244  452.449219  443.867188  0.954545  1.000000  0.865019       1.0        1.0  0.954545  0.825700  0.954545   0.954545 0.954545
 11   1  77  77 1.0 7.740066 2.037804 0.031710  9.809580 6.678086 16.560010 2.103376  452.050781  444.640625  0.870130  0.868575  0.662397       1.0        1.0  0.755773  0.576371  0.870130   0.870130 0.832011
 12   3  20  20 1.0 1.140913 0.791755 0.000000  1.932668 1.932668  1.932668 1.932668  444.175781  433.292969  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 12   2  44  44 1.0 3.587893 0.923991 0.016184  4.528068 4.678176  6.460736 3.244684  470.164062  461.527344  0.954545  1.000000  0.879867       1.0        1.0  0.954545  0.839873  0.954545   0.954545 0.954545
 12   1  79  79 1.0 7.953910 2.183652 0.031491 10.169053 6.655910 16.629789 2.112837  467.425781  460.160156  0.848101  0.869684  0.661658       1.0        1.0  0.737580  0.561153  0.848101   0.848101 0.811261
 13   3  20  20 1.0 1.140043 0.751503 0.000000  1.891546 1.891546  1.891546 1.891546  461.835938  451.757812  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 13   2  44  44 1.0 3.561060 1.208011 0.016466  4.785538 4.451525  6.677084 3.353233  486.273438  477.832031  0.954545  1.000000  0.868625       1.0        1.0  0.954545  0.829142  0.954545   0.954545 0.954545
 13   1  77  77 1.0 7.759613 1.581045 0.031192  9.371850 6.465245 16.048934 2.040126  481.808594  474.992188  0.870130  0.879623  0.667939       1.0        1.0  0.765386  0.581194  0.870130   0.870130 0.835215
 14   3  20  20 1.0 1.141856 0.900816 0.000000  2.042673 2.042673  2.042673 2.042673  476.554688  465.937500  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 14   2  44  44 1.0 3.617466 1.765711 0.016812  5.399988 5.944209  7.442661 3.735454  514.566406  513.210938  0.954545  0.911300  0.835069       1.0        1.0  0.869877  0.797112  0.954545   0.954545 0.926323
 14   1  73  73 1.0 7.318966 1.478368 0.031099  8.828433 7.851965 16.271094 2.067229  502.437500  495.519531  0.917808  0.820082  0.665502       1.0        1.0  0.752678  0.610803  0.917808   0.917808 0.862765
 15   3  20  20 1.0 1.143274 0.945409 0.000000  2.088682 2.088682  2.088682 2.088682  496.769531  486.527344  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 15   2  42  42 1.0 3.365844 1.082429 0.016302  4.464575 4.940833  6.553258 3.291050  522.316406  514.785156  1.000000  1.000000  0.874943       1.0        1.0  1.000000  0.874943  1.000000   1.000000 1.000000
 15   1  75  75 1.0 7.530057 1.595542 0.030578  9.156176 6.695109 15.709434 1.997713  516.808594  511.269531  0.893333  0.867730  0.671752       1.0        1.0  0.775172  0.600099  0.893333   0.893333 0.853946
 16   3  20  20 1.0 1.146171 0.774357 0.000000  1.920528 1.920528  1.920528 1.920528  512.144531  502.250000  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 16   2  44  44 1.0 3.580739 1.426426 0.016543  5.023707 5.489248  6.944236 3.486581  539.761719  531.109375  0.954545  0.946866  0.855934       1.0        1.0  0.903826  0.817028  0.954545   0.954545 0.937639
 16   1  73  73 1.0 7.326562 1.799014 0.031225  9.156802 7.392794 16.101037 2.046407  530.949219  525.167969  0.917808  0.837016  0.667363       1.0        1.0  0.768220  0.612512  0.917808   0.917808 0.867946
 17   3  20  20 1.0 1.141729 0.782789 0.000000  1.924518 1.924518  1.924518 1.924518  526.421875  516.527344  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 17   2  44  44 1.0 3.614618 1.437316 0.015866  5.067800 5.446166  6.992317 3.510455  561.761719  560.679688  0.954545  0.950782  0.853773       1.0        1.0  0.907565  0.814965  0.954545   0.954545 0.938885
 17   1  73  73 1.0 7.346012 1.546957 0.031768  8.924736 7.680383 15.917054 2.023821  550.492188  543.957031  0.917808  0.826161  0.669407       1.0        1.0  0.758257  0.614388  0.917808   0.917808 0.864625
 18   3  20  20 1.0 1.143632 0.816574 0.000000  1.960206 1.960206  1.960206 1.960206  544.843750  534.394531  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 18   2  44  44 1.0 3.541261 1.197491 0.016002  4.754754 4.505811  6.714960 3.371591  569.632812  561.800781  0.954545  1.000000  0.866750       1.0        1.0  0.954545  0.827353  0.954545   0.954545 0.954545
 18   1  73  73 1.0 7.243249 1.161977 0.030446  8.435672 6.249417 15.150632 1.927224  563.597656  555.375000  0.917808  0.891846  0.678276       1.0        1.0  0.818544  0.622527  0.917808   0.917808 0.884720
 19   3  20  20 1.0 1.139388 0.735404 0.000000  1.874792 1.874792  1.874792 1.874792  560.910156  550.523438  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 19   2  44  44 1.0 3.560183 1.323392 0.016181  4.899756 4.427278  6.774548 3.401610  585.648438  578.183594  0.954545  1.000000  0.863854       1.0        1.0  0.954545  0.824588  0.954545   0.954545 0.954545
 19   1  71  71 1.0 7.059824 1.117443 0.030030  8.207297 6.169295 14.981845 1.906228  580.527344  570.660156  0.943662  0.896685  0.680311       1.0        1.0  0.846168  0.641983  0.943662   0.943662 0.911164
 20   3  20  20 1.0 1.132584 0.745614 0.000000  1.878198 1.878198  1.878198 1.878198  576.976562  566.644531  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 20   2  44  44 1.0 3.521857 0.778264 0.016169  4.316290 4.233432  6.194488 3.111815  601.187500  595.160156  0.954545  1.000000  0.895145       1.0        1.0  0.954545  0.854456  0.954545   0.954545 0.954545
 20   1  73  73 1.0 7.217397 1.873767 0.032438  9.123602 6.334593 15.318090 1.948438  592.878906  582.761719  0.917808  0.886888  0.676287       1.0        1.0  0.813993  0.620702  0.917808   0.917808 0.883203
 21   3  20  20 1.0 1.132534 0.736909 0.000000  1.869443 1.869443  1.869443 1.869443  588.617188  579.265625  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 21   2  44  44 1.0 3.618008 1.149174 0.016045  4.783227 5.445514  6.652670 3.340859  626.804688  626.312500  0.954545  0.950842  0.869847       1.0        1.0  0.907622  0.830309  0.954545   0.954545 0.938904
 21   1  73  73 1.0 7.297002 1.592166 0.029974  8.919142 7.725490 15.571812 1.980256  616.832031  607.972656  0.917808  0.824536  0.673330       1.0        1.0  0.756766  0.617987  0.917808   0.917808 0.864127
 22   3  20  20 1.0 1.136925 0.800561 0.000000  1.937485 1.937485  1.937485 1.937485  611.429688  601.339844  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 22   2  42  42 1.0 3.384165 0.772396 0.016800  4.173361 4.747113  6.110847 3.070107  633.847656  625.695312  1.000000  1.000000  0.900329       1.0        1.0  1.000000  0.900329  1.000000   1.000000 1.000000
 22   1  69  69 1.0 6.851475 1.919979 0.029562  8.801016 6.478592 14.911863 1.897663  628.441406  619.863281  0.971014  0.878903  0.681164       1.0        1.0  0.853427  0.661420  0.971014   0.971014 0.931819
 23   3  20  20 1.0 1.137711 0.747601 0.000000  1.885312 1.885312  1.885312 1.885312  624.617188  614.410156  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 23   2  42  42 1.0 3.487222 1.305435 0.014991  4.807648 5.747753  6.692960 3.360653  659.457031  657.015625  1.000000  0.925512  0.867836       1.0        1.0  0.925512  0.867836  1.000000   1.000000 0.975171
 23   1  75  75 1.0 7.684661 1.911923 0.030567  9.627151 7.657890 16.320111 2.073469  656.843750  651.000000  0.893333  0.826979  0.664970       1.0        1.0  0.738768  0.594040  0.893333   0.893333 0.841812
 24   3  20  20 1.0 1.139788 0.677263 0.000000  1.817051 1.817051  1.817051 1.817051  644.449219  635.031250  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 24   2  44  44 1.0 3.547736 1.965244 0.016611  5.529591 5.456028  7.346643 3.687527  669.640625  661.125000  0.954545  0.949875  0.838843       1.0        1.0  0.906699  0.800714  0.954545   0.954545 0.938597
 24   1  73  73 1.0 7.284721 1.192622 0.032041  8.509384 7.350775 15.856027 2.015489  663.398438  656.531250  0.917808  0.838679  0.670092       1.0        1.0  0.769746  0.615016  0.917808   0.917808 0.868454
 25   3  20  20 1.0 1.140040 0.735043 0.000000  1.875083 1.875083  1.875083 1.875083  659.117188  649.460938  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 25   2  44  44 1.0 3.521796 0.800365 0.016211  4.338373 4.245825  6.213456 3.121245  682.507812  677.277344  0.954545  1.000000  0.893996       1.0        1.0  0.954545  0.853360  0.954545   0.954545 0.954545
 25   1  73  73 1.0 7.196881 1.597881 0.031106  8.825869 6.436928 15.039325 1.913598  674.320312  664.660156  0.917808  0.881164  0.679614       1.0        1.0  0.808740  0.623756  0.917808   0.917808 0.881452
 26   3  20  20 1.0 1.135793 0.608034 0.000000  1.743827 1.743827  1.743827 1.743827  672.898438  663.546875  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 26   2  44  44 1.0 3.530189 0.903551 0.015858  4.449597 4.255749  6.193423 3.111093  694.921875  688.421875  0.954545  1.000000  0.895209       1.0        1.0  0.954545  0.854518  0.954545   0.954545 0.954545
 26   1  71  71 1.0 7.047523 1.595042 0.031249  8.673814 5.992388 14.867238 1.892173  690.246094  680.789062  0.943662  0.908034  0.681710       1.0        1.0  0.856877  0.643304  0.943662   0.943662 0.914734
 27   3  20  20 1.0 1.138438 0.910506 0.000000  2.048944 2.048944  2.048944 2.048944  687.750000  677.937500  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 27   2  44  44 1.0 3.521734 1.287017 0.015903  4.824655 4.900629  6.873599 3.451132  711.238281  705.640625  0.954545  1.000000  0.859174       1.0        1.0  0.954545  0.820121  0.954545   0.954545 0.954545
 27   1  75  75 1.0 7.406921 1.668935 0.031261  9.107117 6.631923 15.980716 2.031005  706.140625  698.574219  0.893333  0.870895  0.668697       1.0        1.0  0.777999  0.597369  0.893333   0.893333 0.854889
 28   3  20  20 1.0 1.134056 0.699786 0.000000  1.833841 1.833841  1.833841 1.833841  702.617188  693.156250  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 28   2  42  42 1.0 3.514916 0.992494 0.014761  4.522171 5.406722  6.356012 3.192194  736.773438  735.203125  1.000000  0.954471  0.885669       1.0        1.0  0.954471  0.885669  1.000000   1.000000 0.984824
 28   1  69  69 1.0 6.973938 1.726472 0.030624  8.731034 7.288628 15.087047 1.919526  733.136719  728.101562  0.971014  0.841176  0.679039       1.0        1.0  0.816794  0.659357  0.971014   0.971014 0.919608
 29   3  20  20 1.0 1.138084 0.892785 0.000000  2.030869 2.030869  2.030869 2.030869  720.613281  711.011719  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 29   2  44  44 1.0 3.523470 0.781374 0.016810  4.321654 4.373873  6.352523 3.190461  744.132812  738.867188  0.954545  1.000000  0.885867       1.0        1.0  0.954545  0.845600  0.954545   0.954545 0.954545
 29   1  75  75 1.0 7.420611 1.721111 0.031950  9.173671 6.646052 15.526194 1.974436  742.515625  735.300781  0.893333  0.870180  0.673857       1.0        1.0  0.777361  0.601978  0.893333   0.893333 0.854676
 30   3  20  20 1.0 1.137356 0.799395 0.000000  1.936751 1.936751  1.936751 1.936751  737.433594  727.867188  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 30   2  44  44 1.0 3.552589 1.473025 0.016023  5.041638 4.476810  6.978388 3.503568  759.703125  751.000000  0.954545  1.000000  0.854396       1.0        1.0  0.954545  0.815560  0.954545   0.954545 0.954545
 30   1  75  75 1.0 7.488199 1.288697 0.031543  8.808439 6.215373 15.786827 2.006827  754.949219  749.683594  0.893333  0.893881  0.670873       1.0        1.0  0.798534  0.599314  0.893333   0.893333 0.861733
 31   3  20  20 1.0 1.135950 0.784927 0.000000  1.920877 1.920877  1.920877 1.920877  751.164062  741.613281  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 31   2  44  44 1.0 3.553340 0.846616 0.017603  4.417559 4.608000  6.338436 3.183534  775.101562  766.312500  0.954545  1.000000  0.886668       1.0        1.0  0.954545  0.846365  0.954545   0.954545 0.954545
 31   1  75  75 1.0 7.446713 1.776548 0.032089  9.255351 6.333165 15.593787 1.982990  772.632812  764.074219  0.893333  0.886969  0.673076       1.0        1.0  0.792359  0.601282  0.893333   0.893333 0.859675
 32   3  20  20 1.0 1.132602 0.851968 0.000000  1.984570 1.984570  1.984570 1.984570  767.781250  758.242188  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 32   2  44  44 1.0 3.522494 1.386794 0.017078  4.926366 4.921452  6.910936 3.469688  790.679688  785.328125  0.954545  1.000000  0.857452       1.0        1.0  0.954545  0.818477  0.954545   0.954545 0.954545
 32   1  77  77 1.0 7.627859 1.806626 0.032185  9.466670 6.669248 16.377606 2.081040  788.703125  781.605469  0.870130  0.869016  0.664349       1.0        1.0  0.756157  0.578070  0.870130   0.870130 0.832139
 33   3  20  20 1.0 1.135042 0.751425 0.000000  1.886467 1.886467  1.886467 1.886467  782.851562  773.125000  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 33   2  44  44 1.0 3.596284 1.232903 0.017386  4.846573 5.527575  6.733040 3.380670  814.585938  813.382812  0.954545  0.943475  0.865865       1.0        1.0  0.900590  0.826507  0.954545   0.954545 0.936560
 33   1  73  73 1.0 7.303075 1.193252 0.032437  8.528764 7.428587 15.261804 1.941108  804.347656  796.371094  0.917808  0.835616  0.676952       1.0        1.0  0.766935  0.621312  0.917808   0.917808 0.867517
 34   3  20  20 1.0 1.134864 0.786468 0.000000  1.921332 1.921332  1.921332 1.921332  797.210938  787.718750  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 34   2  42  42 1.0 3.517372 0.968240 0.016074  4.501686 5.474328  6.423018 3.225885  835.179688  833.898438  1.000000  0.948209  0.881928       1.0        1.0  0.948209  0.881928  1.000000   1.000000 0.982736
 34   1  71  71 1.0 7.211338 1.829322 0.031430  9.072090 7.381182 15.495108 1.970333  827.347656  822.605469  0.943662  0.837473  0.674217       1.0        1.0  0.790292  0.636233  0.943662   0.943662 0.892539
 35   3  20  20 1.0 1.136814 0.644014 0.000000  1.780828 1.780828  1.780828 1.780828  811.656250  803.421875  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 35   2  44  44 1.0 3.565222 1.102887 0.018430  4.686539 5.016417  6.467367 3.247902  841.253906  832.476562  0.954545  0.997828  0.879508       1.0        1.0  0.952472  0.839531  0.954545   0.954545 0.953854
 35   1  75  75 1.0 7.497094 1.226419 0.033153  8.756666 6.921095 15.224033 1.936557  836.648438  828.484375  0.893333  0.856987  0.677401       1.0        1.0  0.765575  0.605145  0.893333   0.893333 0.850747
 36   3  20  20 1.0 1.147113 0.842357 0.000000  1.989469 1.989469  1.989469 1.989469  830.292969  821.066406  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 36   2  44  44 1.0 3.546528 1.582733 0.017837  5.147098 5.306879  7.136567 3.582569  856.820312  848.730469  0.954545  0.964293  0.847492       1.0        1.0  0.920462  0.808970  0.954545   0.954545 0.943184
 36   1  77  77 1.0 7.721770 2.010549 0.032637  9.764956 7.042785 16.901523 2.146561  853.972656  847.355469  0.870130  0.851542  0.658818       1.0        1.0  0.740952  0.573257  0.870130   0.870130 0.827071
 37   3  20  20 1.0 1.137489 0.666456 0.000000  1.803944 1.803944  1.803944 1.803944  846.792969  837.542969  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 37   2  44  44 1.0 3.569008 0.951970 0.016830  4.537809 4.547298  6.341753 3.184931  870.183594  862.902344  0.954545  1.000000  0.886479       1.0        1.0  0.954545  0.846185  0.954545   0.954545 0.954545
 37   1  73  73 1.0 7.247332 1.181057 0.031985  8.460375 6.278432 14.802128 1.884085  864.144531  856.546875  0.917808  0.890136  0.682512       1.0        1.0  0.816974  0.626415  0.917808   0.917808 0.884197
 38   3  20  20 1.0 1.137221 0.765053 0.000000  1.902274 1.902274  1.902274 1.902274  858.664062  850.613281  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 38   2  42  42 1.0 3.500742 2.052330 0.015138  5.568210 5.841720  7.470484 3.749351  893.464844  893.531250  1.000000  0.918525  0.833995       1.0        1.0  0.918525  0.833995  1.000000   1.000000 0.972842
 38   1  71  71 1.0 7.205699 1.264688 0.031107  8.501494 7.741144 15.971978 2.029996  889.039062  884.789062  0.943662  0.823977  0.668794       1.0        1.0  0.777555  0.631115  0.943662   0.943662 0.888293
 39   3  20  20 1.0 1.138529 0.715942 0.000000  1.854470 1.854470  1.854470 1.854470  878.746094  870.378906  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 39   2  42  42 1.0 3.374413 1.494113 0.017394  4.885920 4.674762  6.740390 3.384477  901.160156  893.855469  1.000000  1.000000  0.865507       1.0        1.0  1.000000  0.865507  1.000000   1.000000 1.000000
 39   1  75  75 1.0 7.469320 1.227316 0.032151  8.728787 6.422045 15.469177 1.967431  896.703125  889.343750  0.893333  0.881982  0.674518       1.0        1.0  0.787904  0.602570  0.893333   0.893333 0.858190
 40   3  20  20 1.0 1.139442 0.726365 0.000000  1.865807 1.865807  1.865807 1.865807  891.964844  883.574219  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 40   2  42  42 1.0 3.387138 0.814451 0.018117  4.219706 4.720306  6.085513 3.057124  916.414062  909.386719  1.000000  1.000000  0.901940       1.0        1.0  1.000000  0.901940  1.000000   1.000000 1.000000
 40   1  69  69 1.0 6.854056 1.101536 0.031311  7.986903 6.470863 14.072416 1.792577  908.589844  902.492188  0.971014  0.879319  0.691843       1.0        1.0  0.853832  0.671790  0.971014   0.971014 0.931954
 41   3  20  20 1.0 1.137207 0.724697 0.000000  1.861904 1.861904  1.861904 1.861904  907.582031  899.332031  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 41   2  44  44 1.0 3.528821 1.578445 0.017761  5.125027 4.240138  6.986930 3.507619  930.914062  926.089844  0.954545  1.000000  0.854014       1.0        1.0  0.954545  0.815195  0.954545   0.954545 0.954545
 41   1  75  75 1.0 7.423198 1.187885 0.032289  8.643372 5.982056 15.630302 1.987510  929.136719  923.218750  0.893333  0.908728  0.672657       1.0        1.0  0.811797  0.600907  0.893333   0.893333 0.866155
 42   3  20  20 1.0 1.135636 0.584672 0.000000  1.720308 1.720308  1.720308 1.720308  923.070312  914.742188  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 42   2  42  42 1.0 3.487245 1.698315 0.015490  5.201050 5.970505  6.921359 3.475320  955.527344  954.398438  1.000000  0.909508  0.856975       1.0        1.0  0.909508  0.856975  1.000000   1.000000 0.969836
 42   1  69  69 1.0 6.998346 1.942904 0.030944  8.972194 7.863925 15.893552 2.020385  948.265625  944.929688  0.971014  0.819668  0.669671       1.0        1.0  0.795910  0.650260  0.971014   0.971014 0.912646
 43   3  20  20 1.0 1.134756 0.672465 0.000000  1.807221 1.807221  1.807221 1.807221  937.554688  929.617188  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 43   2  44  44 1.0 3.536269 1.584520 0.017662  5.138451 4.197117  6.945672 3.487032  964.585938  960.800781  0.954545  1.000000  0.855869       1.0        1.0  0.954545  0.816966  0.954545   0.954545 0.954545
 43   1  73  73 1.0 7.225576 1.155416 0.033260  8.414253 5.943375 15.359925 1.953411  956.175781  949.742188  0.917808  0.911357  0.675795       1.0        1.0  0.836451  0.620250  0.917808   0.917808 0.890689
 44   3  20  20 1.0 1.136133 0.653646 0.000000  1.789778 1.789778  1.789778 1.789778  953.304688  945.312500  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 44   2  44  44 1.0 3.562283 1.639906 0.017424  5.219613 4.511145  7.009391 3.519029  978.265625  971.000000  0.954545  1.000000  0.853014       1.0        1.0  0.954545  0.814241  0.954545   0.954545 0.954545
 44   1  77  77 1.0 7.743118 1.359094 0.033587  9.135799 6.260375 16.145190 2.051589  977.234375  972.281250  0.870130  0.891198  0.666878       1.0        1.0  0.775458  0.580270  0.870130   0.870130 0.838573
 45   3  20  20 1.0 1.136794 0.778915 0.000000  1.915710 1.915710  1.915710 1.915710  970.957031  962.667969  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 45   2  42  42 1.0 3.396066 1.619140 0.017904  5.033111 4.783765  6.948820 3.488532  994.699219  988.164062  1.000000  1.000000  0.855727       1.0        1.0  1.000000  0.855727  1.000000   1.000000 1.000000
 45   1  75  75 1.0 7.469351 1.224384 0.031538  8.725273 6.535201 15.674093 1.992874  988.406250  980.917969  0.893333  0.875890  0.672156       1.0        1.0  0.782462  0.600459  0.893333   0.893333 0.856376
 46   3  20  20 1.0 1.133515 0.601018 0.000000  1.734533 1.734533  1.734533 1.734533  982.289062  974.148438  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 46   2  44  44 1.0 3.562109 1.857054 0.017034  5.436197 4.478068  7.170730 3.599900 1006.554688 1000.726562  0.954545  1.000000  0.846047       1.0        1.0  0.954545  0.807590  0.954545   0.954545 0.954545
 46   1  77  77 1.0 7.728623 1.389139 0.032964  9.150726 6.227070 16.321455 2.073777 1004.640625 1000.332031  0.870130  0.893178  0.664955       1.0        1.0  0.777181  0.578597  0.870130   0.870130 0.839147
 47   3  20  20 1.0 1.137377 0.661974 0.000000  1.799351 1.799351  1.799351 1.799351  997.089844  988.980469  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 47   2  44  44 1.0 3.536812 0.992649 0.016523  4.545984 4.312456  6.345335 3.186837 1022.628906 1016.214844  0.954545  1.000000  0.886275       1.0        1.0  0.954545  0.845990  0.954545   0.954545 0.954545
 47   1  77  77 1.0 7.717139 2.191962 0.031809  9.940910 6.067959 16.286245 2.069605 1018.324219 1014.906250  0.870130  0.903067  0.665337       1.0        1.0  0.785786  0.578930  0.870130   0.870130 0.842015
 48   3  20  20 1.0 1.137401 0.657123 0.000000  1.794524 1.794524  1.794524 1.794524 1014.445312 1006.382812  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 48   2  44  44 1.0 3.530614 0.799535 0.017567  4.347716 4.153082  6.142241 3.085253 1039.832031 1036.261719  0.954545  1.000000  0.898359       1.0        1.0  0.954545  0.857525  0.954545   0.954545 0.954545
 48   1  77  77 1.0 7.615445 2.057622 0.033383  9.706450 5.884872 15.848690 2.014933 1035.085938 1029.351562  0.870130  0.915435  0.670175       1.0        1.0  0.796547  0.583139  0.870130   0.870130 0.845602
 49   3  20  20 1.0 1.136814 0.649714 0.000000  1.786528 1.786528  1.786528 1.786528 1029.257812 1021.128906  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
 49   2  44  44 1.0 3.601527 1.107082 0.017503  4.726112 5.302699  6.512641 3.270525 1058.851562 1051.835938  0.954545  0.964721  0.877082       1.0        1.0  0.920870  0.837215  0.954545   0.954545 0.943320
 49   1  73  73 1.0 7.323127 1.206492 0.032632  8.562250 7.203882 15.074891 1.917829 1050.445312 1045.484375  0.917808  0.844659  0.679185       1.0        1.0  0.775235  0.623362  0.917808   0.917808 0.870284

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
                      Level-wise Means                      

 AL    LE    AC  CF       GT       ST       OT       TT       LT        CT       WT        RSS        VMS  QL_SCORE  LT_SCORE  CT_SCORE  AW_SCORE  AME_SCORE  LT_GRADE  CT_GRADE  AW_GRADE  AME_GRADE    GRADE
  3 20.00 20.00 1.0 1.138658 0.758735 0.000000 1.897393 1.897393  1.897393 1.897393 644.193594 634.488516  1.000000  1.000000  1.000000       1.0        1.0  1.000000  1.000000  1.000000   1.000000 1.000000
  2 43.44 43.44 1.0 3.531232 1.240111 0.016517 4.787860 4.924180  6.685253 3.356906 671.976250 666.426172  0.967273  0.977213  0.869339       1.0        1.0  0.944931  0.840883  0.967273   0.967273 0.959825
  1 73.56 73.56 1.0 7.364104 1.530880 0.031474 8.926458 6.786469 15.611711 1.985878 666.082188 658.812734  0.911852  0.866622  0.673014       1.0        1.0  0.789872  0.613805  0.911852   0.911852 0.871192

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
               Level-wise Standard Deviation                

 AL       LE       AC  CF       GT       ST       OT       TT       LT       CT       WT        RSS        VMS  QL_SCORE  LT_SCORE  CT_SCORE  AW_SCORE  AME_SCORE  LT_GRADE  CT_GRADE  AW_GRADE  AME_GRADE    GRADE
  3 0.000000 0.000000 0.0 0.003618 0.086417 0.000000 0.087696 0.087696 0.087696 0.087696 234.230097 235.289348  0.000000  0.000000  0.000000       0.0        0.0  0.000000  0.000000  0.000000   0.000000 0.000000
  2 0.907115 0.907115 0.0 0.060768 0.341170 0.000890 0.353127 0.579052 0.351618 0.175786 233.011034 233.195441  0.020616  0.032506  0.017489       0.0        0.0  0.028729  0.024481  0.020616   0.020616 0.018183
  1 2.492110 2.492110 0.0 0.242669 0.310627 0.001022 0.447904 0.638251 0.542852 0.067836 233.838034 235.064489  0.031067  0.029963  0.006255       0.0        0.0  0.030052  0.024800  0.031067   0.031067 0.027413

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
                       Partial Plans                        

 RU  AL  IT  PN       GT       ST       OT       TT        YT       WT       ET         RSS         VMS  LE  AC  CF  PSG  START_S  END_S  SIZE  SGLITS_T  FIRST_I  LAST_I  PP_EF_L  PP_EF_A  SP_ED_L  SP_ED_A  SP_EB_L  SP_EB_A  SP_EBS_L  SP_EBS_A  TOT_CHOICES  PRE_CHOICES
  0   3   1   1 1.144111 0.708233 0.000000 1.852345  1.852345 1.852345 0.000000  243.996094  232.277344  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   2   1   1 2.021524 0.545718 0.007914 2.575156  4.427501 4.427501 2.065586  266.226562  258.453125  25  25 1.0   25        1     25    10        10        1      10 2.500000 2.500000 2.758824 2.758824 1.103530 1.103530  0.424948  0.424948            0            2
  0   2   2   2 1.541893 0.516022 0.007671 2.065586  6.493087 2.065586 0.000000  262.214844  251.332031  19  19 1.0   19       26     44    10        10       11      20 1.900000 1.900000 1.370320 1.370320 0.721221 0.721221  0.625193  0.625193            0            4
  0   1   1   1 1.472368 0.322133 0.004729 1.799231  6.226732 6.226732 3.223024  257.492188  246.171875  14  14 1.0    0        1     14     6         6        1       6 2.333333 2.333333 1.861899 1.861899 0.797957 0.797957  0.413155  0.413155            0            0
  0   1   2   2 1.001508 0.151956 0.003973 1.157437  9.449755 3.223024 1.237187  247.566406  235.980469  10  10 1.0    0       15     24     6         6        7      12 1.666667 1.666667 0.816497 0.816497 0.489898 0.489898  0.666858  0.666858            0            0
  0   1   3   3 1.013049 0.220322 0.003816 1.237187 10.686943 1.237187 1.283499  248.640625  237.101562  10  10 1.0    0       25     34     6         6       13      18 1.666667 1.666667 1.211060 1.211060 0.726636 0.726636  0.557155  0.557155            0            0
  0   1   4   4 1.028827 0.249661 0.005011 1.283499 11.970442 1.283499 0.465717  250.039062  238.609375  10  10 1.0    0       35     44     7         7       19      25 1.428571 1.428571 0.534522 0.534522 0.374166 0.374166  0.779939  0.779939            0            2
  0   1   5   5 0.411928 0.051968 0.001821 0.465717 12.436159 0.465717 0.941465  231.746094  221.488281   4   4 1.0    0       45     48     4         4       26      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  0   1   6   6 0.817292 0.121302 0.002872 0.941465 13.377624 0.941465 1.257801  243.308594  231.957031   8   8 1.0    0       49     56     5         5       30      34 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            1
  0   1   7   7 1.036121 0.217928 0.003752 1.257801 14.635425 1.257801 0.822644  250.910156  240.164062  10  10 1.0    0       57     66     5         5       35      39 2.000000 2.000000 0.707107 0.707107 0.353553 0.353553  0.667710  0.667710            0            0
  0   1   8   8 0.719281 0.099157 0.004205 0.822644 15.458069 0.822644 0.000000  249.402344  238.191406   7   7 1.0    0       67     73     5         5       40      44 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            2
  1   3   1   1 1.140063 0.708578 0.000000 1.848641  1.848641 1.848641 0.000000  248.773438  237.808594  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   2   1   1 1.919304 0.468690 0.008228 2.396222  4.244863 4.244863 2.036418  267.445312  259.550781  24  24 1.0   24        1     24    10        10        1      10 2.400000 2.400000 2.796824 2.796824 1.165343 1.165343  0.420580  0.420580            0            3
  1   2   2   2 1.622818 0.404816 0.008784 2.036418  6.281281 2.036418 0.000000  268.152344  260.707031  20  20 1.0   20       25     44    10        10       11      20 2.000000 2.000000 1.247219 1.247219 0.623610 0.623610  0.648355  0.648355            0            3
  1   1   1   1 1.471908 0.320802 0.004663 1.797373  6.042236 6.042236 2.952665  258.800781  247.437500  14  14 1.0    0        1     14     6         6        1       6 2.333333 2.333333 1.861899 1.861899 0.797957 0.797957  0.413155  0.413155            0            0
  1   1   2   2 0.799906 0.112517 0.003825 0.916247  8.994901 2.952665 1.232460  248.910156  237.125000   8   8 1.0    0       15     22     6         6        7      12 1.333333 1.333333 0.516398 0.516398 0.387298 0.387298  0.767638  0.767638            0            0
  1   1   3   3 1.014363 0.213611 0.004486 1.232460 10.227362 1.232460 0.954986  251.257812  239.593750  10  10 1.0    0       23     32     6         6       13      18 1.666667 1.666667 0.816497 0.816497 0.489898 0.489898  0.666858  0.666858            0            1
  1   1   4   4 0.812573 0.138149 0.004265 0.954986 11.182348 0.954986 0.989625  250.882812  239.214844   8   8 1.0    0       33     40     6         6       19      24 1.333333 1.333333 0.516398 0.516398 0.387298 0.387298  0.767638  0.767638            0            2
  1   1   5   5 0.812262 0.174116 0.003246 0.989625 12.171973 0.989625 0.943245  255.191406  243.804688   8   8 1.0    0       41     48     5         5       25      29 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
  1   1   6   6 0.818464 0.121429 0.003351 0.943245 13.115218 0.943245 0.993651  255.281250  243.734375   8   8 1.0    0       49     56     5         5       30      34 1.600000 1.600000 0.547723 0.547723 0.342327 0.342327  0.728611  0.728611            0            0
  1   1   7   7 0.814149 0.175880 0.003622 0.993651 14.108869 0.993651 1.324974  253.281250  241.734375   8   8 1.0    0       57     64     5         5       35      39 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
  1   1   8   8 1.138065 0.182461 0.004449 1.324974 15.433843 1.324974 0.000000  262.046875  253.175781  11  11 1.0    0       65     75     5         5       40      44 2.200000 2.200000 1.643168 1.643168 0.746894 0.746894  0.396076  0.396076            0            3
  2   3   1   1 1.134274 0.802848 0.000000 1.937122  1.937122 1.937122 0.000000  256.332031  244.695312  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  2   2   1   1 2.705033 0.964141 0.009202 3.678377  5.615499 5.615499 1.050008  304.621094  302.207031  31  31 1.0   31        1     31    10        10        1      10 3.100000 3.100000 2.685351 2.685351 0.866242 0.866242  0.433521  0.433521            0            2
  2   2   2   2 0.818304 0.224729 0.006975 1.050008  6.665507 1.050008 0.000000  283.914062  272.656250  11  11 1.0   11       32     42    10        10       11      20 1.100000 1.100000 0.316228 0.316228 0.287480 0.287480  0.880669  0.880669            0            4
  2   1   1   1 1.598981 0.302029 0.005600 1.906610  7.522109 7.522109 2.678850  287.984375  280.687500  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
  2   1   2   2 1.335215 0.287956 0.005670 1.628842 10.200959 2.678850 1.668874  285.035156  275.089844  13  13 1.0    0       16     28     8         8        8      15 1.625000 1.625000 0.744024 0.744024 0.457861 0.457861  0.732527  0.732527            0            0
  2   1   3   3 1.338539 0.324080 0.006255 1.668874 11.869833 1.668874 2.079534  288.242188  277.753906  13  13 1.0    0       29     41     8         8       16      23 1.625000 1.625000 0.744024 0.744024 0.457861 0.457861  0.732527  0.732527            0            1
  2   1   4   4 1.735813 0.337448 0.006273 2.079534 13.949367 2.079534 0.351406  295.953125  288.878906  16  16 1.0    0       42     57     8         8       24      31 2.000000 2.000000 0.755929 0.755929 0.377964 0.377964  0.729255  0.729255            0            1
  2   1   5   5 0.317144 0.033371 0.000890 0.351406 14.300773 0.351406 0.361462  282.863281  271.367188   3   3 1.0    0       58     60     2         2       32      33 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  2   1   6   6 0.319490 0.040766 0.001206 0.361462 14.662235 0.361462 0.464218  282.863281  271.367188   3   3 1.0    0       61     63     3         3       34      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
  2   1   7   7 0.414498 0.047892 0.001828 0.464218 15.126453 0.464218 0.464038  282.863281  271.367188   4   4 1.0    0       64     67     3         3       37      39 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            1
  2   1   8   8 0.415337 0.046273 0.002427 0.464038 15.590491 0.464038 0.000000  282.863281  271.367188   4   4 1.0    0       68     71     3         3       40      42 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            1
  3   3   1   1 1.144992 0.831939 0.000000 1.976930  1.976930 1.976930 0.000000  284.285156  272.769531  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   2   1   1 1.946099 0.505527 0.008476 2.460102  4.437033 4.437033 2.042099  308.140625  300.203125  24  24 1.0   24        1     24    10        10        1      10 2.400000 2.400000 2.756810 2.756810 1.148671 1.148671  0.425181  0.425181            0            3
  3   2   2   2 1.632684 0.401021 0.008394 2.042099  6.479131 2.042099 0.000000  311.257812  304.046875  20  20 1.0   20       25     44    10        10       11      20 2.000000 2.000000 1.054093 1.054093 0.527046 0.527046  0.687380  0.687380            0            3
  3   1   1   1 1.475405 0.346987 0.004906 1.827297  6.264330 6.264330 3.199461  302.722656  291.816406  14  14 1.0    0        1     14     6         6        1       6 2.333333 2.333333 1.861899 1.861899 0.797957 0.797957  0.413155  0.413155            0            0
  3   1   2   2 1.001576 0.151893 0.003892 1.157362  9.463791 3.199461 1.397156  293.402344  282.042969  10  10 1.0    0       15     24     6         6        7      12 1.666667 1.666667 0.816497 0.816497 0.489898 0.489898  0.666858  0.666858            0            0
  3   1   3   3 1.121244 0.271186 0.004727 1.397156 10.860947 1.397156 0.939166  301.800781  292.867188  11  11 1.0    0       25     35     6         6       13      18 1.833333 1.833333 0.752773 0.752773 0.410603 0.410603  0.686789  0.686789            0            0
  3   1   4   4 0.706602 0.228483 0.004080 0.939166 11.800112 0.939166 0.928950  298.718750  287.269531   7   7 1.0    0       36     42     6         6       19      24 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            3
  3   1   5   5 0.810805 0.115204 0.002940 0.928950 12.729062 0.928950 1.039482  298.722656  287.531250   8   8 1.0    0       43     50     5         5       25      29 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
  3   1   6   6 0.913034 0.122730 0.003718 1.039482 13.768544 1.039482 1.140972  305.035156  293.851562   8   8 1.0    0       51     58     5         5       30      34 1.600000 1.600000 0.547723 0.547723 0.342327 0.342327  0.728611  0.728611            0            0
  3   1   7   7 0.904627 0.232795 0.003550 1.140972 14.909517 1.140972 0.691748  307.121094  296.660156   9   9 1.0    0       59     67     5         5       35      39 1.800000 1.800000 0.836660 0.836660 0.464811 0.464811  0.622260  0.622260            0            1
  3   1   8   8 0.602575 0.085320 0.003853 0.691748 15.601265 0.691748 0.000000  307.316406  296.855469   6   6 1.0    0       68     73     5         5       40      44 1.200000 1.200000 0.447214 0.447214 0.372678 0.372678  0.770330  0.770330            0            2
  4   3   1   1 1.141363 0.692998 0.000000 1.834362  1.834362 1.834362 0.000000  308.578125  297.761719  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   2   1   1 2.718385 1.476748 0.008605 4.203738  6.038099 6.038099 1.096914  352.042969  350.121094  31  31 1.0   31        1     31    10        10        1      10 3.100000 3.100000 2.685351 2.685351 0.866242 0.866242  0.433521  0.433521            0            2
  4   2   2   2 0.824138 0.266173 0.006603 1.096914  7.135013 1.096914 0.000000  330.140625  319.968750  11  11 1.0   11       32     42    10        10       11      20 1.100000 1.100000 0.316228 0.316228 0.287480 0.287480  0.880669  0.880669            0            4
  4   1   1   1 1.602856 0.291547 0.005645 1.900048  7.938148 7.938148 3.025280  336.671875  329.339844  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
  4   1   2   2 1.558707 0.363507 0.006152 1.928366 10.963427 3.025280 1.801801  334.718750  323.636719  15  15 1.0    0       16     30     8         8        8      15 1.875000 1.875000 0.834523 0.834523 0.445079 0.445079  0.708198  0.708198            0            0
  4   1   3   3 1.490886 0.304853 0.006063 1.801801 12.765229 1.801801 1.598756  339.828125  328.960938  14  14 1.0    0       31     44     8         8       16      23 1.750000 1.750000 0.707107 0.707107 0.404061 0.404061  0.742816  0.742816            0            1
  4   1   4   4 1.347684 0.245514 0.005558 1.598756 14.363984 1.598756 0.350861  334.695312  327.000000  13  13 1.0    0       45     57     8         8       24      31 1.625000 1.625000 0.744024 0.744024 0.457861 0.457861  0.732527  0.732527            0            1
  4   1   5   5 0.315749 0.034275 0.000837 0.350861 14.714846 0.350861 0.365431  329.546875  319.222656   3   3 1.0    0       58     60     2         2       32      33 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  4   1   6   6 0.319296 0.044930 0.001204 0.365431 15.080276 0.365431 0.458048  329.707031  319.250000   3   3 1.0    0       61     63     3         3       34      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
  4   1   7   7 0.408627 0.047857 0.001564 0.458048 15.538325 0.458048 0.457232  330.035156  319.402344   4   4 1.0    0       64     67     3         3       37      39 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            1
  4   1   8   8 0.407479 0.047456 0.002298 0.457232 15.995557 0.457232 0.000000  330.148438  319.492188   4   4 1.0    0       68     71     3         3       40      42 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            1
  5   3   1   1 1.136424 0.915469 0.000000 2.051893  2.051893 2.051893 0.000000  332.503906  321.625000  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  5   2   1   1 2.735084 1.023364 0.008873 3.767321  5.819215 5.819215 1.105499  369.589844  367.761719  31  31 1.0   31        1     31    10        10        1      10 3.100000 3.100000 2.685351 2.685351 0.866242 0.866242  0.433521  0.433521            0            2
  5   2   2   2 0.819476 0.278973 0.007049 1.105499  6.924714 1.105499 0.000000  353.527344  342.562500  11  11 1.0   11       32     42    10        10       11      20 1.100000 1.100000 0.316228 0.316228 0.287480 0.287480  0.880669  0.880669            0            4
  5   1   1   1 1.600731 0.301244 0.005798 1.907772  7.726987 7.726987 2.774395  356.585938  349.308594  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
  5   1   2   2 1.330490 0.332788 0.005618 1.668896 10.501382 2.774395 1.724171  354.753906  345.144531  13  13 1.0    0       16     28     8         8        8      15 1.625000 1.625000 0.744024 0.744024 0.457861 0.457861  0.732527  0.732527            0            0
  5   1   3   3 1.342175 0.375517 0.006480 1.724171 12.225553 1.724171 2.076456  357.437500  347.238281  13  13 1.0    0       29     41     8         8       16      23 1.625000 1.625000 0.744024 0.744024 0.457861 0.457861  0.732527  0.732527            0            1
  5   1   4   4 1.721661 0.348622 0.006173 2.076456 14.302010 2.076456 0.354517  363.394531  356.175781  16  16 1.0    0       42     57     8         8       24      31 2.000000 2.000000 0.755929 0.755929 0.377964 0.377964  0.729255  0.729255            0            1
  5   1   5   5 0.316946 0.036776 0.000795 0.354517 14.656527 0.354517 0.465424  352.621094  341.773438   3   3 1.0    0       58     60     2         2       32      33 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  5   1   6   6 0.409154 0.054604 0.001666 0.465424 15.121951 0.465424 0.359033  352.621094  341.773438   4   4 1.0    0       61     64     3         3       34      36 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            1
  5   1   7   7 0.320120 0.037843 0.001069 0.359033 15.480983 0.359033 0.588611  352.746094  341.773438   3   3 1.0    0       65     67     3         3       37      39 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  5   1   8   8 0.409400 0.177015 0.002197 0.588611 16.069595 0.588611 0.000000  352.746094  341.773438   4   4 1.0    0       68     71     3         3       40      42 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            2
  6   3   1   1 1.141857 0.767578 0.000000 1.909435  1.909435 1.909435 0.000000  354.355469  343.175781  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  6   2   1   1 2.622799 1.145366 0.008768 3.776933  5.686368 5.686368 1.389771  385.421875  382.886719  30  30 1.0   30        1     30    10        10        1      10 3.000000 3.000000 2.666667 2.666667 0.888889 0.888889  0.435729  0.435729            0            2
  6   2   2   2 1.043415 0.338854 0.007501 1.389771  7.076139 1.389771 0.000000  372.019531  363.285156  14  14 1.0   14       31     44    10        10       11      20 1.400000 1.400000 0.699206 0.699206 0.499433 0.499433  0.769754  0.769754            0            4
  6   1   1   1 1.601099 0.294011 0.005985 1.901095  7.587463 7.587463 2.796580  372.609375  365.121094  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
  6   1   2   2 1.101668 0.300407 0.004734 1.406810 10.384044 2.796580 1.591637  363.195312  352.144531  11  11 1.0    0       16     26     7         7        8      14 1.571429 1.571429 0.975900 0.975900 0.621027 0.621027  0.650023  0.650023            0            0
  6   1   3   3 1.340728 0.244686 0.006223 1.591637 11.975680 1.591637 1.744285  374.179688  364.132812  13  13 1.0    0       27     39     8         8       15      22 1.625000 1.625000 0.744024 0.744024 0.457861 0.457861  0.732527  0.732527            0            1
  6   1   4   4 1.359431 0.379380 0.005475 1.744285 13.719966 1.744285 0.670991  375.585938  365.480469  13  13 1.0    0       40     52     8         8       23      30 1.625000 1.625000 0.744024 0.744024 0.457861 0.457861  0.732527  0.732527            0            1
  6   1   5   5 0.598284 0.070766 0.001941 0.670991 14.390957 0.670991 0.576745  367.250000  356.238281   6   6 1.0    0       53     58     3         3       31      33 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
  6   1   6   6 0.512818 0.062055 0.001871 0.576745 14.967701 0.576745 0.580155  367.312500  356.238281   5   5 1.0    0       59     63     3         3       34      36 1.666667 1.666667 0.577350 0.577350 0.346410 0.346410  0.585162  0.585162            0            0
  6   1   7   7 0.505721 0.072447 0.001987 0.580155 15.547856 0.580155 0.578378  367.312500  356.238281   5   5 1.0    0       64     68     4         4       37      40 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            2
  6   1   8   8 0.508430 0.067220 0.002729 0.578378 16.126234 0.578378 0.000000  367.312500  356.238281   5   5 1.0    0       69     73     4         4       41      44 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            2
  7   3   1   1 1.140589 0.877164 0.000000 2.017753  2.017753 2.017753 0.000000  368.742188  357.644531  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   2   1   1 2.148788 0.561369 0.008173 2.718331  4.736084 4.736084 1.950016  390.667969  381.488281  26  26 1.0   26        1     26    10        10        1      10 2.600000 2.600000 2.836273 2.836273 1.090874 1.090874  0.416090  0.416090            0            3
  7   2   2   2 1.446738 0.495603 0.007675 1.950016  6.686100 1.950016 0.000000  390.523438  380.441406  18  18 1.0   18       27     44    10        10       11      20 1.800000 1.800000 0.788811 0.788811 0.438228 0.438228  0.747436  0.747436            0            3
  7   1   1   1 1.482698 0.263203 0.004645 1.750547  6.486631 6.486631 3.102424  384.507812  373.546875  14  14 1.0    0        1     14     6         6        1       6 2.333333 2.333333 1.861899 1.861899 0.797957 0.797957  0.413155  0.413155            0            0
  7   1   2   2 1.005692 0.142819 0.003898 1.152408  9.589055 3.102424 1.328444  363.867188  354.722656  10  10 1.0    0       15     24     6         6        7      12 1.666667 1.666667 0.816497 0.816497 0.489898 0.489898  0.666858  0.666858            0            0
  7   1   3   3 1.125515 0.197589 0.005339 1.328444 10.917498 1.328444 1.345884  379.144531  371.359375  11  11 1.0    0       25     35     7         7       13      19 1.571429 1.571429 0.786796 0.786796 0.500688 0.500688  0.701721  0.701721            0            0
  7   1   4   4 1.138009 0.202555 0.005320 1.345884 12.263383 1.345884 0.578035  383.855469  375.234375  11  11 1.0    0       36     46     7         7       20      26 1.571429 1.571429 0.786796 0.786796 0.500688 0.500688  0.701721  0.701721            0            3
  7   1   5   5 0.508621 0.067338 0.002076 0.578035 12.841417 0.578035 0.807333  380.035156  369.457031   5   5 1.0    0       47     51     4         4       27      30 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            1
  7   1   6   6 0.705190 0.100046 0.002096 0.807333 13.648750 0.807333 1.185483  381.328125  370.683594   7   7 1.0    0       52     58     4         4       31      34 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
  7   1   7   7 1.026573 0.155057 0.003853 1.185483 14.834233 1.185483 0.820853  384.082031  374.441406  10  10 1.0    0       59     68     5         5       35      39 2.000000 2.000000 0.707107 0.707107 0.353553 0.353553  0.667710  0.667710            0            0
  7   1   8   8 0.714722 0.101977 0.004154 0.820853 15.655086 0.820853 0.000000  381.347656  370.535156   7   7 1.0    0       69     75     5         5       40      44 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            2
  8   3   1   1 1.139442 0.877951 0.000000 2.017393  2.017393 2.017393 0.000000  382.878906  371.988281  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   2   1   1 1.922985 0.421983 0.008438 2.353405  4.370798 4.370798 2.007858  403.003906  395.179688  24  24 1.0   24        1     24    10        10        1      10 2.400000 2.400000 2.796824 2.796824 1.165343 1.165343  0.420580  0.420580            0            3
  8   2   2   2 1.619455 0.379890 0.008514 2.007858  6.378656 2.007858 0.000000  408.035156  400.644531  20  20 1.0   20       25     44    10        10       11      20 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107  0.617224  0.617224            0            3
  8   1   1   1 1.476274 0.434141 0.004792 1.915207  6.286005 6.286005 3.164620  400.707031  389.968750  14  14 1.0    0        1     14     6         6        1       6 2.333333 2.333333 1.861899 1.861899 0.797957 0.797957  0.413155  0.413155            0            0
  8   1   2   2 1.008246 0.144434 0.004082 1.156762  9.450625 3.164620 1.305739  389.375000  378.277344  10  10 1.0    0       15     24     6         6        7      12 1.666667 1.666667 0.816497 0.816497 0.489898 0.489898  0.666858  0.666858            0            0
  8   1   3   3 1.119773 0.181400 0.004566 1.305739 10.756364 1.305739 0.999153  396.492188  387.921875  11  11 1.0    0       25     35     6         6       13      18 1.833333 1.833333 0.983192 0.983192 0.536287 0.536287  0.617857  0.617857            0            0
  8   1   4   4 0.706633 0.288483 0.004037 0.999153 11.755518 0.999153 1.111502  392.437500  381.410156   7   7 1.0    0       36     42     6         6       19      24 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            3
  8   1   5   5 0.813798 0.294488 0.003216 1.111502 12.867020 1.111502 0.949690  397.914062  386.996094   8   8 1.0    0       43     50     5         5       25      29 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
  8   1   6   6 0.822188 0.123903 0.003598 0.949690 13.816710 0.949690 1.046550  402.375000  393.042969   8   8 1.0    0       51     58     5         5       30      34 1.600000 1.600000 0.547723 0.547723 0.342327 0.342327  0.728611  0.728611            0            0
  8   1   7   7 0.910405 0.132359 0.003786 1.046550 14.863260 1.046550 0.877569  399.550781  388.941406   9   9 1.0    0       59     67     5         5       35      39 1.800000 1.800000 0.836660 0.836660 0.464811 0.464811  0.622260  0.622260            0            1
  8   1   8   8 0.606564 0.267534 0.003471 0.877569 15.740828 0.877569 0.000000  398.011719  387.210938   6   6 1.0    0       68     73     5         5       40      44 1.200000 1.200000 0.447214 0.447214 0.372678 0.372678  0.770330  0.770330            0            2
  9   3   1   1 1.142328 0.791329 0.000000 1.933658  1.933658 1.933658 0.000000  398.945312  387.859375  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  9   2   1   1 2.733880 0.976940 0.008345 3.719165  5.652822 5.652822 1.174762  432.808594  429.601562  31  31 1.0   31        1     31    10        10        1      10 3.100000 3.100000 2.514403 2.514403 0.811098 0.811098  0.454148  0.454148            0            2
  9   2   2   2 0.820323 0.348297 0.006143 1.174762  6.827585 1.174762 0.000000  414.531250  403.601562  11  11 1.0   11       32     42    10        10       11      20 1.100000 1.100000 0.316228 0.316228 0.287480 0.287480  0.880669  0.880669            0            4
  9   1   1   1 1.592075 0.488809 0.005539 2.086424  7.739246 7.739246 2.488512  418.371094  412.027344  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
  9   1   2   2 1.127351 0.180823 0.005576 1.313750 10.227758 2.488512 1.785557  413.527344  404.937500  11  11 1.0    0       16     26     8         8        8      15 1.375000 1.375000 0.517549 0.517549 0.376399 0.376399  0.799419  0.799419            0            0
  9   1   3   3 1.338509 0.440928 0.006120 1.785557 12.013315 1.785557 2.097700  418.593750  408.500000  13  13 1.0    0       27     39     8         8       16      23 1.625000 1.625000 0.744024 0.744024 0.457861 0.457861  0.732527  0.732527            0            1
  9   1   4   4 1.723706 0.368013 0.005980 2.097700 14.111015 2.097700 0.349508  426.687500  420.359375  16  16 1.0    0       40     55     8         8       24      31 2.000000 2.000000 0.755929 0.755929 0.377964 0.377964  0.729255  0.729255            0            1
  9   1   5   5 0.314489 0.034065 0.000954 0.349508 14.460523 0.349508 0.364236  413.437500  402.566406   3   3 1.0    0       56     58     2         2       32      33 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  9   1   6   6 0.317354 0.045241 0.001641 0.364236 14.824759 0.364236 0.472145  413.500000  402.566406   3   3 1.0    0       59     61     3         3       34      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  9   1   7   7 0.413933 0.056601 0.001612 0.472145 15.296904 0.472145 0.465596  413.500000  402.566406   4   4 1.0    0       62     65     3         3       37      39 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            1
  9   1   8   8 0.411667 0.051558 0.002371 0.465596 15.762500 0.465596 0.000000  413.500000  402.566406   4   4 1.0    0       66     69     3         3       40      42 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            2
 10   3   1   1 1.144924 0.748168 0.000000 1.893092  1.893092 1.893092 0.000000  415.527344  404.773438  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 10   2   1   1 1.929981 0.662407 0.007718 2.600106  4.493198 4.493198 2.228679  435.250000  428.460938  24  24 1.0   24        1     24    10        10        1      10 2.400000 2.400000 2.796824 2.796824 1.165343 1.165343  0.420580  0.420580            0            3
 10   2   2   2 1.634280 0.586030 0.008369 2.228679  6.721877 2.228679 0.000000  440.496094  433.378906  20  20 1.0   20       25     44    10        10       11      20 2.000000 2.000000 1.054093 1.054093 0.527046 0.527046  0.687380  0.687380            0            3
 10   1   1   1 1.477672 0.273857 0.004744 1.756273  6.249471 6.249471 3.395049  429.382812  419.238281  14  14 1.0    0        1     14     6         6        1       6 2.333333 2.333333 1.861899 1.861899 0.797957 0.797957  0.413155  0.413155            0            0
 10   1   2   2 1.012430 0.149957 0.003982 1.166369  9.644520 3.395049 1.170115  421.070312  410.324219  10  10 1.0    0       15     24     6         6        7      12 1.666667 1.666667 0.816497 0.816497 0.489898 0.489898  0.666858  0.666858            0            0
 10   1   3   3 1.009248 0.156262 0.004605 1.170115 10.814635 1.170115 0.943749  423.117188  412.632812  10  10 1.0    0       25     34     6         6       13      18 1.666667 1.666667 0.816497 0.816497 0.489898 0.489898  0.666858  0.666858            0            1
 10   1   4   4 0.809886 0.129585 0.004278 0.943749 11.758383 0.943749 0.937437  424.281250  413.617188   8   8 1.0    0       35     42     6         6       19      24 1.333333 1.333333 0.516398 0.516398 0.387298 0.387298  0.767638  0.767638            0            2
 10   1   5   5 0.816285 0.117956 0.003196 0.937437 12.695821 0.937437 0.946940  428.820312  418.113281   8   8 1.0    0       43     50     5         5       25      29 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 10   1   6   6 0.821244 0.122209 0.003487 0.946940 13.642761 0.946940 1.043761  433.277344  424.109375   8   8 1.0    0       51     58     5         5       30      34 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 10   1   7   7 0.906397 0.133600 0.003764 1.043761 14.686522 1.043761 0.691813  431.605469  421.777344   9   9 1.0    0       59     67     5         5       35      39 1.800000 1.800000 0.836660 0.836660 0.464811 0.464811  0.622260  0.622260            0            1
 10   1   8   8 0.600983 0.086612 0.004217 0.691813 15.378334 0.691813 0.000000  430.550781  420.382812   6   6 1.0    0       68     73     5         5       40      44 1.200000 1.200000 0.447214 0.447214 0.372678 0.372678  0.770330  0.770330            0            2
 11   3   1   1 1.141510 0.843215 0.000000 1.984724  1.984724 1.984724 0.000000  431.910156  421.554688  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   2   1   1 2.149170 0.784802 0.008394 2.942366  4.927090 4.927090 1.851398  452.449219  443.867188  26  26 1.0   26        1     26    10        10        1      10 2.600000 2.600000 2.796824 2.796824 1.075701 1.075701  0.420580  0.420580            0            3
 11   2   2   2 1.451427 0.392208 0.007763 1.851398  6.778489 1.851398 0.000000  452.046875  442.148438  18  18 1.0   18       27     44    10        10       11      20 1.800000 1.800000 1.135292 1.135292 0.630718 0.630718  0.670543  0.670543            0            3
 11   1   1   1 1.474379 0.271822 0.004794 1.750996  6.678086 6.678086 2.750018  445.101562  434.656250  14  14 1.0    0        1     14     6         6        1       6 2.333333 2.333333 1.861899 1.861899 0.797957 0.797957  0.413155  0.413155            0            0
 11   1   2   2 0.598053 0.296450 0.004117 0.898620  9.428104 2.750018 2.204226  434.906250  424.355469   6   6 1.0    0       15     20     6         6        7      12 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   1   3   3 1.797798 0.401051 0.005377 2.204226 11.632330 2.204226 1.570375  452.050781  444.640625  17  17 1.0    0       21     37     7         7       13      19 2.428571 2.428571 3.359422 3.359422 1.383291 1.383291  0.243367  0.243367            0            0
 11   1   4   4 1.125688 0.439851 0.004836 1.570375 13.202705 1.570375 0.578009  447.394531  438.457031  11  11 1.0    0       38     48     7         7       20      26 1.571429 1.571429 1.133893 1.133893 0.721569 0.721569  0.610492  0.610492            0            3
 11   1   5   5 0.508266 0.067327 0.002416 0.578009 13.780714 0.578009 0.805723  441.691406  430.871094   5   5 1.0    0       49     53     4         4       27      30 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            1
 11   1   6   6 0.703870 0.099301 0.002552 0.805723 14.586437 0.805723 1.195874  444.000000  433.121094   7   7 1.0    0       54     60     4         4       31      34 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
 11   1   7   7 1.026867 0.165134 0.003873 1.195874 15.782311 1.195874 1.044701  447.308594  436.734375  10  10 1.0    0       61     70     5         5       35      39 2.000000 2.000000 0.707107 0.707107 0.353553 0.353553  0.667710  0.667710            0            0
 11   1   8   8 0.709773 0.331182 0.003745 1.044701 16.827011 1.044701 0.000000  443.476562  432.593750   7   7 1.0    0       71     77     5         5       40      44 1.400000 1.400000 0.894427 0.894427 0.638877 0.638877  0.603019  0.603019            0            2
 12   3   1   1 1.140913 0.791755 0.000000 1.932668  1.932668 1.932668 0.000000  444.175781  433.292969  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 12   2   1   1 2.164606 0.572845 0.008057 2.745508  4.678176 4.678176 1.811191  470.164062  461.527344  26  26 1.0   26        1     26    10        10        1      10 2.600000 2.600000 2.716207 2.716207 1.044695 1.044695  0.429900  0.429900            0            3
 12   2   2   2 1.447802 0.355263 0.008127 1.811191  6.489368 1.811191 0.000000  469.550781  459.593750  18  18 1.0   18       27     44    10        10       11      20 1.800000 1.800000 0.918937 0.918937 0.510520 0.510520  0.716939  0.716939            0            3
 12   1   1   1 1.467957 0.504648 0.005128 1.977733  6.655910 6.655910 2.725048  459.937500  449.253906  14  14 1.0    0        1     14     6         6        1       6 2.333333 2.333333 1.861899 1.861899 0.797957 0.797957  0.413155  0.413155            0            0
 12   1   2   2 0.794966 0.115151 0.003740 0.913857  9.380958 2.725048 2.280969  451.164062  440.343750   8   8 1.0    0       15     22     6         6        7      12 1.333333 1.333333 0.816497 0.816497 0.612372 0.612372  0.666858  0.666858            0            0
 12   1   3   3 1.801628 0.474009 0.005332 2.280969 11.661927 2.280969 1.585767  467.425781  460.160156  17  17 1.0    0       23     39     7         7       13      19 2.428571 2.428571 2.149197 2.149197 0.884963 0.884963  0.410483  0.410483            0            0
 12   1   4   4 1.127283 0.453095 0.005389 1.585767 13.247694 1.585767 0.580208  464.628906  455.652344  11  11 1.0    0       40     50     7         7       20      26 1.571429 1.571429 1.133893 1.133893 0.721569 0.721569  0.610492  0.610492            0            3
 12   1   5   5 0.510008 0.068312 0.001888 0.580208 13.827903 0.580208 0.808633  440.507812  431.484375   5   5 1.0    0       51     55     4         4       27      30 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            1
 12   1   6   6 0.707217 0.099400 0.002016 0.808633 14.636535 0.808633 1.196542  450.625000  441.765625   7   7 1.0    0       56     62     4         4       31      34 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
 12   1   7   7 1.032372 0.160320 0.003849 1.196542 15.833077 1.196542 1.069623  458.808594  449.578125  10  10 1.0    0       63     72     5         5       35      39 2.000000 2.000000 0.707107 0.707107 0.353553 0.353553  0.667710  0.667710            0            0
 12   1   8   8 0.719964 0.345511 0.004148 1.069623 16.902700 1.069623 0.000000  457.996094  448.289062   7   7 1.0    0       73     79     5         5       40      44 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            2
 13   3   1   1 1.140043 0.751503 0.000000 1.891546  1.891546 1.891546 0.000000  461.835938  451.757812  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 13   2   1   1 2.045118 0.506492 0.008369 2.559979  4.451525 4.451525 2.254940  486.273438  477.832031  25  25 1.0   25        1     25    10        10        1      10 2.500000 2.500000 2.838231 2.838231 1.135292 1.135292  0.415869  0.415869            0            2
 13   2   2   2 1.540795 0.706048 0.008097 2.254940  6.706465 2.254940 0.000000  484.882812  474.820312  19  19 1.0   19       26     44    10        10       11      20 1.900000 1.900000 0.994429 0.994429 0.523384 0.523384  0.700181  0.700181            0            4
 13   1   1   1 1.478111 0.530902 0.004707 2.013720  6.465245 6.465245 3.171757  477.410156  466.832031  14  14 1.0    0        1     14     6         6        1       6 2.333333 2.333333 1.861899 1.861899 0.797957 0.797957  0.413155  0.413155            0            0
 13   1   2   2 0.800337 0.112747 0.003733 0.916816  9.637001 3.171757 2.049595  468.507812  457.718750   8   8 1.0    0       15     22     6         6        7      12 1.333333 1.333333 0.816497 0.816497 0.612372 0.612372  0.666858  0.666858            0            0
 13   1   3   3 1.682600 0.362301 0.004694 2.049595 11.686596 2.049595 1.220658  481.808594  474.992188  16  16 1.0    0       23     38     6         6       13      18 2.666667 2.666667 3.614784 3.614784 1.355544 1.355544  0.146501  0.146501            0            0
 13   1   4   4 1.040441 0.175183 0.005034 1.220658 12.907255 1.220658 0.463421  472.863281  462.101562  10  10 1.0    0       39     48     7         7       19      25 1.428571 1.428571 0.534522 0.534522 0.374166 0.374166  0.779939  0.779939            0            2
 13   1   5   5 0.410314 0.051236 0.001871 0.463421 13.370676 0.463421 0.934204  473.542969  462.937500   4   4 1.0    0       49     52     4         4       26      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 13   1   6   6 0.809809 0.121365 0.003029 0.934204 14.304879 0.934204 1.195103  478.316406  469.328125   8   8 1.0    0       53     60     5         5       30      34 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            1
 13   1   7   7 1.030707 0.160434 0.003961 1.195103 15.499982 1.195103 0.821029  478.957031  468.859375  10  10 1.0    0       61     70     5         5       35      39 2.000000 2.000000 0.707107 0.707107 0.353553 0.353553  0.667710  0.667710            0            0
 13   1   8   8 0.714301 0.102565 0.004164 0.821029 16.321011 0.821029 0.000000  475.691406  464.996094   7   7 1.0    0       71     77     5         5       40      44 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            2
 14   3   1   1 1.141856 0.900816 0.000000 2.042673  2.042673 2.042673 0.000000  476.554688  465.937500  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   2   1   1 2.595295 1.297194 0.009048 3.901536  5.944209 5.944209 1.526699  514.566406  513.210938  30  30 1.0   30        1     30    10        10        1      10 3.000000 3.000000 2.666667 2.666667 0.888889 0.888889  0.435729  0.435729            0            2
 14   2   2   2 1.046658 0.472277 0.007764 1.526699  7.470908 1.526699 0.000000  500.746094  491.800781  14  14 1.0   14       31     44    10        10       11      20 1.400000 1.400000 0.843274 0.843274 0.602339 0.602339  0.734410  0.734410            0            4
 14   1   1   1 1.592411 0.309901 0.005444 1.907756  7.851965 7.851965 3.204066  501.136719  495.519531  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
 14   1   2   2 1.217704 0.454529 0.005134 1.677367 11.056031 3.204066 1.441532  494.472656  486.250000  12  12 1.0    0       16     27     7         7        8      14 1.714286 1.714286 1.253566 1.253566 0.731247 0.731247  0.582450  0.582450            0            0
 14   1   3   3 1.221155 0.214353 0.006023 1.441532 12.497563 1.441532 1.638411  498.902344  490.410156  12  12 1.0    0       28     39     8         8       15      22 1.500000 1.500000 0.755929 0.755929 0.503953 0.503953  0.729255  0.729255            0            1
 14   1   4   4 1.370877 0.261682 0.005852 1.638411 14.135974 1.638411 0.665900  502.437500  492.785156  13  13 1.0    0       40     52     8         8       23      30 1.625000 1.625000 1.060660 1.060660 0.652714 0.652714  0.652298  0.652298            0            1
 14   1   5   5 0.594314 0.069620 0.001966 0.665900 14.801875 0.665900 0.462997  493.914062  483.632812   6   6 1.0    0       53     58     3         3       31      33 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 14   1   6   6 0.414165 0.047679 0.001153 0.462997 15.264872 0.462997 0.692508  493.917969  483.636719   4   4 1.0    0       59     62     3         3       34      36 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            1
 14   1   7   7 0.603420 0.086406 0.002681 0.692508 15.957379 0.692508 0.580454  494.980469  484.699219   6   6 1.0    0       63     68     4         4       37      40 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
 14   1   8   8 0.509232 0.068376 0.002845 0.580454 16.537833 0.580454 0.000000  492.335938  481.691406   5   5 1.0    0       69     73     4         4       41      44 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            2
 15   3   1   1 1.143274 0.945409 0.000000 2.088682  2.088682 2.088682 0.000000  496.769531  486.527344  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   2   1   1 2.038783 0.805151 0.008216 2.852151  4.940833 4.940833 1.641268  522.316406  514.785156  25  25 1.0   25        1     25    10        10        1      10 2.500000 2.500000 2.838231 2.838231 1.135292 1.135292  0.415869  0.415869            0            2
 15   2   2   2 1.351502 0.281680 0.008086 1.641268  6.582101 1.641268 0.000000  518.910156  511.343750  17  17 1.0   17       26     42    10        10       11      20 1.700000 1.700000 0.823273 0.823273 0.484278 0.484278  0.739148  0.739148            0            4
 15   1   1   1 1.481424 0.268291 0.004561 1.754276  6.695109 6.695109 2.561288  513.074219  502.757812  14  14 1.0    0        1     14     6         6        1       6 2.333333 2.333333 1.861899 1.861899 0.797957 0.797957  0.413155  0.413155            0            0
 15   1   2   2 0.798947 0.117119 0.003954 0.920021  9.256398 2.561288 2.061754  491.718750  484.332031   8   8 1.0    0       15     22     6         6        7      12 1.333333 1.333333 0.816497 0.816497 0.612372 0.612372  0.666858  0.666858            0            0
 15   1   3   3 1.683120 0.373631 0.005002 2.061754 11.318151 2.061754 1.528543  516.808594  511.269531  16  16 1.0    0       23     38     6         6       13      18 2.666667 2.666667 2.250926 2.250926 0.844097 0.844097  0.342021  0.342021            0            0
 15   1   4   4 1.034451 0.488559 0.005532 1.528543 12.846694 1.528543 0.575396  509.625000  499.433594  10  10 1.0    0       39     48     7         7       19      25 1.428571 1.428571 0.534522 0.534522 0.374166 0.374166  0.779939  0.779939            0            2
 15   1   5   5 0.505702 0.067519 0.002175 0.575396 13.422090 0.575396 0.941110  505.746094  495.511719   5   5 1.0    0       49     53     4         4       26      29 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            1
 15   1   6   6 0.819468 0.118976 0.002667 0.941110 14.363201 0.941110 0.922738  508.500000  498.199219   8   8 1.0    0       54     61     4         4       30      33 2.000000 2.000000 0.816497 0.816497 0.408248 0.408248  0.569421  0.569421            0            0
 15   1   7   7 0.809274 0.110903 0.002561 0.922738 15.285939 0.922738 0.695761  508.402344  498.054688   8   8 1.0    0       62     69     4         4       34      37 2.000000 2.000000 0.816497 0.816497 0.408248 0.408248  0.569421  0.569421            0            1
 15   1   8   8 0.605129 0.086509 0.004124 0.695761 15.981700 0.695761 0.000000  508.835938  498.250000   6   6 1.0    0       70     75     5         5       38      42 1.200000 1.200000 0.447214 0.447214 0.372678 0.372678  0.770330  0.770330            0            2
 16   3   1   1 1.146171 0.774357 0.000000 1.920528  1.920528 1.920528 0.000000  512.144531  502.250000  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   2   1   1 2.366550 1.193809 0.008360 3.568720  5.489248 5.489248 1.483914  539.761719  531.109375  28  28 1.0   28        1     28    10        10        1      10 2.800000 2.800000 2.699794 2.699794 0.964212 0.964212  0.431822  0.431822            0            2
 16   2   2   2 1.239217 0.236515 0.008182 1.483914  6.973162 1.483914 0.000000  533.367188  523.101562  16  16 1.0   16       29     44    10        10       11      20 1.600000 1.600000 0.843274 0.843274 0.527046 0.527046  0.734410  0.734410            0            4
 16   1   1   1 1.599309 0.298710 0.005526 1.903545  7.392794 7.392794 2.900045  530.781250  525.167969  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
 16   1   2   2 1.222788 0.188555 0.004788 1.416131 10.292838 2.900045 1.647018  524.578125  516.144531  12  12 1.0    0       16     27     7         7        8      14 1.714286 1.714286 0.755929 0.755929 0.440959 0.440959  0.710676  0.710676            0            0
 16   1   3   3 1.131065 0.510707 0.005246 1.647018 11.939856 1.647018 1.463121  527.781250  519.792969  11  11 1.0    0       28     38     7         7       15      21 1.571429 1.571429 0.786796 0.786796 0.500688 0.500688  0.701721  0.701721            0            2
 16   1   4   4 1.245846 0.212434 0.004841 1.463121 13.402978 1.463121 0.571204  530.949219  522.871094  12  12 1.0    0       39     50     7         7       22      28 1.714286 1.714286 0.755929 0.755929 0.440959 0.440959  0.710676  0.710676            0            0
 16   1   5   5 0.503486 0.065500 0.002217 0.571204 13.974181 0.571204 1.241731  524.367188  514.089844   5   5 1.0    0       51     55     4         4       29      32 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 16   1   6   6 0.815890 0.423079 0.002762 1.241731 15.215912 1.241731 0.576784  525.914062  515.621094   8   8 1.0    0       56     63     4         4       33      36 2.000000 2.000000 0.816497 0.816497 0.408248 0.408248  0.569421  0.569421            0            1
 16   1   7   7 0.506366 0.067643 0.002775 0.576784 15.792697 0.576784 0.578562  524.390625  514.089844   5   5 1.0    0       64     68     4         4       37      40 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            1
 16   1   8   8 0.507458 0.068035 0.003069 0.578562 16.371259 0.578562 0.000000  524.390625  514.089844   5   5 1.0    0       69     73     4         4       41      44 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            2
 17   3   1   1 1.141729 0.782789 0.000000 1.924518  1.924518 1.924518 0.000000  526.421875  516.527344  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   2   1   1 2.590914 0.922361 0.008373 3.521649  5.446166 5.446166 1.574743  561.761719  560.679688  30  30 1.0   30        1     30    10        10        1      10 3.000000 3.000000 2.538591 2.538591 0.846197 0.846197  0.451170  0.451170            0            2
 17   2   2   2 1.048442 0.518809 0.007492 1.574743  7.020910 1.574743 0.000000  549.359375  539.843750  14  14 1.0   14       31     44    10        10       11      20 1.400000 1.400000 0.843274 0.843274 0.602339 0.602339  0.734410  0.734410            0            4
 17   1   1   1 1.605025 0.623826 0.005365 2.234216  7.680383 7.680383 2.861280  549.468750  543.957031  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
 17   1   2   2 1.114318 0.167626 0.004592 1.286536 10.541662 2.861280 1.604364  539.140625  529.675781  11  11 1.0    0       16     26     7         7        8      14 1.571429 1.571429 0.786796 0.786796 0.500688 0.500688  0.701721  0.701721            0            0
 17   1   3   3 1.351719 0.246181 0.006464 1.604364 12.146027 1.604364 1.624000  548.203125  538.863281  13  13 1.0    0       27     39     8         8       15      22 1.625000 1.625000 0.744024 0.744024 0.457861 0.457861  0.732527  0.732527            0            1
 17   1   4   4 1.359236 0.259056 0.005708 1.624000 13.770027 1.624000 0.671692  550.492188  541.074219  13  13 1.0    0       40     52     8         8       23      30 1.625000 1.625000 0.744024 0.744024 0.457861 0.457861  0.732527  0.732527            0            1
 17   1   5   5 0.599332 0.070497 0.001863 0.671692 14.441719 0.671692 0.576773  542.910156  532.488281   6   6 1.0    0       53     58     3         3       31      33 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 17   1   6   6 0.511749 0.063085 0.001938 0.576773 15.018492 0.576773 0.590258  542.910156  532.488281   5   5 1.0    0       59     63     3         3       34      36 1.666667 1.666667 1.154701 1.154701 0.692820 0.692820  0.301253  0.301253            0            0
 17   1   7   7 0.507265 0.080205 0.002787 0.590258 15.608750 0.590258 0.581816  542.910156  532.488281   5   5 1.0    0       64     68     4         4       37      40 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            2
 17   1   8   8 0.505846 0.072920 0.003050 0.581816 16.190565 0.581816 0.000000  543.410156  532.988281   5   5 1.0    0       69     73     4         4       41      44 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            2
 18   3   1   1 1.143632 0.816574 0.000000 1.960206  1.960206 1.960206 0.000000  544.843750  534.394531  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 18   2   1   1 2.040437 0.496687 0.008481 2.545606  4.505811 4.505811 2.237370  568.101562  561.800781  25  25 1.0   25        1     25    10        10        1      10 2.500000 2.500000 2.758824 2.758824 1.103530 1.103530  0.424948  0.424948            0            2
 18   2   2   2 1.525369 0.704481 0.007521 2.237370  6.743182 2.237370 0.000000  569.632812  560.117188  19  19 1.0   19       26     44    10        10       11      20 1.900000 1.900000 1.286684 1.286684 0.677202 0.677202  0.640794  0.640794            0            4
 18   1   1   1 1.465213 0.273742 0.004650 1.743605  6.249417 6.249417 3.395141  563.597656  554.195312  14  14 1.0    0        1     14     6         6        1       6 2.333333 2.333333 1.861899 1.861899 0.797957 0.797957  0.413155  0.413155            0            0
 18   1   2   2 1.004518 0.149459 0.003794 1.157770  9.644558 3.395141 1.182188  554.398438  544.117188  10  10 1.0    0       15     24     6         6        7      12 1.666667 1.666667 0.816497 0.816497 0.489898 0.489898  0.666858  0.666858            0            0
 18   1   3   3 1.012326 0.166069 0.003793 1.182188 10.826745 1.182188 1.215603  556.007812  545.906250  10  10 1.0    0       25     34     6         6       13      18 1.666667 1.666667 0.816497 0.816497 0.489898 0.489898  0.666858  0.666858            0            0
 18   1   4   4 1.025979 0.184366 0.005258 1.215603 12.042348 1.215603 0.459866  557.265625  547.035156  10  10 1.0    0       35     44     7         7       19      25 1.428571 1.428571 0.534522 0.534522 0.374166 0.374166  0.779939  0.779939            0            2
 18   1   5   5 0.407867 0.050052 0.001947 0.459866 12.502214 0.459866 0.927885  557.972656  548.023438   4   4 1.0    0       45     48     4         4       26      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 18   1   6   6 0.805332 0.119310 0.003244 0.927885 13.430099 0.927885 1.174984  562.753906  555.375000   8   8 1.0    0       49     56     5         5       30      34 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            1
 18   1   7   7 1.017138 0.154163 0.003683 1.174984 14.605083 1.174984 0.812707  562.894531  553.820312  10  10 1.0    0       57     66     5         5       35      39 2.000000 2.000000 0.707107 0.707107 0.353553 0.353553  0.667710  0.667710            0            0
 18   1   8   8 0.708724 0.099906 0.004077 0.812707 15.417790 0.812707 0.000000  559.406250  549.105469   7   7 1.0    0       67     73     5         5       40      44 1.400000 1.400000 0.894427 0.894427 0.638877 0.638877  0.603019  0.603019            0            2
 19   3   1   1 1.139388 0.735404 0.000000 1.874792  1.874792 1.874792 0.000000  560.910156  550.523438  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   2   1   1 2.045944 0.498274 0.008269 2.552487  4.427278 4.427278 2.375942  585.648438  578.183594  25  25 1.0   25        1     25    10        10        1      10 2.500000 2.500000 2.758824 2.758824 1.103530 1.103530  0.424948  0.424948            0            2
 19   2   2   2 1.538722 0.829308 0.007912 2.375942  6.803221 2.375942 0.000000  584.695312  575.035156  19  19 1.0   19       26     44    10        10       11      20 1.900000 1.900000 0.875595 0.875595 0.460839 0.460839  0.726861  0.726861            0            4
 19   1   1   1 1.479154 0.258367 0.004495 1.742016  6.169295 6.169295 3.293685  577.449219  567.328125  14  14 1.0    0        1     14     6         6        1       6 2.333333 2.333333 1.861899 1.861899 0.797957 0.797957  0.413155  0.413155            0            0
 19   1   2   2 0.799042 0.114874 0.003826 0.917742  9.462979 3.293685 1.178996  567.937500  558.281250   8   8 1.0    0       15     22     6         6        7      12 1.333333 1.333333 0.516398 0.516398 0.387298 0.387298  0.767638  0.767638            0            0
 19   1   3   3 1.010378 0.164692 0.003926 1.178996 10.641975 1.178996 1.210280  569.351562  559.269531  10  10 1.0    0       23     32     6         6       13      18 1.666667 1.666667 0.816497 0.816497 0.489898 0.489898  0.666858  0.666858            0            0
 19   1   4   4 1.023094 0.181962 0.005224 1.210280 11.852255 1.210280 0.460206  573.226562  562.832031  10  10 1.0    0       33     42     7         7       19      25 1.428571 1.428571 0.534522 0.534522 0.374166 0.374166  0.779939  0.779939            0            2
 19   1   5   5 0.407422 0.050827 0.001957 0.460206 12.312461 0.460206 0.934821  573.308594  562.914062   4   4 1.0    0       43     46     4         4       26      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 19   1   6   6 0.811490 0.120309 0.003021 0.934821 13.247282 0.934821 1.191256  574.878906  564.484375   8   8 1.0    0       47     54     5         5       30      34 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 19   1   7   7 1.024698 0.162896 0.003662 1.191256 14.438538 1.191256 0.811286  580.527344  570.660156  10  10 1.0    0       55     64     5         5       35      39 2.000000 2.000000 0.707107 0.707107 0.353553 0.353553  0.667710  0.667710            0            0
 19   1   8   8 0.708601 0.098765 0.003919 0.811286 15.249823 0.811286 0.000000  577.078125  566.679688   7   7 1.0    0       65     71     5         5       40      44 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            2
 20   3   1   1 1.132584 0.745614 0.000000 1.878198  1.878198 1.878198 0.000000  576.976562  566.644531  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   2   1   1 1.926793 0.420368 0.008073 2.355235  4.233432 4.233432 1.990198  598.828125  591.691406  24  24 1.0   24        1     24    10        10        1      10 2.400000 2.400000 2.796824 2.796824 1.165343 1.165343  0.420580  0.420580            0            3
 20   2   2   2 1.620306 0.361795 0.008096 1.990198  6.223630 1.990198 0.000000  601.187500  595.160156  20  20 1.0   20       25     44    10        10       11      20 2.000000 2.000000 0.942809 0.942809 0.471405 0.471405  0.711570  0.711570            0            3
 20   1   1   1 1.473930 0.622395 0.004836 2.101161  6.334593 6.334593 3.141525  592.878906  582.761719  14  14 1.0    0        1     14     6         6        1       6 2.333333 2.333333 1.861899 1.861899 0.797957 0.797957  0.413155  0.413155            0            0
 20   1   2   2 1.001942 0.145299 0.004086 1.151327  9.476118 3.141525 1.308986  582.875000  572.722656  10  10 1.0    0       15     24     6         6        7      12 1.666667 1.666667 0.816497 0.816497 0.489898 0.489898  0.666858  0.666858            0            0
 20   1   3   3 1.119006 0.185152 0.004828 1.308986 10.785105 1.308986 0.824938  590.242188  582.402344  11  11 1.0    0       25     35     6         6       13      18 1.833333 1.833333 0.752773 0.752773 0.410603 0.410603  0.686789  0.686789            0            0
 20   1   4   4 0.704693 0.116113 0.004132 0.824938 11.610043 0.824938 1.308702  585.453125  575.082031   7   7 1.0    0       36     42     6         6       19      24 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            3
 20   1   5   5 0.808445 0.497217 0.003040 1.308702 12.918745 1.308702 0.939725  589.148438  578.910156   8   8 1.0    0       43     50     5         5       25      29 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 20   1   6   6 0.811330 0.124527 0.003868 0.939725 13.858470 0.939725 1.036282  577.214844  567.875000   8   8 1.0    0       51     58     5         5       30      34 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 20   1   7   7 0.899704 0.132788 0.003790 1.036282 14.894752 1.036282 0.692749  586.500000  578.328125   9   9 1.0    0       59     67     5         5       35      39 1.800000 1.800000 0.836660 0.836660 0.464811 0.464811  0.622260  0.622260            0            1
 20   1   8   8 0.602489 0.086402 0.003858 0.692749 15.587500 0.692749 0.000000  584.726562  575.339844   6   6 1.0    0       68     73     5         5       40      44 1.200000 1.200000 0.447214 0.447214 0.372678 0.372678  0.770330  0.770330            0            2
 21   3   1   1 1.132534 0.736909 0.000000 1.869443  1.869443 1.869443 0.000000  588.617188  579.265625  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 21   2   1   1 2.598233 0.969098 0.008741 3.576071  5.445514 5.445514 1.236203  626.804688  626.312500  30  30 1.0   30        1     30    10        10        1      10 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809  0.416980  0.416980            0            2
 21   2   2   2 1.044383 0.184516 0.007304 1.236203  6.681717 1.236203 0.000000  616.101562  606.609375  14  14 1.0   14       31     44    10        10       11      20 1.400000 1.400000 0.843274 0.843274 0.602339 0.602339  0.734410  0.734410            0            4
 21   1   1   1 1.581352 0.692913 0.005712 2.279976  7.725490 7.725490 2.514717  613.410156  607.972656  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
 21   1   2   2 1.107005 0.166799 0.004710 1.278514 10.240207 2.514717 1.584264  603.855469  593.703125  11  11 1.0    0       16     26     7         7        8      14 1.571429 1.571429 0.975900 0.975900 0.621027 0.621027  0.650023  0.650023            0            0
 21   1   3   3 1.341162 0.237273 0.005829 1.584264 11.824471 1.584264 1.617605  613.128906  603.769531  13  13 1.0    0       27     39     8         8       15      22 1.625000 1.625000 0.744024 0.744024 0.457861 0.457861  0.732527  0.732527            0            1
 21   1   4   4 1.354812 0.257162 0.005632 1.617605 13.442077 1.617605 0.667282  616.832031  607.835938  13  13 1.0    0       40     52     8         8       23      30 1.625000 1.625000 0.744024 0.744024 0.457861 0.457861  0.732527  0.732527            0            1
 21   1   5   5 0.596010 0.069277 0.001995 0.667282 14.109359 0.667282 0.572954  611.394531  601.449219   6   6 1.0    0       53     58     3         3       31      33 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 21   1   6   6 0.511194 0.060583 0.001178 0.572954 14.682313 0.572954 0.585128  611.394531  601.449219   5   5 1.0    0       59     63     3         3       34      36 1.666667 1.666667 1.154701 1.154701 0.692820 0.692820  0.301253  0.301253            0            0
 21   1   7   7 0.505894 0.077072 0.002162 0.585128 15.267441 0.585128 0.574610  611.398438  601.453125   5   5 1.0    0       64     68     4         4       37      40 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            2
 21   1   8   8 0.505560 0.066294 0.002757 0.574610 15.842051 0.574610 0.000000  611.398438  601.453125   5   5 1.0    0       69     73     4         4       41      44 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            2
 22   3   1   1 1.136925 0.800561 0.000000 1.937485  1.937485 1.937485 0.000000  611.429688  601.339844  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   2   1   1 2.249874 0.551428 0.008325 2.809627  4.747113 4.747113 1.393102  633.847656  625.695312  27  27 1.0   27        1     27    10        10        1      10 2.700000 2.700000 2.869379 2.869379 1.062733 1.062733  0.412359  0.412359            0            2
 22   2   2   2 1.158918 0.225710 0.008474 1.393102  6.140214 1.393102 0.000000  631.960938  621.980469  15  15 1.0   15       28     42    10        10       11      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.767739  0.767739            0            4
 22   1   1   1 1.464115 0.262435 0.004930 1.731479  6.478592 6.478592 2.848266  625.703125  615.785156  14  14 1.0    0        1     14     6         6        1       6 2.333333 2.333333 1.861899 1.861899 0.797957 0.797957  0.413155  0.413155            0            0
 22   1   2   2 0.902531 0.548078 0.004556 1.455165  9.326858 2.848266 1.454143  618.140625  607.976562   9   9 1.0    0       15     23     7         7        7      13 1.285714 1.285714 0.755929 0.755929 0.587945 0.587945  0.710676  0.710676            0            0
 22   1   3   3 1.228117 0.220764 0.005261 1.454143 10.781001 1.454143 1.339370  627.632812  619.167969  12  12 1.0    0       24     35     7         7       14      20 1.714286 1.714286 1.112697 1.112697 0.649073 0.649073  0.615622  0.615622            0            1
 22   1   4   4 1.130713 0.203427 0.005229 1.339370 12.120371 1.339370 0.578105  628.441406  619.863281  11  11 1.0    0       36     46     7         7       21      27 1.571429 1.571429 0.786796 0.786796 0.500688 0.500688  0.701721  0.701721            0            1
 22   1   5   5 0.512308 0.064010 0.001787 0.578105 12.698476 0.578105 0.923029  623.218750  613.003906   5   5 1.0    0       47     51     3         3       28      30 1.666667 1.666667 0.577350 0.577350 0.346410 0.346410  0.585162  0.585162            0            0
 22   1   6   6 0.809222 0.111222 0.002584 0.923029 13.621504 0.923029 0.570949  624.742188  614.535156   8   8 1.0    0       52     59     4         4       31      34 2.000000 2.000000 0.816497 0.816497 0.408248 0.408248  0.569421  0.569421            0            1
 22   1   7   7 0.504089 0.064306 0.002554 0.570949 14.192453 0.570949 0.988852  623.218750  613.003906   5   5 1.0    0       60     64     4         4       35      38 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            1
 22   1   8   8 0.505209 0.480982 0.002661 0.988852 15.181305 0.988852 0.000000  623.218750  613.003906   5   5 1.0    0       65     69     4         4       39      42 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            2
 23   3   1   1 1.137711 0.747601 0.000000 1.885312  1.885312 1.885312 0.000000  624.617188  614.410156  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   2   1   1 2.695715 1.157986 0.008741 3.862441  5.747753 5.747753 0.973554  659.457031  657.015625  31  31 1.0   31        1     31    10        10        1      10 3.100000 3.100000 2.601282 2.601282 0.839123 0.839123  0.443543  0.443543            0            2
 23   2   2   2 0.816040 0.151263 0.006251 0.973554  6.721307 0.973554 0.000000  643.222656  633.417969  11  11 1.0   11       32     42    10        10       11      20 1.100000 1.100000 0.316228 0.316228 0.287480 0.287480  0.880669  0.880669            0            4
 23   1   1   1 1.595302 0.309334 0.005501 1.910137  7.657890 7.657890 2.811472  647.179688  641.281250  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
 23   1   2   2 1.552945 0.279152 0.005822 1.837918 10.469362 2.811472 1.932943  646.109375  636.343750  15  15 1.0    0       16     30     8         8        8      15 1.875000 1.875000 0.834523 0.834523 0.445079 0.445079  0.708198  0.708198            0            0
 23   1   3   3 1.250568 0.676001 0.006374 1.932943 12.402304 1.932943 2.565459  648.644531  639.812500  12  12 1.0    0       31     42     8         8       16      23 1.500000 1.500000 0.755929 0.755929 0.503953 0.503953  0.729255  0.729255            0            1
 23   1   4   4 2.047380 0.511792 0.006287 2.565459 14.967763 2.565459 0.349711  656.843750  651.000000  19  19 1.0    0       43     61     8         8       24      31 2.375000 2.375000 2.386719 2.386719 1.004934 1.004934  0.413371  0.413371            0            1
 23   1   5   5 0.315005 0.033735 0.000972 0.349711 15.317475 0.349711 0.360542  640.121094  630.324219   3   3 1.0    0       62     64     2         2       32      33 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 23   1   6   6 0.315082 0.043885 0.001575 0.360542 15.678016 0.360542 0.454135  640.214844  630.355469   3   3 1.0    0       65     67     3         3       34      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 23   1   7   7 0.405825 0.046666 0.001644 0.454135 16.132151 0.454135 0.455602  640.343750  630.511719   4   4 1.0    0       68     71     3         3       37      39 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            1
 23   1   8   8 0.406831 0.046377 0.002394 0.455602 16.587753 0.455602 0.000000  640.378906  630.542969   4   4 1.0    0       72     75     3         3       40      42 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            1
 24   3   1   1 1.139788 0.677263 0.000000 1.817051  1.817051 1.817051 0.000000  644.449219  635.031250  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   2   1   1 2.341507 1.289297 0.008173 3.638977  5.456028 5.456028 1.919026  669.640625  661.125000  28  28 1.0   28        1     28    10        10        1      10 2.800000 2.800000 2.658320 2.658320 0.949400 0.949400  0.436718  0.436718            0            2
 24   2   2   2 1.230651 0.679936 0.008438 1.919026  7.375054 1.919026 0.000000  665.636719  655.957031  16  16 1.0   16       29     44    10        10       11      20 1.600000 1.600000 0.966092 0.966092 0.603807 0.603807  0.706396  0.706396            0            4
 24   1   1   1 1.587917 0.301221 0.005609 1.894747  7.350775 7.350775 3.324842  662.855469  656.531250  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
 24   1   2   2 1.211352 0.189292 0.005173 1.405817 10.675618 3.324842 1.323420  659.593750  651.570312  12  12 1.0    0       16     27     7         7        8      14 1.714286 1.714286 0.755929 0.755929 0.440959 0.440959  0.710676  0.710676            0            0
 24   1   3   3 1.127624 0.190328 0.005469 1.323420 11.999038 1.323420 1.485319  659.687500  651.875000  11  11 1.0    0       28     38     7         7       15      21 1.571429 1.571429 0.786796 0.786796 0.500688 0.500688  0.701721  0.701721            0            1
 24   1   4   4 1.242937 0.237092 0.005290 1.485319 13.484357 1.485319 0.563639  663.398438  656.097656  12  12 1.0    0       39     50     7         7       22      28 1.714286 1.714286 0.755929 0.755929 0.440959 0.440959  0.710676  0.710676            0            1
 24   1   5   5 0.498519 0.062466 0.002655 0.563639 14.047996 0.563639 0.925845  655.515625  645.500000   5   5 1.0    0       51     55     4         4       29      32 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 24   1   6   6 0.809829 0.113234 0.002783 0.925845 14.973841 0.925845 0.572523  657.089844  647.042969   8   8 1.0    0       56     63     4         4       33      36 2.000000 2.000000 0.816497 0.816497 0.408248 0.408248  0.569421  0.569421            0            1
 24   1   7   7 0.505634 0.064381 0.002508 0.572523 15.546365 0.572523 0.577547  655.558594  645.500000   5   5 1.0    0       64     68     4         4       37      40 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            1
 24   1   8   8 0.505494 0.069499 0.002555 0.577547 16.123912 0.577547 0.000000  655.558594  645.500000   5   5 1.0    0       69     73     4         4       41      44 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            2
 25   3   1   1 1.140040 0.735043 0.000000 1.875083  1.875083 1.875083 0.000000  659.117188  649.460938  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 25   2   1   1 1.933684 0.429078 0.007979 2.370741  4.245825 4.245825 1.996666  679.722656  673.023438  24  24 1.0   24        1     24    10        10        1      10 2.400000 2.400000 2.796824 2.796824 1.165343 1.165343  0.420580  0.420580            0            3
 25   2   2   2 1.612891 0.375543 0.008232 1.996666  6.242491 1.996666 0.000000  682.507812  677.277344  20  20 1.0   20       25     44    10        10       11      20 2.000000 2.000000 1.247219 1.247219 0.623610 0.623610  0.648355  0.648355            0            3
 25   1   1   1 1.467116 0.719237 0.004751 2.191103  6.436928 6.436928 3.146036  674.320312  664.660156  14  14 1.0    0        1     14     6         6        1       6 2.333333 2.333333 1.861899 1.861899 0.797957 0.797957  0.413155  0.413155            0            0
 25   1   2   2 1.001797 0.143261 0.004311 1.149370  9.582964 3.146036 1.296299  666.210938  656.187500  10  10 1.0    0       15     24     6         6        7      12 1.666667 1.666667 0.816497 0.816497 0.489898 0.489898  0.666858  0.666858            0            0
 25   1   3   3 1.111148 0.180629 0.004522 1.296299 10.879263 1.296299 0.834937  671.636719  664.093750  11  11 1.0    0       25     35     6         6       13      18 1.833333 1.833333 0.983192 0.983192 0.536287 0.536287  0.617857  0.617857            0            0
 25   1   4   4 0.703079 0.128278 0.003580 0.834937 11.714200 0.834937 0.929251  668.773438  659.925781   7   7 1.0    0       36     42     6         6       19      24 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            3
 25   1   5   5 0.805532 0.120782 0.002937 0.929251 12.643451 0.929251 0.936846  672.289062  663.437500   8   8 1.0    0       43     50     5         5       25      29 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 25   1   6   6 0.813458 0.120181 0.003206 0.936846 13.580297 0.936846 1.037421  669.644531  659.839844   8   8 1.0    0       51     58     5         5       30      34 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 25   1   7   7 0.899017 0.134727 0.003677 1.037421 14.617718 1.037421 0.691066  673.191406  664.476562   9   9 1.0    0       59     67     5         5       35      39 1.800000 1.800000 0.836660 0.836660 0.464811 0.464811  0.622260  0.622260            0            1
 25   1   8   8 0.600834 0.086110 0.004122 0.691066 15.308784 0.691066 0.000000  670.503906  660.734375   6   6 1.0    0       68     73     5         5       40      44 1.200000 1.200000 0.447214 0.447214 0.372678 0.372678  0.770330  0.770330            0            2
 26   3   1   1 1.135793 0.608034 0.000000 1.743827  1.743827 1.743827 0.000000  672.898438  663.546875  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   2   1   1 2.024112 0.479766 0.008044 2.511922  4.255749 4.255749 1.966438  694.921875  688.421875  25  25 1.0   25        1     25    10        10        1      10 2.500000 2.500000 2.798809 2.798809 1.119524 1.119524  0.420353  0.420353            0            2
 26   2   2   2 1.530530 0.428095 0.007813 1.966438  6.222187 1.966438 0.000000  694.617188  685.429688  19  19 1.0   19       26     44    10        10       11      20 1.900000 1.900000 0.737865 0.737865 0.388350 0.388350  0.759984  0.759984            0            4
 26   1   1   1 1.462772 0.269173 0.004693 1.736638  5.992388 5.992388 2.879836  688.597656  679.296875  14  14 1.0    0        1     14     6         6        1       6 2.333333 2.333333 1.861899 1.861899 0.797957 0.797957  0.413155  0.413155            0            0
 26   1   2   2 0.797667 0.111726 0.004005 0.913398  8.872223 2.879836 1.184323  679.656250  669.753906   8   8 1.0    0       15     22     6         6        7      12 1.333333 1.333333 0.516398 0.516398 0.387298 0.387298  0.767638  0.767638            0            0
 26   1   3   3 1.014563 0.165195 0.004566 1.184323 10.056546 1.184323 1.686768  682.183594  672.492188  10  10 1.0    0       23     32     6         6       13      18 1.666667 1.666667 0.816497 0.816497 0.489898 0.489898  0.666858  0.666858            0            0
 26   1   4   4 1.028607 0.652740 0.005420 1.686768 11.743314 1.686768 0.458765  683.871094  673.910156  10  10 1.0    0       33     42     7         7       19      25 1.428571 1.428571 0.534522 0.534522 0.374166 0.374166  0.779939  0.779939            0            2
 26   1   5   5 0.406441 0.050448 0.001876 0.458765 12.202079 0.458765 0.935055  682.820312  673.062500   4   4 1.0    0       43     46     4         4       26      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 26   1   6   6 0.810784 0.121261 0.003010 0.935055 13.137134 0.935055 1.186343  685.777344  676.281250   8   8 1.0    0       47     54     5         5       30      34 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 26   1   7   7 1.022041 0.160722 0.003580 1.186343 14.323477 1.186343 0.813905  690.246094  680.789062  10  10 1.0    0       55     64     5         5       35      39 2.000000 2.000000 0.707107 0.707107 0.353553 0.353553  0.667710  0.667710            0            0
 26   1   8   8 0.709544 0.100261 0.004099 0.813905 15.137382 0.813905 0.000000  686.218750  676.445312   7   7 1.0    0       65     71     5         5       40      44 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            2
 27   3   1   1 1.138438 0.910506 0.000000 2.048944  2.048944 2.048944 0.000000  687.750000  677.937500  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   2   1   1 1.920520 0.923253 0.007912 2.851685  4.900629 4.900629 2.001635  707.578125  701.074219  24  24 1.0   24        1     24    10        10        1      10 2.400000 2.400000 2.796824 2.796824 1.165343 1.165343  0.420580  0.420580            0            3
 27   2   2   2 1.625695 0.367948 0.007991 2.001635  6.902264 2.001635 0.000000  711.238281  705.640625  20  20 1.0   20       25     44    10        10       11      20 2.000000 2.000000 1.490712 1.490712 0.745356 0.745356  0.603676  0.603676            0            3
 27   1   1   1 1.456343 0.270256 0.004695 1.731294  6.631923 6.631923 2.915131  700.695312  691.488281  14  14 1.0    0        1     14     6         6        1       6 2.333333 2.333333 1.861899 1.861899 0.797957 0.797957  0.413155  0.413155            0            0
 27   1   2   2 0.797367 0.112244 0.003885 0.913495  9.547053 2.915131 1.299384  692.589844  682.605469   8   8 1.0    0       15     22     6         6        7      12 1.333333 1.333333 0.516398 0.516398 0.387298 0.387298  0.767638  0.767638            0            0
 27   1   3   3 1.114664 0.180141 0.004578 1.299384 10.846437 1.299384 0.815997  700.363281  693.156250  11  11 1.0    0       23     33     6         6       13      18 1.833333 1.833333 0.983192 0.983192 0.536287 0.536287  0.617857  0.617857            0            0
 27   1   4   4 0.704223 0.107605 0.004169 0.815997 11.662433 0.815997 0.928434  695.562500  686.222656   7   7 1.0    0       34     40     6         6       19      24 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            3
 27   1   5   5 0.807276 0.118093 0.003066 0.928434 12.590867 0.928434 0.941173  700.656250  692.191406   8   8 1.0    0       41     48     5         5       25      29 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 27   1   6   6 0.817089 0.120765 0.003319 0.941173 13.532041 0.941173 1.411491  702.796875  694.667969   8   8 1.0    0       49     56     5         5       30      34 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 27   1   7   7 0.796528 0.611517 0.003447 1.411491 14.943532 1.411491 1.304512  698.714844  688.871094   8   8 1.0    0       57     64     5         5       35      39 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 27   1   8   8 1.117275 0.183135 0.004102 1.304512 16.248044 1.304512 0.000000  706.140625  698.574219  11  11 1.0    0       65     75     5         5       40      44 2.200000 2.200000 1.643168 1.643168 0.746894 0.746894  0.396076  0.396076            0            3
 28   3   1   1 1.134056 0.699786 0.000000 1.833841  1.833841 1.833841 0.000000  702.617188  693.156250  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   2   1   1 2.720037 0.844149 0.008695 3.572881  5.406722 5.406722 0.977665  736.773438  735.203125  31  31 1.0   31        1     31    10        10        1      10 3.100000 3.100000 2.514403 2.514403 0.811098 0.811098  0.454148  0.454148            0            2
 28   2   2   2 0.819445 0.152154 0.006066 0.977665  6.384387 0.977665 0.000000  720.308594  710.644531  11  11 1.0   11       32     42    10        10       11      20 1.100000 1.100000 0.316228 0.316228 0.287480 0.287480  0.880669  0.880669            0            4
 28   1   1   1 1.577559 0.298649 0.005697 1.881905  7.288628 7.288628 2.279068  725.632812  720.460938  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
 28   1   2   2 1.116379 0.179464 0.005559 1.301403  9.567695 2.279068 2.102515  722.125000  714.644531  11  11 1.0    0       16     26     8         8        8      15 1.375000 1.375000 0.517549 0.517549 0.376399 0.376399  0.799419  0.799419            0            0
 28   1   3   3 1.331442 0.764704 0.006368 2.102515 11.670210 2.102515 2.063255  725.566406  717.054688  13  13 1.0    0       27     39     8         8       16      23 1.625000 1.625000 0.744024 0.744024 0.457861 0.457861  0.732527  0.732527            0            1
 28   1   4   4 1.709882 0.346830 0.006543 2.063255 13.733466 2.063255 0.349805  733.136719  728.101562  16  16 1.0    0       40     55     8         8       24      31 2.000000 2.000000 0.755929 0.755929 0.377964 0.377964  0.729255  0.729255            0            1
 28   1   5   5 0.315183 0.033622 0.001000 0.349805 14.083271 0.349805 0.359402  719.160156  709.609375   3   3 1.0    0       56     58     2         2       32      33 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 28   1   6   6 0.314032 0.044265 0.001105 0.359402 14.442673 0.359402 0.457044  719.160156  709.609375   3   3 1.0    0       59     61     3         3       34      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 28   1   7   7 0.408092 0.047188 0.001764 0.457044 14.899717 0.457044 0.456491  719.160156  709.609375   4   4 1.0    0       62     65     3         3       37      39 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            1
 28   1   8   8 0.407006 0.046897 0.002588 0.456491 15.356208 0.456491 0.000000  719.160156  709.609375   4   4 1.0    0       66     69     3         3       40      42 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            1
 29   3   1   1 1.138084 0.892785 0.000000 2.030869  2.030869 2.030869 0.000000  720.613281  711.011719  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   2   1   1 1.927381 0.407506 0.008117 2.343004  4.373873 4.373873 2.007048  740.843750  734.539062  24  24 1.0   24        1     24    10        10        1      10 2.400000 2.400000 2.756810 2.756810 1.148671 1.148671  0.425181  0.425181            0            3
 29   2   2   2 1.620601 0.377755 0.008693 2.007048  6.380921 2.007048 0.000000  744.132812  738.867188  20  20 1.0   20       25     44    10        10       11      20 2.000000 2.000000 1.054093 1.054093 0.527046 0.527046  0.687380  0.687380            0            3
 29   1   1   1 1.468786 0.798779 0.004614 2.272179  6.646052 6.646052 2.921168  729.496094  722.136719  14  14 1.0    0        1     14     6         6        1       6 2.333333 2.333333 1.861899 1.861899 0.797957 0.797957  0.413155  0.413155            0            0
 29   1   2   2 0.798928 0.111456 0.003735 0.914119  9.567220 2.921168 1.296792  722.292969  714.011719   8   8 1.0    0       15     22     6         6        7      12 1.333333 1.333333 0.516398 0.516398 0.387298 0.387298  0.767638  0.767638            0            0
 29   1   3   3 1.112997 0.179208 0.004587 1.296792 10.864012 1.296792 0.835269  731.632812  725.250000  11  11 1.0    0       23     33     6         6       13      18 1.833333 1.833333 0.752773 0.752773 0.410603 0.410603  0.686789  0.686789            0            0
 29   1   4   4 0.708491 0.122554 0.004223 0.835269 11.699281 0.835269 0.924651  729.289062  720.195312   7   7 1.0    0       34     40     6         6       19      24 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            3
 29   1   5   5 0.803229 0.118379 0.003043 0.924651 12.623932 0.924651 0.946151  734.023438  724.933594   8   8 1.0    0       41     48     5         5       25      29 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 29   1   6   6 0.818181 0.124332 0.003638 0.946151 13.570083 0.946151 0.916504  738.871094  731.132812   8   8 1.0    0       49     56     5         5       30      34 1.600000 1.600000 0.547723 0.547723 0.342327 0.342327  0.728611  0.728611            0            0
 29   1   7   7 0.796002 0.116590 0.003912 0.916504 14.486587 0.916504 1.308904  734.679688  725.011719   8   8 1.0    0       57     64     5         5       35      39 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 29   1   8   8 1.120203 0.184503 0.004198 1.308904 15.795491 1.308904 0.000000  742.515625  735.300781  11  11 1.0    0       65     75     5         5       40      44 2.200000 2.200000 1.643168 1.643168 0.746894 0.746894  0.396076  0.396076            0            3
 30   3   1   1 1.137356 0.799395 0.000000 1.936751  1.936751 1.936751 0.000000  737.433594  727.867188  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   2   1   1 2.037532 0.494465 0.008062 2.540059  4.476810 4.476810 2.530326  758.195312  751.000000  25  25 1.0   25        1     25    10        10        1      10 2.500000 2.500000 2.915476 2.915476 1.166190 1.166190  0.407215  0.407215            0            2
 30   2   2   2 1.539627 0.982737 0.007962 2.530326  7.007135 2.530326 0.000000  759.703125  750.593750  19  19 1.0   19       26     44    10        10       11      20 1.900000 1.900000 0.994429 0.994429 0.523384 0.523384  0.700181  0.700181            0            4
 30   1   1   1 1.465614 0.268277 0.004672 1.738563  6.215373 6.215373 3.211073  751.097656  741.472656  14  14 1.0    0        1     14     6         6        1       6 2.333333 2.333333 1.861899 1.861899 0.797957 0.797957  0.413155  0.413155            0            0
 30   1   2   2 0.596722 0.080335 0.003691 0.680747  9.426446 3.211073 2.028182  739.699219  729.929688   6   6 1.0    0       15     20     6         6        7      12 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   1   3   3 1.659256 0.364531 0.004396 2.028182 11.454628 2.028182 1.216510  754.949219  749.683594  16  16 1.0    0       21     36     6         6       13      18 2.666667 2.666667 2.250926 2.250926 0.844097 0.844097  0.342021  0.342021            0            0
 30   1   4   4 1.028527 0.182535 0.005448 1.216510 12.671138 1.216510 0.458423  748.089844  738.386719  10  10 1.0    0       37     46     7         7       19      25 1.428571 1.428571 0.534522 0.534522 0.374166 0.374166  0.779939  0.779939            0            2
 30   1   5   5 0.405960 0.050467 0.001997 0.458423 13.129561 0.458423 0.928857  748.503906  738.714844   4   4 1.0    0       47     50     4         4       26      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 30   1   6   6 0.806975 0.118779 0.003102 0.928857 14.058419 0.928857 1.183573  750.023438  740.238281   8   8 1.0    0       51     58     5         5       30      34 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 30   1   7   7 1.020488 0.159008 0.004076 1.183573 15.241991 1.183573 0.812624  753.652344  744.445312  10  10 1.0    0       59     68     5         5       35      39 2.000000 2.000000 0.707107 0.707107 0.353553 0.353553  0.667710  0.667710            0            0
 30   1   8   8 0.708577 0.099885 0.004161 0.812624 16.054615 0.812624 0.000000  750.250000  740.667969   7   7 1.0    0       69     75     5         5       40      44 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            2
 31   3   1   1 1.135950 0.784927 0.000000 1.920877  1.920877 1.920877 0.000000  751.164062  741.613281  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 31   2   1   1 2.134483 0.543824 0.008815 2.687123  4.608000 4.608000 1.759067  773.472656  765.566406  26  26 1.0   26        1     26    10        10        1      10 2.600000 2.600000 2.716207 2.716207 1.044695 1.044695  0.429900  0.429900            0            3
 31   2   2   2 1.443321 0.306958 0.008788 1.759067  6.367067 1.759067 0.000000  775.101562  766.312500  18  18 1.0   18       27     44    10        10       11      20 1.800000 1.800000 0.918937 0.918937 0.510520 0.510520  0.716939  0.716939            0            3
 31   1   1   1 1.463237 0.256696 0.005231 1.725165  6.333165 6.333165 2.919691  767.359375  757.875000  14  14 1.0    0        1     14     6         6        1       6 2.333333 2.333333 1.861899 1.861899 0.797957 0.797957  0.413155  0.413155            0            0
 31   1   2   2 1.006036 0.150687 0.003901 1.160624  9.252856 2.919691 1.868562  758.160156  748.394531  10  10 1.0    0       15     24     6         6        7      12 1.666667 1.666667 0.816497 0.816497 0.489898 0.489898  0.666858  0.666858            0            0
 31   1   3   3 1.112668 0.750838 0.005056 1.868562 11.121418 1.868562 1.342981  766.453125  759.210938  11  11 1.0    0       25     35     7         7       13      19 1.571429 1.571429 0.786796 0.786796 0.500688 0.500688  0.701721  0.701721            0            0
 31   1   4   4 1.125239 0.212191 0.005552 1.342981 12.464400 1.342981 0.580951  770.781250  762.933594  11  11 1.0    0       36     46     7         7       20      26 1.571429 1.571429 1.133893 1.133893 0.721569 0.721569  0.610492  0.610492            0            3
 31   1   5   5 0.509266 0.069467 0.002218 0.580951 13.045351 0.580951 0.932887  764.351562  754.843750   5   5 1.0    0       47     51     4         4       27      30 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 31   1   6   6 0.810961 0.119201 0.002725 0.932887 13.978238 0.932887 1.190158  765.886719  756.386719   8   8 1.0    0       52     59     4         4       31      34 2.000000 2.000000 0.816497 0.816497 0.408248 0.408248  0.569421  0.569421            0            0
 31   1   7   7 1.022546 0.163852 0.003760 1.190158 15.168396 1.190158 0.695521  772.632812  764.074219  10  10 1.0    0       60     69     5         5       35      39 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.569323  0.569323            0            0
 31   1   8   8 0.601836 0.090039 0.003646 0.695521 15.863917 0.695521 0.000000  767.179688  757.421875   6   6 1.0    0       70     75     5         5       40      44 1.200000 1.200000 0.447214 0.447214 0.372678 0.372678  0.770330  0.770330            0            3
 32   3   1   1 1.132602 0.851968 0.000000 1.984570  1.984570 1.984570 0.000000  767.781250  758.242188  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 32   2   1   1 1.926613 1.001845 0.008424 2.936882  4.921452 4.921452 2.017924  787.257812  780.496094  24  24 1.0   24        1     24    10        10        1      10 2.400000 2.400000 2.756810 2.756810 1.148671 1.148671  0.425181  0.425181            0            3
 32   2   2   2 1.620311 0.388960 0.008654 2.017924  6.939376 2.017924 0.000000  790.679688  785.328125  20  20 1.0   20       25     44    10        10       11      20 2.000000 2.000000 1.333333 1.333333 0.666667 0.666667  0.632023  0.632023            0            3
 32   1   1   1 1.476908 0.265791 0.005097 1.747797  6.669248 6.669248 3.174636  782.390625  773.062500  14  14 1.0    0        1     14     6         6        1       6 2.333333 2.333333 1.861899 1.861899 0.797957 0.797957  0.413155  0.413155            0            0
 32   1   2   2 1.002671 0.149865 0.004175 1.156711  9.843884 3.174636 1.304333  773.136719  763.390625  10  10 1.0    0       15     24     6         6        7      12 1.666667 1.666667 0.816497 0.816497 0.489898 0.489898  0.666858  0.666858            0            0
 32   1   3   3 1.113885 0.185993 0.004455 1.304333 11.148217 1.304333 0.825033  776.386719  767.117188  11  11 1.0    0       25     35     6         6       13      18 1.833333 1.833333 0.752773 0.752773 0.410603 0.410603  0.686789  0.686789            0            1
 32   1   4   4 0.702636 0.118458 0.003939 0.825033 11.973250 0.825033 0.924441  776.195312  766.511719   7   7 1.0    0       36     42     6         6       19      24 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            2
 32   1   5   5 0.801933 0.119301 0.003207 0.924441 12.897691 0.924441 0.944123  779.156250  769.937500   8   8 1.0    0       43     50     5         5       25      29 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 32   1   6   6 0.816520 0.123998 0.003604 0.944123 13.841814 0.944123 1.495925  782.042969  774.277344   8   8 1.0    0       51     58     5         5       30      34 1.600000 1.600000 0.547723 0.547723 0.342327 0.342327  0.728611  0.728611            0            0
 32   1   7   7 0.797541 0.694858 0.003526 1.495925 15.337739 1.495925 1.310580  777.750000  768.019531   8   8 1.0    0       59     66     5         5       35      39 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 32   1   8   8 1.120092 0.186308 0.004180 1.310580 16.648319 1.310580 0.000000  788.703125  781.605469  11  11 1.0    0       67     77     5         5       40      44 2.200000 2.200000 2.167948 2.167948 0.985431 0.985431  0.283549  0.283549            0            3
 33   3   1   1 1.135042 0.751425 0.000000 1.886467  1.886467 1.886467 0.000000  782.851562  773.125000  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   2   1   1 2.581463 1.050400 0.009245 3.641109  5.527575 5.527575 1.233764  814.585938  813.382812  30  30 1.0   30        1     30    10        10        1      10 3.000000 3.000000 2.666667 2.666667 0.888889 0.888889  0.435729  0.435729            0            2
 33   2   2   2 1.039223 0.186400 0.008141 1.233764  6.761340 1.233764 0.000000  801.734375  792.828125  14  14 1.0   14       31     44    10        10       11      20 1.400000 1.400000 0.699206 0.699206 0.499433 0.499433  0.769754  0.769754            0            4
 33   1   1   1 1.595360 0.299511 0.006140 1.901012  7.428587 7.428587 2.643919  801.898438  796.371094  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
 33   1   2   2 1.217046 0.187920 0.005189 1.410155 10.072506 2.643919 1.423703  797.117188  789.527344  12  12 1.0    0       16     27     7         7        8      14 1.714286 1.714286 0.755929 0.755929 0.440959 0.440959  0.710676  0.710676            0            0
 33   1   3   3 1.210315 0.207379 0.006009 1.423703 11.496209 1.423703 1.628637  799.992188  792.488281  12  12 1.0    0       28     39     8         8       15      22 1.500000 1.500000 0.755929 0.755929 0.503953 0.503953  0.729255  0.729255            0            1
 33   1   4   4 1.369577 0.253167 0.005894 1.628637 13.124847 1.628637 0.664674  804.347656  795.808594  13  13 1.0    0       40     52     8         8       23      30 1.625000 1.625000 1.060660 1.060660 0.652714 0.652714  0.652298  0.652298            0            1
 33   1   5   5 0.592494 0.070327 0.001853 0.664674 13.789520 0.664674 0.463334  796.593750  787.304688   6   6 1.0    0       53     58     3         3       31      33 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 33   1   6   6 0.413327 0.048229 0.001779 0.463334 14.252854 0.463334 0.699306  795.351562  786.062500   4   4 1.0    0       59     62     3         3       34      36 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            1
 33   1   7   7 0.603617 0.092883 0.002806 0.699306 14.952161 0.699306 0.576704  796.414062  787.128906   6   6 1.0    0       63     68     4         4       37      40 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
 33   1   8   8 0.505505 0.068432 0.002767 0.576704 15.528865 0.576704 0.000000  795.636719  786.312500   5   5 1.0    0       69     73     4         4       41      44 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            2
 34   3   1   1 1.134864 0.786468 0.000000 1.921332  1.921332 1.921332 0.000000  797.210938  787.718750  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   2   1   1 2.724986 0.818357 0.009654 3.552996  5.474328 5.474328 0.977441  835.179688  833.898438  31  31 1.0   31        1     31    10        10        1      10 3.100000 3.100000 2.685351 2.685351 0.866242 0.866242  0.433521  0.433521            0            2
 34   2   2   2 0.816918 0.154103 0.006420 0.977441  6.451769 0.977441 0.000000  806.257812  798.082031  11  11 1.0   11       32     42    10        10       11      20 1.100000 1.100000 0.316228 0.316228 0.287480 0.287480  0.880669  0.880669            0            4
 34   1   1   1 1.597011 0.304137 0.005705 1.906854  7.381182 7.381182 2.523107  819.324219  814.054688  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
 34   1   2   2 1.326683 0.213099 0.005885 1.545667  9.904289 2.523107 2.183898  815.652344  807.402344  13  13 1.0    0       16     28     8         8        8      15 1.625000 1.625000 0.744024 0.744024 0.457861 0.457861  0.732527  0.732527            0            0
 34   1   3   3 1.330492 0.847131 0.006275 2.183898 12.088187 2.183898 2.045183  818.796875  810.156250  13  13 1.0    0       29     41     8         8       16      23 1.625000 1.625000 0.744024 0.744024 0.457861 0.457861  0.732527  0.732527            0            1
 34   1   4   4 1.711866 0.326812 0.006505 2.045183 14.133370 2.045183 0.256659  827.347656  822.605469  16  16 1.0    0       42     57     8         8       24      31 2.000000 2.000000 0.755929 0.755929 0.377964 0.377964  0.729255  0.729255            0            1
 34   1   5   5 0.229392 0.026330 0.000936 0.256659 14.390029 0.256659 0.462159  805.722656  797.695312   2   2 1.0    0       58     59     2         2       32      33 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   1   6   6 0.408406 0.052098 0.001655 0.462159 14.852187 0.462159 0.456184  806.359375  798.289062   4   4 1.0    0       60     63     3         3       34      36 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            2
 34   1   7   7 0.406867 0.047395 0.001922 0.456184 15.308371 0.456184 0.454290  807.132812  799.023438   4   4 1.0    0       64     67     3         3       37      39 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            1
 34   1   8   8 0.405029 0.046713 0.002547 0.454290 15.762662 0.454290 0.000000  807.460938  800.121094   4   4 1.0    0       68     71     3         3       40      42 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            1
 35   3   1   1 1.136814 0.644014 0.000000 1.780828  1.780828 1.780828 0.000000  811.656250  803.421875  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   2   1   1 2.356279 0.869959 0.009351 3.235588  5.016417 5.016417 1.479388  841.253906  832.476562  28  28 1.0   28        1     28    10        10        1      10 2.800000 2.800000 2.699794 2.699794 0.964212 0.964212  0.431822  0.431822            0            2
 35   2   2   2 1.233521 0.236787 0.009079 1.479388  6.495804 1.479388 0.000000  837.691406  828.609375  16  16 1.0   16       29     44    10        10       11      20 1.600000 1.600000 1.074968 1.074968 0.671855 0.671855  0.682989  0.682989            0            4
 35   1   1   1 1.596721 0.302126 0.005831 1.904678  6.921095 6.921095 2.647500  833.808594  828.453125  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
 35   1   2   2 1.007268 0.155789 0.005055 1.168112  9.568595 2.647500 1.350582  823.441406  814.031250  10  10 1.0    0       16     25     7         7        8      14 1.428571 1.428571 0.534522 0.534522 0.374166 0.374166  0.779939  0.779939            0            0
 35   1   3   3 1.130262 0.214563 0.005758 1.350582 10.919176 1.350582 1.454349  833.339844  826.289062  11  11 1.0    0       26     36     7         7       15      21 1.571429 1.571429 0.975900 0.975900 0.621027 0.621027  0.650023  0.650023            0            2
 35   1   4   4 1.239388 0.209770 0.005191 1.454349 12.373525 1.454349 0.564644  835.277344  828.484375  12  12 1.0    0       37     48     7         7       22      28 1.714286 1.714286 0.755929 0.755929 0.440959 0.440959  0.710676  0.710676            0            0
 35   1   5   5 0.499456 0.062313 0.002876 0.564644 12.938169 0.564644 0.807198  828.753906  819.367188   5   5 1.0    0       49     53     4         4       29      32 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 35   1   6   6 0.709755 0.094713 0.002730 0.807198 13.745367 0.807198 1.172411  830.039062  820.656250   7   7 1.0    0       54     60     4         4       33      36 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
 35   1   7   7 1.014076 0.155296 0.003039 1.172411 14.917778 1.172411 0.574676  836.648438  827.785156  10  10 1.0    0       61     70     4         4       37      40 2.500000 2.500000 1.732051 1.732051 0.692820 0.692820  0.275008  0.275008            0            2
 35   1   8   8 0.504706 0.067295 0.002675 0.574676 15.492454 0.574676 0.000000  829.191406  819.867188   5   5 1.0    0       71     75     4         4       41      44 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            2
 36   3   1   1 1.147113 0.842357 0.000000 1.989469  1.989469 1.989469 0.000000  830.292969  821.066406  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 36   2   1   1 2.131048 1.176665 0.009697 3.317410  5.306879 5.306879 1.858259  854.316406  847.230469  26  26 1.0   26        1     26    10        10        1      10 2.600000 2.600000 2.716207 2.716207 1.044695 1.044695  0.429900  0.429900            0            3
 36   2   2   2 1.439948 0.410171 0.008140 1.858259  7.165138 1.858259 0.000000  856.820312  848.730469  18  18 1.0   18       27     44    10        10       11      20 1.800000 1.800000 1.032796 1.032796 0.573775 0.573775  0.691906  0.691906            0            3
 36   1   1   1 1.462869 0.267898 0.005140 1.735907  7.042785 7.042785 2.535460  848.988281  839.820312  14  14 1.0    0        1     14     6         6        1       6 2.333333 2.333333 1.861899 1.861899 0.797957 0.797957  0.413155  0.413155            0            0
 36   1   2   2 0.595916 0.077384 0.003900 0.677200  9.578245 2.535460 2.211022  836.257812  826.859375   6   6 1.0    0       15     20     6         6        7      12 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 36   1   3   3 1.802402 0.403221 0.005399 2.211022 11.789267 2.211022 1.345337  853.972656  847.355469  17  17 1.0    0       21     37     7         7       13      19 2.428571 2.428571 2.935821 2.935821 1.208868 1.208868  0.295898  0.295898            0            0
 36   1   4   4 1.125047 0.215013 0.005277 1.345337 13.134604 1.345337 0.577658  852.742188  845.074219  11  11 1.0    0       38     48     7         7       20      26 1.571429 1.571429 1.133893 1.133893 0.721569 0.721569  0.610492  0.610492            0            3
 36   1   5   5 0.504155 0.070718 0.002785 0.577658 13.712261 0.577658 0.802094  845.234375  836.011719   5   5 1.0    0       49     53     4         4       27      30 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            1
 36   1   6   6 0.703346 0.096314 0.002434 0.802094 14.514355 0.802094 1.190098  846.484375  837.261719   7   7 1.0    0       54     60     4         4       31      34 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
 36   1   7   7 1.021285 0.165152 0.003661 1.190098 15.704453 1.190098 1.468033  850.531250  842.699219  10  10 1.0    0       61     70     5         5       35      39 2.000000 2.000000 0.707107 0.707107 0.353553 0.353553  0.667710  0.667710            0            0
 36   1   8   8 0.711790 0.752201 0.004041 1.468033 17.172486 1.468033 0.000000  845.882812  836.851562   7   7 1.0    0       71     77     5         5       40      44 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            2
 37   3   1   1 1.137489 0.666456 0.000000 1.803944  1.803944 1.803944 0.000000  846.792969  837.542969  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   2   1   1 2.150188 0.584329 0.008837 2.743354  4.547298 4.547298 1.822563  870.183594  862.902344  26  26 1.0   26        1     26    10        10        1      10 2.600000 2.600000 2.875181 2.875181 1.105839 1.105839  0.411708  0.411708            0            3
 37   2   2   2 1.443152 0.371418 0.007993 1.822563  6.369862 1.822563 0.000000  868.863281  860.238281  18  18 1.0   18       27     44    10        10       11      20 1.800000 1.800000 0.918937 0.918937 0.510520 0.510520  0.716939  0.716939            0            3
 37   1   1   1 1.471185 0.255176 0.004772 1.731134  6.278432 6.278432 2.740890  863.839844  854.777344  14  14 1.0    0        1     14     6         6        1       6 2.333333 2.333333 1.861899 1.861899 0.797957 0.797957  0.413155  0.413155            0            0
 37   1   2   2 0.801828 0.112504 0.003995 0.918327  9.019322 2.740890 1.325398  854.429688  845.695312   8   8 1.0    0       15     22     6         6        7      12 1.333333 1.333333 0.516398 0.516398 0.387298 0.387298  0.767638  0.767638            0            0
 37   1   3   3 1.120277 0.199928 0.005193 1.325398 10.344720 1.325398 1.339484  862.210938  855.457031  11  11 1.0    0       23     33     7         7       13      19 1.571429 1.571429 0.786796 0.786796 0.500688 0.500688  0.701721  0.701721            0            0
 37   1   4   4 1.125947 0.208156 0.005381 1.339484 11.684204 1.339484 0.582032  864.144531  856.546875  11  11 1.0    0       34     44     7         7       20      26 1.571429 1.571429 1.133893 1.133893 0.721569 0.721569  0.610492  0.610492            0            3
 37   1   5   5 0.507825 0.071480 0.002727 0.582032 12.266236 0.582032 0.798514  836.109375  828.273438   5   5 1.0    0       45     49     4         4       27      30 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            1
 37   1   6   6 0.693402 0.102920 0.002191 0.798514 13.064750 0.798514 1.194621  844.574219  839.546875   7   7 1.0    0       50     56     4         4       31      34 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
 37   1   7   7 1.024499 0.166148 0.003975 1.194621 14.259371 1.194621 0.813310  856.492188  849.015625  10  10 1.0    0       57     66     5         5       35      39 2.000000 2.000000 0.707107 0.707107 0.353553 0.353553  0.667710  0.667710            0            0
 37   1   8   8 0.707830 0.101728 0.003752 0.813310 15.072681 0.813310 0.000000  853.484375  845.421875   7   7 1.0    0       67     73     5         5       40      44 1.400000 1.400000 0.894427 0.894427 0.638877 0.638877  0.603019  0.603019            0            2
 38   3   1   1 1.137221 0.765053 0.000000 1.902274  1.902274 1.902274 0.000000  858.664062  850.613281  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 38   2   1   1 2.707431 1.223005 0.009011 3.939446  5.841720 5.841720 1.656981  893.464844  893.531250  31  31 1.0   31        1     31    10        10        1      10 3.100000 3.100000 2.643651 2.643651 0.852791 0.852791  0.438463  0.438463            0            2
 38   2   2   2 0.817681 0.833172 0.006127 1.656981  7.498701 1.656981 0.000000  878.406250  870.015625  11  11 1.0   11       32     42    10        10       11      20 1.100000 1.100000 0.316228 0.316228 0.287480 0.287480  0.880669  0.880669            0            4
 38   1   1   1 1.588520 0.305266 0.005637 1.899423  7.741144 7.741144 3.203148  879.910156  875.523438  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
 38   1   2   2 1.325986 0.214388 0.005794 1.546168 10.944292 3.203148 1.589302  877.574219  870.648438  13  13 1.0    0       16     28     8         8        8      15 1.625000 1.625000 1.187735 1.187735 0.730914 0.730914  0.623521  0.623521            0            0
 38   1   3   3 1.333940 0.248880 0.006481 1.589302 12.533594 1.589302 2.066337  881.460938  873.609375  13  13 1.0    0       29     41     8         8       16      23 1.625000 1.625000 0.744024 0.744024 0.457861 0.457861  0.732527  0.732527            0            1
 38   1   4   4 1.712416 0.347242 0.006679 2.066337 14.599931 2.066337 0.349587  889.039062  884.789062  16  16 1.0    0       42     57     8         8       24      31 2.000000 2.000000 0.755929 0.755929 0.377964 0.377964  0.729255  0.729255            0            1
 38   1   5   5 0.314922 0.033766 0.000899 0.349587 14.949518 0.349587 0.361183  877.250000  868.980469   3   3 1.0    0       58     60     2         2       32      33 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 38   1   6   6 0.315593 0.043968 0.001622 0.361183 15.310701 0.361183 0.467179  877.250000  868.980469   3   3 1.0    0       61     63     3         3       34      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 38   1   7   7 0.409793 0.055727 0.001659 0.467179 15.777880 0.467179 0.462086  877.250000  868.980469   4   4 1.0    0       64     67     3         3       37      39 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            1
 38   1   8   8 0.408895 0.050856 0.002336 0.462086 16.239967 0.462086 0.000000  877.250000  868.980469   4   4 1.0    0       68     71     3         3       40      42 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            2
 39   3   1   1 1.138529 0.715942 0.000000 1.854470  1.854470 1.854470 0.000000  878.746094  870.378906  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 39   2   1   1 2.243155 0.567903 0.009233 2.820292  4.674762 4.674762 2.094191  901.160156  893.855469  27  27 1.0   27        1     27    10        10        1      10 2.700000 2.700000 2.790858 2.790858 1.033651 1.033651  0.421262  0.421262            0            2
 39   2   2   2 1.155833 0.930197 0.008161 2.094191  6.768953 2.094191 0.000000  898.398438  890.292969  15  15 1.0   15       28     42    10        10       11      20 1.500000 1.500000 0.849837 0.849837 0.566558 0.566558  0.732867  0.732867            0            4
 39   1   1   1 1.468269 0.274293 0.004721 1.747283  6.422045 6.422045 3.396759  892.601562  884.550781  14  14 1.0    0        1     14     6         6        1       6 2.333333 2.333333 1.861899 1.861899 0.797957 0.797957  0.413155  0.413155            0            0
 39   1   2   2 1.115797 0.181429 0.005343 1.302568  9.818804 3.396759 1.446772  890.515625  884.339844  11  11 1.0    0       15     25     7         7        7      13 1.571429 1.571429 0.786796 0.786796 0.500688 0.500688  0.701721  0.701721            0            0
 39   1   3   3 1.225918 0.215109 0.005745 1.446772 11.265575 1.446772 1.347544  894.105469  887.683594  12  12 1.0    0       26     37     7         7       14      20 1.714286 1.714286 0.755929 0.755929 0.440959 0.440959  0.710676  0.710676            0            1
 39   1   4   4 1.134014 0.207997 0.005533 1.347544 12.613119 1.347544 0.576887  894.855469  888.175781  11  11 1.0    0       38     48     7         7       21      27 1.571429 1.571429 0.786796 0.786796 0.500688 0.500688  0.701721  0.701721            0            1
 39   1   5   5 0.510746 0.064253 0.001889 0.576887 13.190006 0.576887 0.807779  889.394531  881.066406   5   5 1.0    0       49     53     3         3       28      30 1.666667 1.666667 0.577350 0.577350 0.346410 0.346410  0.585162  0.585162            0            0
 39   1   6   6 0.708528 0.096493 0.002758 0.807779 13.997785 0.807779 1.049749  890.859375  882.410156   7   7 1.0    0       54     60     4         4       31      34 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
 39   1   7   7 0.908127 0.138862 0.002759 1.049749 15.047534 1.049749 0.691913  896.703125  889.343750   9   9 1.0    0       61     69     4         4       35      38 2.250000 2.250000 1.892969 1.892969 0.841320 0.841320  0.233724  0.233724            0            2
 39   1   8   8 0.603388 0.085123 0.003403 0.691913 15.739446 0.691913 0.000000  891.125000  882.667969   6   6 1.0    0       70     75     4         4       39      42 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            2
 40   3   1   1 1.139442 0.726365 0.000000 1.865807  1.865807 1.865807 0.000000  891.964844  883.574219  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   2   1   1 2.253728 0.591685 0.009086 2.854499  4.720306 4.720306 1.393941  916.414062  909.386719  27  27 1.0   27        1     27    10        10        1      10 2.700000 2.700000 2.750757 2.750757 1.018799 1.018799  0.425881  0.425881            0            2
 40   2   2   2 1.158251 0.226660 0.009031 1.393941  6.114248 1.393941 0.000000  912.972656  905.191406  15  15 1.0   15       28     42    10        10       11      20 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.767739  0.767739            0            4
 40   1   1   1 1.472560 0.272642 0.005354 1.750556  6.470863 6.470863 2.434020  898.320312  890.847656  14  14 1.0    0        1     14     6         6        1       6 2.333333 2.333333 1.861899 1.861899 0.797957 0.797957  0.413155  0.413155            0            0
 40   1   2   2 0.901189 0.134067 0.004823 1.040079  8.904883 2.434020 1.436490  894.308594  887.324219   9   9 1.0    0       15     23     7         7        7      13 1.285714 1.285714 0.487950 0.487950 0.379517 0.379517  0.795777  0.795777            0            0
 40   1   3   3 1.222490 0.208520 0.005480 1.436490 10.341373 1.436490 1.349362  904.804688  898.894531  12  12 1.0    0       24     35     7         7       14      20 1.714286 1.714286 0.755929 0.755929 0.440959 0.440959  0.710676  0.710676            0            1
 40   1   4   4 1.130355 0.212980 0.006027 1.349362 11.690735 1.349362 0.577724  908.589844  902.492188  11  11 1.0    0       36     46     7         7       21      27 1.571429 1.571429 0.786796 0.786796 0.500688 0.500688  0.701721  0.701721            0            1
 40   1   5   5 0.512742 0.063034 0.001948 0.577724 12.268459 0.577724 0.924482  904.847656  896.835938   5   5 1.0    0       47     51     3         3       28      30 1.666667 1.666667 0.577350 0.577350 0.346410 0.346410  0.585162  0.585162            0            0
 40   1   6   6 0.808914 0.112808 0.002760 0.924482 13.192941 0.924482 0.573532  906.800781  898.707031   8   8 1.0    0       52     59     4         4       31      34 2.000000 2.000000 0.816497 0.816497 0.408248 0.408248  0.569421  0.569421            0            1
 40   1   7   7 0.507163 0.064308 0.002061 0.573532 13.766473 0.573532 0.574145  905.367188  897.253906   5   5 1.0    0       60     64     4         4       35      38 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            1
 40   1   8   8 0.502570 0.068718 0.002858 0.574145 14.340618 0.574145 0.000000  905.386719  897.253906   5   5 1.0    0       65     69     4         4       39      42 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            2
 41   3   1   1 1.137207 0.724697 0.000000 1.861904  1.861904 1.861904 0.000000  907.582031  899.332031  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 41   2   1   1 1.929052 0.440495 0.008688 2.378235  4.240138 4.240138 2.775100  926.875000  921.347656  24  24 1.0   24        1     24    10        10        1      10 2.400000 2.400000 2.796824 2.796824 1.165343 1.165343  0.420580  0.420580            0            3
 41   2   2   2 1.624289 1.141739 0.009072 2.775100  7.015238 2.775100 0.000000  930.914062  926.089844  20  20 1.0   20       25     44    10        10       11      20 2.000000 2.000000 1.333333 1.333333 0.666667 0.666667  0.632023  0.632023            0            3
 41   1   1   1 1.472180 0.264300 0.005437 1.741917  5.982056 5.982056 3.694999  921.519531  913.378906  14  14 1.0    0        1     14     6         6        1       6 2.333333 2.333333 1.861899 1.861899 0.797957 0.797957  0.413155  0.413155            0            0
 41   1   2   2 0.802041 0.114011 0.003847 0.919899  9.677055 3.694999 1.300611  912.898438  904.550781   8   8 1.0    0       15     22     6         6        7      12 1.333333 1.333333 0.516398 0.516398 0.387298 0.387298  0.767638  0.767638            0            0
 41   1   3   3 1.114242 0.181739 0.004630 1.300611 10.977666 1.300611 0.826406  920.257812  914.382812  11  11 1.0    0       23     33     6         6       13      18 1.833333 1.833333 0.752773 0.752773 0.410603 0.410603  0.686789  0.686789            0            0
 41   1   4   4 0.705652 0.116966 0.003788 0.826406 11.804072 0.826406 0.927041  916.097656  907.859375   7   7 1.0    0       34     40     6         6       19      24 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            3
 41   1   5   5 0.806194 0.117769 0.003077 0.927041 12.731113 0.927041 0.942014  921.492188  913.234375   8   8 1.0    0       41     48     5         5       25      29 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 41   1   6   6 0.812709 0.125969 0.003336 0.942014 13.673127 0.942014 0.915854  921.761719  913.382812   8   8 1.0    0       49     56     5         5       30      34 1.600000 1.600000 0.547723 0.547723 0.342327 0.342327  0.728611  0.728611            0            0
 41   1   7   7 0.799051 0.113238 0.003566 0.915854 14.588981 0.915854 1.311097  921.546875  913.171875   8   8 1.0    0       57     64     5         5       35      39 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 41   1   8   8 1.116523 0.189967 0.004607 1.311097 15.900078 1.311097 0.000000  929.136719  923.218750  11  11 1.0    0       65     75     5         5       40      44 2.200000 2.200000 1.643168 1.643168 0.746894 0.746894  0.396076  0.396076            0            3
 42   3   1   1 1.135636 0.584672 0.000000 1.720308  1.720308 1.720308 0.000000  923.070312  914.742188  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 42   2   1   1 2.691010 1.550075 0.009112 4.250197  5.970505 5.970505 0.980135  955.527344  954.398438  31  31 1.0   31        1     31    10        10        1      10 3.100000 3.100000 2.726414 2.726414 0.879488 0.879488  0.428709  0.428709            0            2
 42   2   2   2 0.821166 0.152591 0.006378 0.980135  6.950640 0.980135 0.000000  937.316406  929.195312  11  11 1.0   11       32     42    10        10       11      20 1.100000 1.100000 0.316228 0.316228 0.287480 0.287480  0.880669  0.880669            0            4
 42   1   1   1 1.587252 0.300555 0.005613 1.893420  7.863925 7.863925 2.287079  941.375000  937.761719  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
 42   1   2   2 1.121793 0.179457 0.005694 1.306944 10.151004 2.287079 1.571375  936.164062  930.144531  11  11 1.0    0       16     26     8         8        8      15 1.375000 1.375000 0.517549 0.517549 0.376399 0.376399  0.799419  0.799419            0            0
 42   1   3   3 1.333535 0.231608 0.006232 1.571375 11.722379 1.571375 2.823105  939.269531  931.960938  13  13 1.0    0       27     39     8         8       16      23 1.625000 1.625000 0.744024 0.744024 0.457861 0.457861  0.732527  0.732527            0            1
 42   1   4   4 1.717762 1.098827 0.006516 2.823105 14.545484 2.823105 0.349497  948.265625  944.929688  16  16 1.0    0       40     55     8         8       24      31 2.000000 2.000000 0.755929 0.755929 0.377964 0.377964  0.729255  0.729255            0            1
 42   1   5   5 0.313719 0.034896 0.000882 0.349497 14.894980 0.349497 0.355093  934.894531  926.617188   3   3 1.0    0       56     58     2         2       32      33 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 42   1   6   6 0.315999 0.037990 0.001105 0.355093 15.250074 0.355093 0.456400  934.894531  926.617188   3   3 1.0    0       59     61     3         3       34      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 42   1   7   7 0.406511 0.047959 0.001930 0.456400 15.706474 0.456400 0.456608  934.894531  926.617188   4   4 1.0    0       62     65     3         3       37      39 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            1
 42   1   8   8 0.406105 0.047531 0.002972 0.456608 16.163081 0.456608 0.000000  934.898438  926.617188   4   4 1.0    0       66     69     3         3       40      42 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            1
 43   3   1   1 1.134756 0.672465 0.000000 1.807221  1.807221 1.807221 0.000000  937.554688  929.617188  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 43   2   1   1 1.940224 0.441037 0.008636 2.389896  4.197117 4.197117 2.776947  959.667969  954.515625  24  24 1.0   24        1     24    10        10        1      10 2.400000 2.400000 2.756810 2.756810 1.148671 1.148671  0.425181  0.425181            0            3
 43   2   2   2 1.620604 1.147317 0.009027 2.776947  6.974064 2.776947 0.000000  964.585938  960.800781  20  20 1.0   20       25     44    10        10       11      20 2.000000 2.000000 1.154701 1.154701 0.577350 0.577350  0.666613  0.666613            0            3
 43   1   1   1 1.466555 0.274812 0.004891 1.746258  5.943375 5.943375 3.927179  954.679688  946.839844  14  14 1.0    0        1     14     6         6        1       6 2.333333 2.333333 1.861899 1.861899 0.797957 0.797957  0.413155  0.413155            0            0
 43   1   2   2 1.004998 0.141241 0.003993 1.150232  9.870554 3.927179 1.311379  946.203125  938.152344  10  10 1.0    0       15     24     6         6        7      12 1.666667 1.666667 0.816497 0.816497 0.489898 0.489898  0.666858  0.666858            0            0
 43   1   3   3 1.119301 0.187405 0.004672 1.311379 11.181932 1.311379 0.824643  954.421875  948.828125  11  11 1.0    0       25     35     6         6       13      18 1.833333 1.833333 0.752773 0.752773 0.410603 0.410603  0.686789  0.686789            0            0
 43   1   4   4 0.705141 0.114800 0.004702 0.824643 12.006575 0.824643 0.935536  950.234375  942.398438   7   7 1.0    0       36     42     6         6       19      24 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            3
 43   1   5   5 0.810003 0.122282 0.003251 0.935536 12.942111 0.935536 0.943795  953.867188  946.976562   8   8 1.0    0       43     50     5         5       25      29 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 43   1   6   6 0.814336 0.125485 0.003974 0.943795 13.885906 0.943795 1.050128  956.175781  949.742188   8   8 1.0    0       51     58     5         5       30      34 1.600000 1.600000 0.547723 0.547723 0.342327 0.342327  0.728611  0.728611            0            0
 43   1   7   7 0.908870 0.137670 0.003589 1.050128 14.936034 1.050128 0.691254  954.730469  947.703125   9   9 1.0    0       59     67     5         5       35      39 1.800000 1.800000 0.836660 0.836660 0.464811 0.464811  0.622260  0.622260            0            1
 43   1   8   8 0.600527 0.086538 0.004189 0.691254 15.627288 0.691254 0.000000  952.332031  944.164062   6   6 1.0    0       68     73     5         5       40      44 1.200000 1.200000 0.447214 0.447214 0.372678 0.372678  0.770330  0.770330            0            2
 44   3   1   1 1.136133 0.653646 0.000000 1.789778  1.789778 1.789778 0.000000  953.304688  945.312500  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   2   1   1 2.143142 0.569413 0.008812 2.721367  4.511145 4.511145 2.526913  976.617188  971.000000  26  26 1.0   26        1     26    10        10        1      10 2.600000 2.600000 2.796824 2.796824 1.075701 1.075701  0.420580  0.420580            0            3
 44   2   2   2 1.443617 1.074685 0.008612 2.526913  7.038059 2.526913 0.000000  978.265625  970.996094  18  18 1.0   18       27     44    10        10       11      20 1.800000 1.800000 1.135292 1.135292 0.630718 0.630718  0.670543  0.670543            0            3
 44   1   1   1 1.475699 0.268504 0.005026 1.749229  6.260375 6.260375 3.207537  969.023438  961.148438  14  14 1.0    0        1     14     6         6        1       6 2.333333 2.333333 1.861899 1.861899 0.797957 0.797957  0.413155  0.413155            0            0
 44   1   2   2 0.595943 0.080627 0.004053 0.680623  9.467911 3.207537 2.204480  959.117188  950.851562   6   6 1.0    0       15     20     6         6        7      12 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   1   3   3 1.803265 0.395566 0.005649 2.204480 11.672391 2.204480 1.346713  977.234375  972.281250  17  17 1.0    0       21     37     7         7       13      19 2.428571 2.428571 1.812654 1.812654 0.746387 0.746387  0.468563  0.468563            0            0
 44   1   4   4 1.126944 0.214201 0.005568 1.346713 13.019104 1.346713 0.574606  974.265625  967.863281  11  11 1.0    0       38     48     7         7       20      26 1.571429 1.571429 1.133893 1.133893 0.721569 0.721569  0.610492  0.610492            0            3
 44   1   5   5 0.505309 0.066952 0.002345 0.574606 13.593711 0.574606 0.934030  967.746094  959.519531   5   5 1.0    0       49     53     4         4       27      30 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 44   1   6   6 0.811456 0.119816 0.002757 0.934030 14.527740 0.934030 1.060810  969.343750  961.062500   8   8 1.0    0       54     61     4         4       31      34 2.000000 2.000000 0.816497 0.816497 0.408248 0.408248  0.569421  0.569421            0            0
 44   1   7   7 0.916302 0.140751 0.003757 1.060810 15.588551 1.060810 0.824165  975.101562  968.492188   9   9 1.0    0       62     70     5         5       35      39 1.800000 1.800000 0.836660 0.836660 0.464811 0.464811  0.622260  0.622260            0            1
 44   1   8   8 0.712012 0.107721 0.004432 0.824165 16.412716 0.824165 0.000000  970.289062  962.199219   7   7 1.0    0       71     77     5         5       40      44 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            2
 45   3   1   1 1.136794 0.778915 0.000000 1.915710  1.915710 1.915710 0.000000  970.957031  962.667969  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   2   1   1 2.259778 0.599071 0.009206 2.868055  4.783765 4.783765 2.193300  994.699219  988.164062  27  27 1.0   27        1     27    10        10        1      10 2.700000 2.700000 2.790858 2.790858 1.033651 1.033651  0.421262  0.421262            0            2
 45   2   2   2 1.160715 1.023887 0.008698 2.193300  6.977064 2.193300 0.000000  989.117188  980.980469  15  15 1.0   15       28     42    10        10       11      20 1.500000 1.500000 0.849837 0.849837 0.566558 0.566558  0.732867  0.732867            0            4
 45   1   1   1 1.473072 0.273233 0.005132 1.751437  6.535201 6.535201 3.484057  984.437500  976.437500  14  14 1.0    0        1     14     6         6        1       6 2.333333 2.333333 1.861899 1.861899 0.797957 0.797957  0.413155  0.413155            0            0
 45   1   2   2 1.108039 0.177733 0.004985 1.290757 10.019258 3.484057 1.439509  980.113281  974.109375  11  11 1.0    0       15     25     7         7        7      13 1.571429 1.571429 0.786796 0.786796 0.500688 0.500688  0.701721  0.701721            0            0
 45   1   3   3 1.222254 0.211644 0.005610 1.439509 11.458767 1.439509 1.344720  984.035156  977.613281  12  12 1.0    0       26     37     7         7       14      20 1.714286 1.714286 0.755929 0.755929 0.440959 0.440959  0.710676  0.710676            0            1
 45   1   4   4 1.130743 0.208506 0.005472 1.344720 12.803487 1.344720 0.576922  986.292969  979.855469  11  11 1.0    0       38     48     7         7       21      27 1.571429 1.571429 0.786796 0.786796 0.500688 0.500688  0.701721  0.701721            0            1
 45   1   5   5 0.511589 0.063438 0.001895 0.576922 13.380409 0.576922 0.807454  980.539062  972.496094   5   5 1.0    0       49     53     3         3       28      30 1.666667 1.666667 0.577350 0.577350 0.346410 0.346410  0.585162  0.585162            0            0
 45   1   6   6 0.708596 0.096027 0.002831 0.807454 14.187863 0.807454 1.179874  981.824219  973.785156   7   7 1.0    0       54     60     4         4       31      34 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
 45   1   7   7 1.014594 0.162345 0.002935 1.179874 15.367738 1.179874 0.575252  988.406250  980.917969  10  10 1.0    0       61     70     4         4       35      38 2.500000 2.500000 1.732051 1.732051 0.692820 0.692820  0.275008  0.275008            0            2
 45   1   8   8 0.505119 0.067455 0.002678 0.575252 15.942990 0.575252 0.000000  980.765625  972.496094   5   5 1.0    0       71     75     4         4       39      42 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            2
 46   3   1   1 1.133515 0.601018 0.000000 1.734533  1.734533 1.734533 0.000000  982.289062  974.148438  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   2   1   1 2.139901 0.594575 0.009059 2.743535  4.478068 4.478068 2.721733 1006.554688 1000.726562  26  26 1.0   26        1     26    10        10        1      10 2.600000 2.600000 2.836273 2.836273 1.090874 1.090874  0.416090  0.416090            0            3
 46   2   2   2 1.446944 1.266814 0.007975 2.721733  7.199801 2.721733 0.000000 1004.785156  997.507812  18  18 1.0   18       27     44    10        10       11      20 1.800000 1.800000 0.788811 0.788811 0.438228 0.438228  0.747436  0.747436            0            3
 46   1   1   1 1.468765 0.275320 0.004918 1.749002  6.227070 6.227070 3.402761  999.117188  991.199219  14  14 1.0    0        1     14     6         6        1       6 2.333333 2.333333 1.861899 1.861899 0.797957 0.797957  0.413155  0.413155            0            0
 46   1   2   2 0.595546 0.081623 0.003859 0.681028  9.629831 3.402761 2.225569  988.078125  979.917969   6   6 1.0    0       15     20     6         6        7      12 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   1   3   3 1.790219 0.429442 0.005908 2.225569 11.855400 2.225569 1.352156 1004.640625 1000.332031  17  17 1.0    0       21     37     7         7       13      19 2.428571 2.428571 1.812654 1.812654 0.746387 0.746387  0.468563  0.468563            0            0
 46   1   4   4 1.132813 0.213654 0.005690 1.352156 13.207556 1.352156 0.576466 1000.843750  994.328125  11  11 1.0    0       38     48     7         7       20      26 1.571429 1.571429 1.511858 1.511858 0.962091 0.962091  0.526688  0.526688            0            3
 46   1   5   5 0.507349 0.067013 0.002104 0.576466 13.784022 0.576466 0.801942  994.335938  986.230469   5   5 1.0    0       49     53     4         4       27      30 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            1
 46   1   6   6 0.701445 0.098222 0.002275 0.801942 14.585964 0.801942 1.185881  995.539062  987.437500   7   7 1.0    0       54     60     4         4       31      34 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
 46   1   7   7 1.024221 0.157720 0.003941 1.185881 15.771845 1.185881 0.818373  999.613281  991.957031  10  10 1.0    0       61     70     5         5       35      39 2.000000 2.000000 0.707107 0.707107 0.353553 0.353553  0.667710  0.667710            0            0
 46   1   8   8 0.713039 0.101064 0.004270 0.818373 16.590218 0.818373 0.000000  996.269531  988.042969   7   7 1.0    0       71     77     5         5       40      44 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            2
 47   3   1   1 1.137377 0.661974 0.000000 1.799351  1.799351 1.799351 0.000000  997.089844  988.980469  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   2   1   1 2.025093 0.479387 0.008625 2.513105  4.312456 4.312456 2.061219 1021.015625 1016.214844  25  25 1.0   25        1     25    10        10        1      10 2.500000 2.500000 2.838231 2.838231 1.135292 1.135292  0.415869  0.415869            0            2
 47   2   2   2 1.536276 0.517044 0.007898 2.061219  6.373675 2.061219 0.000000 1022.628906 1015.160156  19  19 1.0   19       26     44    10        10       11      20 1.900000 1.900000 1.370320 1.370320 0.721221 0.721221  0.625193  0.625193            0            4
 47   1   1   1 1.473602 0.277201 0.004699 1.755503  6.067959 6.067959 2.973704 1014.554688 1006.777344  14  14 1.0    0        1     14     6         6        1       6 2.333333 2.333333 1.861899 1.861899 0.797957 0.797957  0.413155  0.413155            0            0
 47   1   2   2 0.792810 0.115423 0.004253 0.912486  9.041663 2.973704 2.064327 1003.851562  995.703125   8   8 1.0    0       15     22     6         6        7      12 1.333333 1.333333 0.816497 0.816497 0.612372 0.612372  0.666858  0.666858            0            0
 47   1   3   3 1.670496 0.389133 0.004697 2.064327 11.105989 2.064327 1.204127 1018.324219 1014.906250  16  16 1.0    0       23     38     6         6       13      18 2.666667 2.666667 1.861899 1.861899 0.698212 0.698212  0.413155  0.413155            0            0
 47   1   4   4 1.033193 0.165549 0.005385 1.204127 12.310117 1.204127 0.461030 1009.218750 1001.191406  10  10 1.0    0       39     48     7         7       19      25 1.428571 1.428571 0.534522 0.534522 0.374166 0.374166  0.779939  0.779939            0            2
 47   1   5   5 0.406748 0.052135 0.002147 0.461030 12.771147 0.461030 1.766375 1011.062500 1003.027344   4   4 1.0    0       49     52     4         4       26      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 47   1   6   6 0.805173 0.957955 0.003247 1.766375 14.537522 1.766375 1.200667 1012.578125 1004.546875   8   8 1.0    0       53     60     5         5       30      34 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            1
 47   1   7   7 1.026475 0.170476 0.003716 1.200667 15.738189 1.200667 0.818655 1017.906250 1010.785156  10  10 1.0    0       61     70     5         5       35      39 2.000000 2.000000 0.707107 0.707107 0.353553 0.353553  0.667710  0.667710            0            0
 47   1   8   8 0.714181 0.100809 0.003665 0.818655 16.556843 0.818655 0.000000 1013.601562 1005.437500   7   7 1.0    0       71     77     5         5       40      44 1.400000 1.400000 0.894427 0.894427 0.638877 0.638877  0.603019  0.603019            0            2
 48   3   1   1 1.137401 0.657123 0.000000 1.794524  1.794524 1.794524 0.000000 1014.445312 1006.382812  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 48   2   1   1 1.931329 0.418484 0.008745 2.358558  4.153082 4.153082 2.017423 1036.265625 1031.496094  24  24 1.0   24        1     24    10        10        1      10 2.400000 2.400000 2.756810 2.756810 1.148671 1.148671  0.425181  0.425181            0            3
 48   2   2   2 1.623726 0.384876 0.008821 2.017423  6.170505 2.017423 0.000000 1039.832031 1036.261719  20  20 1.0   20       25     44    10        10       11      20 2.000000 2.000000 1.054093 1.054093 0.527046 0.527046  0.687380  0.687380            0            3
 48   1   1   1 1.468949 0.258114 0.004727 1.731790  5.884872 5.884872 3.175515 1028.511719 1020.667969  14  14 1.0    0        1     14     6         6        1       6 2.333333 2.333333 1.861899 1.861899 0.797957 0.797957  0.413155  0.413155            0            0
 48   1   2   2 1.003877 0.150073 0.004141 1.158091  9.060386 3.175515 1.303878 1021.187500 1013.121094  10  10 1.0    0       15     24     6         6        7      12 1.666667 1.666667 0.816497 0.816497 0.489898 0.489898  0.666858  0.666858            0            0
 48   1   3   3 1.112005 0.187291 0.004581 1.303878 10.364264 1.303878 0.813449 1024.316406 1016.390625  11  11 1.0    0       25     35     6         6       13      18 1.833333 1.833333 0.752773 0.752773 0.410603 0.410603  0.686789  0.686789            0            1
 48   1   4   4 0.705656 0.103339 0.004454 0.813449 11.177713 0.813449 0.927020 1022.593750 1014.429688   7   7 1.0    0       36     42     6         6       19      24 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            2
 48   1   5   5 0.804727 0.118960 0.003333 0.927020 12.104733 0.927020 0.936976 1027.617188 1019.941406   8   8 1.0    0       43     50     5         5       25      29 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 48   1   6   6 0.810857 0.121968 0.004152 0.936976 13.041709 0.936976 0.913776 1026.296875 1018.140625   8   8 1.0    0       51     58     5         5       30      34 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 48   1   7   7 0.795133 0.114885 0.003758 0.913776 13.955486 0.913776 2.163982 1026.738281 1018.640625   8   8 1.0    0       59     66     5         5       35      39 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 48   1   8   8 1.119486 1.040260 0.004236 2.163982 16.119468 2.163982 0.000000 1035.085938 1029.351562  11  11 1.0    0       67     77     5         5       40      44 2.200000 2.200000 1.643168 1.643168 0.746894 0.746894  0.396076  0.396076            0            3
 49   3   1   1 1.136814 0.649714 0.000000 1.786528  1.786528 1.786528 0.000000 1029.257812 1021.128906  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   2   1   1 2.583531 0.923291 0.009349 3.516171  5.302699 5.302699 1.238351 1058.851562 1051.835938  30  30 1.0   30        1     30    10        10        1      10 3.000000 3.000000 2.748737 2.748737 0.916246 0.916246  0.426115  0.426115            0            2
 49   2   2   2 1.042618 0.187580 0.008153 1.238351  6.541050 1.238351 0.000000 1046.855469 1039.371094  14  14 1.0   14       31     44    10        10       11      20 1.400000 1.400000 0.699206 0.699206 0.499433 0.499433  0.769754  0.769754            0            4
 49   1   1   1 1.591412 0.303883 0.005887 1.901183  7.203882 7.203882 2.643103 1048.687500 1045.484375  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
 49   1   2   2 1.215216 0.184389 0.005147 1.404752  9.846985 2.643103 1.439066 1042.167969 1036.339844  12  12 1.0    0       16     27     7         7        8      14 1.714286 1.714286 1.253566 1.253566 0.731247 0.731247  0.582450  0.582450            0            0
 49   1   3   3 1.216756 0.216321 0.005989 1.439066 11.286051 1.439066 1.620918 1047.140625 1040.875000  12  12 1.0    0       28     39     8         8       15      22 1.500000 1.500000 0.755929 0.755929 0.503953 0.503953  0.729255  0.729255            0            1
 49   1   4   4 1.364647 0.250083 0.006188 1.620918 12.906969 1.620918 0.670769 1050.445312 1043.382812  13  13 1.0    0       40     52     8         8       23      30 1.625000 1.625000 0.744024 0.744024 0.457861 0.457861  0.732527  0.732527            0            1
 49   1   5   5 0.596529 0.072200 0.002039 0.670769 13.577737 0.670769 0.474476 1042.582031 1034.671875   6   6 1.0    0       53     58     3         3       31      33 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 49   1   6   6 0.421067 0.051602 0.001807 0.474476 14.052213 0.474476 0.704959 1042.644531 1034.671875   4   4 1.0    0       59     62     3         3       34      36 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            1
 49   1   7   7 0.609452 0.093000 0.002507 0.704959 14.757172 0.704959 0.585458 1043.710938 1035.734375   6   6 1.0    0       63     68     4         4       37      40 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
 49   1   8   8 0.512767 0.069624 0.003066 0.585458 15.342630 0.585458 0.000000 1042.898438 1034.921875   5   5 1.0    0       69     73     4         4       41      44 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            2

[04-02-2022_01-49-37] INFO :: __main__ >> Saving results to excel file: ./experiments/results/ASH_Excel_2022-02-04_01-31-39_PS3_hcr_online_2_4_yield_preach_opt.xlsx

[04-02-2022_01-49-42] INFO :: __main__ >> Saving results to data file: ./experiments/results/ASH_Data_2022-02-04_01-31-39_PS3_hcr_online_2_4_yield_preach_opt.dat

[04-02-2022_01-49-43] INFO :: __main__ >> Saving results to figure file: ./experiments/results/ASH_Figure_2022-02-04_01-31-39_PS3_hcr_online_2_4_yield_preach_opt.png

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=5.789999999999999.

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[04-02-2022_01-49-43] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=5.789999999999999 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[04-02-2022_01-49-46] INFO :: __main__ >> Overall time: Real = 1086.6332652, Process = 1403.640625

[04-02-2022_01-49-46] INFO :: __main__ >> Exiting with code 0

